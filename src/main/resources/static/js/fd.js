(function(window, undefined) {
        var rootjQuery, readyList, document = window.document, location = window.location, navigator = window.navigator, _jQuery = window.jQuery, _$ = window.$, core_push = Array.prototype.push, core_slice = Array.prototype.slice, core_indexOf = Array.prototype.indexOf, core_toString = Object.prototype.toString, core_hasOwn = Object.prototype.hasOwnProperty, core_trim = String.prototype.trim, jQuery = function(selector, context) {
            return new jQuery.fn.init(selector,context,rootjQuery);
        }, core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source, core_rnotwhite = /\S/, core_rspace = /\s+/, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, rvalidchars = /^[\],:{}\s]*$/, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g, rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g, rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
            return (letter + "").toUpperCase();
        }, DOMContentLoaded = function() {
            if (document.addEventListener) {
                document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
                jQuery.ready();
            } else if (document.readyState === "complete") {
                document.detachEvent("onreadystatechange", DOMContentLoaded);
                jQuery.ready();
            }
        }, class2type = {};
        jQuery.fn = jQuery.prototype = {
            constructor: jQuery,
            init: function(selector, context, rootjQuery) {
                var match, elem, ret, doc;
                if (!selector) {
                    return this;
                }
                if (selector.nodeType) {
                    this.context = this[0] = selector;
                    this.length = 1;
                    return this;
                }
                if (typeof selector === "string") {
                    if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                        match = [null, selector, null];
                    } else {
                        match = rquickExpr.exec(selector);
                    }
                    if (match && (match[1] || !context)) {
                        if (match[1]) {
                            context = context instanceof jQuery ? context[0] : context;
                            doc = (context && context.nodeType ? context.ownerDocument || context : document);
                            selector = jQuery.parseHTML(match[1], doc, true);
                            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                                this.attr.call(selector, context, true);
                            }
                            return jQuery.merge(this, selector);
                        } else {
                            elem = document.getElementById(match[2]);
                            if (elem && elem.parentNode) {
                                if (elem.id !== match[2]) {
                                    return rootjQuery.find(selector);
                                }
                                this.length = 1;
                                this[0] = elem;
                            }
                            this.context = document;
                            this.selector = selector;
                            return this;
                        }
                    } else if (!context || context.jquery) {
                        return (context || rootjQuery).find(selector);
                    } else {
                        return this.constructor(context).find(selector);
                    }
                } else if (jQuery.isFunction(selector)) {
                    return rootjQuery.ready(selector);
                }
                if (selector.selector !== undefined) {
                    this.selector = selector.selector;
                    this.context = selector.context;
                }
                return jQuery.makeArray(selector, this);
            },
            selector: "",
            jquery: "1.8.3",
            length: 0,
            size: function() {
                return this.length;
            },
            toArray: function() {
                return core_slice.call(this);
            },
            get: function(num) {
                return num == null ? this.toArray() : (num < 0 ? this[this.length + num] : this[num]);
            },
            pushStack: function(elems, name, selector) {
                var ret = jQuery.merge(this.constructor(), elems);
                ret.prevObject = this;
                ret.context = this.context;
                if (name === "find") {
                    ret.selector = this.selector + (this.selector ? " " : "") + selector;
                } else if (name) {
                    ret.selector = this.selector + "." + name + "(" + selector + ")";
                }
                return ret;
            },
            each: function(callback, args) {
                return jQuery.each(this, callback, args);
            },
            ready: function(fn) {
                jQuery.ready.promise().done(fn);
                return this;
            },
            eq: function(i) {
                i = +i;
                return i === -1 ? this.slice(i) : this.slice(i, i + 1);
            },
            first: function() {
                return this.eq(0);
            },
            last: function() {
                return this.eq(-1);
            },
            slice: function() {
                return this.pushStack(core_slice.apply(this, arguments), "slice", core_slice.call(arguments).join(","));
            },
            map: function(callback) {
                return this.pushStack(jQuery.map(this, function(elem, i) {
                    return callback.call(elem, i, elem);
                }));
            },
            end: function() {
                return this.prevObject || this.constructor(null);
            },
            push: core_push,
            sort: [].sort,
            splice: [].splice
        };
        jQuery.fn.init.prototype = jQuery.fn;
        jQuery.extend = jQuery.fn.extend = function() {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i = 2;
            }
            if (typeof target !== "object" && !jQuery.isFunction(target)) {
                target = {};
            }
            if (length === i) {
                target = this;
                --i;
            }
            for (; i < length; i++) {
                if ((options = arguments[i]) != null) {
                    for (name in options) {
                        src = target[name];
                        copy = options[name];
                        if (target === copy) {
                            continue;
                        }
                        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : [];
                            } else {
                                clone = src && jQuery.isPlainObject(src) ? src : {};
                            }
                            target[name] = jQuery.extend(deep, clone, copy);
                        } else if (copy !== undefined) {
                            target[name] = copy;
                        }
                    }
                }
            }
            return target;
        }
        ;
        jQuery.extend({
            noConflict: function(deep) {
                if (window.$ === jQuery) {
                    window.$ = _$;
                }
                if (deep && window.jQuery === jQuery) {
                    window.jQuery = _jQuery;
                }
                return jQuery;
            },
            isReady: false,
            readyWait: 1,
            holdReady: function(hold) {
                if (hold) {
                    jQuery.readyWait++;
                } else {
                    jQuery.ready(true);
                }
            },
            ready: function(wait) {
                if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                    return;
                }
                if (!document.body) {
                    return setTimeout(jQuery.ready, 1);
                }
                jQuery.isReady = true;
                if (wait !== true && --jQuery.readyWait > 0) {
                    return;
                }
                readyList.resolveWith(document, [jQuery]);
                if (jQuery.fn.trigger) {
                    jQuery(document).trigger("ready").off("ready");
                }
            },
            isFunction: function(obj) {
                return jQuery.type(obj) === "function";
            },
            isArray: Array.isArray || function(obj) {
                return jQuery.type(obj) === "array";
            }
            ,
            isWindow: function(obj) {
                return obj != null && obj == obj.window;
            },
            isNumeric: function(obj) {
                return !isNaN(parseFloat(obj)) && isFinite(obj);
            },
            type: function(obj) {
                return obj == null ? String(obj) : class2type[core_toString.call(obj)] || "object";
            },
            isPlainObject: function(obj) {
                if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                    return false;
                }
                try {
                    if (obj.constructor && !core_hasOwn.call(obj, "constructor") && !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                        return false;
                    }
                } catch (e) {
                    return false;
                }
                var key;
                for (key in obj) {}
                return key === undefined || core_hasOwn.call(obj, key);
            },
            isEmptyObject: function(obj) {
                var name;
                for (name in obj) {
                    return false;
                }
                return true;
            },
            error: function(msg) {
                throw new Error(msg);
            },
            parseHTML: function(data, context, scripts) {
                var parsed;
                if (!data || typeof data !== "string") {
                    return null;
                }
                if (typeof context === "boolean") {
                    scripts = context;
                    context = 0;
                }
                context = context || document;
                if ((parsed = rsingleTag.exec(data))) {
                    return [context.createElement(parsed[1])];
                }
                parsed = jQuery.buildFragment([data], context, scripts ? null : []);
                return jQuery.merge([], (parsed.cacheable ? jQuery.clone(parsed.fragment) : parsed.fragment).childNodes);
            },
            parseJSON: function(data) {
                if (!data || typeof data !== "string") {
                    return null;
                }
                data = jQuery.trim(data);
                if (window.JSON && window.JSON.parse) {
                    return window.JSON.parse(data);
                }
                if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
                    return (new Function("return " + data))();
                }
                jQuery.error("Invalid JSON: " + data);
            },
            parseXML: function(data) {
                var xml, tmp;
                if (!data || typeof data !== "string") {
                    return null;
                }
                try {
                    if (window.DOMParser) {
                        tmp = new DOMParser();
                        xml = tmp.parseFromString(data, "text/xml");
                    } else {
                        xml = new ActiveXObject("Microsoft.XMLDOM");
                        xml.async = "false";
                        xml.loadXML(data);
                    }
                } catch (e) {
                    xml = undefined;
                }
                if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
                    jQuery.error("Invalid XML: " + data);
                }
                return xml;
            },
            noop: function() {},
            globalEval: function(data) {
                if (data && core_rnotwhite.test(data)) {
                    (window.execScript || function(data) {
                            window["eval"].call(window, data);
                        }
                    )(data);
                }
            },
            camelCase: function(string) {
                return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
            },
            nodeName: function(elem, name) {
                return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
            },
            each: function(obj, callback, args) {
                var name, i = 0, length = obj.length, isObj = length === undefined || jQuery.isFunction(obj);
                if (args) {
                    if (isObj) {
                        for (name in obj) {
                            if (callback.apply(obj[name], args) === false) {
                                break;
                            }
                        }
                    } else {
                        for (; i < length; ) {
                            if (callback.apply(obj[i++], args) === false) {
                                break;
                            }
                        }
                    }
                } else {
                    if (isObj) {
                        for (name in obj) {
                            if (callback.call(obj[name], name, obj[name]) === false) {
                                break;
                            }
                        }
                    } else {
                        for (; i < length; ) {
                            if (callback.call(obj[i], i, obj[i++]) === false) {
                                break;
                            }
                        }
                    }
                }
                return obj;
            },
            trim: core_trim && !core_trim.call("\uFEFF\xA0") ? function(text) {
                    return text == null ? "" : core_trim.call(text);
                }
                : function(text) {
                    return text == null ? "" : (text + "").replace(rtrim, "");
                }
            ,
            makeArray: function(arr, results) {
                var type, ret = results || [];
                if (arr != null) {
                    type = jQuery.type(arr);
                    if (arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow(arr)) {
                        core_push.call(ret, arr);
                    } else {
                        jQuery.merge(ret, arr);
                    }
                }
                return ret;
            },
            inArray: function(elem, arr, i) {
                var len;
                if (arr) {
                    if (core_indexOf) {
                        return core_indexOf.call(arr, elem, i);
                    }
                    len = arr.length;
                    i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                    for (; i < len; i++) {
                        if (i in arr && arr[i] === elem) {
                            return i;
                        }
                    }
                }
                return -1;
            },
            merge: function(first, second) {
                var l = second.length
                    , i = first.length
                    , j = 0;
                if (typeof l === "number") {
                    for (; j < l; j++) {
                        first[i++] = second[j];
                    }
                } else {
                    while (second[j] !== undefined) {
                        first[i++] = second[j++];
                    }
                }
                first.length = i;
                return first;
            },
            grep: function(elems, callback, inv) {
                var retVal, ret = [], i = 0, length = elems.length;
                inv = !!inv;
                for (; i < length; i++) {
                    retVal = !!callback(elems[i], i);
                    if (inv !== retVal) {
                        ret.push(elems[i]);
                    }
                }
                return ret;
            },
            map: function(elems, callback, arg) {
                var value, key, ret = [], i = 0, length = elems.length, isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ((length > 0 && elems[0] && elems[length - 1]) || length === 0 || jQuery.isArray(elems));
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback(elems[i], i, arg);
                        if (value != null) {
                            ret[ret.length] = value;
                        }
                    }
                } else {
                    for (key in elems) {
                        value = callback(elems[key], key, arg);
                        if (value != null) {
                            ret[ret.length] = value;
                        }
                    }
                }
                return ret.concat.apply([], ret);
            },
            guid: 1,
            proxy: function(fn, context) {
                var tmp, args, proxy;
                if (typeof context === "string") {
                    tmp = fn[context];
                    context = fn;
                    fn = tmp;
                }
                if (!jQuery.isFunction(fn)) {
                    return undefined;
                }
                args = core_slice.call(arguments, 2);
                proxy = function() {
                    return fn.apply(context, args.concat(core_slice.call(arguments)));
                }
                ;
                proxy.guid = fn.guid = fn.guid || jQuery.guid++;
                return proxy;
            },
            access: function(elems, fn, key, value, chainable, emptyGet, pass) {
                var exec, bulk = key == null, i = 0, length = elems.length;
                if (key && typeof key === "object") {
                    for (i in key) {
                        jQuery.access(elems, fn, i, key[i], 1, emptyGet, value);
                    }
                    chainable = 1;
                } else if (value !== undefined) {
                    exec = pass === undefined && jQuery.isFunction(value);
                    if (bulk) {
                        if (exec) {
                            exec = fn;
                            fn = function(elem, key, value) {
                                return exec.call(jQuery(elem), value);
                            }
                            ;
                        } else {
                            fn.call(elems, value);
                            fn = null;
                        }
                    }
                    if (fn) {
                        for (; i < length; i++) {
                            fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass);
                        }
                    }
                    chainable = 1;
                }
                return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
            },
            now: function() {
                return (new Date()).getTime();
            }
        });
        jQuery.ready.promise = function(obj) {
            if (!readyList) {
                readyList = jQuery.Deferred();
                if (document.readyState === "complete") {
                    setTimeout(jQuery.ready, 1);
                } else if (document.addEventListener) {
                    document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
                    window.addEventListener("load", jQuery.ready, false);
                } else {
                    document.attachEvent("onreadystatechange", DOMContentLoaded);
                    window.attachEvent("onload", jQuery.ready);
                    var top = false;
                    try {
                        top = window.frameElement == null && document.documentElement;
                    } catch (e) {}
                    if (top && top.doScroll) {
                        (function doScrollCheck() {
                                if (!jQuery.isReady) {
                                    try {
                                        top.doScroll("left");
                                    } catch (e) {
                                        return setTimeout(doScrollCheck, 50);
                                    }
                                    jQuery.ready();
                                }
                            }
                        )();
                    }
                }
            }
            return readyList.promise(obj);
        }
        ;
        jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });
        rootjQuery = jQuery(document);
        var optionsCache = {};
        function createOptions(options) {
            var object = optionsCache[options] = {};
            jQuery.each(options.split(core_rspace), function(_, flag) {
                object[flag] = true;
            });
            return object;
        }
        jQuery.Callbacks = function(options) {
            options = typeof options === "string" ? (optionsCache[options] || createOptions(options)) : jQuery.extend({}, options);
            var memory, fired, firing, firingStart, firingLength, firingIndex, list = [], stack = !options.once && [], fire = function(data) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for (; list && firingIndex < firingLength; firingIndex++) {
                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                        memory = false;
                        break;
                    }
                }
                firing = false;
                if (list) {
                    if (stack) {
                        if (stack.length) {
                            fire(stack.shift());
                        }
                    } else if (memory) {
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            }, self = {
                add: function() {
                    if (list) {
                        var start = list.length;
                        (function add(args) {
                                jQuery.each(args, function(_, arg) {
                                    var type = jQuery.type(arg);
                                    if (type === "function") {
                                        if (!options.unique || !self.has(arg)) {
                                            list.push(arg);
                                        }
                                    } else if (arg && arg.length && type !== "string") {
                                        add(arg);
                                    }
                                });
                            }
                        )(arguments);
                        if (firing) {
                            firingLength = list.length;
                        } else if (memory) {
                            firingStart = start;
                            fire(memory);
                        }
                    }
                    return this;
                },
                remove: function() {
                    if (list) {
                        jQuery.each(arguments, function(_, arg) {
                            var index;
                            while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                list.splice(index, 1);
                                if (firing) {
                                    if (index <= firingLength) {
                                        firingLength--;
                                    }
                                    if (index <= firingIndex) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                has: function(fn) {
                    return jQuery.inArray(fn, list) > -1;
                },
                empty: function() {
                    list = [];
                    return this;
                },
                disable: function() {
                    list = stack = memory = undefined;
                    return this;
                },
                disabled: function() {
                    return !list;
                },
                lock: function() {
                    stack = undefined;
                    if (!memory) {
                        self.disable();
                    }
                    return this;
                },
                locked: function() {
                    return !stack;
                },
                fireWith: function(context, args) {
                    args = args || [];
                    args = [context, args.slice ? args.slice() : args];
                    if (list && (!fired || stack)) {
                        if (firing) {
                            stack.push(args);
                        } else {
                            fire(args);
                        }
                    }
                    return this;
                },
                fire: function() {
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function() {
                    return !!fired;
                }
            };
            return self;
        }
        ;
        jQuery.extend({
            Deferred: function(func) {
                var tuples = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]]
                    , state = "pending"
                    , promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    then: function() {
                        var fns = arguments;
                        return jQuery.Deferred(function(newDefer) {
                            jQuery.each(tuples, function(i, tuple) {
                                var action = tuple[0]
                                    , fn = fns[i];
                                deferred[tuple[1]](jQuery.isFunction(fn) ? function() {
                                        var returned = fn.apply(this, arguments);
                                        if (returned && jQuery.isFunction(returned.promise)) {
                                            returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                        } else {
                                            newDefer[action + "With"](this === deferred ? newDefer : this, [returned]);
                                        }
                                    }
                                    : newDefer[action]);
                            });
                            fns = null;
                        }).promise();
                    },
                    promise: function(obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                }
                    , deferred = {};
                promise.pipe = promise.then;
                jQuery.each(tuples, function(i, tuple) {
                    var list = tuple[2]
                        , stateString = tuple[3];
                    promise[tuple[1]] = list.add;
                    if (stateString) {
                        list.add(function() {
                            state = stateString;
                        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                    }
                    deferred[tuple[0]] = list.fire;
                    deferred[tuple[0] + "With"] = list.fireWith;
                });
                promise.promise(deferred);
                if (func) {
                    func.call(deferred, deferred);
                }
                return deferred;
            },
            when: function(subordinate) {
                var i = 0, resolveValues = core_slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                    return function(value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                        if (values === progressValues) {
                            deferred.notifyWith(contexts, values);
                        } else if (!(--remaining)) {
                            deferred.resolveWith(contexts, values);
                        }
                    }
                        ;
                }, progressValues, progressContexts, resolveContexts;
                if (length > 1) {
                    progressValues = new Array(length);
                    progressContexts = new Array(length);
                    resolveContexts = new Array(length);
                    for (; i < length; i++) {
                        if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                        } else {
                            --remaining;
                        }
                    }
                }
                if (!remaining) {
                    deferred.resolveWith(resolveContexts, resolveValues);
                }
                return deferred.promise();
            }
        });
        jQuery.support = (function() {
                var support, all, a, select, opt, input, fragment, eventName, i, isSupported, clickFn, div = document.createElement("div");
                div.setAttribute("className", "t");
                div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
                all = div.getElementsByTagName("*");
                a = div.getElementsByTagName("a")[0];
                if (!all || !a || !all.length) {
                    return {};
                }
                select = document.createElement("select");
                opt = select.appendChild(document.createElement("option"));
                input = div.getElementsByTagName("input")[0];
                a.style.cssText = "top:1px;float:left;opacity:.5";
                support = {
                    leadingWhitespace: (div.firstChild.nodeType === 3),
                    tbody: !div.getElementsByTagName("tbody").length,
                    htmlSerialize: !!div.getElementsByTagName("link").length,
                    style: /top/.test(a.getAttribute("style")),
                    hrefNormalized: (a.getAttribute("href") === "/a"),
                    opacity: /^0.5/.test(a.style.opacity),
                    cssFloat: !!a.style.cssFloat,
                    checkOn: (input.value === "on"),
                    optSelected: opt.selected,
                    getSetAttribute: div.className !== "t",
                    enctype: !!document.createElement("form").enctype,
                    html5Clone: document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",
                    boxModel: (document.compatMode === "CSS1Compat"),
                    submitBubbles: true,
                    changeBubbles: true,
                    focusinBubbles: false,
                    deleteExpando: true,
                    noCloneEvent: true,
                    inlineBlockNeedsLayout: false,
                    shrinkWrapBlocks: false,
                    reliableMarginRight: true,
                    boxSizingReliable: true,
                    pixelPosition: false
                };
                input.checked = true;
                support.noCloneChecked = input.cloneNode(true).checked;
                select.disabled = true;
                support.optDisabled = !opt.disabled;
                try {
                    delete div.test;
                } catch (e) {
                    support.deleteExpando = false;
                }
                if (!div.addEventListener && div.attachEvent && div.fireEvent) {
                    div.attachEvent("onclick", clickFn = function() {
                            support.noCloneEvent = false;
                        }
                    );
                    div.cloneNode(true).fireEvent("onclick");
                    div.detachEvent("onclick", clickFn);
                }
                input = document.createElement("input");
                input.value = "t";
                input.setAttribute("type", "radio");
                support.radioValue = input.value === "t";
                input.setAttribute("checked", "checked");
                input.setAttribute("name", "t");
                div.appendChild(input);
                fragment = document.createDocumentFragment();
                fragment.appendChild(div.lastChild);
                support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
                support.appendChecked = input.checked;
                fragment.removeChild(input);
                fragment.appendChild(div);
                if (div.attachEvent) {
                    for (i in {
                        submit: true,
                        change: true,
                        focusin: true
                    }) {
                        eventName = "on" + i;
                        isSupported = (eventName in div);
                        if (!isSupported) {
                            div.setAttribute(eventName, "return;");
                            isSupported = (typeof div[eventName] === "function");
                        }
                        support[i + "Bubbles"] = isSupported;
                    }
                }
                jQuery(function() {
                    var container, div, tds, marginDiv, divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;", body = document.getElementsByTagName("body")[0];
                    if (!body) {
                        return;
                    }
                    container = document.createElement("div");
                    container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
                    body.insertBefore(container, body.firstChild);
                    div = document.createElement("div");
                    container.appendChild(div);
                    div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
                    tds = div.getElementsByTagName("td");
                    tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
                    isSupported = (tds[0].offsetHeight === 0);
                    tds[0].style.display = "";
                    tds[1].style.display = "none";
                    support.reliableHiddenOffsets = isSupported && (tds[0].offsetHeight === 0);
                    div.innerHTML = "";
                    div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
                    support.boxSizing = (div.offsetWidth === 4);
                    support.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== 1);
                    if (window.getComputedStyle) {
                        support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
                        support.boxSizingReliable = (window.getComputedStyle(div, null) || {
                            width: "4px"
                        }).width === "4px";
                        marginDiv = document.createElement("div");
                        marginDiv.style.cssText = div.style.cssText = divReset;
                        marginDiv.style.marginRight = marginDiv.style.width = "0";
                        div.style.width = "1px";
                        div.appendChild(marginDiv);
                        support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
                    }
                    if (typeof div.style.zoom !== "undefined") {
                        div.innerHTML = "";
                        div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                        support.inlineBlockNeedsLayout = (div.offsetWidth === 3);
                        div.style.display = "block";
                        div.style.overflow = "visible";
                        div.innerHTML = "<div></div>";
                        div.firstChild.style.width = "5px";
                        support.shrinkWrapBlocks = (div.offsetWidth !== 3);
                        container.style.zoom = 1;
                    }
                    body.removeChild(container);
                    container = div = tds = marginDiv = null;
                });
                fragment.removeChild(div);
                all = a = select = opt = input = fragment = div = null;
                return support;
            }
        )();
        var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/
            , rmultiDash = /([A-Z])/g;
        jQuery.extend({
            cache: {},
            deletedIds: [],
            uuid: 0,
            expando: "jQuery" + (jQuery.fn.jquery + Math.random()).replace(/\D/g, ""),
            noData: {
                "embed": true,
                "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
                "applet": true
            },
            hasData: function(elem) {
                elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
                return !!elem && !isEmptyDataObject(elem);
            },
            data: function(elem, name, data, pvt) {
                if (!jQuery.acceptData(elem)) {
                    return;
                }
                var thisCache, ret, internalKey = jQuery.expando, getByName = typeof name === "string", isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
                if ((!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined) {
                    return;
                }
                if (!id) {
                    if (isNode) {
                        elem[internalKey] = id = jQuery.deletedIds.pop() || jQuery.guid++;
                    } else {
                        id = internalKey;
                    }
                }
                if (!cache[id]) {
                    cache[id] = {};
                    if (!isNode) {
                        cache[id].toJSON = jQuery.noop;
                    }
                }
                if (typeof name === "object" || typeof name === "function") {
                    if (pvt) {
                        cache[id] = jQuery.extend(cache[id], name);
                    } else {
                        cache[id].data = jQuery.extend(cache[id].data, name);
                    }
                }
                thisCache = cache[id];
                if (!pvt) {
                    if (!thisCache.data) {
                        thisCache.data = {};
                    }
                    thisCache = thisCache.data;
                }
                if (data !== undefined) {
                    thisCache[jQuery.camelCase(name)] = data;
                }
                if (getByName) {
                    ret = thisCache[name];
                    if (ret == null) {
                        ret = thisCache[jQuery.camelCase(name)];
                    }
                } else {
                    ret = thisCache;
                }
                return ret;
            },
            removeData: function(elem, name, pvt) {
                if (!jQuery.acceptData(elem)) {
                    return;
                }
                var thisCache, i, l, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
                if (!cache[id]) {
                    return;
                }
                if (name) {
                    thisCache = pvt ? cache[id] : cache[id].data;
                    if (thisCache) {
                        if (!jQuery.isArray(name)) {
                            if (name in thisCache) {
                                name = [name];
                            } else {
                                name = jQuery.camelCase(name);
                                if (name in thisCache) {
                                    name = [name];
                                } else {
                                    name = name.split(" ");
                                }
                            }
                        }
                        for (i = 0,
                                 l = name.length; i < l; i++) {
                            delete thisCache[name[i]];
                        }
                        if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
                            return;
                        }
                    }
                }
                if (!pvt) {
                    delete cache[id].data;
                    if (!isEmptyDataObject(cache[id])) {
                        return;
                    }
                }
                if (isNode) {
                    jQuery.cleanData([elem], true);
                } else if (jQuery.support.deleteExpando || cache != cache.window) {
                    delete cache[id];
                } else {
                    cache[id] = null;
                }
            },
            _data: function(elem, name, data) {
                return jQuery.data(elem, name, data, true);
            },
            acceptData: function(elem) {
                var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];
                return !noData || noData !== true && elem.getAttribute("classid") === noData;
            }
        });
        jQuery.fn.extend({
            data: function(key, value) {
                var parts, part, attr, name, l, elem = this[0], i = 0, data = null;
                if (key === undefined) {
                    if (this.length) {
                        data = jQuery.data(elem);
                        if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                            attr = elem.attributes;
                            for (l = attr.length; i < l; i++) {
                                name = attr[i].name;
                                if (!name.indexOf("data-")) {
                                    name = jQuery.camelCase(name.substring(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                            jQuery._data(elem, "parsedAttrs", true);
                        }
                    }
                    return data;
                }
                if (typeof key === "object") {
                    return this.each(function() {
                        jQuery.data(this, key);
                    });
                }
                parts = key.split(".", 2);
                parts[1] = parts[1] ? "." + parts[1] : "";
                part = parts[1] + "!";
                return jQuery.access(this, function(value) {
                    if (value === undefined) {
                        data = this.triggerHandler("getData" + part, [parts[0]]);
                        if (data === undefined && elem) {
                            data = jQuery.data(elem, key);
                            data = dataAttr(elem, key, data);
                        }
                        return data === undefined && parts[1] ? this.data(parts[0]) : data;
                    }
                    parts[1] = value;
                    this.each(function() {
                        var self = jQuery(this);
                        self.triggerHandler("setData" + part, parts);
                        jQuery.data(this, key, value);
                        self.triggerHandler("changeData" + part, parts);
                    });
                }, null, value, arguments.length > 1, null, false);
            },
            removeData: function(key) {
                return this.each(function() {
                    jQuery.removeData(this, key);
                });
            }
        });
        function dataAttr(elem, key, data) {
            if (data === undefined && elem.nodeType === 1) {
                var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
                data = elem.getAttribute(name);
                if (typeof data === "string") {
                    try {
                        data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                    } catch (e) {}
                    jQuery.data(elem, key, data);
                } else {
                    data = undefined;
                }
            }
            return data;
        }
        function isEmptyDataObject(obj) {
            var name;
            for (name in obj) {
                if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                    continue;
                }
                if (name !== "toJSON") {
                    return false;
                }
            }
            return true;
        }
        jQuery.extend({
            queue: function(elem, type, data) {
                var queue;
                if (elem) {
                    type = (type || "fx") + "queue";
                    queue = jQuery._data(elem, type);
                    if (data) {
                        if (!queue || jQuery.isArray(data)) {
                            queue = jQuery._data(elem, type, jQuery.makeArray(data));
                        } else {
                            queue.push(data);
                        }
                    }
                    return queue || [];
                }
            },
            dequeue: function(elem, type) {
                type = type || "fx";
                var queue = jQuery.queue(elem, type)
                    , startLength = queue.length
                    , fn = queue.shift()
                    , hooks = jQuery._queueHooks(elem, type)
                    , next = function() {
                    jQuery.dequeue(elem, type);
                };
                if (fn === "inprogress") {
                    fn = queue.shift();
                    startLength--;
                }
                if (fn) {
                    if (type === "fx") {
                        queue.unshift("inprogress");
                    }
                    delete hooks.stop;
                    fn.call(elem, next, hooks);
                }
                if (!startLength && hooks) {
                    hooks.empty.fire();
                }
            },
            _queueHooks: function(elem, type) {
                var key = type + "queueHooks";
                return jQuery._data(elem, key) || jQuery._data(elem, key, {
                    empty: jQuery.Callbacks("once memory").add(function() {
                        jQuery.removeData(elem, type + "queue", true);
                        jQuery.removeData(elem, key, true);
                    })
                });
            }
        });
        jQuery.fn.extend({
            queue: function(type, data) {
                var setter = 2;
                if (typeof type !== "string") {
                    data = type;
                    type = "fx";
                    setter--;
                }
                if (arguments.length < setter) {
                    return jQuery.queue(this[0], type);
                }
                return data === undefined ? this : this.each(function() {
                    var queue = jQuery.queue(this, type, data);
                    jQuery._queueHooks(this, type);
                    if (type === "fx" && queue[0] !== "inprogress") {
                        jQuery.dequeue(this, type);
                    }
                });
            },
            dequeue: function(type) {
                return this.each(function() {
                    jQuery.dequeue(this, type);
                });
            },
            delay: function(time, type) {
                time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
                type = type || "fx";
                return this.queue(type, function(next, hooks) {
                    var timeout = setTimeout(next, time);
                    hooks.stop = function() {
                        clearTimeout(timeout);
                    }
                    ;
                });
            },
            clearQueue: function(type) {
                return this.queue(type || "fx", []);
            },
            promise: function(type, obj) {
                var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                    if (!(--count)) {
                        defer.resolveWith(elements, [elements]);
                    }
                };
                if (typeof type !== "string") {
                    obj = type;
                    type = undefined;
                }
                type = type || "fx";
                while (i--) {
                    tmp = jQuery._data(elements[i], type + "queueHooks");
                    if (tmp && tmp.empty) {
                        count++;
                        tmp.empty.add(resolve);
                    }
                }
                resolve();
                return defer.promise(obj);
            }
        });
        var nodeHook, boolHook, fixSpecified, rclass = /[\t\r\n]/g, rreturn = /\r/g, rtype = /^(?:button|input)$/i, rfocusable = /^(?:button|input|object|select|textarea)$/i, rclickable = /^a(?:rea|)$/i, rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i, getSetAttribute = jQuery.support.getSetAttribute;
        jQuery.fn.extend({
            attr: function(name, value) {
                return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
            },
            removeAttr: function(name) {
                return this.each(function() {
                    jQuery.removeAttr(this, name);
                });
            },
            prop: function(name, value) {
                return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
            },
            removeProp: function(name) {
                name = jQuery.propFix[name] || name;
                return this.each(function() {
                    try {
                        this[name] = undefined;
                        delete this[name];
                    } catch (e) {}
                });
            },
            addClass: function(value) {
                var classNames, i, l, elem, setClass, c, cl;
                if (jQuery.isFunction(value)) {
                    return this.each(function(j) {
                        jQuery(this).addClass(value.call(this, j, this.className));
                    });
                }
                if (value && typeof value === "string") {
                    classNames = value.split(core_rspace);
                    for (i = 0,
                             l = this.length; i < l; i++) {
                        elem = this[i];
                        if (elem.nodeType === 1) {
                            if (!elem.className && classNames.length === 1) {
                                elem.className = value;
                            } else {
                                setClass = " " + elem.className + " ";
                                for (c = 0,
                                         cl = classNames.length; c < cl; c++) {
                                    if (setClass.indexOf(" " + classNames[c] + " ") < 0) {
                                        setClass += classNames[c] + " ";
                                    }
                                }
                                elem.className = jQuery.trim(setClass);
                            }
                        }
                    }
                }
                return this;
            },
            removeClass: function(value) {
                var removes, className, elem, c, cl, i, l;
                if (jQuery.isFunction(value)) {
                    return this.each(function(j) {
                        jQuery(this).removeClass(value.call(this, j, this.className));
                    });
                }
                if ((value && typeof value === "string") || value === undefined) {
                    removes = (value || "").split(core_rspace);
                    for (i = 0,
                             l = this.length; i < l; i++) {
                        elem = this[i];
                        if (elem.nodeType === 1 && elem.className) {
                            className = (" " + elem.className + " ").replace(rclass, " ");
                            for (c = 0,
                                     cl = removes.length; c < cl; c++) {
                                while (className.indexOf(" " + removes[c] + " ") >= 0) {
                                    className = className.replace(" " + removes[c] + " ", " ");
                                }
                            }
                            elem.className = value ? jQuery.trim(className) : "";
                        }
                    }
                }
                return this;
            },
            toggleClass: function(value, stateVal) {
                var type = typeof value
                    , isBool = typeof stateVal === "boolean";
                if (jQuery.isFunction(value)) {
                    return this.each(function(i) {
                        jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                    });
                }
                return this.each(function() {
                    if (type === "string") {
                        var className, i = 0, self = jQuery(this), state = stateVal, classNames = value.split(core_rspace);
                        while ((className = classNames[i++])) {
                            state = isBool ? state : !self.hasClass(className);
                            self[state ? "addClass" : "removeClass"](className);
                        }
                    } else if (type === "undefined" || type === "boolean") {
                        if (this.className) {
                            jQuery._data(this, "__className__", this.className);
                        }
                        this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                    }
                });
            },
            hasClass: function(selector) {
                var className = " " + selector + " "
                    , i = 0
                    , l = this.length;
                for (; i < l; i++) {
                    if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                        return true;
                    }
                }
                return false;
            },
            val: function(value) {
                var hooks, ret, isFunction, elem = this[0];
                if (!arguments.length) {
                    if (elem) {
                        hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                        if (hooks && "get"in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                            return ret;
                        }
                        ret = elem.value;
                        return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
                    }
                    return;
                }
                isFunction = jQuery.isFunction(value);
                return this.each(function(i) {
                    var val, self = jQuery(this);
                    if (this.nodeType !== 1) {
                        return;
                    }
                    if (isFunction) {
                        val = value.call(this, i, self.val());
                    } else {
                        val = value;
                    }
                    if (val == null) {
                        val = "";
                    } else if (typeof val === "number") {
                        val += "";
                    } else if (jQuery.isArray(val)) {
                        val = jQuery.map(val, function(value) {
                            return value == null ? "" : value + "";
                        });
                    }
                    hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                    if (!hooks || !("set"in hooks) || hooks.set(this, val, "value") === undefined) {
                        this.value = val;
                    }
                });
            }
        });
        jQuery.extend({
            valHooks: {
                option: {
                    get: function(elem) {
                        var val = elem.attributes.value;
                        return !val || val.specified ? elem.value : elem.text;
                    }
                },
                select: {
                    get: function(elem) {
                        var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                        for (; i < max; i++) {
                            option = options[i];
                            if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                                value = jQuery(option).val();
                                if (one) {
                                    return value;
                                }
                                values.push(value);
                            }
                        }
                        return values;
                    },
                    set: function(elem, value) {
                        var values = jQuery.makeArray(value);
                        jQuery(elem).find("option").each(function() {
                            this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                        });
                        if (!values.length) {
                            elem.selectedIndex = -1;
                        }
                        return values;
                    }
                }
            },
            attrFn: {},
            attr: function(elem, name, value, pass) {
                var ret, hooks, notxml, nType = elem.nodeType;
                if (!elem || nType === 3 || nType === 8 || nType === 2) {
                    return;
                }
                if (pass && jQuery.isFunction(jQuery.fn[name])) {
                    return jQuery(elem)[name](value);
                }
                if (typeof elem.getAttribute === "undefined") {
                    return jQuery.prop(elem, name, value);
                }
                notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
                if (notxml) {
                    name = name.toLowerCase();
                    hooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);
                }
                if (value !== undefined) {
                    if (value === null) {
                        jQuery.removeAttr(elem, name);
                        return;
                    } else if (hooks && "set"in hooks && notxml && (ret = hooks.set(elem, value, name)) !== undefined) {
                        return ret;
                    } else {
                        elem.setAttribute(name, value + "");
                        return value;
                    }
                } else if (hooks && "get"in hooks && notxml && (ret = hooks.get(elem, name)) !== null) {
                    return ret;
                } else {
                    ret = elem.getAttribute(name);
                    return ret === null ? undefined : ret;
                }
            },
            removeAttr: function(elem, value) {
                var propName, attrNames, name, isBool, i = 0;
                if (value && elem.nodeType === 1) {
                    attrNames = value.split(core_rspace);
                    for (; i < attrNames.length; i++) {
                        name = attrNames[i];
                        if (name) {
                            propName = jQuery.propFix[name] || name;
                            isBool = rboolean.test(name);
                            if (!isBool) {
                                jQuery.attr(elem, name, "");
                            }
                            elem.removeAttribute(getSetAttribute ? name : propName);
                            if (isBool && propName in elem) {
                                elem[propName] = false;
                            }
                        }
                    }
                }
            },
            attrHooks: {
                type: {
                    set: function(elem, value) {
                        if (rtype.test(elem.nodeName) && elem.parentNode) {
                            jQuery.error("type property can't be changed");
                        } else if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                            var val = elem.value;
                            elem.setAttribute("type", value);
                            if (val) {
                                elem.value = val;
                            }
                            return value;
                        }
                    }
                },
                value: {
                    get: function(elem, name) {
                        if (nodeHook && jQuery.nodeName(elem, "button")) {
                            return nodeHook.get(elem, name);
                        }
                        return name in elem ? elem.value : null;
                    },
                    set: function(elem, value, name) {
                        if (nodeHook && jQuery.nodeName(elem, "button")) {
                            return nodeHook.set(elem, value, name);
                        }
                        elem.value = value;
                    }
                }
            },
            propFix: {
                tabindex: "tabIndex",
                readonly: "readOnly",
                "for": "htmlFor",
                "class": "className",
                maxlength: "maxLength",
                cellspacing: "cellSpacing",
                cellpadding: "cellPadding",
                rowspan: "rowSpan",
                colspan: "colSpan",
                usemap: "useMap",
                frameborder: "frameBorder",
                contenteditable: "contentEditable"
            },
            prop: function(elem, name, value) {
                var ret, hooks, notxml, nType = elem.nodeType;
                if (!elem || nType === 3 || nType === 8 || nType === 2) {
                    return;
                }
                notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
                if (notxml) {
                    name = jQuery.propFix[name] || name;
                    hooks = jQuery.propHooks[name];
                }
                if (value !== undefined) {
                    if (hooks && "set"in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                        return ret;
                    } else {
                        return (elem[name] = value);
                    }
                } else {
                    if (hooks && "get"in hooks && (ret = hooks.get(elem, name)) !== null) {
                        return ret;
                    } else {
                        return elem[name];
                    }
                }
            },
            propHooks: {
                tabIndex: {
                    get: function(elem) {
                        var attributeNode = elem.getAttributeNode("tabindex");
                        return attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;
                    }
                }
            }
        });
        boolHook = {
            get: function(elem, name) {
                var attrNode, property = jQuery.prop(elem, name);
                return property === true || typeof property !== "boolean" && (attrNode = elem.getAttributeNode(name)) && attrNode.nodeValue !== false ? name.toLowerCase() : undefined;
            },
            set: function(elem, value, name) {
                var propName;
                if (value === false) {
                    jQuery.removeAttr(elem, name);
                } else {
                    propName = jQuery.propFix[name] || name;
                    if (propName in elem) {
                        elem[propName] = true;
                    }
                    elem.setAttribute(name, name.toLowerCase());
                }
                return name;
            }
        };
        if (!getSetAttribute) {
            fixSpecified = {
                name: true,
                id: true,
                coords: true
            };
            nodeHook = jQuery.valHooks.button = {
                get: function(elem, name) {
                    var ret;
                    ret = elem.getAttributeNode(name);
                    return ret && (fixSpecified[name] ? ret.value !== "" : ret.specified) ? ret.value : undefined;
                },
                set: function(elem, value, name) {
                    var ret = elem.getAttributeNode(name);
                    if (!ret) {
                        ret = document.createAttribute(name);
                        elem.setAttributeNode(ret);
                    }
                    return (ret.value = value + "");
                }
            };
            jQuery.each(["width", "height"], function(i, name) {
                jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                    set: function(elem, value) {
                        if (value === "") {
                            elem.setAttribute(name, "auto");
                            return value;
                        }
                    }
                });
            });
            jQuery.attrHooks.contenteditable = {
                get: nodeHook.get,
                set: function(elem, value, name) {
                    if (value === "") {
                        value = "false";
                    }
                    nodeHook.set(elem, value, name);
                }
            };
        }
        if (!jQuery.support.hrefNormalized) {
            jQuery.each(["href", "src", "width", "height"], function(i, name) {
                jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                    get: function(elem) {
                        var ret = elem.getAttribute(name, 2);
                        return ret === null ? undefined : ret;
                    }
                });
            });
        }
        if (!jQuery.support.style) {
            jQuery.attrHooks.style = {
                get: function(elem) {
                    return elem.style.cssText.toLowerCase() || undefined;
                },
                set: function(elem, value) {
                    return (elem.style.cssText = value + "");
                }
            };
        }
        if (!jQuery.support.optSelected) {
            jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
                get: function(elem) {
                    var parent = elem.parentNode;
                    if (parent) {
                        parent.selectedIndex;
                        if (parent.parentNode) {
                            parent.parentNode.selectedIndex;
                        }
                    }
                    return null;
                }
            });
        }
        if (!jQuery.support.enctype) {
            jQuery.propFix.enctype = "encoding";
        }
        if (!jQuery.support.checkOn) {
            jQuery.each(["radio", "checkbox"], function() {
                jQuery.valHooks[this] = {
                    get: function(elem) {
                        return elem.getAttribute("value") === null ? "on" : elem.value;
                    }
                };
            });
        }
        jQuery.each(["radio", "checkbox"], function() {
            jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {
                set: function(elem, value) {
                    if (jQuery.isArray(value)) {
                        return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
                    }
                }
            });
        });
        var rformElems = /^(?:textarea|input|select)$/i
            , rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/
            , rhoverHack = /(?:^|\s)hover(\.\S+|)\b/
            , rkeyEvent = /^key/
            , rmouseEvent = /^(?:mouse|contextmenu)|click/
            , rfocusMorph = /^(?:focusinfocus|focusoutblur)$/
            , hoverHack = function(events) {
            return jQuery.event.special.hover ? events : events.replace(rhoverHack, "mouseenter$1 mouseleave$1");
        };
        jQuery.event = {
            add: function(elem, types, handler, data, selector) {
                var elemData, eventHandle, events, t, tns, type, namespaces, handleObj, handleObjIn, handlers, special;
                if (elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data(elem))) {
                    return;
                }
                if (handler.handler) {
                    handleObjIn = handler;
                    handler = handleObjIn.handler;
                    selector = handleObjIn.selector;
                }
                if (!handler.guid) {
                    handler.guid = jQuery.guid++;
                }
                events = elemData.events;
                if (!events) {
                    elemData.events = events = {};
                }
                eventHandle = elemData.handle;
                if (!eventHandle) {
                    elemData.handle = eventHandle = function(e) {
                        return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                    }
                    ;
                    eventHandle.elem = elem;
                }
                types = jQuery.trim(hoverHack(types)).split(" ");
                for (t = 0; t < types.length; t++) {
                    tns = rtypenamespace.exec(types[t]) || [];
                    type = tns[1];
                    namespaces = (tns[2] || "").split(".").sort();
                    special = jQuery.event.special[type] || {};
                    type = (selector ? special.delegateType : special.bindType) || type;
                    special = jQuery.event.special[type] || {};
                    handleObj = jQuery.extend({
                        type: type,
                        origType: tns[1],
                        data: data,
                        handler: handler,
                        guid: handler.guid,
                        selector: selector,
                        needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                        namespace: namespaces.join(".")
                    }, handleObjIn);
                    handlers = events[type];
                    if (!handlers) {
                        handlers = events[type] = [];
                        handlers.delegateCount = 0;
                        if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                            if (elem.addEventListener) {
                                elem.addEventListener(type, eventHandle, false);
                            } else if (elem.attachEvent) {
                                elem.attachEvent("on" + type, eventHandle);
                            }
                        }
                    }
                    if (special.add) {
                        special.add.call(elem, handleObj);
                        if (!handleObj.handler.guid) {
                            handleObj.handler.guid = handler.guid;
                        }
                    }
                    if (selector) {
                        handlers.splice(handlers.delegateCount++, 0, handleObj);
                    } else {
                        handlers.push(handleObj);
                    }
                    jQuery.event.global[type] = true;
                }
                elem = null;
            },
            global: {},
            remove: function(elem, types, handler, selector, mappedTypes) {
                var t, tns, type, origType, namespaces, origCount, j, events, special, eventType, handleObj, elemData = jQuery.hasData(elem) && jQuery._data(elem);
                if (!elemData || !(events = elemData.events)) {
                    return;
                }
                types = jQuery.trim(hoverHack(types || "")).split(" ");
                for (t = 0; t < types.length; t++) {
                    tns = rtypenamespace.exec(types[t]) || [];
                    type = origType = tns[1];
                    namespaces = tns[2];
                    if (!type) {
                        for (type in events) {
                            jQuery.event.remove(elem, type + types[t], handler, selector, true);
                        }
                        continue;
                    }
                    special = jQuery.event.special[type] || {};
                    type = (selector ? special.delegateType : special.bindType) || type;
                    eventType = events[type] || [];
                    origCount = eventType.length;
                    namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                    for (j = 0; j < eventType.length; j++) {
                        handleObj = eventType[j];
                        if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!namespaces || namespaces.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                            eventType.splice(j--, 1);
                            if (handleObj.selector) {
                                eventType.delegateCount--;
                            }
                            if (special.remove) {
                                special.remove.call(elem, handleObj);
                            }
                        }
                    }
                    if (eventType.length === 0 && origCount !== eventType.length) {
                        if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                            jQuery.removeEvent(elem, type, elemData.handle);
                        }
                        delete events[type];
                    }
                }
                if (jQuery.isEmptyObject(events)) {
                    delete elemData.handle;
                    jQuery.removeData(elem, "events", true);
                }
            },
            customEvent: {
                "getData": true,
                "setData": true,
                "changeData": true
            },
            trigger: function(event, data, elem, onlyHandlers) {
                if (elem && (elem.nodeType === 3 || elem.nodeType === 8)) {
                    return;
                }
                var cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType, type = event.type || event, namespaces = [];
                if (rfocusMorph.test(type + jQuery.event.triggered)) {
                    return;
                }
                if (type.indexOf("!") >= 0) {
                    type = type.slice(0, -1);
                    exclusive = true;
                }
                if (type.indexOf(".") >= 0) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    namespaces.sort();
                }
                if ((!elem || jQuery.event.customEvent[type]) && !jQuery.event.global[type]) {
                    return;
                }
                event = typeof event === "object" ? event[jQuery.expando] ? event : new jQuery.Event(type,event) : new jQuery.Event(type);
                event.type = type;
                event.isTrigger = true;
                event.exclusive = exclusive;
                event.namespace = namespaces.join(".");
                event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                ontype = type.indexOf(":") < 0 ? "on" + type : "";
                if (!elem) {
                    cache = jQuery.cache;
                    for (i in cache) {
                        if (cache[i].events && cache[i].events[type]) {
                            jQuery.event.trigger(event, data, cache[i].handle.elem, true);
                        }
                    }
                    return;
                }
                event.result = undefined;
                if (!event.target) {
                    event.target = elem;
                }
                data = data != null ? jQuery.makeArray(data) : [];
                data.unshift(event);
                special = jQuery.event.special[type] || {};
                if (special.trigger && special.trigger.apply(elem, data) === false) {
                    return;
                }
                eventPath = [[elem, special.bindType || type]];
                if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                    bubbleType = special.delegateType || type;
                    cur = rfocusMorph.test(bubbleType + type) ? elem : elem.parentNode;
                    for (old = elem; cur; cur = cur.parentNode) {
                        eventPath.push([cur, bubbleType]);
                        old = cur;
                    }
                    if (old === (elem.ownerDocument || document)) {
                        eventPath.push([old.defaultView || old.parentWindow || window, bubbleType]);
                    }
                }
                for (i = 0; i < eventPath.length && !event.isPropagationStopped(); i++) {
                    cur = eventPath[i][0];
                    event.type = eventPath[i][1];
                    handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                    if (handle) {
                        handle.apply(cur, data);
                    }
                    handle = ontype && cur[ontype];
                    if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
                        event.preventDefault();
                    }
                }
                event.type = type;
                if (!onlyHandlers && !event.isDefaultPrevented()) {
                    if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === "click" && jQuery.nodeName(elem, "a")) && jQuery.acceptData(elem)) {
                        if (ontype && elem[type] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow(elem)) {
                            old = elem[ontype];
                            if (old) {
                                elem[ontype] = null;
                            }
                            jQuery.event.triggered = type;
                            elem[type]();
                            jQuery.event.triggered = undefined;
                            if (old) {
                                elem[ontype] = old;
                            }
                        }
                    }
                }
                return event.result;
            },
            dispatch: function(event) {
                event = jQuery.event.fix(event || window.event);
                var i, j, cur, ret, selMatch, matched, matches, handleObj, sel, related, handlers = ((jQuery._data(this, "events") || {})[event.type] || []), delegateCount = handlers.delegateCount, args = core_slice.call(arguments), run_all = !event.exclusive && !event.namespace, special = jQuery.event.special[event.type] || {}, handlerQueue = [];
                args[0] = event;
                event.delegateTarget = this;
                if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                    return;
                }
                if (delegateCount && !(event.button && event.type === "click")) {
                    for (cur = event.target; cur != this; cur = cur.parentNode || this) {
                        if (cur.disabled !== true || event.type !== "click") {
                            selMatch = {};
                            matches = [];
                            for (i = 0; i < delegateCount; i++) {
                                handleObj = handlers[i];
                                sel = handleObj.selector;
                                if (selMatch[sel] === undefined) {
                                    selMatch[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                                }
                                if (selMatch[sel]) {
                                    matches.push(handleObj);
                                }
                            }
                            if (matches.length) {
                                handlerQueue.push({
                                    elem: cur,
                                    matches: matches
                                });
                            }
                        }
                    }
                }
                if (handlers.length > delegateCount) {
                    handlerQueue.push({
                        elem: this,
                        matches: handlers.slice(delegateCount)
                    });
                }
                for (i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++) {
                    matched = handlerQueue[i];
                    event.currentTarget = matched.elem;
                    for (j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++) {
                        handleObj = matched.matches[j];
                        if (run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test(handleObj.namespace)) {
                            event.data = handleObj.data;
                            event.handleObj = handleObj;
                            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                            if (ret !== undefined) {
                                event.result = ret;
                                if (ret === false) {
                                    event.preventDefault();
                                    event.stopPropagation();
                                }
                            }
                        }
                    }
                }
                if (special.postDispatch) {
                    special.postDispatch.call(this, event);
                }
                return event.result;
            },
            props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
            fixHooks: {},
            keyHooks: {
                props: "char charCode key keyCode".split(" "),
                filter: function(event, original) {
                    if (event.which == null) {
                        event.which = original.charCode != null ? original.charCode : original.keyCode;
                    }
                    return event;
                }
            },
            mouseHooks: {
                props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                filter: function(event, original) {
                    var eventDoc, doc, body, button = original.button, fromElement = original.fromElement;
                    if (event.pageX == null && original.clientX != null) {
                        eventDoc = event.target.ownerDocument || document;
                        doc = eventDoc.documentElement;
                        body = eventDoc.body;
                        event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                        event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                    }
                    if (!event.relatedTarget && fromElement) {
                        event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                    }
                    if (!event.which && button !== undefined) {
                        event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
                    }
                    return event;
                }
            },
            fix: function(event) {
                if (event[jQuery.expando]) {
                    return event;
                }
                var i, prop, originalEvent = event, fixHook = jQuery.event.fixHooks[event.type] || {}, copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
                event = jQuery.Event(originalEvent);
                for (i = copy.length; i; ) {
                    prop = copy[--i];
                    event[prop] = originalEvent[prop];
                }
                if (!event.target) {
                    event.target = originalEvent.srcElement || document;
                }
                if (event.target.nodeType === 3) {
                    event.target = event.target.parentNode;
                }
                event.metaKey = !!event.metaKey;
                return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
            },
            special: {
                load: {
                    noBubble: true
                },
                focus: {
                    delegateType: "focusin"
                },
                blur: {
                    delegateType: "focusout"
                },
                beforeunload: {
                    setup: function(data, namespaces, eventHandle) {
                        if (jQuery.isWindow(this)) {
                            this.onbeforeunload = eventHandle;
                        }
                    },
                    teardown: function(namespaces, eventHandle) {
                        if (this.onbeforeunload === eventHandle) {
                            this.onbeforeunload = null;
                        }
                    }
                }
            },
            simulate: function(type, elem, event, bubble) {
                var e = jQuery.extend(new jQuery.Event(), event, {
                    type: type,
                    isSimulated: true,
                    originalEvent: {}
                });
                if (bubble) {
                    jQuery.event.trigger(e, null, elem);
                } else {
                    jQuery.event.dispatch.call(elem, e);
                }
                if (e.isDefaultPrevented()) {
                    event.preventDefault();
                }
            }
        };
        jQuery.event.handle = jQuery.event.dispatch;
        jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
                if (elem.removeEventListener) {
                    elem.removeEventListener(type, handle, false);
                }
            }
            : function(elem, type, handle) {
                var name = "on" + type;
                if (elem.detachEvent) {
                    if (typeof elem[name] === "undefined") {
                        elem[name] = null;
                    }
                    elem.detachEvent(name, handle);
                }
            }
        ;
        jQuery.Event = function(src, props) {
            if (!(this instanceof jQuery.Event)) {
                return new jQuery.Event(src,props);
            }
            if (src && src.type) {
                this.originalEvent = src;
                this.type = src.type;
                this.isDefaultPrevented = (src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse;
            } else {
                this.type = src;
            }
            if (props) {
                jQuery.extend(this, props);
            }
            this.timeStamp = src && src.timeStamp || jQuery.now();
            this[jQuery.expando] = true;
        }
        ;
        function returnFalse() {
            return false;
        }
        function returnTrue() {
            return true;
        }
        jQuery.Event.prototype = {
            preventDefault: function() {
                this.isDefaultPrevented = returnTrue;
                var e = this.originalEvent;
                if (!e) {
                    return;
                }
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false;
                }
            },
            stopPropagation: function() {
                this.isPropagationStopped = returnTrue;
                var e = this.originalEvent;
                if (!e) {
                    return;
                }
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
                e.cancelBubble = true;
            },
            stopImmediatePropagation: function() {
                this.isImmediatePropagationStopped = returnTrue;
                this.stopPropagation();
            },
            isDefaultPrevented: returnFalse,
            isPropagationStopped: returnFalse,
            isImmediatePropagationStopped: returnFalse
        };
        jQuery.each({
            mouseenter: "mouseover",
            mouseleave: "mouseout"
        }, function(orig, fix) {
            jQuery.event.special[orig] = {
                delegateType: fix,
                bindType: fix,
                handle: function(event) {
                    var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj, selector = handleObj.selector;
                    if (!related || (related !== target && !jQuery.contains(target, related))) {
                        event.type = handleObj.origType;
                        ret = handleObj.handler.apply(this, arguments);
                        event.type = fix;
                    }
                    return ret;
                }
            };
        });
        if (!jQuery.support.submitBubbles) {
            jQuery.event.special.submit = {
                setup: function() {
                    if (jQuery.nodeName(this, "form")) {
                        return false;
                    }
                    jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                        var elem = e.target
                            , form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                        if (form && !jQuery._data(form, "_submit_attached")) {
                            jQuery.event.add(form, "submit._submit", function(event) {
                                event._submit_bubble = true;
                            });
                            jQuery._data(form, "_submit_attached", true);
                        }
                    });
                },
                postDispatch: function(event) {
                    if (event._submit_bubble) {
                        delete event._submit_bubble;
                        if (this.parentNode && !event.isTrigger) {
                            jQuery.event.simulate("submit", this.parentNode, event, true);
                        }
                    }
                },
                teardown: function() {
                    if (jQuery.nodeName(this, "form")) {
                        return false;
                    }
                    jQuery.event.remove(this, "._submit");
                }
            };
        }
        if (!jQuery.support.changeBubbles) {
            jQuery.event.special.change = {
                setup: function() {
                    if (rformElems.test(this.nodeName)) {
                        if (this.type === "checkbox" || this.type === "radio") {
                            jQuery.event.add(this, "propertychange._change", function(event) {
                                if (event.originalEvent.propertyName === "checked") {
                                    this._just_changed = true;
                                }
                            });
                            jQuery.event.add(this, "click._change", function(event) {
                                if (this._just_changed && !event.isTrigger) {
                                    this._just_changed = false;
                                }
                                jQuery.event.simulate("change", this, event, true);
                            });
                        }
                        return false;
                    }
                    jQuery.event.add(this, "beforeactivate._change", function(e) {
                        var elem = e.target;
                        if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "_change_attached")) {
                            jQuery.event.add(elem, "change._change", function(event) {
                                if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                    jQuery.event.simulate("change", this.parentNode, event, true);
                                }
                            });
                            jQuery._data(elem, "_change_attached", true);
                        }
                    });
                },
                handle: function(event) {
                    var elem = event.target;
                    if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) {
                        return event.handleObj.handler.apply(this, arguments);
                    }
                },
                teardown: function() {
                    jQuery.event.remove(this, "._change");
                    return !rformElems.test(this.nodeName);
                }
            };
        }
        if (!jQuery.support.focusinBubbles) {
            jQuery.each({
                focus: "focusin",
                blur: "focusout"
            }, function(orig, fix) {
                var attaches = 0
                    , handler = function(event) {
                    jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
                };
                jQuery.event.special[fix] = {
                    setup: function() {
                        if (attaches++ === 0) {
                            document.addEventListener(orig, handler, true);
                        }
                    },
                    teardown: function() {
                        if (--attaches === 0) {
                            document.removeEventListener(orig, handler, true);
                        }
                    }
                };
            });
        }
        jQuery.fn.extend({
            on: function(types, selector, data, fn, one) {
                var origFn, type;
                if (typeof types === "object") {
                    if (typeof selector !== "string") {
                        data = data || selector;
                        selector = undefined;
                    }
                    for (type in types) {
                        this.on(type, selector, data, types[type], one);
                    }
                    return this;
                }
                if (data == null && fn == null) {
                    fn = selector;
                    data = selector = undefined;
                } else if (fn == null) {
                    if (typeof selector === "string") {
                        fn = data;
                        data = undefined;
                    } else {
                        fn = data;
                        data = selector;
                        selector = undefined;
                    }
                }
                if (fn === false) {
                    fn = returnFalse;
                } else if (!fn) {
                    return this;
                }
                if (one === 1) {
                    origFn = fn;
                    fn = function(event) {
                        jQuery().off(event);
                        return origFn.apply(this, arguments);
                    }
                    ;
                    fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
                }
                return this.each(function() {
                    jQuery.event.add(this, types, fn, data, selector);
                });
            },
            one: function(types, selector, data, fn) {
                return this.on(types, selector, data, fn, 1);
            },
            off: function(types, selector, fn) {
                var handleObj, type;
                if (types && types.preventDefault && types.handleObj) {
                    handleObj = types.handleObj;
                    jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                    return this;
                }
                if (typeof types === "object") {
                    for (type in types) {
                        this.off(type, selector, types[type]);
                    }
                    return this;
                }
                if (selector === false || typeof selector === "function") {
                    fn = selector;
                    selector = undefined;
                }
                if (fn === false) {
                    fn = returnFalse;
                }
                return this.each(function() {
                    jQuery.event.remove(this, types, fn, selector);
                });
            },
            bind: function(types, data, fn) {
                return this.on(types, null, data, fn);
            },
            unbind: function(types, fn) {
                return this.off(types, null, fn);
            },
            live: function(types, data, fn) {
                jQuery(this.context).on(types, this.selector, data, fn);
                return this;
            },
            die: function(types, fn) {
                jQuery(this.context).off(types, this.selector || "**", fn);
                return this;
            },
            delegate: function(selector, types, data, fn) {
                return this.on(types, selector, data, fn);
            },
            undelegate: function(selector, types, fn) {
                return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
            },
            trigger: function(type, data) {
                return this.each(function() {
                    jQuery.event.trigger(type, data, this);
                });
            },
            triggerHandler: function(type, data) {
                if (this[0]) {
                    return jQuery.event.trigger(type, data, this[0], true);
                }
            },
            toggle: function(fn) {
                var args = arguments
                    , guid = fn.guid || jQuery.guid++
                    , i = 0
                    , toggler = function(event) {
                    var lastToggle = (jQuery._data(this, "lastToggle" + fn.guid) || 0) % i;
                    jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);
                    event.preventDefault();
                    return args[lastToggle].apply(this, arguments) || false;
                };
                toggler.guid = guid;
                while (i < args.length) {
                    args[i++].guid = guid;
                }
                return this.click(toggler);
            },
            hover: function(fnOver, fnOut) {
                return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
            }
        });
        jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
            jQuery.fn[name] = function(data, fn) {
                if (fn == null) {
                    fn = data;
                    data = null;
                }
                return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
            }
            ;
            if (rkeyEvent.test(name)) {
                jQuery.event.fixHooks[name] = jQuery.event.keyHooks;
            }
            if (rmouseEvent.test(name)) {
                jQuery.event.fixHooks[name] = jQuery.event.mouseHooks;
            }
        });
        (function(window, undefined) {
                var cachedruns, assertGetIdNotName, Expr, getText, isXML, contains, compile, sortOrder, hasDuplicate, outermostContext, baseHasDuplicate = true, strundefined = "undefined", expando = ("sizcache" + Math.random()).replace(".", ""), Token = String, document = window.document, docElem = document.documentElement, dirruns = 0, done = 0, pop = [].pop, push = [].push, slice = [].slice, indexOf = [].indexOf || function(elem) {
                    var i = 0
                        , len = this.length;
                    for (; i < len; i++) {
                        if (this[i] === elem) {
                            return i;
                        }
                    }
                    return -1;
                }
                    , markFunction = function(fn, value) {
                    fn[expando] = value == null || value;
                    return fn;
                }, createCache = function() {
                    var cache = {}
                        , keys = [];
                    return markFunction(function(key, value) {
                        if (keys.push(key) > Expr.cacheLength) {
                            delete cache[keys.shift()];
                        }
                        return (cache[key + " "] = value);
                    }, cache);
                }, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), operators = "([*^$|!~]?=)", attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace + "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)", pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$","g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*"), rpseudo = new RegExp(pseudos), rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/, rnot = /^:not/, rsibling = /[\x20\t\r\n\f]*[+~]/, rendsWithNot = /:not\($/, rheader = /h\d/i, rinputs = /input|select|textarea|button/i, rbackslash = /\\(?!\\)/g, matchExpr = {
                    "ID": new RegExp("^#(" + characterEncoding + ")"),
                    "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
                    "NAME": new RegExp("^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]"),
                    "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
                    "ATTR": new RegExp("^" + attributes),
                    "PSEUDO": new RegExp("^" + pseudos),
                    "POS": new RegExp(pos,"i"),
                    "CHILD": new RegExp("^:(only|nth|first|last)-child(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)","i"),
                    "needsContext": new RegExp("^" + whitespace + "*[>+~]|" + pos,"i")
                }, assert = function(fn) {
                    var div = document.createElement("div");
                    try {
                        return fn(div);
                    } catch (e) {
                        return false;
                    } finally {
                        div = null;
                    }
                }, assertTagNameNoComments = assert(function(div) {
                    div.appendChild(document.createComment(""));
                    return !div.getElementsByTagName("*").length;
                }), assertHrefNotNormalized = assert(function(div) {
                    div.innerHTML = "<a href='#'></a>";
                    return div.firstChild && typeof div.firstChild.getAttribute !== strundefined && div.firstChild.getAttribute("href") === "#";
                }), assertAttributes = assert(function(div) {
                    div.innerHTML = "<select></select>";
                    var type = typeof div.lastChild.getAttribute("multiple");
                    return type !== "boolean" && type !== "string";
                }), assertUsableClassName = assert(function(div) {
                    div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
                    if (!div.getElementsByClassName || !div.getElementsByClassName("e").length) {
                        return false;
                    }
                    div.lastChild.className = "e";
                    return div.getElementsByClassName("e").length === 2;
                }), assertUsableName = assert(function(div) {
                    div.id = expando + 0;
                    div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
                    docElem.insertBefore(div, docElem.firstChild);
                    var pass = document.getElementsByName && document.getElementsByName(expando).length === 2 + document.getElementsByName(expando + 0).length;
                    assertGetIdNotName = !document.getElementById(expando);
                    docElem.removeChild(div);
                    return pass;
                });
                try {
                    slice.call(docElem.childNodes, 0)[0].nodeType;
                } catch (e) {
                    slice = function(i) {
                        var elem, results = [];
                        for (; (elem = this[i]); i++) {
                            results.push(elem);
                        }
                        return results;
                    }
                    ;
                }
                function Sizzle(selector, context, results, seed) {
                    results = results || [];
                    context = context || document;
                    var match, elem, xml, m, nodeType = context.nodeType;
                    if (!selector || typeof selector !== "string") {
                        return results;
                    }
                    if (nodeType !== 1 && nodeType !== 9) {
                        return [];
                    }
                    xml = isXML(context);
                    if (!xml && !seed) {
                        if ((match = rquickExpr.exec(selector))) {
                            if ((m = match[1])) {
                                if (nodeType === 9) {
                                    elem = context.getElementById(m);
                                    if (elem && elem.parentNode) {
                                        if (elem.id === m) {
                                            results.push(elem);
                                            return results;
                                        }
                                    } else {
                                        return results;
                                    }
                                } else {
                                    if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                }
                            } else if (match[2]) {
                                push.apply(results, slice.call(context.getElementsByTagName(selector), 0));
                                return results;
                            } else if ((m = match[3]) && assertUsableClassName && context.getElementsByClassName) {
                                push.apply(results, slice.call(context.getElementsByClassName(m), 0));
                                return results;
                            }
                        }
                    }
                    return select(selector.replace(rtrim, "$1"), context, results, seed, xml);
                }
                Sizzle.matches = function(expr, elements) {
                    return Sizzle(expr, null, null, elements);
                }
                ;
                Sizzle.matchesSelector = function(elem, expr) {
                    return Sizzle(expr, null, null, [elem]).length > 0;
                }
                ;
                function createInputPseudo(type) {
                    return function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === type;
                    }
                        ;
                }
                function createButtonPseudo(type) {
                    return function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return (name === "input" || name === "button") && elem.type === type;
                    }
                        ;
                }
                function createPositionalPseudo(fn) {
                    return markFunction(function(argument) {
                        argument = +argument;
                        return markFunction(function(seed, matches) {
                            var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                            while (i--) {
                                if (seed[(j = matchIndexes[i])]) {
                                    seed[j] = !(matches[j] = seed[j]);
                                }
                            }
                        });
                    });
                }
                getText = Sizzle.getText = function(elem) {
                    var node, ret = "", i = 0, nodeType = elem.nodeType;
                    if (nodeType) {
                        if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                            if (typeof elem.textContent === "string") {
                                return elem.textContent;
                            } else {
                                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                    ret += getText(elem);
                                }
                            }
                        } else if (nodeType === 3 || nodeType === 4) {
                            return elem.nodeValue;
                        }
                    } else {
                        for (; (node = elem[i]); i++) {
                            ret += getText(node);
                        }
                    }
                    return ret;
                }
                ;
                isXML = Sizzle.isXML = function(elem) {
                    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                    return documentElement ? documentElement.nodeName !== "HTML" : false;
                }
                ;
                contains = Sizzle.contains = docElem.contains ? function(a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a
                            , bup = b && b.parentNode;
                        return a === bup || !!(bup && bup.nodeType === 1 && adown.contains && adown.contains(bup));
                    }
                    : docElem.compareDocumentPosition ? function(a, b) {
                            return b && !!(a.compareDocumentPosition(b) & 16);
                        }
                        : function(a, b) {
                            while ((b = b.parentNode)) {
                                if (b === a) {
                                    return true;
                                }
                            }
                            return false;
                        }
                ;
                Sizzle.attr = function(elem, name) {
                    var val, xml = isXML(elem);
                    if (!xml) {
                        name = name.toLowerCase();
                    }
                    if ((val = Expr.attrHandle[name])) {
                        return val(elem);
                    }
                    if (xml || assertAttributes) {
                        return elem.getAttribute(name);
                    }
                    val = elem.getAttributeNode(name);
                    return val ? typeof elem[name] === "boolean" ? elem[name] ? name : null : val.specified ? val.value : null : null;
                }
                ;
                Expr = Sizzle.selectors = {
                    cacheLength: 50,
                    createPseudo: markFunction,
                    match: matchExpr,
                    attrHandle: assertHrefNotNormalized ? {} : {
                        "href": function(elem) {
                            return elem.getAttribute("href", 2);
                        },
                        "type": function(elem) {
                            return elem.getAttribute("type");
                        }
                    },
                    find: {
                        "ID": assertGetIdNotName ? function(id, context, xml) {
                                if (typeof context.getElementById !== strundefined && !xml) {
                                    var m = context.getElementById(id);
                                    return m && m.parentNode ? [m] : [];
                                }
                            }
                            : function(id, context, xml) {
                                if (typeof context.getElementById !== strundefined && !xml) {
                                    var m = context.getElementById(id);
                                    return m ? m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ? [m] : undefined : [];
                                }
                            }
                        ,
                        "TAG": assertTagNameNoComments ? function(tag, context) {
                                if (typeof context.getElementsByTagName !== strundefined) {
                                    return context.getElementsByTagName(tag);
                                }
                            }
                            : function(tag, context) {
                                var results = context.getElementsByTagName(tag);
                                if (tag === "*") {
                                    var elem, tmp = [], i = 0;
                                    for (; (elem = results[i]); i++) {
                                        if (elem.nodeType === 1) {
                                            tmp.push(elem);
                                        }
                                    }
                                    return tmp;
                                }
                                return results;
                            }
                        ,
                        "NAME": assertUsableName && function(tag, context) {
                            if (typeof context.getElementsByName !== strundefined) {
                                return context.getElementsByName(name);
                            }
                        }
                        ,
                        "CLASS": assertUsableClassName && function(className, context, xml) {
                            if (typeof context.getElementsByClassName !== strundefined && !xml) {
                                return context.getElementsByClassName(className);
                            }
                        }
                    },
                    relative: {
                        ">": {
                            dir: "parentNode",
                            first: true
                        },
                        " ": {
                            dir: "parentNode"
                        },
                        "+": {
                            dir: "previousSibling",
                            first: true
                        },
                        "~": {
                            dir: "previousSibling"
                        }
                    },
                    preFilter: {
                        "ATTR": function(match) {
                            match[1] = match[1].replace(rbackslash, "");
                            match[3] = (match[4] || match[5] || "").replace(rbackslash, "");
                            if (match[2] === "~=") {
                                match[3] = " " + match[3] + " ";
                            }
                            return match.slice(0, 4);
                        },
                        "CHILD": function(match) {
                            match[1] = match[1].toLowerCase();
                            if (match[1] === "nth") {
                                if (!match[2]) {
                                    Sizzle.error(match[0]);
                                }
                                match[3] = +(match[3] ? match[4] + (match[5] || 1) : 2 * (match[2] === "even" || match[2] === "odd"));
                                match[4] = +((match[6] + match[7]) || match[2] === "odd");
                            } else if (match[2]) {
                                Sizzle.error(match[0]);
                            }
                            return match;
                        },
                        "PSEUDO": function(match) {
                            var unquoted, excess;
                            if (matchExpr["CHILD"].test(match[0])) {
                                return null;
                            }
                            if (match[3]) {
                                match[2] = match[3];
                            } else if ((unquoted = match[4])) {
                                if (rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                                    unquoted = unquoted.slice(0, excess);
                                    match[0] = match[0].slice(0, excess);
                                }
                                match[2] = unquoted;
                            }
                            return match.slice(0, 3);
                        }
                    },
                    filter: {
                        "ID": assertGetIdNotName ? function(id) {
                                id = id.replace(rbackslash, "");
                                return function(elem) {
                                    return elem.getAttribute("id") === id;
                                }
                                    ;
                            }
                            : function(id) {
                                id = id.replace(rbackslash, "");
                                return function(elem) {
                                    var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                                    return node && node.value === id;
                                }
                                    ;
                            }
                        ,
                        "TAG": function(nodeName) {
                            if (nodeName === "*") {
                                return function() {
                                    return true;
                                }
                                    ;
                            }
                            nodeName = nodeName.replace(rbackslash, "").toLowerCase();
                            return function(elem) {
                                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                            }
                                ;
                        },
                        "CLASS": function(className) {
                            var pattern = classCache[expando][className + " "];
                            return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                                return pattern.test(elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "");
                            });
                        },
                        "ATTR": function(name, operator, check) {
                            return function(elem, context) {
                                var result = Sizzle.attr(elem, name);
                                if (result == null) {
                                    return operator === "!=";
                                }
                                if (!operator) {
                                    return true;
                                }
                                result += "";
                                return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.substr(result.length - check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.substr(0, check.length + 1) === check + "-" : false;
                            }
                                ;
                        },
                        "CHILD": function(type, argument, first, last) {
                            if (type === "nth") {
                                return function(elem) {
                                    var node, diff, parent = elem.parentNode;
                                    if (first === 1 && last === 0) {
                                        return true;
                                    }
                                    if (parent) {
                                        diff = 0;
                                        for (node = parent.firstChild; node; node = node.nextSibling) {
                                            if (node.nodeType === 1) {
                                                diff++;
                                                if (elem === node) {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    diff -= last;
                                    return diff === first || (diff % first === 0 && diff / first >= 0);
                                }
                                    ;
                            }
                            return function(elem) {
                                var node = elem;
                                switch (type) {
                                    case "only":
                                    case "first":
                                        while ((node = node.previousSibling)) {
                                            if (node.nodeType === 1) {
                                                return false;
                                            }
                                        }
                                        if (type === "first") {
                                            return true;
                                        }
                                        node = elem;
                                    case "last":
                                        while ((node = node.nextSibling)) {
                                            if (node.nodeType === 1) {
                                                return false;
                                            }
                                        }
                                        return true;
                                }
                            }
                                ;
                        },
                        "PSEUDO": function(pseudo, argument) {
                            var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                            if (fn[expando]) {
                                return fn(argument);
                            }
                            if (fn.length > 1) {
                                args = [pseudo, pseudo, "", argument];
                                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                                    var idx, matched = fn(seed, argument), i = matched.length;
                                    while (i--) {
                                        idx = indexOf.call(seed, matched[i]);
                                        seed[idx] = !(matches[idx] = matched[i]);
                                    }
                                }) : function(elem) {
                                    return fn(elem, 0, args);
                                }
                                    ;
                            }
                            return fn;
                        }
                    },
                    pseudos: {
                        "not": markFunction(function(selector) {
                            var input = []
                                , results = []
                                , matcher = compile(selector.replace(rtrim, "$1"));
                            return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                                var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                                while (i--) {
                                    if ((elem = unmatched[i])) {
                                        seed[i] = !(matches[i] = elem);
                                    }
                                }
                            }) : function(elem, context, xml) {
                                input[0] = elem;
                                matcher(input, null, xml, results);
                                return !results.pop();
                            }
                                ;
                        }),
                        "has": markFunction(function(selector) {
                            return function(elem) {
                                return Sizzle(selector, elem).length > 0;
                            }
                                ;
                        }),
                        "contains": markFunction(function(text) {
                            return function(elem) {
                                return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                            }
                                ;
                        }),
                        "enabled": function(elem) {
                            return elem.disabled === false;
                        },
                        "disabled": function(elem) {
                            return elem.disabled === true;
                        },
                        "checked": function(elem) {
                            var nodeName = elem.nodeName.toLowerCase();
                            return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                        },
                        "selected": function(elem) {
                            if (elem.parentNode) {
                                elem.parentNode.selectedIndex;
                            }
                            return elem.selected === true;
                        },
                        "parent": function(elem) {
                            return !Expr.pseudos["empty"](elem);
                        },
                        "empty": function(elem) {
                            var nodeType;
                            elem = elem.firstChild;
                            while (elem) {
                                if (elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4) {
                                    return false;
                                }
                                elem = elem.nextSibling;
                            }
                            return true;
                        },
                        "header": function(elem) {
                            return rheader.test(elem.nodeName);
                        },
                        "text": function(elem) {
                            var type, attr;
                            return elem.nodeName.toLowerCase() === "input" && (type = elem.type) === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type);
                        },
                        "radio": createInputPseudo("radio"),
                        "checkbox": createInputPseudo("checkbox"),
                        "file": createInputPseudo("file"),
                        "password": createInputPseudo("password"),
                        "image": createInputPseudo("image"),
                        "submit": createButtonPseudo("submit"),
                        "reset": createButtonPseudo("reset"),
                        "button": function(elem) {
                            var name = elem.nodeName.toLowerCase();
                            return name === "input" && elem.type === "button" || name === "button";
                        },
                        "input": function(elem) {
                            return rinputs.test(elem.nodeName);
                        },
                        "focus": function(elem) {
                            var doc = elem.ownerDocument;
                            return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                        },
                        "active": function(elem) {
                            return elem === elem.ownerDocument.activeElement;
                        },
                        "first": createPositionalPseudo(function() {
                            return [0];
                        }),
                        "last": createPositionalPseudo(function(matchIndexes, length) {
                            return [length - 1];
                        }),
                        "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
                            return [argument < 0 ? argument + length : argument];
                        }),
                        "even": createPositionalPseudo(function(matchIndexes, length) {
                            for (var i = 0; i < length; i += 2) {
                                matchIndexes.push(i);
                            }
                            return matchIndexes;
                        }),
                        "odd": createPositionalPseudo(function(matchIndexes, length) {
                            for (var i = 1; i < length; i += 2) {
                                matchIndexes.push(i);
                            }
                            return matchIndexes;
                        }),
                        "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                            for (var i = argument < 0 ? argument + length : argument; --i >= 0; ) {
                                matchIndexes.push(i);
                            }
                            return matchIndexes;
                        }),
                        "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                            for (var i = argument < 0 ? argument + length : argument; ++i < length; ) {
                                matchIndexes.push(i);
                            }
                            return matchIndexes;
                        })
                    }
                };
                function siblingCheck(a, b, ret) {
                    if (a === b) {
                        return ret;
                    }
                    var cur = a.nextSibling;
                    while (cur) {
                        if (cur === b) {
                            return -1;
                        }
                        cur = cur.nextSibling;
                    }
                    return 1;
                }
                sortOrder = docElem.compareDocumentPosition ? function(a, b) {
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;
                        }
                        return (!a.compareDocumentPosition || !b.compareDocumentPosition ? a.compareDocumentPosition : a.compareDocumentPosition(b) & 4) ? -1 : 1;
                    }
                    : function(a, b) {
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;
                        } else if (a.sourceIndex && b.sourceIndex) {
                            return a.sourceIndex - b.sourceIndex;
                        }
                        var al, bl, ap = [], bp = [], aup = a.parentNode, bup = b.parentNode, cur = aup;
                        if (aup === bup) {
                            return siblingCheck(a, b);
                        } else if (!aup) {
                            return -1;
                        } else if (!bup) {
                            return 1;
                        }
                        while (cur) {
                            ap.unshift(cur);
                            cur = cur.parentNode;
                        }
                        cur = bup;
                        while (cur) {
                            bp.unshift(cur);
                            cur = cur.parentNode;
                        }
                        al = ap.length;
                        bl = bp.length;
                        for (var i = 0; i < al && i < bl; i++) {
                            if (ap[i] !== bp[i]) {
                                return siblingCheck(ap[i], bp[i]);
                            }
                        }
                        return i === al ? siblingCheck(a, bp[i], -1) : siblingCheck(ap[i], b, 1);
                    }
                ;
                [0, 0].sort(sortOrder);
                baseHasDuplicate = !hasDuplicate;
                Sizzle.uniqueSort = function(results) {
                    var elem, duplicates = [], i = 1, j = 0;
                    hasDuplicate = baseHasDuplicate;
                    results.sort(sortOrder);
                    if (hasDuplicate) {
                        for (; (elem = results[i]); i++) {
                            if (elem === results[i - 1]) {
                                j = duplicates.push(i);
                            }
                        }
                        while (j--) {
                            results.splice(duplicates[j], 1);
                        }
                    }
                    return results;
                }
                ;
                Sizzle.error = function(msg) {
                    throw new Error("Syntax error, unrecognized expression: " + msg);
                }
                ;
                function tokenize(selector, parseOnly) {
                    var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[expando][selector + " "];
                    if (cached) {
                        return parseOnly ? 0 : cached.slice(0);
                    }
                    soFar = selector;
                    groups = [];
                    preFilters = Expr.preFilter;
                    while (soFar) {
                        if (!matched || (match = rcomma.exec(soFar))) {
                            if (match) {
                                soFar = soFar.slice(match[0].length) || soFar;
                            }
                            groups.push(tokens = []);
                        }
                        matched = false;
                        if ((match = rcombinators.exec(soFar))) {
                            tokens.push(matched = new Token(match.shift()));
                            soFar = soFar.slice(matched.length);
                            matched.type = match[0].replace(rtrim, " ");
                        }
                        for (type in Expr.filter) {
                            if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                                tokens.push(matched = new Token(match.shift()));
                                soFar = soFar.slice(matched.length);
                                matched.type = type;
                                matched.matches = match;
                            }
                        }
                        if (!matched) {
                            break;
                        }
                    }
                    return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
                }
                function addCombinator(matcher, combinator, base) {
                    var dir = combinator.dir
                        , checkNonElements = base && combinator.dir === "parentNode"
                        , doneName = done++;
                    return combinator.first ? function(elem, context, xml) {
                            while ((elem = elem[dir])) {
                                if (checkNonElements || elem.nodeType === 1) {
                                    return matcher(elem, context, xml);
                                }
                            }
                        }
                        : function(elem, context, xml) {
                            if (!xml) {
                                var cache, dirkey = dirruns + " " + doneName + " ", cachedkey = dirkey + cachedruns;
                                while ((elem = elem[dir])) {
                                    if (checkNonElements || elem.nodeType === 1) {
                                        if ((cache = elem[expando]) === cachedkey) {
                                            return elem.sizset;
                                        } else if (typeof cache === "string" && cache.indexOf(dirkey) === 0) {
                                            if (elem.sizset) {
                                                return elem;
                                            }
                                        } else {
                                            elem[expando] = cachedkey;
                                            if (matcher(elem, context, xml)) {
                                                elem.sizset = true;
                                                return elem;
                                            }
                                            elem.sizset = false;
                                        }
                                    }
                                }
                            } else {
                                while ((elem = elem[dir])) {
                                    if (checkNonElements || elem.nodeType === 1) {
                                        if (matcher(elem, context, xml)) {
                                            return elem;
                                        }
                                    }
                                }
                            }
                        }
                        ;
                }
                function elementMatcher(matchers) {
                    return matchers.length > 1 ? function(elem, context, xml) {
                            var i = matchers.length;
                            while (i--) {
                                if (!matchers[i](elem, context, xml)) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        : matchers[0];
                }
                function condense(unmatched, map, filter, context, xml) {
                    var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
                    for (; i < len; i++) {
                        if ((elem = unmatched[i])) {
                            if (!filter || filter(elem, context, xml)) {
                                newUnmatched.push(elem);
                                if (mapped) {
                                    map.push(i);
                                }
                            }
                        }
                    }
                    return newUnmatched;
                }
                function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                    if (postFilter && !postFilter[expando]) {
                        postFilter = setMatcher(postFilter);
                    }
                    if (postFinder && !postFinder[expando]) {
                        postFinder = setMatcher(postFinder, postSelector);
                    }
                    return markFunction(function(seed, results, context, xml) {
                        var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                        if (matcher) {
                            matcher(matcherIn, matcherOut, context, xml);
                        }
                        if (postFilter) {
                            temp = condense(matcherOut, postMap);
                            postFilter(temp, [], context, xml);
                            i = temp.length;
                            while (i--) {
                                if ((elem = temp[i])) {
                                    matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                                }
                            }
                        }
                        if (seed) {
                            if (postFinder || preFilter) {
                                if (postFinder) {
                                    temp = [];
                                    i = matcherOut.length;
                                    while (i--) {
                                        if ((elem = matcherOut[i])) {
                                            temp.push((matcherIn[i] = elem));
                                        }
                                    }
                                    postFinder(null, (matcherOut = []), temp, xml);
                                }
                                i = matcherOut.length;
                                while (i--) {
                                    if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                                        seed[temp] = !(results[temp] = elem);
                                    }
                                }
                            }
                        } else {
                            matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                            if (postFinder) {
                                postFinder(null, results, matcherOut, xml);
                            } else {
                                push.apply(results, matcherOut);
                            }
                        }
                    });
                }
                function matcherFromTokens(tokens) {
                    var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                        return elem === checkContext;
                    }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                        return indexOf.call(checkContext, elem) > -1;
                    }, implicitRelative, true), matchers = [function(elem, context, xml) {
                        return (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                    }
                    ];
                    for (; i < len; i++) {
                        if ((matcher = Expr.relative[tokens[i].type])) {
                            matchers = [addCombinator(elementMatcher(matchers), matcher)];
                        } else {
                            matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                            if (matcher[expando]) {
                                j = ++i;
                                for (; j < len; j++) {
                                    if (Expr.relative[tokens[j].type]) {
                                        break;
                                    }
                                }
                                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && tokens.slice(0, i - 1).join("").replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && tokens.join(""));
                            }
                            matchers.push(matcher);
                        }
                    }
                    return elementMatcher(matchers);
                }
                function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                    var bySet = setMatchers.length > 0
                        , byElement = elementMatchers.length > 0
                        , superMatcher = function(seed, context, xml, results, expandContext) {
                        var elem, j, matcher, setMatched = [], matchedCount = 0, i = "0", unmatched = seed && [], outermost = expandContext != null, contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context), dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);
                        if (outermost) {
                            outermostContext = context !== document && context;
                            cachedruns = superMatcher.el;
                        }
                        for (; (elem = elems[i]) != null; i++) {
                            if (byElement && elem) {
                                for (j = 0; (matcher = elementMatchers[j]); j++) {
                                    if (matcher(elem, context, xml)) {
                                        results.push(elem);
                                        break;
                                    }
                                }
                                if (outermost) {
                                    dirruns = dirrunsUnique;
                                    cachedruns = ++superMatcher.el;
                                }
                            }
                            if (bySet) {
                                if ((elem = !matcher && elem)) {
                                    matchedCount--;
                                }
                                if (seed) {
                                    unmatched.push(elem);
                                }
                            }
                        }
                        matchedCount += i;
                        if (bySet && i !== matchedCount) {
                            for (j = 0; (matcher = setMatchers[j]); j++) {
                                matcher(unmatched, setMatched, context, xml);
                            }
                            if (seed) {
                                if (matchedCount > 0) {
                                    while (i--) {
                                        if (!(unmatched[i] || setMatched[i])) {
                                            setMatched[i] = pop.call(results);
                                        }
                                    }
                                }
                                setMatched = condense(setMatched);
                            }
                            push.apply(results, setMatched);
                            if (outermost && !seed && setMatched.length > 0 && (matchedCount + setMatchers.length) > 1) {
                                Sizzle.uniqueSort(results);
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            outermostContext = contextBackup;
                        }
                        return unmatched;
                    };
                    superMatcher.el = 0;
                    return bySet ? markFunction(superMatcher) : superMatcher;
                }
                compile = Sizzle.compile = function(selector, group) {
                    var i, setMatchers = [], elementMatchers = [], cached = compilerCache[expando][selector + " "];
                    if (!cached) {
                        if (!group) {
                            group = tokenize(selector);
                        }
                        i = group.length;
                        while (i--) {
                            cached = matcherFromTokens(group[i]);
                            if (cached[expando]) {
                                setMatchers.push(cached);
                            } else {
                                elementMatchers.push(cached);
                            }
                        }
                        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                    }
                    return cached;
                }
                ;
                function multipleContexts(selector, contexts, results) {
                    var i = 0
                        , len = contexts.length;
                    for (; i < len; i++) {
                        Sizzle(selector, contexts[i], results);
                    }
                    return results;
                }
                function select(selector, context, results, seed, xml) {
                    var i, tokens, token, type, find, match = tokenize(selector), j = match.length;
                    if (!seed) {
                        if (match.length === 1) {
                            tokens = match[0] = match[0].slice(0);
                            if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && !xml && Expr.relative[tokens[1].type]) {
                                context = Expr.find["ID"](token.matches[0].replace(rbackslash, ""), context, xml)[0];
                                if (!context) {
                                    return results;
                                }
                                selector = selector.slice(tokens.shift().length);
                            }
                            for (i = matchExpr["POS"].test(selector) ? -1 : tokens.length - 1; i >= 0; i--) {
                                token = tokens[i];
                                if (Expr.relative[(type = token.type)]) {
                                    break;
                                }
                                if ((find = Expr.find[type])) {
                                    if ((seed = find(token.matches[0].replace(rbackslash, ""), rsibling.test(tokens[0].type) && context.parentNode || context, xml))) {
                                        tokens.splice(i, 1);
                                        selector = seed.length && tokens.join("");
                                        if (!selector) {
                                            push.apply(results, slice.call(seed, 0));
                                            return results;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    compile(selector, match)(seed, context, xml, results, rsibling.test(selector));
                    return results;
                }
                if (document.querySelectorAll) {
                    (function() {
                            var disconnectedMatch, oldSelect = select, rescape = /'|\\/g, rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g, rbuggyQSA = [":focus"], rbuggyMatches = [":active"], matches = docElem.matchesSelector || docElem.mozMatchesSelector || docElem.webkitMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector;
                            assert(function(div) {
                                div.innerHTML = "<select><option selected=''></option></select>";
                                if (!div.querySelectorAll("[selected]").length) {
                                    rbuggyQSA.push("\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)");
                                }
                                if (!div.querySelectorAll(":checked").length) {
                                    rbuggyQSA.push(":checked");
                                }
                            });
                            assert(function(div) {
                                div.innerHTML = "<p test=''></p>";
                                if (div.querySelectorAll("[test^='']").length) {
                                    rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\"\"|'')");
                                }
                                div.innerHTML = "<input type='hidden'/>";
                                if (!div.querySelectorAll(":enabled").length) {
                                    rbuggyQSA.push(":enabled", ":disabled");
                                }
                            });
                            rbuggyQSA = new RegExp(rbuggyQSA.join("|"));
                            select = function(selector, context, results, seed, xml) {
                                if (!seed && !xml && !rbuggyQSA.test(selector)) {
                                    var groups, i, old = true, nid = expando, newContext = context, newSelector = context.nodeType === 9 && selector;
                                    if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                                        groups = tokenize(selector);
                                        if ((old = context.getAttribute("id"))) {
                                            nid = old.replace(rescape, "\\$&");
                                        } else {
                                            context.setAttribute("id", nid);
                                        }
                                        nid = "[id='" + nid + "'] ";
                                        i = groups.length;
                                        while (i--) {
                                            groups[i] = nid + groups[i].join("");
                                        }
                                        newContext = rsibling.test(selector) && context.parentNode || context;
                                        newSelector = groups.join(",");
                                    }
                                    if (newSelector) {
                                        try {
                                            push.apply(results, slice.call(newContext.querySelectorAll(newSelector), 0));
                                            return results;
                                        } catch (qsaError) {} finally {
                                            if (!old) {
                                                context.removeAttribute("id");
                                            }
                                        }
                                    }
                                }
                                return oldSelect(selector, context, results, seed, xml);
                            }
                            ;
                            if (matches) {
                                assert(function(div) {
                                    disconnectedMatch = matches.call(div, "div");
                                    try {
                                        matches.call(div, "[test!='']:sizzle");
                                        rbuggyMatches.push("!=", pseudos);
                                    } catch (e) {}
                                });
                                rbuggyMatches = new RegExp(rbuggyMatches.join("|"));
                                Sizzle.matchesSelector = function(elem, expr) {
                                    expr = expr.replace(rattributeQuotes, "='$1']");
                                    if (!isXML(elem) && !rbuggyMatches.test(expr) && !rbuggyQSA.test(expr)) {
                                        try {
                                            var ret = matches.call(elem, expr);
                                            if (ret || disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                                                return ret;
                                            }
                                        } catch (e) {}
                                    }
                                    return Sizzle(expr, null, null, [elem]).length > 0;
                                }
                                ;
                            }
                        }
                    )();
                }
                Expr.pseudos["nth"] = Expr.pseudos["eq"];
                function setFilters() {}
                Expr.filters = setFilters.prototype = Expr.pseudos;
                Expr.setFilters = new setFilters();
                Sizzle.attr = jQuery.attr;
                jQuery.find = Sizzle;
                jQuery.expr = Sizzle.selectors;
                jQuery.expr[":"] = jQuery.expr.pseudos;
                jQuery.unique = Sizzle.uniqueSort;
                jQuery.text = Sizzle.getText;
                jQuery.isXMLDoc = Sizzle.isXML;
                jQuery.contains = Sizzle.contains;
            }
        )(window);
        var runtil = /Until$/
            , rparentsprev = /^(?:parents|prev(?:Until|All))/
            , isSimple = /^.[^:#\[\.,]*$/
            , rneedsContext = jQuery.expr.match.needsContext
            , guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
        jQuery.fn.extend({
            find: function(selector) {
                var i, l, length, n, r, ret, self = this;
                if (typeof selector !== "string") {
                    return jQuery(selector).filter(function() {
                        for (i = 0,
                                 l = self.length; i < l; i++) {
                            if (jQuery.contains(self[i], this)) {
                                return true;
                            }
                        }
                    });
                }
                ret = this.pushStack("", "find", selector);
                for (i = 0,
                         l = this.length; i < l; i++) {
                    length = ret.length;
                    jQuery.find(selector, this[i], ret);
                    if (i > 0) {
                        for (n = length; n < ret.length; n++) {
                            for (r = 0; r < length; r++) {
                                if (ret[r] === ret[n]) {
                                    ret.splice(n--, 1);
                                    break;
                                }
                            }
                        }
                    }
                }
                return ret;
            },
            has: function(target) {
                var i, targets = jQuery(target, this), len = targets.length;
                return this.filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(this, targets[i])) {
                            return true;
                        }
                    }
                });
            },
            not: function(selector) {
                return this.pushStack(winnow(this, selector, false), "not", selector);
            },
            filter: function(selector) {
                return this.pushStack(winnow(this, selector, true), "filter", selector);
            },
            is: function(selector) {
                return !!selector && (typeof selector === "string" ? rneedsContext.test(selector) ? jQuery(selector, this.context).index(this[0]) >= 0 : jQuery.filter(selector, this).length > 0 : this.filter(selector).length > 0);
            },
            closest: function(selectors, context) {
                var cur, i = 0, l = this.length, ret = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
                for (; i < l; i++) {
                    cur = this[i];
                    while (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {
                        if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                            ret.push(cur);
                            break;
                        }
                        cur = cur.parentNode;
                    }
                }
                ret = ret.length > 1 ? jQuery.unique(ret) : ret;
                return this.pushStack(ret, "closest", selectors);
            },
            index: function(elem) {
                if (!elem) {
                    return (this[0] && this[0].parentNode) ? this.prevAll().length : -1;
                }
                if (typeof elem === "string") {
                    return jQuery.inArray(this[0], jQuery(elem));
                }
                return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
            },
            add: function(selector, context) {
                var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector)
                    , all = jQuery.merge(this.get(), set);
                return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ? all : jQuery.unique(all));
            },
            addBack: function(selector) {
                return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
            }
        });
        jQuery.fn.andSelf = jQuery.fn.addBack;
        function isDisconnected(node) {
            return !node || !node.parentNode || node.parentNode.nodeType === 11;
        }
        function sibling(cur, dir) {
            do {
                cur = cur[dir];
            } while (cur && cur.nodeType !== 1);
            return cur;
        }
        jQuery.each({
            parent: function(elem) {
                var parent = elem.parentNode;
                return parent && parent.nodeType !== 11 ? parent : null;
            },
            parents: function(elem) {
                return jQuery.dir(elem, "parentNode");
            },
            parentsUntil: function(elem, i, until) {
                return jQuery.dir(elem, "parentNode", until);
            },
            next: function(elem) {
                return sibling(elem, "nextSibling");
            },
            prev: function(elem) {
                return sibling(elem, "previousSibling");
            },
            nextAll: function(elem) {
                return jQuery.dir(elem, "nextSibling");
            },
            prevAll: function(elem) {
                return jQuery.dir(elem, "previousSibling");
            },
            nextUntil: function(elem, i, until) {
                return jQuery.dir(elem, "nextSibling", until);
            },
            prevUntil: function(elem, i, until) {
                return jQuery.dir(elem, "previousSibling", until);
            },
            siblings: function(elem) {
                return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
            },
            children: function(elem) {
                return jQuery.sibling(elem.firstChild);
            },
            contents: function(elem) {
                return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
            }
        }, function(name, fn) {
            jQuery.fn[name] = function(until, selector) {
                var ret = jQuery.map(this, fn, until);
                if (!runtil.test(name)) {
                    selector = until;
                }
                if (selector && typeof selector === "string") {
                    ret = jQuery.filter(selector, ret);
                }
                ret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;
                if (this.length > 1 && rparentsprev.test(name)) {
                    ret = ret.reverse();
                }
                return this.pushStack(ret, name, core_slice.call(arguments).join(","));
            }
            ;
        });
        jQuery.extend({
            filter: function(expr, elems, not) {
                if (not) {
                    expr = ":not(" + expr + ")";
                }
                return elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : jQuery.find.matches(expr, elems);
            },
            dir: function(elem, dir, until) {
                var matched = []
                    , cur = elem[dir];
                while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                    if (cur.nodeType === 1) {
                        matched.push(cur);
                    }
                    cur = cur[dir];
                }
                return matched;
            },
            sibling: function(n, elem) {
                var r = [];
                for (; n; n = n.nextSibling) {
                    if (n.nodeType === 1 && n !== elem) {
                        r.push(n);
                    }
                }
                return r;
            }
        });
        function winnow(elements, qualifier, keep) {
            qualifier = qualifier || 0;
            if (jQuery.isFunction(qualifier)) {
                return jQuery.grep(elements, function(elem, i) {
                    var retVal = !!qualifier.call(elem, i, elem);
                    return retVal === keep;
                });
            } else if (qualifier.nodeType) {
                return jQuery.grep(elements, function(elem, i) {
                    return (elem === qualifier) === keep;
                });
            } else if (typeof qualifier === "string") {
                var filtered = jQuery.grep(elements, function(elem) {
                    return elem.nodeType === 1;
                });
                if (isSimple.test(qualifier)) {
                    return jQuery.filter(qualifier, filtered, !keep);
                } else {
                    qualifier = jQuery.filter(qualifier, filtered);
                }
            }
            return jQuery.grep(elements, function(elem, i) {
                return (jQuery.inArray(elem, qualifier) >= 0) === keep;
            });
        }
        function createSafeFragment(document) {
            var list = nodeNames.split("|")
                , safeFrag = document.createDocumentFragment();
            if (safeFrag.createElement) {
                while (list.length) {
                    safeFrag.createElement(list.pop());
                }
            }
            return safeFrag;
        }
        var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video"
            , rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g
            , rleadingWhitespace = /^\s+/
            , rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi
            , rtagName = /<([\w:]+)/
            , rtbody = /<tbody/i
            , rhtml = /<|&#?\w+;/
            , rnoInnerhtml = /<(?:script|style|link)/i
            , rnocache = /<(?:script|object|embed|option|style)/i
            , rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]","i")
            , rcheckableType = /^(?:checkbox|radio)$/
            , rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i
            , rscriptType = /\/(java|ecma)script/i
            , rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g
            , wrapMap = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            area: [1, "<map>", "</map>"],
            _default: [0, "", ""]
        }
            , safeFragment = createSafeFragment(document)
            , fragmentDiv = safeFragment.appendChild(document.createElement("div"));
        wrapMap.optgroup = wrapMap.option;
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        if (!jQuery.support.htmlSerialize) {
            wrapMap._default = [1, "X<div>", "</div>"];
        }
        jQuery.fn.extend({
            text: function(value) {
                return jQuery.access(this, function(value) {
                    return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
                }, null, value, arguments.length);
            },
            wrapAll: function(html) {
                if (jQuery.isFunction(html)) {
                    return this.each(function(i) {
                        jQuery(this).wrapAll(html.call(this, i));
                    });
                }
                if (this[0]) {
                    var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                    if (this[0].parentNode) {
                        wrap.insertBefore(this[0]);
                    }
                    wrap.map(function() {
                        var elem = this;
                        while (elem.firstChild && elem.firstChild.nodeType === 1) {
                            elem = elem.firstChild;
                        }
                        return elem;
                    }).append(this);
                }
                return this;
            },
            wrapInner: function(html) {
                if (jQuery.isFunction(html)) {
                    return this.each(function(i) {
                        jQuery(this).wrapInner(html.call(this, i));
                    });
                }
                return this.each(function() {
                    var self = jQuery(this)
                        , contents = self.contents();
                    if (contents.length) {
                        contents.wrapAll(html);
                    } else {
                        self.append(html);
                    }
                });
            },
            wrap: function(html) {
                var isFunction = jQuery.isFunction(html);
                return this.each(function(i) {
                    jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
                });
            },
            unwrap: function() {
                return this.parent().each(function() {
                    if (!jQuery.nodeName(this, "body")) {
                        jQuery(this).replaceWith(this.childNodes);
                    }
                }).end();
            },
            append: function() {
                return this.domManip(arguments, true, function(elem) {
                    if (this.nodeType === 1 || this.nodeType === 11) {
                        this.appendChild(elem);
                    }
                });
            },
            prepend: function() {
                return this.domManip(arguments, true, function(elem) {
                    if (this.nodeType === 1 || this.nodeType === 11) {
                        this.insertBefore(elem, this.firstChild);
                    }
                });
            },
            before: function() {
                if (!isDisconnected(this[0])) {
                    return this.domManip(arguments, false, function(elem) {
                        this.parentNode.insertBefore(elem, this);
                    });
                }
                if (arguments.length) {
                    var set = jQuery.clean(arguments);
                    return this.pushStack(jQuery.merge(set, this), "before", this.selector);
                }
            },
            after: function() {
                if (!isDisconnected(this[0])) {
                    return this.domManip(arguments, false, function(elem) {
                        this.parentNode.insertBefore(elem, this.nextSibling);
                    });
                }
                if (arguments.length) {
                    var set = jQuery.clean(arguments);
                    return this.pushStack(jQuery.merge(this, set), "after", this.selector);
                }
            },
            remove: function(selector, keepData) {
                var elem, i = 0;
                for (; (elem = this[i]) != null; i++) {
                    if (!selector || jQuery.filter(selector, [elem]).length) {
                        if (!keepData && elem.nodeType === 1) {
                            jQuery.cleanData(elem.getElementsByTagName("*"));
                            jQuery.cleanData([elem]);
                        }
                        if (elem.parentNode) {
                            elem.parentNode.removeChild(elem);
                        }
                    }
                }
                return this;
            },
            empty: function() {
                var elem, i = 0;
                for (; (elem = this[i]) != null; i++) {
                    if (elem.nodeType === 1) {
                        jQuery.cleanData(elem.getElementsByTagName("*"));
                    }
                    while (elem.firstChild) {
                        elem.removeChild(elem.firstChild);
                    }
                }
                return this;
            },
            clone: function(dataAndEvents, deepDataAndEvents) {
                dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
                return this.map(function() {
                    return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
                });
            },
            html: function(value) {
                return jQuery.access(this, function(value) {
                    var elem = this[0] || {}
                        , i = 0
                        , l = this.length;
                    if (value === undefined) {
                        return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
                    }
                    if (typeof value === "string" && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                        value = value.replace(rxhtmlTag, "<$1></$2>");
                        try {
                            for (; i < l; i++) {
                                elem = this[i] || {};
                                if (elem.nodeType === 1) {
                                    jQuery.cleanData(elem.getElementsByTagName("*"));
                                    elem.innerHTML = value;
                                }
                            }
                            elem = 0;
                        } catch (e) {}
                    }
                    if (elem) {
                        this.empty().append(value);
                    }
                }, null, value, arguments.length);
            },
            replaceWith: function(value) {
                if (!isDisconnected(this[0])) {
                    if (jQuery.isFunction(value)) {
                        return this.each(function(i) {
                            var self = jQuery(this)
                                , old = self.html();
                            self.replaceWith(value.call(this, i, old));
                        });
                    }
                    if (typeof value !== "string") {
                        value = jQuery(value).detach();
                    }
                    return this.each(function() {
                        var next = this.nextSibling
                            , parent = this.parentNode;
                        jQuery(this).remove();
                        if (next) {
                            jQuery(next).before(value);
                        } else {
                            jQuery(parent).append(value);
                        }
                    });
                }
                return this.length ? this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value) : this;
            },
            detach: function(selector) {
                return this.remove(selector, true);
            },
            domManip: function(args, table, callback) {
                args = [].concat.apply([], args);
                var results, first, fragment, iNoClone, i = 0, value = args[0], scripts = [], l = this.length;
                if (!jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test(value)) {
                    return this.each(function() {
                        jQuery(this).domManip(args, table, callback);
                    });
                }
                if (jQuery.isFunction(value)) {
                    return this.each(function(i) {
                        var self = jQuery(this);
                        args[0] = value.call(this, i, table ? self.html() : undefined);
                        self.domManip(args, table, callback);
                    });
                }
                if (this[0]) {
                    results = jQuery.buildFragment(args, this, scripts);
                    fragment = results.fragment;
                    first = fragment.firstChild;
                    if (fragment.childNodes.length === 1) {
                        fragment = first;
                    }
                    if (first) {
                        table = table && jQuery.nodeName(first, "tr");
                        for (iNoClone = results.cacheable || l - 1; i < l; i++) {
                            callback.call(table && jQuery.nodeName(this[i], "table") ? findOrAppend(this[i], "tbody") : this[i], i === iNoClone ? fragment : jQuery.clone(fragment, true, true));
                        }
                    }
                    fragment = first = null;
                    if (scripts.length) {
                        jQuery.each(scripts, function(i, elem) {
                            if (elem.src) {
                                if (jQuery.ajax) {
                                    jQuery.ajax({
                                        url: elem.src,
                                        type: "GET",
                                        dataType: "script",
                                        async: false,
                                        global: false,
                                        "throws": true
                                    });
                                } else {
                                    jQuery.error("no ajax");
                                }
                            } else {
                                jQuery.globalEval((elem.text || elem.textContent || elem.innerHTML || "").replace(rcleanScript, ""));
                            }
                            if (elem.parentNode) {
                                elem.parentNode.removeChild(elem);
                            }
                        });
                    }
                }
                return this;
            }
        });
        function findOrAppend(elem, tag) {
            return elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));
        }
        function cloneCopyEvent(src, dest) {
            if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
                return;
            }
            var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
            if (events) {
                delete curData.handle;
                curData.events = {};
                for (type in events) {
                    for (i = 0,
                             l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
            if (curData.data) {
                curData.data = jQuery.extend({}, curData.data);
            }
        }
        function cloneFixAttributes(src, dest) {
            var nodeName;
            if (dest.nodeType !== 1) {
                return;
            }
            if (dest.clearAttributes) {
                dest.clearAttributes();
            }
            if (dest.mergeAttributes) {
                dest.mergeAttributes(src);
            }
            nodeName = dest.nodeName.toLowerCase();
            if (nodeName === "object") {
                if (dest.parentNode) {
                    dest.outerHTML = src.outerHTML;
                }
                if (jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
                    dest.innerHTML = src.innerHTML;
                }
            } else if (nodeName === "input" && rcheckableType.test(src.type)) {
                dest.defaultChecked = dest.checked = src.checked;
                if (dest.value !== src.value) {
                    dest.value = src.value;
                }
            } else if (nodeName === "option") {
                dest.selected = src.defaultSelected;
            } else if (nodeName === "input" || nodeName === "textarea") {
                dest.defaultValue = src.defaultValue;
            } else if (nodeName === "script" && dest.text !== src.text) {
                dest.text = src.text;
            }
            dest.removeAttribute(jQuery.expando);
        }
        jQuery.buildFragment = function(args, context, scripts) {
            var fragment, cacheable, cachehit, first = args[0];
            context = context || document;
            context = !context.nodeType && context[0] || context;
            context = context.ownerDocument || context;
            if (args.length === 1 && typeof first === "string" && first.length < 512 && context === document && first.charAt(0) === "<" && !rnocache.test(first) && (jQuery.support.checkClone || !rchecked.test(first)) && (jQuery.support.html5Clone || !rnoshimcache.test(first))) {
                cacheable = true;
                fragment = jQuery.fragments[first];
                cachehit = fragment !== undefined;
            }
            if (!fragment) {
                fragment = context.createDocumentFragment();
                jQuery.clean(args, context, fragment, scripts);
                if (cacheable) {
                    jQuery.fragments[first] = cachehit && fragment;
                }
            }
            return {
                fragment: fragment,
                cacheable: cacheable
            };
        }
        ;
        jQuery.fragments = {};
        jQuery.each({
            appendTo: "append",
            prependTo: "prepend",
            insertBefore: "before",
            insertAfter: "after",
            replaceAll: "replaceWith"
        }, function(name, original) {
            jQuery.fn[name] = function(selector) {
                var elems, i = 0, ret = [], insert = jQuery(selector), l = insert.length, parent = this.length === 1 && this[0].parentNode;
                if ((parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1) {
                    insert[original](this[0]);
                    return this;
                } else {
                    for (; i < l; i++) {
                        elems = (i > 0 ? this.clone(true) : this).get();
                        jQuery(insert[i])[original](elems);
                        ret = ret.concat(elems);
                    }
                    return this.pushStack(ret, name, insert.selector);
                }
            }
            ;
        });
        function getAll(elem) {
            if (typeof elem.getElementsByTagName !== "undefined") {
                return elem.getElementsByTagName("*");
            } else if (typeof elem.querySelectorAll !== "undefined") {
                return elem.querySelectorAll("*");
            } else {
                return [];
            }
        }
        function fixDefaultChecked(elem) {
            if (rcheckableType.test(elem.type)) {
                elem.defaultChecked = elem.checked;
            }
        }
        jQuery.extend({
            clone: function(elem, dataAndEvents, deepDataAndEvents) {
                var srcElements, destElements, i, clone;
                if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
                    clone = elem.cloneNode(true);
                } else {
                    fragmentDiv.innerHTML = elem.outerHTML;
                    fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
                }
                if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                    cloneFixAttributes(elem, clone);
                    srcElements = getAll(elem);
                    destElements = getAll(clone);
                    for (i = 0; srcElements[i]; ++i) {
                        if (destElements[i]) {
                            cloneFixAttributes(srcElements[i], destElements[i]);
                        }
                    }
                }
                if (dataAndEvents) {
                    cloneCopyEvent(elem, clone);
                    if (deepDataAndEvents) {
                        srcElements = getAll(elem);
                        destElements = getAll(clone);
                        for (i = 0; srcElements[i]; ++i) {
                            cloneCopyEvent(srcElements[i], destElements[i]);
                        }
                    }
                }
                srcElements = destElements = null;
                return clone;
            },
            clean: function(elems, context, fragment, scripts) {
                var i, j, elem, tag, wrap, depth, div, hasBody, tbody, len, handleScript, jsTags, safe = context === document && safeFragment, ret = [];
                if (!context || typeof context.createDocumentFragment === "undefined") {
                    context = document;
                }
                for (i = 0; (elem = elems[i]) != null; i++) {
                    if (typeof elem === "number") {
                        elem += "";
                    }
                    if (!elem) {
                        continue;
                    }
                    if (typeof elem === "string") {
                        if (!rhtml.test(elem)) {
                            elem = context.createTextNode(elem);
                        } else {
                            safe = safe || createSafeFragment(context);
                            div = context.createElement("div");
                            safe.appendChild(div);
                            elem = elem.replace(rxhtmlTag, "<$1></$2>");
                            tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                            wrap = wrapMap[tag] || wrapMap._default;
                            depth = wrap[0];
                            div.innerHTML = wrap[1] + elem + wrap[2];
                            while (depth--) {
                                div = div.lastChild;
                            }
                            if (!jQuery.support.tbody) {
                                hasBody = rtbody.test(elem);
                                tbody = tag === "table" && !hasBody ? div.firstChild && div.firstChild.childNodes : wrap[1] === "<table>" && !hasBody ? div.childNodes : [];
                                for (j = tbody.length - 1; j >= 0; --j) {
                                    if (jQuery.nodeName(tbody[j], "tbody") && !tbody[j].childNodes.length) {
                                        tbody[j].parentNode.removeChild(tbody[j]);
                                    }
                                }
                            }
                            if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                                div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild);
                            }
                            elem = div.childNodes;
                            div.parentNode.removeChild(div);
                        }
                    }
                    if (elem.nodeType) {
                        ret.push(elem);
                    } else {
                        jQuery.merge(ret, elem);
                    }
                }
                if (div) {
                    elem = div = safe = null;
                }
                if (!jQuery.support.appendChecked) {
                    for (i = 0; (elem = ret[i]) != null; i++) {
                        if (jQuery.nodeName(elem, "input")) {
                            fixDefaultChecked(elem);
                        } else if (typeof elem.getElementsByTagName !== "undefined") {
                            jQuery.grep(elem.getElementsByTagName("input"), fixDefaultChecked);
                        }
                    }
                }
                if (fragment) {
                    handleScript = function(elem) {
                        if (!elem.type || rscriptType.test(elem.type)) {
                            return scripts ? scripts.push(elem.parentNode ? elem.parentNode.removeChild(elem) : elem) : fragment.appendChild(elem);
                        }
                    }
                    ;
                    for (i = 0; (elem = ret[i]) != null; i++) {
                        if (!(jQuery.nodeName(elem, "script") && handleScript(elem))) {
                            fragment.appendChild(elem);
                            if (typeof elem.getElementsByTagName !== "undefined") {
                                jsTags = jQuery.grep(jQuery.merge([], elem.getElementsByTagName("script")), handleScript);
                                ret.splice.apply(ret, [i + 1, 0].concat(jsTags));
                                i += jsTags.length;
                            }
                        }
                    }
                }
                return ret;
            },
            cleanData: function(elems, acceptData) {
                var data, id, elem, type, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = jQuery.support.deleteExpando, special = jQuery.event.special;
                for (; (elem = elems[i]) != null; i++) {
                    if (acceptData || jQuery.acceptData(elem)) {
                        id = elem[internalKey];
                        data = id && cache[id];
                        if (data) {
                            if (data.events) {
                                for (type in data.events) {
                                    if (special[type]) {
                                        jQuery.event.remove(elem, type);
                                    } else {
                                        jQuery.removeEvent(elem, type, data.handle);
                                    }
                                }
                            }
                            if (cache[id]) {
                                delete cache[id];
                                if (deleteExpando) {
                                    delete elem[internalKey];
                                } else if (elem.removeAttribute) {
                                    elem.removeAttribute(internalKey);
                                } else {
                                    elem[internalKey] = null;
                                }
                                jQuery.deletedIds.push(id);
                            }
                        }
                    }
                }
            }
        });
        (function() {
                var matched, browser;
                jQuery.uaMatch = function(ua) {
                    ua = ua.toLowerCase();
                    var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
                    return {
                        browser: match[1] || "",
                        version: match[2] || "0"
                    };
                }
                ;
                matched = jQuery.uaMatch(navigator.userAgent);
                browser = {};
                if (matched.browser) {
                    browser[matched.browser] = true;
                    browser.version = matched.version;
                }
                if (browser.chrome) {
                    browser.webkit = true;
                } else if (browser.webkit) {
                    browser.safari = true;
                }
                jQuery.browser = browser;
                jQuery.sub = function() {
                    function jQuerySub(selector, context) {
                        return new jQuerySub.fn.init(selector,context);
                    }
                    jQuery.extend(true, jQuerySub, this);
                    jQuerySub.superclass = this;
                    jQuerySub.fn = jQuerySub.prototype = this();
                    jQuerySub.fn.constructor = jQuerySub;
                    jQuerySub.sub = this.sub;
                    jQuerySub.fn.init = function init(selector, context) {
                        if (context && context instanceof jQuery && !(context instanceof jQuerySub)) {
                            context = jQuerySub(context);
                        }
                        return jQuery.fn.init.call(this, selector, context, rootjQuerySub);
                    }
                    ;
                    jQuerySub.fn.init.prototype = jQuerySub.fn;
                    var rootjQuerySub = jQuerySub(document);
                    return jQuerySub;
                }
                ;
            }
        )();
        var curCSS, iframe, iframeDoc, ralpha = /alpha\([^)]*\)/i, ropacity = /opacity=([^)]*)/, rposition = /^(top|right|bottom|left)$/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rmargin = /^margin/, rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$","i"), rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$","i"), rrelNum = new RegExp("^([-+])=(" + core_pnum + ")","i"), elemdisplay = {
            BODY: "block"
        }, cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        }, cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        }, cssExpand = ["Top", "Right", "Bottom", "Left"], cssPrefixes = ["Webkit", "O", "Moz", "ms"], eventsToggle = jQuery.fn.toggle;
        function vendorPropName(style, name) {
            if (name in style) {
                return name;
            }
            var capName = name.charAt(0).toUpperCase() + name.slice(1)
                , origName = name
                , i = cssPrefixes.length;
            while (i--) {
                name = cssPrefixes[i] + capName;
                if (name in style) {
                    return name;
                }
            }
            return origName;
        }
        function isHidden(elem, el) {
            elem = el || elem;
            return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
        }
        function showHide(elements, show) {
            var elem, display, values = [], index = 0, length = elements.length;
            for (; index < length; index++) {
                elem = elements[index];
                if (!elem.style) {
                    continue;
                }
                values[index] = jQuery._data(elem, "olddisplay");
                if (show) {
                    if (!values[index] && elem.style.display === "none") {
                        elem.style.display = "";
                    }
                    if (elem.style.display === "" && isHidden(elem)) {
                        values[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName));
                    }
                } else {
                    display = curCSS(elem, "display");
                    if (!values[index] && display !== "none") {
                        jQuery._data(elem, "olddisplay", display);
                    }
                }
            }
            for (index = 0; index < length; index++) {
                elem = elements[index];
                if (!elem.style) {
                    continue;
                }
                if (!show || elem.style.display === "none" || elem.style.display === "") {
                    elem.style.display = show ? values[index] || "" : "none";
                }
            }
            return elements;
        }
        jQuery.fn.extend({
            css: function(name, value) {
                return jQuery.access(this, function(elem, name, value) {
                    return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
                }, name, value, arguments.length > 1);
            },
            show: function() {
                return showHide(this, true);
            },
            hide: function() {
                return showHide(this);
            },
            toggle: function(state, fn2) {
                var bool = typeof state === "boolean";
                if (jQuery.isFunction(state) && jQuery.isFunction(fn2)) {
                    return eventsToggle.apply(this, arguments);
                }
                return this.each(function() {
                    if (bool ? state : isHidden(this)) {
                        jQuery(this).show();
                    } else {
                        jQuery(this).hide();
                    }
                });
            }
        });
        jQuery.extend({
            cssHooks: {
                opacity: {
                    get: function(elem, computed) {
                        if (computed) {
                            var ret = curCSS(elem, "opacity");
                            return ret === "" ? "1" : ret;
                        }
                    }
                }
            },
            cssNumber: {
                "fillOpacity": true,
                "fontWeight": true,
                "lineHeight": true,
                "opacity": true,
                "orphans": true,
                "widows": true,
                "zIndex": true,
                "zoom": true
            },
            cssProps: {
                "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
            },
            style: function(elem, name, value, extra) {
                if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                    return;
                }
                var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
                name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                if (value !== undefined) {
                    type = typeof value;
                    if (type === "string" && (ret = rrelNum.exec(value))) {
                        value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                        type = "number";
                    }
                    if (value == null || type === "number" && isNaN(value)) {
                        return;
                    }
                    if (type === "number" && !jQuery.cssNumber[origName]) {
                        value += "px";
                    }
                    if (!hooks || !("set"in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                        try {
                            style[name] = value;
                        } catch (e) {}
                    }
                } else {
                    if (hooks && "get"in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                        return ret;
                    }
                    return style[name];
                }
            },
            css: function(elem, name, numeric, extra) {
                var val, num, hooks, origName = jQuery.camelCase(name);
                name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                if (hooks && "get"in hooks) {
                    val = hooks.get(elem, true, extra);
                }
                if (val === undefined) {
                    val = curCSS(elem, name);
                }
                if (val === "normal" && name in cssNormalTransform) {
                    val = cssNormalTransform[name];
                }
                if (numeric || extra !== undefined) {
                    num = parseFloat(val);
                    return numeric || jQuery.isNumeric(num) ? num || 0 : val;
                }
                return val;
            },
            swap: function(elem, options, callback) {
                var ret, name, old = {};
                for (name in options) {
                    old[name] = elem.style[name];
                    elem.style[name] = options[name];
                }
                ret = callback.call(elem);
                for (name in options) {
                    elem.style[name] = old[name];
                }
                return ret;
            }
        });
        if (window.getComputedStyle) {
            curCSS = function(elem, name) {
                var ret, width, minWidth, maxWidth, computed = window.getComputedStyle(elem, null), style = elem.style;
                if (computed) {
                    ret = computed.getPropertyValue(name) || computed[name];
                    if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                        ret = jQuery.style(elem, name);
                    }
                    if (rnumnonpx.test(ret) && rmargin.test(name)) {
                        width = style.width;
                        minWidth = style.minWidth;
                        maxWidth = style.maxWidth;
                        style.minWidth = style.maxWidth = style.width = ret;
                        ret = computed.width;
                        style.width = width;
                        style.minWidth = minWidth;
                        style.maxWidth = maxWidth;
                    }
                }
                return ret;
            }
            ;
        } else if (document.documentElement.currentStyle) {
            curCSS = function(elem, name) {
                var left, rsLeft, ret = elem.currentStyle && elem.currentStyle[name], style = elem.style;
                if (ret == null && style && style[name]) {
                    ret = style[name];
                }
                if (rnumnonpx.test(ret) && !rposition.test(name)) {
                    left = style.left;
                    rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;
                    if (rsLeft) {
                        elem.runtimeStyle.left = elem.currentStyle.left;
                    }
                    style.left = name === "fontSize" ? "1em" : ret;
                    ret = style.pixelLeft + "px";
                    style.left = left;
                    if (rsLeft) {
                        elem.runtimeStyle.left = rsLeft;
                    }
                }
                return ret === "" ? "auto" : ret;
            }
            ;
        }
        function setPositiveNumber(elem, value, subtract) {
            var matches = rnumsplit.exec(value);
            return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
        }
        function augmentWidthOrHeight(elem, name, extra, isBorderBox) {
            var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0
                , val = 0;
            for (; i < 4; i += 2) {
                if (extra === "margin") {
                    val += jQuery.css(elem, extra + cssExpand[i], true);
                }
                if (isBorderBox) {
                    if (extra === "content") {
                        val -= parseFloat(curCSS(elem, "padding" + cssExpand[i])) || 0;
                    }
                    if (extra !== "margin") {
                        val -= parseFloat(curCSS(elem, "border" + cssExpand[i] + "Width")) || 0;
                    }
                } else {
                    val += parseFloat(curCSS(elem, "padding" + cssExpand[i])) || 0;
                    if (extra !== "padding") {
                        val += parseFloat(curCSS(elem, "border" + cssExpand[i] + "Width")) || 0;
                    }
                }
            }
            return val;
        }
        function getWidthOrHeight(elem, name, extra) {
            var val = name === "width" ? elem.offsetWidth : elem.offsetHeight
                , valueIsBorderBox = true
                , isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing") === "border-box";
            if (val <= 0 || val == null) {
                val = curCSS(elem, name);
                if (val < 0 || val == null) {
                    val = elem.style[name];
                }
                if (rnumnonpx.test(val)) {
                    return val;
                }
                valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
                val = parseFloat(val) || 0;
            }
            return (val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox)) + "px";
        }
        function css_defaultDisplay(nodeName) {
            if (elemdisplay[nodeName]) {
                return elemdisplay[nodeName];
            }
            var elem = jQuery("<" + nodeName + ">").appendTo(document.body)
                , display = elem.css("display");
            elem.remove();
            if (display === "none" || display === "") {
                iframe = document.body.appendChild(iframe || jQuery.extend(document.createElement("iframe"), {
                    frameBorder: 0,
                    width: 0,
                    height: 0
                }));
                if (!iframeDoc || !iframe.createElement) {
                    iframeDoc = (iframe.contentWindow || iframe.contentDocument).document;
                    iframeDoc.write("<!doctype html><html><body>");
                    iframeDoc.close();
                }
                elem = iframeDoc.body.appendChild(iframeDoc.createElement(nodeName));
                display = curCSS(elem, "display");
                document.body.removeChild(iframe);
            }
            elemdisplay[nodeName] = display;
            return display;
        }
        jQuery.each(["height", "width"], function(i, name) {
            jQuery.cssHooks[name] = {
                get: function(elem, computed, extra) {
                    if (computed) {
                        if (elem.offsetWidth === 0 && rdisplayswap.test(curCSS(elem, "display"))) {
                            return jQuery.swap(elem, cssShow, function() {
                                return getWidthOrHeight(elem, name, extra);
                            });
                        } else {
                            return getWidthOrHeight(elem, name, extra);
                        }
                    }
                },
                set: function(elem, value, extra) {
                    return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, "boxSizing") === "border-box") : 0);
                }
            };
        });
        if (!jQuery.support.opacity) {
            jQuery.cssHooks.opacity = {
                get: function(elem, computed) {
                    return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? (0.01 * parseFloat(RegExp.$1)) + "" : computed ? "1" : "";
                },
                set: function(elem, value) {
                    var style = elem.style
                        , currentStyle = elem.currentStyle
                        , opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : ""
                        , filter = currentStyle && currentStyle.filter || style.filter || "";
                    style.zoom = 1;
                    if (value >= 1 && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {
                        style.removeAttribute("filter");
                        if (currentStyle && !currentStyle.filter) {
                            return;
                        }
                    }
                    style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
                }
            };
        }
        jQuery(function() {
            if (!jQuery.support.reliableMarginRight) {
                jQuery.cssHooks.marginRight = {
                    get: function(elem, computed) {
                        return jQuery.swap(elem, {
                            "display": "inline-block"
                        }, function() {
                            if (computed) {
                                return curCSS(elem, "marginRight");
                            }
                        });
                    }
                };
            }
            if (!jQuery.support.pixelPosition && jQuery.fn.position) {
                jQuery.each(["top", "left"], function(i, prop) {
                    jQuery.cssHooks[prop] = {
                        get: function(elem, computed) {
                            if (computed) {
                                var ret = curCSS(elem, prop);
                                return rnumnonpx.test(ret) ? jQuery(elem).position()[prop] + "px" : ret;
                            }
                        }
                    };
                });
            }
        });
        if (jQuery.expr && jQuery.expr.filters) {
            jQuery.expr.filters.hidden = function(elem) {
                return (elem.offsetWidth === 0 && elem.offsetHeight === 0) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS(elem, "display")) === "none");
            }
            ;
            jQuery.expr.filters.visible = function(elem) {
                return !jQuery.expr.filters.hidden(elem);
            }
            ;
        }
        jQuery.each({
            margin: "",
            padding: "",
            border: "Width"
        }, function(prefix, suffix) {
            jQuery.cssHooks[prefix + suffix] = {
                expand: function(value) {
                    var i, parts = typeof value === "string" ? value.split(" ") : [value], expanded = {};
                    for (i = 0; i < 4; i++) {
                        expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                    }
                    return expanded;
                }
            };
            if (!rmargin.test(prefix)) {
                jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
            }
        });
        var r20 = /%20/g
            , rbracket = /\[\]$/
            , rCRLF = /\r?\n/g
            , rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i
            , rselectTextarea = /^(?:select|textarea)/i;
        jQuery.fn.extend({
            serialize: function() {
                return jQuery.param(this.serializeArray());
            },
            serializeArray: function() {
                return this.map(function() {
                    return this.elements ? jQuery.makeArray(this.elements) : this;
                }).filter(function() {
                    return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type));
                }).map(function(i, elem) {
                    var val = jQuery(this).val();
                    return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val, i) {
                        return {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        };
                    }) : {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }).get();
            }
        });
        jQuery.param = function(a, traditional) {
            var prefix, s = [], add = function(key, value) {
                value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
            };
            if (traditional === undefined) {
                traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
            }
            if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
                jQuery.each(a, function() {
                    add(this.name, this.value);
                });
            } else {
                for (prefix in a) {
                    buildParams(prefix, a[prefix], traditional, add);
                }
            }
            return s.join("&").replace(r20, "+");
        }
        ;
        function buildParams(prefix, obj, traditional, add) {
            var name;
            if (jQuery.isArray(obj)) {
                jQuery.each(obj, function(i, v) {
                    if (traditional || rbracket.test(prefix)) {
                        add(prefix, v);
                    } else {
                        buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                    }
                });
            } else if (!traditional && jQuery.type(obj) === "object") {
                for (name in obj) {
                    buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
                }
            } else {
                add(prefix, obj);
            }
        }
        var ajaxLocParts, ajaxLocation, rhash = /#.*$/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rquery = /\?/, rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, rts = /([?&])_=[^&]*/, rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, _load = jQuery.fn.load, prefilters = {}, transports = {}, allTypes = ["*/"] + ["*"];
        try {
            ajaxLocation = location.href;
        } catch (e) {
            ajaxLocation = document.createElement("a");
            ajaxLocation.href = "";
            ajaxLocation = ajaxLocation.href;
        }
        ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
        function addToPrefiltersOrTransports(structure) {
            return function(dataTypeExpression, func) {
                if (typeof dataTypeExpression !== "string") {
                    func = dataTypeExpression;
                    dataTypeExpression = "*";
                }
                var dataType, list, placeBefore, dataTypes = dataTypeExpression.toLowerCase().split(core_rspace), i = 0, length = dataTypes.length;
                if (jQuery.isFunction(func)) {
                    for (; i < length; i++) {
                        dataType = dataTypes[i];
                        placeBefore = /^\+/.test(dataType);
                        if (placeBefore) {
                            dataType = dataType.substr(1) || "*";
                        }
                        list = structure[dataType] = structure[dataType] || [];
                        list[placeBefore ? "unshift" : "push"](func);
                    }
                }
            }
                ;
        }
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, dataType, inspected) {
            dataType = dataType || options.dataTypes[0];
            inspected = inspected || {};
            inspected[dataType] = true;
            var selection, list = structure[dataType], i = 0, length = list ? list.length : 0, executeOnly = (structure === prefilters);
            for (; i < length && (executeOnly || !selection); i++) {
                selection = list[i](options, originalOptions, jqXHR);
                if (typeof selection === "string") {
                    if (!executeOnly || inspected[selection]) {
                        selection = undefined;
                    } else {
                        options.dataTypes.unshift(selection);
                        selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, selection, inspected);
                    }
                }
            }
            if ((executeOnly || !selection) && !inspected["*"]) {
                selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, "*", inspected);
            }
            return selection;
        }
        function ajaxExtend(target, src) {
            var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
            for (key in src) {
                if (src[key] !== undefined) {
                    (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
                }
            }
            if (deep) {
                jQuery.extend(true, target, deep);
            }
        }
        jQuery.fn.load = function(url, params, callback) {
            if (typeof url !== "string" && _load) {
                return _load.apply(this, arguments);
            }
            if (!this.length) {
                return this;
            }
            var selector, type, response, self = this, off = url.indexOf(" ");
            if (off >= 0) {
                selector = url.slice(off, url.length);
                url = url.slice(0, off);
            }
            if (jQuery.isFunction(params)) {
                callback = params;
                params = undefined;
            } else if (params && typeof params === "object") {
                type = "POST";
            }
            jQuery.ajax({
                url: url,
                type: type,
                dataType: "html",
                data: params,
                complete: function(jqXHR, status) {
                    if (callback) {
                        self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
                    }
                }
            }).done(function(responseText) {
                response = arguments;
                self.html(selector ? jQuery("<div>").append(responseText.replace(rscript, "")).find(selector) : responseText);
            });
            return this;
        }
        ;
        jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(i, o) {
            jQuery.fn[o] = function(f) {
                return this.on(o, f);
            }
            ;
        });
        jQuery.each(["get", "post"], function(i, method) {
            jQuery[method] = function(url, data, callback, type) {
                if (jQuery.isFunction(data)) {
                    type = type || callback;
                    callback = data;
                    data = undefined;
                }
                return jQuery.ajax({
                    type: method,
                    url: url,
                    data: data,
                    success: callback,
                    dataType: type
                });
            }
            ;
        });
        jQuery.extend({
            getScript: function(url, callback) {
                return jQuery.get(url, undefined, callback, "script");
            },
            getJSON: function(url, data, callback) {
                return jQuery.get(url, data, callback, "json");
            },
            ajaxSetup: function(target, settings) {
                if (settings) {
                    ajaxExtend(target, jQuery.ajaxSettings);
                } else {
                    settings = target;
                    target = jQuery.ajaxSettings;
                }
                ajaxExtend(target, settings);
                return target;
            },
            ajaxSettings: {
                url: ajaxLocation,
                isLocal: rlocalProtocol.test(ajaxLocParts[1]),
                global: true,
                type: "GET",
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                processData: true,
                async: true,
                accepts: {
                    xml: "application/xml, text/xml",
                    html: "text/html",
                    text: "text/plain",
                    json: "application/json, text/javascript",
                    "*": allTypes
                },
                contents: {
                    xml: /xml/,
                    html: /html/,
                    json: /json/
                },
                responseFields: {
                    xml: "responseXML",
                    text: "responseText"
                },
                converters: {
                    "* text": window.String,
                    "text html": true,
                    "text json": jQuery.parseJSON,
                    "text xml": jQuery.parseXML
                },
                flatOptions: {
                    context: true,
                    url: true
                }
            },
            ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
            ajaxTransport: addToPrefiltersOrTransports(transports),
            ajax: function(url, options) {
                if (typeof url === "object") {
                    options = url;
                    url = undefined;
                }
                options = options || {};
                var ifModifiedKey, responseHeadersString, responseHeaders, transport, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = callbackContext !== s && (callbackContext.nodeType || callbackContext instanceof jQuery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                    readyState: 0,
                    setRequestHeader: function(name, value) {
                        if (!state) {
                            var lname = name.toLowerCase();
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },
                    getResponseHeader: function(key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while ((match = rheaders.exec(responseHeadersString))) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match === undefined ? null : match;
                    },
                    overrideMimeType: function(type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },
                    abort: function(statusText) {
                        statusText = statusText || strAbort;
                        if (transport) {
                            transport.abort(statusText);
                        }
                        done(0, statusText);
                        return this;
                    }
                };
                function done(status, nativeStatusText, responses, headers) {
                    var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                    if (state === 2) {
                        return;
                    }
                    state = 2;
                    if (timeoutTimer) {
                        clearTimeout(timeoutTimer);
                    }
                    transport = undefined;
                    responseHeadersString = headers || "";
                    jqXHR.readyState = status > 0 ? 4 : 0;
                    if (responses) {
                        response = ajaxHandleResponses(s, jqXHR, responses);
                    }
                    if (status >= 200 && status < 300 || status === 304) {
                        if (s.ifModified) {
                            modified = jqXHR.getResponseHeader("Last-Modified");
                            if (modified) {
                                jQuery.lastModified[ifModifiedKey] = modified;
                            }
                            modified = jqXHR.getResponseHeader("Etag");
                            if (modified) {
                                jQuery.etag[ifModifiedKey] = modified;
                            }
                        }
                        if (status === 304) {
                            statusText = "notmodified";
                            isSuccess = true;
                        } else {
                            isSuccess = ajaxConvert(s, response);
                            statusText = isSuccess.state;
                            success = isSuccess.data;
                            error = isSuccess.error;
                            isSuccess = !error;
                        }
                    } else {
                        error = statusText;
                        if (!statusText || status) {
                            statusText = "error";
                            if (status < 0) {
                                status = 0;
                            }
                        }
                    }
                    jqXHR.status = status;
                    jqXHR.statusText = (nativeStatusText || statusText) + "";
                    if (isSuccess) {
                        deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                    } else {
                        deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                    }
                    jqXHR.statusCode(statusCode);
                    statusCode = undefined;
                    if (fireGlobals) {
                        globalEventContext.trigger("ajax" + (isSuccess ? "Success" : "Error"), [jqXHR, s, isSuccess ? success : error]);
                    }
                    completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                    if (fireGlobals) {
                        globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                        if (!(--jQuery.active)) {
                            jQuery.event.trigger("ajaxStop");
                        }
                    }
                }
                deferred.promise(jqXHR);
                jqXHR.success = jqXHR.done;
                jqXHR.error = jqXHR.fail;
                jqXHR.complete = completeDeferred.add;
                jqXHR.statusCode = function(map) {
                    if (map) {
                        var tmp;
                        if (state < 2) {
                            for (tmp in map) {
                                statusCode[tmp] = [statusCode[tmp], map[tmp]];
                            }
                        } else {
                            tmp = map[jqXHR.status];
                            jqXHR.always(tmp);
                        }
                    }
                    return this;
                }
                ;
                s.url = ((url || s.url) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
                s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(core_rspace);
                if (s.crossDomain == null) {
                    parts = rurl.exec(s.url.toLowerCase());
                    s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))));
                }
                if (s.data && s.processData && typeof s.data !== "string") {
                    s.data = jQuery.param(s.data, s.traditional);
                }
                inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
                if (state === 2) {
                    return jqXHR;
                }
                fireGlobals = s.global;
                s.type = s.type.toUpperCase();
                s.hasContent = !rnoContent.test(s.type);
                if (fireGlobals && jQuery.active++ === 0) {
                    jQuery.event.trigger("ajaxStart");
                }
                if (!s.hasContent) {
                    if (s.data) {
                        s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
                        delete s.data;
                    }
                    ifModifiedKey = s.url;
                    if (s.cache === false) {
                        var ts = jQuery.now()
                            , ret = s.url.replace(rts, "$1_=" + ts);
                        s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
                    }
                }
                if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                    jqXHR.setRequestHeader("Content-Type", s.contentType);
                }
                if (s.ifModified) {
                    ifModifiedKey = ifModifiedKey || s.url;
                    if (jQuery.lastModified[ifModifiedKey]) {
                        jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[ifModifiedKey]);
                    }
                    if (jQuery.etag[ifModifiedKey]) {
                        jqXHR.setRequestHeader("If-None-Match", jQuery.etag[ifModifiedKey]);
                    }
                }
                jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
                for (i in s.headers) {
                    jqXHR.setRequestHeader(i, s.headers[i]);
                }
                if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                    return jqXHR.abort();
                }
                strAbort = "abort";
                for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                    jqXHR[i](s[i]);
                }
                transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
                if (!transport) {
                    done(-1, "No Transport");
                } else {
                    jqXHR.readyState = 1;
                    if (fireGlobals) {
                        globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                    }
                    if (s.async && s.timeout > 0) {
                        timeoutTimer = setTimeout(function() {
                            jqXHR.abort("timeout");
                        }, s.timeout);
                    }
                    try {
                        state = 1;
                        transport.send(requestHeaders, done);
                    } catch (e) {
                        if (state < 2) {
                            done(-1, e);
                        } else {
                            throw e;
                        }
                    }
                }
                return jqXHR;
            },
            active: 0,
            lastModified: {},
            etag: {}
        });
        function ajaxHandleResponses(s, jqXHR, responses) {
            var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes, responseFields = s.responseFields;
            for (type in responseFields) {
                if (type in responses) {
                    jqXHR[responseFields[type]] = responses[type];
                }
            }
            while (dataTypes[0] === "*") {
                dataTypes.shift();
                if (ct === undefined) {
                    ct = s.mimeType || jqXHR.getResponseHeader("content-type");
                }
            }
            if (ct) {
                for (type in contents) {
                    if (contents[type] && contents[type].test(ct)) {
                        dataTypes.unshift(type);
                        break;
                    }
                }
            }
            if (dataTypes[0]in responses) {
                finalDataType = dataTypes[0];
            } else {
                for (type in responses) {
                    if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                        finalDataType = type;
                        break;
                    }
                    if (!firstDataType) {
                        firstDataType = type;
                    }
                }
                finalDataType = finalDataType || firstDataType;
            }
            if (finalDataType) {
                if (finalDataType !== dataTypes[0]) {
                    dataTypes.unshift(finalDataType);
                }
                return responses[finalDataType];
            }
        }
        function ajaxConvert(s, response) {
            var conv, conv2, current, tmp, dataTypes = s.dataTypes.slice(), prev = dataTypes[0], converters = {}, i = 0;
            if (s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            if (dataTypes[1]) {
                for (conv in s.converters) {
                    converters[conv.toLowerCase()] = s.converters[conv];
                }
            }
            for (; (current = dataTypes[++i]); ) {
                if (current !== "*") {
                    if (prev !== "*" && prev !== current) {
                        conv = converters[prev + " " + current] || converters["* " + current];
                        if (!conv) {
                            for (conv2 in converters) {
                                tmp = conv2.split(" ");
                                if (tmp[1] === current) {
                                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                    if (conv) {
                                        if (conv === true) {
                                            conv = converters[conv2];
                                        } else if (converters[conv2] !== true) {
                                            current = tmp[0];
                                            dataTypes.splice(i--, 0, current);
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        if (conv !== true) {
                            if (conv && s["throws"]) {
                                response = conv(response);
                            } else {
                                try {
                                    response = conv(response);
                                } catch (e) {
                                    return {
                                        state: "parsererror",
                                        error: conv ? e : "No conversion from " + prev + " to " + current
                                    };
                                }
                            }
                        }
                    }
                    prev = current;
                }
            }
            return {
                state: "success",
                data: response
            };
        }
        var oldCallbacks = []
            , rquestion = /\?/
            , rjsonp = /(=)\?(?=&|$)|\?\?/
            , nonce = jQuery.now();
        jQuery.ajaxSetup({
            jsonp: "callback",
            jsonpCallback: function() {
                var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
                this[callback] = true;
                return callback;
            }
        });
        jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
            var callbackName, overwritten, responseContainer, data = s.data, url = s.url, hasCallback = s.jsonp !== false, replaceInUrl = hasCallback && rjsonp.test(url), replaceInData = hasCallback && !replaceInUrl && typeof data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(data);
            if (s.dataTypes[0] === "jsonp" || replaceInUrl || replaceInData) {
                callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
                overwritten = window[callbackName];
                if (replaceInUrl) {
                    s.url = url.replace(rjsonp, "$1" + callbackName);
                } else if (replaceInData) {
                    s.data = data.replace(rjsonp, "$1" + callbackName);
                } else if (hasCallback) {
                    s.url += (rquestion.test(url) ? "&" : "?") + s.jsonp + "=" + callbackName;
                }
                s.converters["script json"] = function() {
                    if (!responseContainer) {
                        jQuery.error(callbackName + " was not called");
                    }
                    return responseContainer[0];
                }
                ;
                s.dataTypes[0] = "json";
                window[callbackName] = function() {
                    responseContainer = arguments;
                }
                ;
                jqXHR.always(function() {
                    window[callbackName] = overwritten;
                    if (s[callbackName]) {
                        s.jsonpCallback = originalSettings.jsonpCallback;
                        oldCallbacks.push(callbackName);
                    }
                    if (responseContainer && jQuery.isFunction(overwritten)) {
                        overwritten(responseContainer[0]);
                    }
                    responseContainer = overwritten = undefined;
                });
                return "script";
            }
        });
        jQuery.ajaxSetup({
            accepts: {
                script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
            },
            contents: {
                script: /javascript|ecmascript/
            },
            converters: {
                "text script": function(text) {
                    jQuery.globalEval(text);
                    return text;
                }
            }
        });
        jQuery.ajaxPrefilter("script", function(s) {
            if (s.cache === undefined) {
                s.cache = false;
            }
            if (s.crossDomain) {
                s.type = "GET";
                s.global = false;
            }
        });
        jQuery.ajaxTransport("script", function(s) {
            if (s.crossDomain) {
                var script, head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;
                return {
                    send: function(_, callback) {
                        script = document.createElement("script");
                        script.async = "async";
                        if (s.scriptCharset) {
                            script.charset = s.scriptCharset;
                        }
                        script.src = s.url;
                        script.onload = script.onreadystatechange = function(_, isAbort) {
                            if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                                script.onload = script.onreadystatechange = null;
                                if (head && script.parentNode) {
                                    head.removeChild(script);
                                }
                                script = undefined;
                                if (!isAbort) {
                                    callback(200, "success");
                                }
                            }
                        }
                        ;
                        head.insertBefore(script, head.firstChild);
                    },
                    abort: function() {
                        if (script) {
                            script.onload(0, 1);
                        }
                    }
                };
            }
        });
        var xhrCallbacks, xhrOnUnloadAbort = window.ActiveXObject ? function() {
                for (var key in xhrCallbacks) {
                    xhrCallbacks[key](0, 1);
                }
            }
            : false, xhrId = 0;
        function createStandardXHR() {
            try {
                return new window.XMLHttpRequest();
            } catch (e) {}
        }
        function createActiveXHR() {
            try {
                return new window.ActiveXObject("Microsoft.XMLHTTP");
            } catch (e) {}
        }
        jQuery.ajaxSettings.xhr = window.ActiveXObject ? function() {
                return !this.isLocal && createStandardXHR() || createActiveXHR();
            }
            : createStandardXHR;
        (function(xhr) {
                jQuery.extend(jQuery.support, {
                    ajax: !!xhr,
                    cors: !!xhr && ("withCredentials"in xhr)
                });
            }
        )(jQuery.ajaxSettings.xhr());
        if (jQuery.support.ajax) {
            jQuery.ajaxTransport(function(s) {
                if (!s.crossDomain || jQuery.support.cors) {
                    var callback;
                    return {
                        send: function(headers, complete) {
                            var handle, i, xhr = s.xhr();
                            if (s.username) {
                                xhr.open(s.type, s.url, s.async, s.username, s.password);
                            } else {
                                xhr.open(s.type, s.url, s.async);
                            }
                            if (s.xhrFields) {
                                for (i in s.xhrFields) {
                                    xhr[i] = s.xhrFields[i];
                                }
                            }
                            if (s.mimeType && xhr.overrideMimeType) {
                                xhr.overrideMimeType(s.mimeType);
                            }
                            if (!s.crossDomain && !headers["X-Requested-With"]) {
                                headers["X-Requested-With"] = "XMLHttpRequest";
                            }
                            try {
                                for (i in headers) {
                                    xhr.setRequestHeader(i, headers[i]);
                                }
                            } catch (_) {}
                            xhr.send((s.hasContent && s.data) || null);
                            callback = function(_, isAbort) {
                                var status, statusText, responseHeaders, responses, xml;
                                try {
                                    if (callback && (isAbort || xhr.readyState === 4)) {
                                        callback = undefined;
                                        if (handle) {
                                            xhr.onreadystatechange = jQuery.noop;
                                            if (xhrOnUnloadAbort) {
                                                delete xhrCallbacks[handle];
                                            }
                                        }
                                        if (isAbort) {
                                            if (xhr.readyState !== 4) {
                                                xhr.abort();
                                            }
                                        } else {
                                            status = xhr.status;
                                            responseHeaders = xhr.getAllResponseHeaders();
                                            responses = {};
                                            xml = xhr.responseXML;
                                            if (xml && xml.documentElement) {
                                                responses.xml = xml;
                                            }
                                            try {
                                                responses.text = xhr.responseText;
                                            } catch (e) {}
                                            try {
                                                statusText = xhr.statusText;
                                            } catch (e) {
                                                statusText = "";
                                            }
                                            if (!status && s.isLocal && !s.crossDomain) {
                                                status = responses.text ? 200 : 404;
                                            } else if (status === 1223) {
                                                status = 204;
                                            }
                                        }
                                    }
                                } catch (firefoxAccessException) {
                                    if (!isAbort) {
                                        complete(-1, firefoxAccessException);
                                    }
                                }
                                if (responses) {
                                    complete(status, statusText, responses, responseHeaders);
                                }
                            }
                            ;
                            if (!s.async) {
                                callback();
                            } else if (xhr.readyState === 4) {
                                setTimeout(callback, 0);
                            } else {
                                handle = ++xhrId;
                                if (xhrOnUnloadAbort) {
                                    if (!xhrCallbacks) {
                                        xhrCallbacks = {};
                                        jQuery(window).unload(xhrOnUnloadAbort);
                                    }
                                    xhrCallbacks[handle] = callback;
                                }
                                xhr.onreadystatechange = callback;
                            }
                        },
                        abort: function() {
                            if (callback) {
                                callback(0, 1);
                            }
                        }
                    };
                }
            });
        }
        var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$","i"), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
            "*": [function(prop, value) {
                var end, unit, tween = this.createTween(prop, value), parts = rfxnum.exec(value), target = tween.cur(), start = +target || 0, scale = 1, maxIterations = 20;
                if (parts) {
                    end = +parts[2];
                    unit = parts[3] || (jQuery.cssNumber[prop] ? "" : "px");
                    if (unit !== "px" && start) {
                        start = jQuery.css(tween.elem, prop, true) || end || 1;
                        do {
                            scale = scale || ".5";
                            start = start / scale;
                            jQuery.style(tween.elem, prop, start + unit);
                        } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
                    }
                    tween.unit = unit;
                    tween.start = start;
                    tween.end = parts[1] ? start + (parts[1] + 1) * end : end;
                }
                return tween;
            }
            ]
        };
        function createFxNow() {
            setTimeout(function() {
                fxNow = undefined;
            }, 0);
            return (fxNow = jQuery.now());
        }
        function createTweens(animation, props) {
            jQuery.each(props, function(prop, value) {
                var collection = (tweeners[prop] || []).concat(tweeners["*"])
                    , index = 0
                    , length = collection.length;
                for (; index < length; index++) {
                    if (collection[index].call(animation, prop, value)) {
                        return;
                    }
                }
            });
        }
        function Animation(elem, properties, options) {
            var result, index = 0, tweenerIndex = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
                delete tick.elem;
            }), tick = function() {
                var currentTime = fxNow || createFxNow()
                    , remaining = Math.max(0, animation.startTime + animation.duration - currentTime)
                    , temp = remaining / animation.duration || 0
                    , percent = 1 - temp
                    , index = 0
                    , length = animation.tweens.length;
                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }
                deferred.notifyWith(elem, [animation, percent, remaining]);
                if (percent < 1 && length) {
                    return remaining;
                } else {
                    deferred.resolveWith(elem, [animation]);
                    return false;
                }
            }, animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {}
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function(prop, end, easing) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function(gotoEnd) {
                    var index = 0
                        , length = gotoEnd ? animation.tweens.length : 0;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }
                    if (gotoEnd) {
                        deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                        deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                }
            }), props = animation.props;
            propFilter(props, animation.opts.specialEasing);
            for (; index < length; index++) {
                result = animationPrefilters[index].call(animation, elem, props, animation.opts);
                if (result) {
                    return result;
                }
            }
            createTweens(animation, props);
            if (jQuery.isFunction(animation.opts.start)) {
                animation.opts.start.call(elem, animation);
            }
            jQuery.fx.timer(jQuery.extend(tick, {
                anim: animation,
                queue: animation.opts.queue,
                elem: elem
            }));
            return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        }
        function propFilter(props, specialEasing) {
            var index, name, easing, value, hooks;
            for (index in props) {
                name = jQuery.camelCase(index);
                easing = specialEasing[name];
                value = props[index];
                if (jQuery.isArray(value)) {
                    easing = value[1];
                    value = props[index] = value[0];
                }
                if (index !== name) {
                    props[name] = value;
                    delete props[index];
                }
                hooks = jQuery.cssHooks[name];
                if (hooks && "expand"in hooks) {
                    value = hooks.expand(value);
                    delete props[name];
                    for (index in value) {
                        if (!(index in props)) {
                            props[index] = value[index];
                            specialEasing[index] = easing;
                        }
                    }
                } else {
                    specialEasing[name] = easing;
                }
            }
        }
        jQuery.Animation = jQuery.extend(Animation, {
            tweener: function(props, callback) {
                if (jQuery.isFunction(props)) {
                    callback = props;
                    props = ["*"];
                } else {
                    props = props.split(" ");
                }
                var prop, index = 0, length = props.length;
                for (; index < length; index++) {
                    prop = props[index];
                    tweeners[prop] = tweeners[prop] || [];
                    tweeners[prop].unshift(callback);
                }
            },
            prefilter: function(callback, prepend) {
                if (prepend) {
                    animationPrefilters.unshift(callback);
                } else {
                    animationPrefilters.push(callback);
                }
            }
        });
        function defaultPrefilter(elem, props, opts) {
            var index, prop, value, length, dataShow, toggle, tween, hooks, oldfire, anim = this, style = elem.style, orig = {}, handled = [], hidden = elem.nodeType && isHidden(elem);
            if (!opts.queue) {
                hooks = jQuery._queueHooks(elem, "fx");
                if (hooks.unqueued == null) {
                    hooks.unqueued = 0;
                    oldfire = hooks.empty.fire;
                    hooks.empty.fire = function() {
                        if (!hooks.unqueued) {
                            oldfire();
                        }
                    }
                    ;
                }
                hooks.unqueued++;
                anim.always(function() {
                    anim.always(function() {
                        hooks.unqueued--;
                        if (!jQuery.queue(elem, "fx").length) {
                            hooks.empty.fire();
                        }
                    });
                });
            }
            if (elem.nodeType === 1 && ("height"in props || "width"in props)) {
                opts.overflow = [style.overflow, style.overflowX, style.overflowY];
                if (jQuery.css(elem, "display") === "inline" && jQuery.css(elem, "float") === "none") {
                    if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {
                        style.display = "inline-block";
                    } else {
                        style.zoom = 1;
                    }
                }
            }
            if (opts.overflow) {
                style.overflow = "hidden";
                if (!jQuery.support.shrinkWrapBlocks) {
                    anim.done(function() {
                        style.overflow = opts.overflow[0];
                        style.overflowX = opts.overflow[1];
                        style.overflowY = opts.overflow[2];
                    });
                }
            }
            for (index in props) {
                value = props[index];
                if (rfxtypes.exec(value)) {
                    delete props[index];
                    toggle = toggle || value === "toggle";
                    if (value === (hidden ? "hide" : "show")) {
                        continue;
                    }
                    handled.push(index);
                }
            }
            length = handled.length;
            if (length) {
                dataShow = jQuery._data(elem, "fxshow") || jQuery._data(elem, "fxshow", {});
                if ("hidden"in dataShow) {
                    hidden = dataShow.hidden;
                }
                if (toggle) {
                    dataShow.hidden = !hidden;
                }
                if (hidden) {
                    jQuery(elem).show();
                } else {
                    anim.done(function() {
                        jQuery(elem).hide();
                    });
                }
                anim.done(function() {
                    var prop;
                    jQuery.removeData(elem, "fxshow", true);
                    for (prop in orig) {
                        jQuery.style(elem, prop, orig[prop]);
                    }
                });
                for (index = 0; index < length; index++) {
                    prop = handled[index];
                    tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);
                    orig[prop] = dataShow[prop] || jQuery.style(elem, prop);
                    if (!(prop in dataShow)) {
                        dataShow[prop] = tween.start;
                        if (hidden) {
                            tween.end = tween.start;
                            tween.start = prop === "width" || prop === "height" ? 1 : 0;
                        }
                    }
                }
            }
        }
        function Tween(elem, options, prop, end, easing) {
            return new Tween.prototype.init(elem,options,prop,end,easing);
        }
        jQuery.Tween = Tween;
        Tween.prototype = {
            constructor: Tween,
            init: function(elem, options, prop, end, easing, unit) {
                this.elem = elem;
                this.prop = prop;
                this.easing = easing || "swing";
                this.options = options;
                this.start = this.now = this.cur();
                this.end = end;
                this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
            },
            cur: function() {
                var hooks = Tween.propHooks[this.prop];
                return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
            },
            run: function(percent) {
                var eased, hooks = Tween.propHooks[this.prop];
                if (this.options.duration) {
                    this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
                } else {
                    this.pos = eased = percent;
                }
                this.now = (this.end - this.start) * eased + this.start;
                if (this.options.step) {
                    this.options.step.call(this.elem, this.now, this);
                }
                if (hooks && hooks.set) {
                    hooks.set(this);
                } else {
                    Tween.propHooks._default.set(this);
                }
                return this;
            }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
            _default: {
                get: function(tween) {
                    var result;
                    if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                        return tween.elem[tween.prop];
                    }
                    result = jQuery.css(tween.elem, tween.prop, false, "");
                    return !result || result === "auto" ? 0 : result;
                },
                set: function(tween) {
                    if (jQuery.fx.step[tween.prop]) {
                        jQuery.fx.step[tween.prop](tween);
                    } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                        jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                    } else {
                        tween.elem[tween.prop] = tween.now;
                    }
                }
            }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
            set: function(tween) {
                if (tween.elem.nodeType && tween.elem.parentNode) {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        };
        jQuery.each(["toggle", "show", "hide"], function(i, name) {
            var cssFn = jQuery.fn[name];
            jQuery.fn[name] = function(speed, easing, callback) {
                return speed == null || typeof speed === "boolean" || (!i && jQuery.isFunction(speed) && jQuery.isFunction(easing)) ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
            }
            ;
        });
        jQuery.fn.extend({
            fadeTo: function(speed, to, easing, callback) {
                return this.filter(isHidden).css("opacity", 0).show().end().animate({
                    opacity: to
                }, speed, easing, callback);
            },
            animate: function(prop, speed, easing, callback) {
                var empty = jQuery.isEmptyObject(prop)
                    , optall = jQuery.speed(speed, easing, callback)
                    , doAnimation = function() {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    if (empty) {
                        anim.stop(true);
                    }
                };
                return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
            },
            stop: function(type, clearQueue, gotoEnd) {
                var stopQueue = function(hooks) {
                    var stop = hooks.stop;
                    delete hooks.stop;
                    stop(gotoEnd);
                };
                if (typeof type !== "string") {
                    gotoEnd = clearQueue;
                    clearQueue = type;
                    type = undefined;
                }
                if (clearQueue && type !== false) {
                    this.queue(type || "fx", []);
                }
                return this.each(function() {
                    var dequeue = true
                        , index = type != null && type + "queueHooks"
                        , timers = jQuery.timers
                        , data = jQuery._data(this);
                    if (index) {
                        if (data[index] && data[index].stop) {
                            stopQueue(data[index]);
                        }
                    } else {
                        for (index in data) {
                            if (data[index] && data[index].stop && rrun.test(index)) {
                                stopQueue(data[index]);
                            }
                        }
                    }
                    for (index = timers.length; index--; ) {
                        if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                            timers[index].anim.stop(gotoEnd);
                            dequeue = false;
                            timers.splice(index, 1);
                        }
                    }
                    if (dequeue || !gotoEnd) {
                        jQuery.dequeue(this, type);
                    }
                });
            }
        });
        function genFx(type, includeWidth) {
            var which, attrs = {
                height: type
            }, i = 0;
            includeWidth = includeWidth ? 1 : 0;
            for (; i < 4; i += 2 - includeWidth) {
                which = cssExpand[i];
                attrs["margin" + which] = attrs["padding" + which] = type;
            }
            if (includeWidth) {
                attrs.opacity = attrs.width = type;
            }
            return attrs;
        }
        jQuery.each({
            slideDown: genFx("show"),
            slideUp: genFx("hide"),
            slideToggle: genFx("toggle"),
            fadeIn: {
                opacity: "show"
            },
            fadeOut: {
                opacity: "hide"
            },
            fadeToggle: {
                opacity: "toggle"
            }
        }, function(name, props) {
            jQuery.fn[name] = function(speed, easing, callback) {
                return this.animate(props, speed, easing, callback);
            }
            ;
        });
        jQuery.speed = function(speed, easing, fn) {
            var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                duration: speed,
                easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };
            opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
            if (opt.queue == null || opt.queue === true) {
                opt.queue = "fx";
            }
            opt.old = opt.complete;
            opt.complete = function() {
                if (jQuery.isFunction(opt.old)) {
                    opt.old.call(this);
                }
                if (opt.queue) {
                    jQuery.dequeue(this, opt.queue);
                }
            }
            ;
            return opt;
        }
        ;
        jQuery.easing = {
            linear: function(p) {
                return p;
            },
            swing: function(p) {
                return 0.5 - Math.cos(p * Math.PI) / 2;
            }
        };
        jQuery.timers = [];
        jQuery.fx = Tween.prototype.init;
        jQuery.fx.tick = function() {
            var timer, timers = jQuery.timers, i = 0;
            fxNow = jQuery.now();
            for (; i < timers.length; i++) {
                timer = timers[i];
                if (!timer() && timers[i] === timer) {
                    timers.splice(i--, 1);
                }
            }
            if (!timers.length) {
                jQuery.fx.stop();
            }
            fxNow = undefined;
        }
        ;
        jQuery.fx.timer = function(timer) {
            if (timer() && jQuery.timers.push(timer) && !timerId) {
                timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
            }
        }
        ;
        jQuery.fx.interval = 13;
        jQuery.fx.stop = function() {
            clearInterval(timerId);
            timerId = null;
        }
        ;
        jQuery.fx.speeds = {
            slow: 600,
            fast: 200,
            _default: 400
        };
        jQuery.fx.step = {};
        if (jQuery.expr && jQuery.expr.filters) {
            jQuery.expr.filters.animated = function(elem) {
                return jQuery.grep(jQuery.timers, function(fn) {
                    return elem === fn.elem;
                }).length;
            }
            ;
        }
        var rroot = /^(?:body|html)$/i;
        jQuery.fn.offset = function(options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft, box = {
                top: 0,
                left: 0
            }, elem = this[0], doc = elem && elem.ownerDocument;
            if (!doc) {
                return;
            }
            if ((body = doc.body) === elem) {
                return jQuery.offset.bodyOffset(elem);
            }
            docElem = doc.documentElement;
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }
            if (typeof elem.getBoundingClientRect !== "undefined") {
                box = elem.getBoundingClientRect();
            }
            win = getWindow(doc);
            clientTop = docElem.clientTop || body.clientTop || 0;
            clientLeft = docElem.clientLeft || body.clientLeft || 0;
            scrollTop = win.pageYOffset || docElem.scrollTop;
            scrollLeft = win.pageXOffset || docElem.scrollLeft;
            return {
                top: box.top + scrollTop - clientTop,
                left: box.left + scrollLeft - clientLeft
            };
        }
        ;
        jQuery.offset = {
            bodyOffset: function(body) {
                var top = body.offsetTop
                    , left = body.offsetLeft;
                if (jQuery.support.doesNotIncludeMarginInBodyOffset) {
                    top += parseFloat(jQuery.css(body, "marginTop")) || 0;
                    left += parseFloat(jQuery.css(body, "marginLeft")) || 0;
                }
                return {
                    top: top,
                    left: left
                };
            },
            setOffset: function(elem, options, i) {
                var position = jQuery.css(elem, "position");
                if (position === "static") {
                    elem.style.position = "relative";
                }
                var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, "top"), curCSSLeft = jQuery.css(elem, "left"), calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1, props = {}, curPosition = {}, curTop, curLeft;
                if (calculatePosition) {
                    curPosition = curElem.position();
                    curTop = curPosition.top;
                    curLeft = curPosition.left;
                } else {
                    curTop = parseFloat(curCSSTop) || 0;
                    curLeft = parseFloat(curCSSLeft) || 0;
                }
                if (jQuery.isFunction(options)) {
                    options = options.call(elem, i, curOffset);
                }
                if (options.top != null) {
                    props.top = (options.top - curOffset.top) + curTop;
                }
                if (options.left != null) {
                    props.left = (options.left - curOffset.left) + curLeft;
                }
                if ("using"in options) {
                    options.using.call(elem, props);
                } else {
                    curElem.css(props);
                }
            }
        };
        jQuery.fn.extend({
            position: function() {
                if (!this[0]) {
                    return;
                }
                var elem = this[0]
                    , offsetParent = this.offsetParent()
                    , offset = this.offset()
                    , parentOffset = rroot.test(offsetParent[0].nodeName) ? {
                    top: 0,
                    left: 0
                } : offsetParent.offset();
                offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
                offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;
                parentOffset.top += parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0;
                parentOffset.left += parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0;
                return {
                    top: offset.top - parentOffset.top,
                    left: offset.left - parentOffset.left
                };
            },
            offsetParent: function() {
                return this.map(function() {
                    var offsetParent = this.offsetParent || document.body;
                    while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
                        offsetParent = offsetParent.offsetParent;
                    }
                    return offsetParent || document.body;
                });
            }
        });
        jQuery.each({
            scrollLeft: "pageXOffset",
            scrollTop: "pageYOffset"
        }, function(method, prop) {
            var top = /Y/.test(prop);
            jQuery.fn[method] = function(val) {
                return jQuery.access(this, function(elem, method, val) {
                    var win = getWindow(elem);
                    if (val === undefined) {
                        return win ? (prop in win) ? win[prop] : win.document.documentElement[method] : elem[method];
                    }
                    if (win) {
                        win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
                    } else {
                        elem[method] = val;
                    }
                }, method, val, arguments.length, null);
            }
            ;
        });
        function getWindow(elem) {
            return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
        }
        jQuery.each({
            Height: "height",
            Width: "width"
        }, function(name, type) {
            jQuery.each({
                padding: "inner" + name,
                content: type,
                "": "outer" + name
            }, function(defaultExtra, funcName) {
                jQuery.fn[funcName] = function(margin, value) {
                    var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean")
                        , extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                    return jQuery.access(this, function(elem, type, value) {
                        var doc;
                        if (jQuery.isWindow(elem)) {
                            return elem.document.documentElement["client" + name];
                        }
                        if (elem.nodeType === 9) {
                            doc = elem.documentElement;
                            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                        }
                        return value === undefined ? jQuery.css(elem, type, value, extra) : jQuery.style(elem, type, value, extra);
                    }, type, chainable ? margin : undefined, chainable, null);
                }
                ;
            });
        });
        window.jQuery = window.$ = jQuery;
        if (typeof define === "function" && define.amd && define.amd.jQuery) {
            define("jquery", [], function() {
                return jQuery;
            });
        }
    }
)(window);

(function($, undefined) {
        var uuid = 0
            , runiqueId = /^ui-id-\d+$/;
        $.ui = $.ui || {};
        if ($.ui.version) {
            return;
        }
        $.extend($.ui, {
            version: "1.9.2",
            keyCode: {
                BACKSPACE: 8,
                COMMA: 188,
                DELETE: 46,
                DOWN: 40,
                END: 35,
                ENTER: 13,
                ESCAPE: 27,
                HOME: 36,
                LEFT: 37,
                NUMPAD_ADD: 107,
                NUMPAD_DECIMAL: 110,
                NUMPAD_DIVIDE: 111,
                NUMPAD_ENTER: 108,
                NUMPAD_MULTIPLY: 106,
                NUMPAD_SUBTRACT: 109,
                PAGE_DOWN: 34,
                PAGE_UP: 33,
                PERIOD: 190,
                RIGHT: 39,
                SPACE: 32,
                TAB: 9,
                UP: 38
            }
        });
        $.fn.extend({
            _focus: $.fn.focus,
            focus: function(delay, fn) {
                return typeof delay === "number" ? this.each(function() {
                    var elem = this;
                    setTimeout(function() {
                        $(elem).focus();
                        if (fn) {
                            fn.call(elem);
                        }
                    }, delay);
                }) : this._focus.apply(this, arguments);
            },
            scrollParent: function() {
                var scrollParent;
                if (($.ui.ie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
                    scrollParent = this.parents().filter(function() {
                        return (/(relative|absolute|fixed)/).test($.css(this, 'position')) && (/(auto|scroll)/).test($.css(this, 'overflow') + $.css(this, 'overflow-y') + $.css(this, 'overflow-x'));
                    }).eq(0);
                } else {
                    scrollParent = this.parents().filter(function() {
                        return (/(auto|scroll)/).test($.css(this, 'overflow') + $.css(this, 'overflow-y') + $.css(this, 'overflow-x'));
                    }).eq(0);
                }
                return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
            },
            zIndex: function(zIndex) {
                if (zIndex !== undefined) {
                    return this.css("zIndex", zIndex);
                }
                if (this.length) {
                    var elem = $(this[0]), position, value;
                    while (elem.length && elem[0] !== document) {
                        position = elem.css("position");
                        if (position === "absolute" || position === "relative" || position === "fixed") {
                            value = parseInt(elem.css("zIndex"), 10);
                            if (!isNaN(value) && value !== 0) {
                                return value;
                            }
                        }
                        elem = elem.parent();
                    }
                }
                return 0;
            },
            uniqueId: function() {
                return this.each(function() {
                    if (!this.id) {
                        this.id = "ui-id-" + (++uuid);
                    }
                });
            },
            removeUniqueId: function() {
                return this.each(function() {
                    if (runiqueId.test(this.id)) {
                        $(this).removeAttr("id");
                    }
                });
            }
        });
        function focusable(element, isTabIndexNotNaN) {
            var map, mapName, img, nodeName = element.nodeName.toLowerCase();
            if ("area" === nodeName) {
                map = element.parentNode;
                mapName = map.name;
                if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                    return false;
                }
                img = $("img[usemap=#" + mapName + "]")[0];
                return !!img && visible(img);
            }
            return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
        }
        function visible(element) {
            return $.expr.filters.visible(element) && !$(element).parents().andSelf().filter(function() {
                return $.css(this, "visibility") === "hidden";
            }).length;
        }
        $.extend($.expr[":"], {
            data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
                return function(elem) {
                    return !!$.data(elem, dataName);
                }
                    ;
            }) : function(elem, i, match) {
                return !!$.data(elem, match[3]);
            }
            ,
            focusable: function(element) {
                return focusable(element, !isNaN($.attr(element, "tabindex")));
            },
            tabbable: function(element) {
                var tabIndex = $.attr(element, "tabindex")
                    , isTabIndexNaN = isNaN(tabIndex);
                return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
            }
        });
        $(function() {
            var body = document.body
                , div = body.appendChild(div = document.createElement("div"));
            div.offsetHeight;
            $.extend(div.style, {
                minHeight: "100px",
                height: "auto",
                padding: 0,
                borderWidth: 0
            });
            $.support.minHeight = div.offsetHeight === 100;
            $.support.selectstart = "onselectstart"in div;
            body.removeChild(div).style.display = "none";
        });
        if (!$("<a>").outerWidth(1).jquery) {
            $.each(["Width", "Height"], function(i, name) {
                var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"]
                    , type = name.toLowerCase()
                    , orig = {
                    innerWidth: $.fn.innerWidth,
                    innerHeight: $.fn.innerHeight,
                    outerWidth: $.fn.outerWidth,
                    outerHeight: $.fn.outerHeight
                };
                function reduce(elem, size, border, margin) {
                    $.each(side, function() {
                        size -= parseFloat($.css(elem, "padding" + this)) || 0;
                        if (border) {
                            size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
                        }
                        if (margin) {
                            size -= parseFloat($.css(elem, "margin" + this)) || 0;
                        }
                    });
                    return size;
                }
                $.fn["inner" + name] = function(size) {
                    if (size === undefined) {
                        return orig["inner" + name].call(this);
                    }
                    return this.each(function() {
                        $(this).css(type, reduce(this, size) + "px");
                    });
                }
                ;
                $.fn["outer" + name] = function(size, margin) {
                    if (typeof size !== "number") {
                        return orig["outer" + name].call(this, size);
                    }
                    return this.each(function() {
                        $(this).css(type, reduce(this, size, true, margin) + "px");
                    });
                }
                ;
            });
        }
        if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) {
            $.fn.removeData = (function(removeData) {
                    return function(key) {
                        if (arguments.length) {
                            return removeData.call(this, $.camelCase(key));
                        } else {
                            return removeData.call(this);
                        }
                    }
                        ;
                }
            )($.fn.removeData);
        }
        (function() {
                var uaMatch = /msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || [];
                $.ui.ie = uaMatch.length ? true : false;
                $.ui.ie6 = parseFloat(uaMatch[1], 10) === 6;
            }
        )();
        $.fn.extend({
            disableSelection: function() {
                return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(event) {
                    event.preventDefault();
                });
            },
            enableSelection: function() {
                return this.unbind(".ui-disableSelection");
            }
        });
        $.extend($.ui, {
            plugin: {
                add: function(module, option, set) {
                    var i, proto = $.ui[module].prototype;
                    for (i in set) {
                        proto.plugins[i] = proto.plugins[i] || [];
                        proto.plugins[i].push([option, set[i]]);
                    }
                },
                call: function(instance, name, args) {
                    var i, set = instance.plugins[name];
                    if (!set || !instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11) {
                        return;
                    }
                    for (i = 0; i < set.length; i++) {
                        if (instance.options[set[i][0]]) {
                            set[i][1].apply(instance.element, args);
                        }
                    }
                }
            },
            contains: $.contains,
            hasScroll: function(el, a) {
                if ($(el).css("overflow") === "hidden") {
                    return false;
                }
                var scroll = (a && a === "left") ? "scrollLeft" : "scrollTop"
                    , has = false;
                if (el[scroll] > 0) {
                    return true;
                }
                el[scroll] = 1;
                has = (el[scroll] > 0);
                el[scroll] = 0;
                return has;
            },
            isOverAxis: function(x, reference, size) {
                return (x > reference) && (x < (reference + size));
            },
            isOver: function(y, x, top, left, height, width) {
                return $.ui.isOverAxis(y, top, height) && $.ui.isOverAxis(x, left, width);
            }
        });
    }
)(jQuery);
(function($, undefined) {
        var uuid = 0
            , slice = Array.prototype.slice
            , _cleanData = $.cleanData;
        $.cleanData = function(elems) {
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                try {
                    $(elem).triggerHandler("remove");
                } catch (e) {}
            }
            _cleanData(elems);
        }
        ;
        $.widget = function(name, base, prototype) {
            var fullName, existingConstructor, constructor, basePrototype, namespace = name.split(".")[0];
            name = name.split(".")[1];
            fullName = namespace + "-" + name;
            if (!prototype) {
                prototype = base;
                base = $.Widget;
            }
            $.expr[":"][fullName.toLowerCase()] = function(elem) {
                return !!$.data(elem, fullName);
            }
            ;
            $[namespace] = $[namespace] || {};
            existingConstructor = $[namespace][name];
            constructor = $[namespace][name] = function(options, element) {
                if (!this._createWidget) {
                    return new constructor(options,element);
                }
                if (arguments.length) {
                    this._createWidget(options, element);
                }
            }
            ;
            $.extend(constructor, existingConstructor, {
                version: prototype.version,
                _proto: $.extend({}, prototype),
                _childConstructors: []
            });
            basePrototype = new base();
            basePrototype.options = $.widget.extend({}, basePrototype.options);
            $.each(prototype, function(prop, value) {
                if ($.isFunction(value)) {
                    prototype[prop] = (function() {
                            var _super = function() {
                                return base.prototype[prop].apply(this, arguments);
                            }
                                , _superApply = function(args) {
                                return base.prototype[prop].apply(this, args);
                            };
                            return function() {
                                var __super = this._super, __superApply = this._superApply, returnValue;
                                this._super = _super;
                                this._superApply = _superApply;
                                returnValue = value.apply(this, arguments);
                                this._super = __super;
                                this._superApply = __superApply;
                                return returnValue;
                            }
                                ;
                        }
                    )();
                }
            });
            constructor.prototype = $.widget.extend(basePrototype, {
                widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
            }, prototype, {
                constructor: constructor,
                namespace: namespace,
                widgetName: name,
                widgetBaseClass: fullName,
                widgetFullName: fullName
            });
            if (existingConstructor) {
                $.each(existingConstructor._childConstructors, function(i, child) {
                    var childPrototype = child.prototype;
                    $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
                });
                delete existingConstructor._childConstructors;
            } else {
                base._childConstructors.push(constructor);
            }
            $.widget.bridge(name, constructor);
        }
        ;
        $.widget.extend = function(target) {
            var input = slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value;
            for (; inputIndex < inputLength; inputIndex++) {
                for (key in input[inputIndex]) {
                    value = input[inputIndex][key];
                    if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                        if ($.isPlainObject(value)) {
                            target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value);
                        } else {
                            target[key] = value;
                        }
                    }
                }
            }
            return target;
        }
        ;
        $.widget.bridge = function(name, object) {
            var fullName = object.prototype.widgetFullName || name;
            $.fn[name] = function(options) {
                var isMethodCall = typeof options === "string"
                    , args = slice.call(arguments, 1)
                    , returnValue = this;
                options = !isMethodCall && args.length ? $.widget.extend.apply(null, [options].concat(args)) : options;
                if (isMethodCall) {
                    this.each(function() {
                        var methodValue, instance = $.data(this, fullName);
                        if (!instance) {
                            return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'");
                        }
                        if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                            return $.error("no such method '" + options + "' for " + name + " widget instance");
                        }
                        methodValue = instance[options].apply(instance, args);
                        if (methodValue !== instance && methodValue !== undefined) {
                            returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                            return false;
                        }
                    });
                } else {
                    this.each(function() {
                        var instance = $.data(this, fullName);
                        if (instance) {
                            instance.option(options || {})._init();
                        } else {
                            $.data(this, fullName, new object(options,this));
                        }
                    });
                }
                return returnValue;
            }
            ;
        }
        ;
        $.Widget = function() {}
        ;
        $.Widget._childConstructors = [];
        $.Widget.prototype = {
            widgetName: "widget",
            widgetEventPrefix: "",
            defaultElement: "<div>",
            options: {
                disabled: false,
                create: null
            },
            _createWidget: function(options, element) {
                element = $(element || this.defaultElement || this)[0];
                this.element = $(element);
                this.uuid = uuid++;
                this.eventNamespace = "." + this.widgetName + this.uuid;
                this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
                this.bindings = $();
                this.hoverable = $();
                this.focusable = $();
                if (element !== this) {
                    $.data(element, this.widgetName, this);
                    $.data(element, this.widgetFullName, this);
                    this._on(true, this.element, {
                        remove: function(event) {
                            if (event.target === element) {
                                this.destroy();
                            }
                        }
                    });
                    this.document = $(element.style ? element.ownerDocument : element.document || element);
                    this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
                }
                this._create();
                this._trigger("create", null, this._getCreateEventData());
                this._init();
            },
            _getCreateOptions: $.noop,
            _getCreateEventData: $.noop,
            _create: $.noop,
            _init: $.noop,
            destroy: function() {
                this._destroy();
                this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
                this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled");
                this.bindings.unbind(this.eventNamespace);
                this.hoverable.removeClass("ui-state-hover");
                this.focusable.removeClass("ui-state-focus");
            },
            _destroy: $.noop,
            widget: function() {
                return this.element;
            },
            option: function(key, value) {
                var options = key, parts, curOption, i;
                if (arguments.length === 0) {
                    return $.widget.extend({}, this.options);
                }
                if (typeof key === "string") {
                    options = {};
                    parts = key.split(".");
                    key = parts.shift();
                    if (parts.length) {
                        curOption = options[key] = $.widget.extend({}, this.options[key]);
                        for (i = 0; i < parts.length - 1; i++) {
                            curOption[parts[i]] = curOption[parts[i]] || {};
                            curOption = curOption[parts[i]];
                        }
                        key = parts.pop();
                        if (value === undefined) {
                            return curOption[key] === undefined ? null : curOption[key];
                        }
                        curOption[key] = value;
                    } else {
                        if (value === undefined) {
                            return this.options[key] === undefined ? null : this.options[key];
                        }
                        options[key] = value;
                    }
                }
                this._setOptions(options);
                return this;
            },
            _setOptions: function(options) {
                var key;
                for (key in options) {
                    this._setOption(key, options[key]);
                }
                return this;
            },
            _setOption: function(key, value) {
                this.options[key] = value;
                if (key === "disabled") {
                    this.widget().toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!value).attr("aria-disabled", value);
                    this.hoverable.removeClass("ui-state-hover");
                    this.focusable.removeClass("ui-state-focus");
                }
                return this;
            },
            enable: function() {
                return this._setOption("disabled", false);
            },
            disable: function() {
                return this._setOption("disabled", true);
            },
            _on: function(suppressDisabledCheck, element, handlers) {
                var delegateElement, instance = this;
                if (typeof suppressDisabledCheck !== "boolean") {
                    handlers = element;
                    element = suppressDisabledCheck;
                    suppressDisabledCheck = false;
                }
                if (!handlers) {
                    handlers = element;
                    element = this.element;
                    delegateElement = this.widget();
                } else {
                    element = delegateElement = $(element);
                    this.bindings = this.bindings.add(element);
                }
                $.each(handlers, function(event, handler) {
                    function handlerProxy() {
                        if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) {
                            return;
                        }
                        return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
                    }
                    if (typeof handler !== "string") {
                        handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
                    }
                    var match = event.match(/^(\w+)\s*(.*)$/)
                        , eventName = match[1] + instance.eventNamespace
                        , selector = match[2];
                    if (selector) {
                        delegateElement.delegate(selector, eventName, handlerProxy);
                    } else {
                        element.bind(eventName, handlerProxy);
                    }
                });
            },
            _off: function(element, eventName) {
                eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
                element.unbind(eventName).undelegate(eventName);
            },
            _delay: function(handler, delay) {
                function handlerProxy() {
                    return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
                }
                var instance = this;
                return setTimeout(handlerProxy, delay || 0);
            },
            _hoverable: function(element) {
                this.hoverable = this.hoverable.add(element);
                this._on(element, {
                    mouseenter: function(event) {
                        $(event.currentTarget).addClass("ui-state-hover");
                    },
                    mouseleave: function(event) {
                        $(event.currentTarget).removeClass("ui-state-hover");
                    }
                });
            },
            _focusable: function(element) {
                this.focusable = this.focusable.add(element);
                this._on(element, {
                    focusin: function(event) {
                        $(event.currentTarget).addClass("ui-state-focus");
                    },
                    focusout: function(event) {
                        $(event.currentTarget).removeClass("ui-state-focus");
                    }
                });
            },
            _trigger: function(type, event, data) {
                var prop, orig, callback = this.options[type];
                data = data || {};
                event = $.Event(event);
                event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
                event.target = this.element[0];
                orig = event.originalEvent;
                if (orig) {
                    for (prop in orig) {
                        if (!(prop in event)) {
                            event[prop] = orig[prop];
                        }
                    }
                }
                this.element.trigger(event, data);
                return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());
            }
        };
        $.each({
            show: "fadeIn",
            hide: "fadeOut"
        }, function(method, defaultEffect) {
            $.Widget.prototype["_" + method] = function(element, options, callback) {
                if (typeof options === "string") {
                    options = {
                        effect: options
                    };
                }
                var hasOptions, effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
                options = options || {};
                if (typeof options === "number") {
                    options = {
                        duration: options
                    };
                }
                hasOptions = !$.isEmptyObject(options);
                options.complete = callback;
                if (options.delay) {
                    element.delay(options.delay);
                }
                if (hasOptions && $.effects && ($.effects.effect[effectName] || $.uiBackCompat !== false && $.effects[effectName])) {
                    element[method](options);
                } else if (effectName !== method && element[effectName]) {
                    element[effectName](options.duration, options.easing, callback);
                } else {
                    element.queue(function(next) {
                        $(this)[method]();
                        if (callback) {
                            callback.call(element[0]);
                        }
                        next();
                    });
                }
            }
            ;
        });
        if ($.uiBackCompat !== false) {
            $.Widget.prototype._getCreateOptions = function() {
                return $.metadata && $.metadata.get(this.element[0])[this.widgetName];
            }
            ;
        }
    }
)(jQuery);
(function($, undefined) {
        var mouseHandled = false;
        $(document).mouseup(function(e) {
            mouseHandled = false;
        });
        $.widget("ui.mouse", {
            version: "1.9.2",
            options: {
                cancel: 'input,textarea,button,select,option',
                distance: 1,
                delay: 0
            },
            _mouseInit: function() {
                var that = this;
                this.element.bind('mousedown.' + this.widgetName, function(event) {
                    return that._mouseDown(event);
                }).bind('click.' + this.widgetName, function(event) {
                    if (true === $.data(event.target, that.widgetName + '.preventClickEvent')) {
                        $.removeData(event.target, that.widgetName + '.preventClickEvent');
                        event.stopImmediatePropagation();
                        return false;
                    }
                });
                this.started = false;
            },
            _mouseDestroy: function() {
                this.element.unbind('.' + this.widgetName);
                if (this._mouseMoveDelegate) {
                    $(document).unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);
                }
            },
            _mouseDown: function(event) {
                if (mouseHandled) {
                    return;
                }
                (this._mouseStarted && this._mouseUp(event));
                this._mouseDownEvent = event;
                var that = this
                    , btnIsLeft = (event.which === 1)
                    , elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
                if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                    return true;
                }
                this.mouseDelayMet = !this.options.delay;
                if (!this.mouseDelayMet) {
                    this._mouseDelayTimer = setTimeout(function() {
                        that.mouseDelayMet = true;
                    }, this.options.delay);
                }
                if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                    this._mouseStarted = (this._mouseStart(event) !== false);
                    if (!this._mouseStarted) {
                        event.preventDefault();
                        return true;
                    }
                }
                if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
                    $.removeData(event.target, this.widgetName + '.preventClickEvent');
                }
                this._mouseMoveDelegate = function(event) {
                    return that._mouseMove(event);
                }
                ;
                this._mouseUpDelegate = function(event) {
                    return that._mouseUp(event);
                }
                ;
                $(document).bind('mousemove.' + this.widgetName, this._mouseMoveDelegate).bind('mouseup.' + this.widgetName, this._mouseUpDelegate);
                event.preventDefault();
                mouseHandled = true;
                return true;
            },
            _mouseMove: function(event) {
                if ($.ui.ie && !(document.documentMode >= 9) && !event.button) {
                    return this._mouseUp(event);
                }
                if (this._mouseStarted) {
                    this._mouseDrag(event);
                    return event.preventDefault();
                }
                if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                    this._mouseStarted = (this._mouseStart(this._mouseDownEvent, event) !== false);
                    (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
                }
                return !this._mouseStarted;
            },
            _mouseUp: function(event) {
                $(document).unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);
                if (this._mouseStarted) {
                    this._mouseStarted = false;
                    if (event.target === this._mouseDownEvent.target) {
                        $.data(event.target, this.widgetName + '.preventClickEvent', true);
                    }
                    this._mouseStop(event);
                }
                return false;
            },
            _mouseDistanceMet: function(event) {
                return (Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance);
            },
            _mouseDelayMet: function(event) {
                return this.mouseDelayMet;
            },
            _mouseStart: function(event) {},
            _mouseDrag: function(event) {},
            _mouseStop: function(event) {},
            _mouseCapture: function(event) {
                return true;
            }
        });
    }
)(jQuery);
(function($, undefined) {
    $.ui = $.ui || {};
    var cachedScrollbarWidth, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
    function getOffsets(offsets, width, height) {
        return [parseInt(offsets[0], 10) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseInt(offsets[1], 10) * (rpercent.test(offsets[1]) ? height / 100 : 1)];
    }
    function parseCss(element, property) {
        return parseInt($.css(element, property), 10) || 0;
    }
    $.position = {
        scrollbarWidth: function() {
            if (cachedScrollbarWidth !== undefined) {
                return cachedScrollbarWidth;
            }
            var w1, w2, div = $("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0];
            $("body").append(div);
            w1 = innerDiv.offsetWidth;
            div.css("overflow", "scroll");
            w2 = innerDiv.offsetWidth;
            if (w1 === w2) {
                w2 = div[0].clientWidth;
            }
            div.remove();
            return (cachedScrollbarWidth = w1 - w2);
        },
        getScrollInfo: function(within) {
            var overflowX = within.isWindow ? "" : within.element.css("overflow-x")
                , overflowY = within.isWindow ? "" : within.element.css("overflow-y")
                , hasOverflowX = overflowX === "scroll" || (overflowX === "auto" && within.width < within.element[0].scrollWidth)
                , hasOverflowY = overflowY === "scroll" || (overflowY === "auto" && within.height < within.element[0].scrollHeight);
            return {
                width: hasOverflowX ? $.position.scrollbarWidth() : 0,
                height: hasOverflowY ? $.position.scrollbarWidth() : 0
            };
        },
        getWithinInfo: function(element) {
            var withinElement = $(element || window)
                , isWindow = $.isWindow(withinElement[0]);
            return {
                element: withinElement,
                isWindow: isWindow,
                offset: withinElement.offset() || {
                    left: 0,
                    top: 0
                },
                scrollLeft: withinElement.scrollLeft(),
                scrollTop: withinElement.scrollTop(),
                width: isWindow ? withinElement.width() : withinElement.outerWidth(),
                height: isWindow ? withinElement.height() : withinElement.outerHeight()
            };
        }
    };
    $.fn.position = function(options) {
        if (!options || !options.of) {
            return _position.apply(this, arguments);
        }
        options = $.extend({}, options);
        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), targetElem = target[0], collision = (options.collision || "flip").split(" "), offsets = {};
        if (targetElem.nodeType === 9) {
            targetWidth = target.width();
            targetHeight = target.height();
            targetOffset = {
                top: 0,
                left: 0
            };
        } else if ($.isWindow(targetElem)) {
            targetWidth = target.width();
            targetHeight = target.height();
            targetOffset = {
                top: target.scrollTop(),
                left: target.scrollLeft()
            };
        } else if (targetElem.preventDefault) {
            options.at = "left top";
            targetWidth = targetHeight = 0;
            targetOffset = {
                top: targetElem.pageY,
                left: targetElem.pageX
            };
        } else {
            targetWidth = target.outerWidth();
            targetHeight = target.outerHeight();
            targetOffset = target.offset();
        }
        basePosition = $.extend({}, targetOffset);
        $.each(["my", "at"], function() {
            var pos = (options[this] || "").split(" "), horizontalOffset, verticalOffset;
            if (pos.length === 1) {
                pos = rhorizontal.test(pos[0]) ? pos.concat(["center"]) : rvertical.test(pos[0]) ? ["center"].concat(pos) : ["center", "center"];
            }
            pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
            pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
            horizontalOffset = roffset.exec(pos[0]);
            verticalOffset = roffset.exec(pos[1]);
            offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0];
            options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];
        });
        if (collision.length === 1) {
            collision[1] = collision[0];
        }
        if (options.at[0] === "right") {
            basePosition.left += targetWidth;
        } else if (options.at[0] === "center") {
            basePosition.left += targetWidth / 2;
        }
        if (options.at[1] === "bottom") {
            basePosition.top += targetHeight;
        } else if (options.at[1] === "center") {
            basePosition.top += targetHeight / 2;
        }
        atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
        basePosition.left += atOffset[0];
        basePosition.top += atOffset[1];
        return this.each(function() {
            var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
            if (options.my[0] === "right") {
                position.left -= elemWidth;
            } else if (options.my[0] === "center") {
                position.left -= elemWidth / 2;
            }
            if (options.my[1] === "bottom") {
                position.top -= elemHeight;
            } else if (options.my[1] === "center") {
                position.top -= elemHeight / 2;
            }
            position.left += myOffset[0];
            position.top += myOffset[1];
            if (!$.support.offsetFractions) {
                position.left = round(position.left);
                position.top = round(position.top);
            }
            collisionPosition = {
                marginLeft: marginLeft,
                marginTop: marginTop
            };
            $.each(["left", "top"], function(i, dir) {
                if ($.ui.position[collision[i]]) {
                    $.ui.position[collision[i]][dir](position, {
                        targetWidth: targetWidth,
                        targetHeight: targetHeight,
                        elemWidth: elemWidth,
                        elemHeight: elemHeight,
                        collisionPosition: collisionPosition,
                        collisionWidth: collisionWidth,
                        collisionHeight: collisionHeight,
                        offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
                        my: options.my,
                        at: options.at,
                        within: within,
                        elem: elem
                    });
                }
            });
            if ($.fn.bgiframe) {
                elem.bgiframe();
            }
            if (options.using) {
                using = function(props) {
                    var left = targetOffset.left - position.left
                        , right = left + targetWidth - elemWidth
                        , top = targetOffset.top - position.top
                        , bottom = top + targetHeight - elemHeight
                        , feedback = {
                        target: {
                            element: target,
                            left: targetOffset.left,
                            top: targetOffset.top,
                            width: targetWidth,
                            height: targetHeight
                        },
                        element: {
                            element: elem,
                            left: position.left,
                            top: position.top,
                            width: elemWidth,
                            height: elemHeight
                        },
                        horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                        vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                    };
                    if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                        feedback.horizontal = "center";
                    }
                    if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                        feedback.vertical = "middle";
                    }
                    if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                        feedback.important = "horizontal";
                    } else {
                        feedback.important = "vertical";
                    }
                    options.using.call(this, props, feedback);
                }
                ;
            }
            elem.offset($.extend(position, {
                using: using
            }));
        });
    }
    ;
    $.ui.position = {
        fit: {
            left: function(position, data) {
                var within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset, newOverRight;
                if (data.collisionWidth > outerWidth) {
                    if (overLeft > 0 && overRight <= 0) {
                        newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                        position.left += overLeft - newOverRight;
                    } else if (overRight > 0 && overLeft <= 0) {
                        position.left = withinOffset;
                    } else {
                        if (overLeft > overRight) {
                            position.left = withinOffset + outerWidth - data.collisionWidth;
                        } else {
                            position.left = withinOffset;
                        }
                    }
                } else if (overLeft > 0) {
                    position.left += overLeft;
                } else if (overRight > 0) {
                    position.left -= overRight;
                } else {
                    position.left = max(position.left - collisionPosLeft, position.left);
                }
            },
            top: function(position, data) {
                var within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset, newOverBottom;
                if (data.collisionHeight > outerHeight) {
                    if (overTop > 0 && overBottom <= 0) {
                        newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                        position.top += overTop - newOverBottom;
                    } else if (overBottom > 0 && overTop <= 0) {
                        position.top = withinOffset;
                    } else {
                        if (overTop > overBottom) {
                            position.top = withinOffset + outerHeight - data.collisionHeight;
                        } else {
                            position.top = withinOffset;
                        }
                    }
                } else if (overTop > 0) {
                    position.top += overTop;
                } else if (overBottom > 0) {
                    position.top -= overBottom;
                } else {
                    position.top = max(position.top - collisionPosTop, position.top);
                }
            }
        },
        flip: {
            left: function(position, data) {
                var within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0, atOffset = data.at[0] === "left" ? data.targetWidth : data.at[0] === "right" ? -data.targetWidth : 0, offset = -2 * data.offset[0], newOverRight, newOverLeft;
                if (overLeft < 0) {
                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                    if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                        position.left += myOffset + atOffset + offset;
                    }
                } else if (overRight > 0) {
                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                    if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                        position.left += myOffset + atOffset + offset;
                    }
                }
            },
            top: function(position, data) {
                var within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = data.my[1] === "top", myOffset = top ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0, atOffset = data.at[1] === "top" ? data.targetHeight : data.at[1] === "bottom" ? -data.targetHeight : 0, offset = -2 * data.offset[1], newOverTop, newOverBottom;
                if (overTop < 0) {
                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                    if ((position.top + myOffset + atOffset + offset) > overTop && (newOverBottom < 0 || newOverBottom < abs(overTop))) {
                        position.top += myOffset + atOffset + offset;
                    }
                } else if (overBottom > 0) {
                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                    if ((position.top + myOffset + atOffset + offset) > overBottom && (newOverTop > 0 || abs(newOverTop) < overBottom)) {
                        position.top += myOffset + atOffset + offset;
                    }
                }
            }
        },
        flipfit: {
            left: function() {
                $.ui.position.flip.left.apply(this, arguments);
                $.ui.position.fit.left.apply(this, arguments);
            },
            top: function() {
                $.ui.position.flip.top.apply(this, arguments);
                $.ui.position.fit.top.apply(this, arguments);
            }
        }
    };
    (function() {
            var testElement, testElementParent, testElementStyle, offsetLeft, i, body = document.getElementsByTagName("body")[0], div = document.createElement("div");
            testElement = document.createElement(body ? "div" : "body");
            testElementStyle = {
                visibility: "hidden",
                width: 0,
                height: 0,
                border: 0,
                margin: 0,
                background: "none"
            };
            if (body) {
                $.extend(testElementStyle, {
                    position: "absolute",
                    left: "-1000px",
                    top: "-1000px"
                });
            }
            for (i in testElementStyle) {
                testElement.style[i] = testElementStyle[i];
            }
            testElement.appendChild(div);
            testElementParent = body || document.documentElement;
            testElementParent.insertBefore(testElement, testElementParent.firstChild);
            div.style.cssText = "position: absolute; left: 10.7432222px;";
            offsetLeft = $(div).offset().left;
            $.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;
            testElement.innerHTML = "";
            testElementParent.removeChild(testElement);
        }
    )();
    if ($.uiBackCompat !== false) {
        (function($) {
            var _position = $.fn.position;
            $.fn.position = function(options) {
                if (!options || !options.offset) {
                    return _position.call(this, options);
                }
                var offset = options.offset.split(" ")
                    , at = options.at.split(" ");
                if (offset.length === 1) {
                    offset[1] = offset[0];
                }
                if (/^\d/.test(offset[0])) {
                    offset[0] = "+" + offset[0];
                }
                if (/^\d/.test(offset[1])) {
                    offset[1] = "+" + offset[1];
                }
                if (at.length === 1) {
                    if (/left|center|right/.test(at[0])) {
                        at[1] = "center";
                    } else {
                        at[1] = at[0];
                        at[0] = "center";
                    }
                }
                return _position.call(this, $.extend(options, {
                    at: at[0] + offset[0] + " " + at[1] + offset[1],
                    offset: undefined
                }));
            }
            ;
        }(jQuery));
    }
}(jQuery));
(function($, undefined) {
        $.widget("ui.draggable", $.ui.mouse, {
            version: "1.9.2",
            widgetEventPrefix: "drag",
            options: {
                addClasses: true,
                appendTo: "parent",
                axis: false,
                connectToSortable: false,
                containment: false,
                cursor: "auto",
                cursorAt: false,
                grid: false,
                handle: false,
                helper: "original",
                iframeFix: false,
                opacity: false,
                refreshPositions: false,
                revert: false,
                revertDuration: 500,
                scope: "default",
                scroll: true,
                scrollSensitivity: 20,
                scrollSpeed: 20,
                snap: false,
                snapMode: "both",
                snapTolerance: 20,
                stack: false,
                zIndex: false
            },
            _create: function() {
                if (this.options.helper == 'original' && !(/^(?:r|a|f)/).test(this.element.css("position")))
                    this.element[0].style.position = 'relative';
                (this.options.addClasses && this.element.addClass("ui-draggable"));
                (this.options.disabled && this.element.addClass("ui-draggable-disabled"));
                this._mouseInit();
            },
            _destroy: function() {
                this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
                this._mouseDestroy();
            },
            _mouseCapture: function(event) {
                var o = this.options;
                if (this.helper || o.disabled || $(event.target).is('.ui-resizable-handle'))
                    return false;
                this.handle = this._getHandle(event);
                if (!this.handle)
                    return false;
                $(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
                    $('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({
                        width: this.offsetWidth + "px",
                        height: this.offsetHeight + "px",
                        position: "absolute",
                        opacity: "0.001",
                        zIndex: 1000
                    }).css($(this).offset()).appendTo("body");
                });
                return true;
            },
            _mouseStart: function(event) {
                var o = this.options;
                this.helper = this._createHelper(event);
                this.helper.addClass("ui-draggable-dragging");
                this._cacheHelperProportions();
                if ($.ui.ddmanager)
                    $.ui.ddmanager.current = this;
                this._cacheMargins();
                this.cssPosition = this.helper.css("position");
                this.scrollParent = this.helper.scrollParent();
                this.offset = this.positionAbs = this.element.offset();
                this.offset = {
                    top: this.offset.top - this.margins.top,
                    left: this.offset.left - this.margins.left
                };
                $.extend(this.offset, {
                    click: {
                        left: event.pageX - this.offset.left,
                        top: event.pageY - this.offset.top
                    },
                    parent: this._getParentOffset(),
                    relative: this._getRelativeOffset()
                });
                this.originalPosition = this.position = this._generatePosition(event);
                this.originalPageX = event.pageX;
                this.originalPageY = event.pageY;
                (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
                if (o.containment)
                    this._setContainment();
                if (this._trigger("start", event) === false) {
                    this._clear();
                    return false;
                }
                this._cacheHelperProportions();
                if ($.ui.ddmanager && !o.dropBehaviour)
                    $.ui.ddmanager.prepareOffsets(this, event);
                this._mouseDrag(event, true);
                if ($.ui.ddmanager)
                    $.ui.ddmanager.dragStart(this, event);
                return true;
            },
            _mouseDrag: function(event, noPropagation) {
                this.position = this._generatePosition(event);
                this.positionAbs = this._convertPositionTo("absolute");
                if (!noPropagation) {
                    var ui = this._uiHash();
                    if (this._trigger('drag', event, ui) === false) {
                        this._mouseUp({});
                        return false;
                    }
                    this.position = ui.position;
                }
                if (!this.options.axis || this.options.axis != "y")
                    this.helper[0].style.left = this.position.left + 'px';
                if (!this.options.axis || this.options.axis != "x")
                    this.helper[0].style.top = this.position.top + 'px';
                if ($.ui.ddmanager)
                    $.ui.ddmanager.drag(this, event);
                return false;
            },
            _mouseStop: function(event) {
                var dropped = false;
                if ($.ui.ddmanager && !this.options.dropBehaviour)
                    dropped = $.ui.ddmanager.drop(this, event);
                if (this.dropped) {
                    dropped = this.dropped;
                    this.dropped = false;
                }
                var element = this.element[0]
                    , elementInDom = false;
                while (element && (element = element.parentNode)) {
                    if (element == document) {
                        elementInDom = true;
                    }
                }
                if (!elementInDom && this.options.helper === "original")
                    return false;
                if ((this.options.revert == "invalid" && !dropped) || (this.options.revert == "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
                    var that = this;
                    $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                        if (that._trigger("stop", event) !== false) {
                            that._clear();
                        }
                    });
                } else {
                    if (this._trigger("stop", event) !== false) {
                        this._clear();
                    }
                }
                return false;
            },
            _mouseUp: function(event) {
                $("div.ui-draggable-iframeFix").each(function() {
                    this.parentNode.removeChild(this);
                });
                if ($.ui.ddmanager)
                    $.ui.ddmanager.dragStop(this, event);
                return $.ui.mouse.prototype._mouseUp.call(this, event);
            },
            cancel: function() {
                if (this.helper.is(".ui-draggable-dragging")) {
                    this._mouseUp({});
                } else {
                    this._clear();
                }
                return this;
            },
            _getHandle: function(event) {
                var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;
                $(this.options.handle, this.element).find("*").andSelf().each(function() {
                    if (this == event.target)
                        handle = true;
                });
                return handle;
            },
            _createHelper: function(event) {
                var o = this.options;
                var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper == 'clone' ? this.element.clone().removeAttr('id') : this.element);
                if (!helper.parents('body').length)
                    helper.appendTo((o.appendTo == 'parent' ? this.element[0].parentNode : o.appendTo));
                if (helper[0] != this.element[0] && !(/(fixed|absolute)/).test(helper.css("position")))
                    helper.css("position", "absolute");
                return helper;
            },
            _adjustOffsetFromHelper: function(obj) {
                if (typeof obj == 'string') {
                    obj = obj.split(' ');
                }
                if ($.isArray(obj)) {
                    obj = {
                        left: +obj[0],
                        top: +obj[1] || 0
                    };
                }
                if ('left'in obj) {
                    this.offset.click.left = obj.left + this.margins.left;
                }
                if ('right'in obj) {
                    this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
                }
                if ('top'in obj) {
                    this.offset.click.top = obj.top + this.margins.top;
                }
                if ('bottom'in obj) {
                    this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
                }
            },
            _getParentOffset: function() {
                this.offsetParent = this.helper.offsetParent();
                var po = this.offsetParent.offset();
                if (this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                    po.left += this.scrollParent.scrollLeft();
                    po.top += this.scrollParent.scrollTop();
                }
                if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.ui.ie))
                    po = {
                        top: 0,
                        left: 0
                    };
                return {
                    top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                    left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
                };
            },
            _getRelativeOffset: function() {
                if (this.cssPosition == "relative") {
                    var p = this.element.position();
                    return {
                        top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                        left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                    };
                } else {
                    return {
                        top: 0,
                        left: 0
                    };
                }
            },
            _cacheMargins: function() {
                this.margins = {
                    left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                    top: (parseInt(this.element.css("marginTop"), 10) || 0),
                    right: (parseInt(this.element.css("marginRight"), 10) || 0),
                    bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
                };
            },
            _cacheHelperProportions: function() {
                this.helperProportions = {
                    width: this.helper.outerWidth(),
                    height: this.helper.outerHeight()
                };
            },
            _setContainment: function() {
                var o = this.options;
                if (o.containment == 'parent')
                    o.containment = this.helper[0].parentNode;
                if (o.containment == 'document' || o.containment == 'window')
                    this.containment = [o.containment == 'document' ? 0 : $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, o.containment == 'document' ? 0 : $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, (o.containment == 'document' ? 0 : $(window).scrollLeft()) + $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left, (o.containment == 'document' ? 0 : $(window).scrollTop()) + ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                if (!(/^(document|window|parent)$/).test(o.containment) && o.containment.constructor != Array) {
                    var c = $(o.containment);
                    var ce = c[0];
                    if (!ce)
                        return;
                    var co = c.offset();
                    var over = ($(ce).css("overflow") != 'hidden');
                    this.containment = [(parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0), (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
                    this.relative_container = c;
                } else if (o.containment.constructor == Array) {
                    this.containment = o.containment;
                }
            },
            _convertPositionTo: function(d, pos) {
                if (!pos)
                    pos = this.position;
                var mod = d == "absolute" ? 1 : -1;
                var o = this.options
                    , scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
                    , scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                return {
                    top: (pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ((this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())) * mod)),
                    left: (pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ((this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod))
                };
            },
            _generatePosition: function(event) {
                var o = this.options
                    , scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
                    , scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                var pageX = event.pageX;
                var pageY = event.pageY;
                if (this.originalPosition) {
                    var containment;
                    if (this.containment) {
                        if (this.relative_container) {
                            var co = this.relative_container.offset();
                            containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top];
                        } else {
                            containment = this.containment;
                        }
                        if (event.pageX - this.offset.click.left < containment[0])
                            pageX = containment[0] + this.offset.click.left;
                        if (event.pageY - this.offset.click.top < containment[1])
                            pageY = containment[1] + this.offset.click.top;
                        if (event.pageX - this.offset.click.left > containment[2])
                            pageX = containment[2] + this.offset.click.left;
                        if (event.pageY - this.offset.click.top > containment[3])
                            pageY = containment[3] + this.offset.click.top;
                    }
                    if (o.grid) {
                        var top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                        pageY = containment ? (!(top - this.offset.click.top < containment[1] || top - this.offset.click.top > containment[3]) ? top : (!(top - this.offset.click.top < containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                        var left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                        pageX = containment ? (!(left - this.offset.click.left < containment[0] || left - this.offset.click.left > containment[2]) ? left : (!(left - this.offset.click.left < containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                    }
                }
                return {
                    top: (pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ((this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())))),
                    left: (pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ((this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())))
                };
            },
            _clear: function() {
                this.helper.removeClass("ui-draggable-dragging");
                if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval)
                    this.helper.remove();
                this.helper = null;
                this.cancelHelperRemoval = false;
            },
            _trigger: function(type, event, ui) {
                ui = ui || this._uiHash();
                $.ui.plugin.call(this, type, [event, ui]);
                if (type == "drag")
                    this.positionAbs = this._convertPositionTo("absolute");
                return $.Widget.prototype._trigger.call(this, type, event, ui);
            },
            plugins: {},
            _uiHash: function(event) {
                return {
                    helper: this.helper,
                    position: this.position,
                    originalPosition: this.originalPosition,
                    offset: this.positionAbs
                };
            }
        });
        $.ui.plugin.add("draggable", "connectToSortable", {
            start: function(event, ui) {
                var inst = $(this).data("draggable")
                    , o = inst.options
                    , uiSortable = $.extend({}, ui, {
                    item: inst.element
                });
                inst.sortables = [];
                $(o.connectToSortable).each(function() {
                    var sortable = $.data(this, 'sortable');
                    if (sortable && !sortable.options.disabled) {
                        inst.sortables.push({
                            instance: sortable,
                            shouldRevert: sortable.options.revert
                        });
                        sortable.refreshPositions();
                        sortable._trigger("activate", event, uiSortable);
                    }
                });
            },
            stop: function(event, ui) {
                var inst = $(this).data("draggable")
                    , uiSortable = $.extend({}, ui, {
                    item: inst.element
                });
                $.each(inst.sortables, function() {
                    if (this.instance.isOver) {
                        this.instance.isOver = 0;
                        inst.cancelHelperRemoval = true;
                        this.instance.cancelHelperRemoval = false;
                        if (this.shouldRevert)
                            this.instance.options.revert = true;
                        this.instance._mouseStop(event);
                        this.instance.options.helper = this.instance.options._helper;
                        if (inst.options.helper == 'original')
                            this.instance.currentItem.css({
                                top: 'auto',
                                left: 'auto'
                            });
                    } else {
                        this.instance.cancelHelperRemoval = false;
                        this.instance._trigger("deactivate", event, uiSortable);
                    }
                });
            },
            drag: function(event, ui) {
                var inst = $(this).data("draggable")
                    , that = this;
                var checkPos = function(o) {
                    var dyClick = this.offset.click.top
                        , dxClick = this.offset.click.left;
                    var helperTop = this.positionAbs.top
                        , helperLeft = this.positionAbs.left;
                    var itemHeight = o.height
                        , itemWidth = o.width;
                    var itemTop = o.top
                        , itemLeft = o.left;
                    return $.ui.isOver(helperTop + dyClick, helperLeft + dxClick, itemTop, itemLeft, itemHeight, itemWidth);
                };
                $.each(inst.sortables, function(i) {
                    var innermostIntersecting = false;
                    var thisSortable = this;
                    this.instance.positionAbs = inst.positionAbs;
                    this.instance.helperProportions = inst.helperProportions;
                    this.instance.offset.click = inst.offset.click;
                    if (this.instance._intersectsWith(this.instance.containerCache)) {
                        innermostIntersecting = true;
                        $.each(inst.sortables, function() {
                            this.instance.positionAbs = inst.positionAbs;
                            this.instance.helperProportions = inst.helperProportions;
                            this.instance.offset.click = inst.offset.click;
                            if (this != thisSortable && this.instance._intersectsWith(this.instance.containerCache) && $.ui.contains(thisSortable.instance.element[0], this.instance.element[0]))
                                innermostIntersecting = false;
                            return innermostIntersecting;
                        });
                    }
                    if (innermostIntersecting) {
                        if (!this.instance.isOver) {
                            this.instance.isOver = 1;
                            this.instance.currentItem = $(that).clone().removeAttr('id').appendTo(this.instance.element).data("sortable-item", true);
                            this.instance.options._helper = this.instance.options.helper;
                            this.instance.options.helper = function() {
                                return ui.helper[0];
                            }
                            ;
                            event.target = this.instance.currentItem[0];
                            this.instance._mouseCapture(event, true);
                            this.instance._mouseStart(event, true, true);
                            this.instance.offset.click.top = inst.offset.click.top;
                            this.instance.offset.click.left = inst.offset.click.left;
                            this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                            this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;
                            inst._trigger("toSortable", event);
                            inst.dropped = this.instance.element;
                            inst.currentItem = inst.element;
                            this.instance.fromOutside = inst;
                        }
                        if (this.instance.currentItem)
                            this.instance._mouseDrag(event);
                    } else {
                        if (this.instance.isOver) {
                            this.instance.isOver = 0;
                            this.instance.cancelHelperRemoval = true;
                            this.instance.options.revert = false;
                            this.instance._trigger('out', event, this.instance._uiHash(this.instance));
                            this.instance._mouseStop(event, true);
                            this.instance.options.helper = this.instance.options._helper;
                            this.instance.currentItem.remove();
                            if (this.instance.placeholder)
                                this.instance.placeholder.remove();
                            inst._trigger("fromSortable", event);
                            inst.dropped = false;
                        }
                    }
                    ;
                });
            }
        });
        $.ui.plugin.add("draggable", "cursor", {
            start: function(event, ui) {
                var t = $('body')
                    , o = $(this).data('draggable').options;
                if (t.css("cursor"))
                    o._cursor = t.css("cursor");
                t.css("cursor", o.cursor);
            },
            stop: function(event, ui) {
                var o = $(this).data('draggable').options;
                if (o._cursor)
                    $('body').css("cursor", o._cursor);
            }
        });
        $.ui.plugin.add("draggable", "opacity", {
            start: function(event, ui) {
                var t = $(ui.helper)
                    , o = $(this).data('draggable').options;
                if (t.css("opacity"))
                    o._opacity = t.css("opacity");
                t.css('opacity', o.opacity);
            },
            stop: function(event, ui) {
                var o = $(this).data('draggable').options;
                if (o._opacity)
                    $(ui.helper).css('opacity', o._opacity);
            }
        });
        $.ui.plugin.add("draggable", "scroll", {
            start: function(event, ui) {
                var i = $(this).data("draggable");
                if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML')
                    i.overflowOffset = i.scrollParent.offset();
            },
            drag: function(event, ui) {
                var i = $(this).data("draggable")
                    , o = i.options
                    , scrolled = false;
                if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') {
                    if (!o.axis || o.axis != 'x') {
                        if ((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                            i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
                        else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity)
                            i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
                    }
                    if (!o.axis || o.axis != 'y') {
                        if ((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                            i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
                        else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity)
                            i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
                    }
                } else {
                    if (!o.axis || o.axis != 'x') {
                        if (event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                        else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                    }
                    if (!o.axis || o.axis != 'y') {
                        if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                        else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                    }
                }
                if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                    $.ui.ddmanager.prepareOffsets(i, event);
            }
        });
        $.ui.plugin.add("draggable", "snap", {
            start: function(event, ui) {
                var i = $(this).data("draggable")
                    , o = i.options;
                i.snapElements = [];
                $(o.snap.constructor != String ? (o.snap.items || ':data(draggable)') : o.snap).each(function() {
                    var $t = $(this);
                    var $o = $t.offset();
                    if (this != i.element[0])
                        i.snapElements.push({
                            item: this,
                            width: $t.outerWidth(),
                            height: $t.outerHeight(),
                            top: $o.top,
                            left: $o.left
                        });
                });
            },
            drag: function(event, ui) {
                var inst = $(this).data("draggable")
                    , o = inst.options;
                var d = o.snapTolerance;
                var x1 = ui.offset.left
                    , x2 = x1 + inst.helperProportions.width
                    , y1 = ui.offset.top
                    , y2 = y1 + inst.helperProportions.height;
                for (var i = inst.snapElements.length - 1; i >= 0; i--) {
                    var l = inst.snapElements[i].left
                        , r = l + inst.snapElements[i].width
                        , t = inst.snapElements[i].top
                        , b = t + inst.snapElements[i].height;
                    if (!((l - d < x1 && x1 < r + d && t - d < y1 && y1 < b + d) || (l - d < x1 && x1 < r + d && t - d < y2 && y2 < b + d) || (l - d < x2 && x2 < r + d && t - d < y1 && y1 < b + d) || (l - d < x2 && x2 < r + d && t - d < y2 && y2 < b + d))) {
                        if (inst.snapElements[i].snapping)
                            (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                                snapItem: inst.snapElements[i].item
                            })));
                        inst.snapElements[i].snapping = false;
                        continue;
                    }
                    if (o.snapMode != 'inner') {
                        var ts = Math.abs(t - y2) <= d;
                        var bs = Math.abs(b - y1) <= d;
                        var ls = Math.abs(l - x2) <= d;
                        var rs = Math.abs(r - x1) <= d;
                        if (ts)
                            ui.position.top = inst._convertPositionTo("relative", {
                                top: t - inst.helperProportions.height,
                                left: 0
                            }).top - inst.margins.top;
                        if (bs)
                            ui.position.top = inst._convertPositionTo("relative", {
                                top: b,
                                left: 0
                            }).top - inst.margins.top;
                        if (ls)
                            ui.position.left = inst._convertPositionTo("relative", {
                                top: 0,
                                left: l - inst.helperProportions.width
                            }).left - inst.margins.left;
                        if (rs)
                            ui.position.left = inst._convertPositionTo("relative", {
                                top: 0,
                                left: r
                            }).left - inst.margins.left;
                    }
                    var first = (ts || bs || ls || rs);
                    if (o.snapMode != 'outer') {
                        var ts = Math.abs(t - y1) <= d;
                        var bs = Math.abs(b - y2) <= d;
                        var ls = Math.abs(l - x1) <= d;
                        var rs = Math.abs(r - x2) <= d;
                        if (ts)
                            ui.position.top = inst._convertPositionTo("relative", {
                                top: t,
                                left: 0
                            }).top - inst.margins.top;
                        if (bs)
                            ui.position.top = inst._convertPositionTo("relative", {
                                top: b - inst.helperProportions.height,
                                left: 0
                            }).top - inst.margins.top;
                        if (ls)
                            ui.position.left = inst._convertPositionTo("relative", {
                                top: 0,
                                left: l
                            }).left - inst.margins.left;
                        if (rs)
                            ui.position.left = inst._convertPositionTo("relative", {
                                top: 0,
                                left: r - inst.helperProportions.width
                            }).left - inst.margins.left;
                    }
                    if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first))
                        (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                            snapItem: inst.snapElements[i].item
                        })));
                    inst.snapElements[i].snapping = (ts || bs || ls || rs || first);
                }
                ;
            }
        });
        $.ui.plugin.add("draggable", "stack", {
            start: function(event, ui) {
                var o = $(this).data("draggable").options;
                var group = $.makeArray($(o.stack)).sort(function(a, b) {
                    return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
                });
                if (!group.length) {
                    return;
                }
                var min = parseInt(group[0].style.zIndex) || 0;
                $(group).each(function(i) {
                    this.style.zIndex = min + i;
                });
                this[0].style.zIndex = min + group.length;
            }
        });
        $.ui.plugin.add("draggable", "zIndex", {
            start: function(event, ui) {
                var t = $(ui.helper)
                    , o = $(this).data("draggable").options;
                if (t.css("zIndex"))
                    o._zIndex = t.css("zIndex");
                t.css('zIndex', o.zIndex);
            },
            stop: function(event, ui) {
                var o = $(this).data("draggable").options;
                if (o._zIndex)
                    $(ui.helper).css('zIndex', o._zIndex);
            }
        });
    }
)(jQuery);
(function($, undefined) {
        $.widget("ui.droppable", {
            version: "1.9.2",
            widgetEventPrefix: "drop",
            options: {
                accept: '*',
                activeClass: false,
                addClasses: true,
                greedy: false,
                hoverClass: false,
                scope: 'default',
                tolerance: 'intersect'
            },
            _create: function() {
                var o = this.options
                    , accept = o.accept;
                this.isover = 0;
                this.isout = 1;
                this.accept = $.isFunction(accept) ? accept : function(d) {
                    return d.is(accept);
                }
                ;
                this.proportions = {
                    width: this.element[0].offsetWidth,
                    height: this.element[0].offsetHeight
                };
                $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
                $.ui.ddmanager.droppables[o.scope].push(this);
                (o.addClasses && this.element.addClass("ui-droppable"));
            },
            _destroy: function() {
                var drop = $.ui.ddmanager.droppables[this.options.scope];
                for (var i = 0; i < drop.length; i++)
                    if (drop[i] == this)
                        drop.splice(i, 1);
                this.element.removeClass("ui-droppable ui-droppable-disabled");
            },
            _setOption: function(key, value) {
                if (key == 'accept') {
                    this.accept = $.isFunction(value) ? value : function(d) {
                        return d.is(value);
                    }
                    ;
                }
                $.Widget.prototype._setOption.apply(this, arguments);
            },
            _activate: function(event) {
                var draggable = $.ui.ddmanager.current;
                if (this.options.activeClass)
                    this.element.addClass(this.options.activeClass);
                (draggable && this._trigger('activate', event, this.ui(draggable)));
            },
            _deactivate: function(event) {
                var draggable = $.ui.ddmanager.current;
                if (this.options.activeClass)
                    this.element.removeClass(this.options.activeClass);
                (draggable && this._trigger('deactivate', event, this.ui(draggable)));
            },
            _over: function(event) {
                var draggable = $.ui.ddmanager.current;
                if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0])
                    return;
                if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                    if (this.options.hoverClass)
                        this.element.addClass(this.options.hoverClass);
                    this._trigger('over', event, this.ui(draggable));
                }
            },
            _out: function(event) {
                var draggable = $.ui.ddmanager.current;
                if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0])
                    return;
                if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                    if (this.options.hoverClass)
                        this.element.removeClass(this.options.hoverClass);
                    this._trigger('out', event, this.ui(draggable));
                }
            },
            _drop: function(event, custom) {
                var draggable = custom || $.ui.ddmanager.current;
                if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0])
                    return false;
                var childrenIntersection = false;
                this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function() {
                    var inst = $.data(this, 'droppable');
                    if (inst.options.greedy && !inst.options.disabled && inst.options.scope == draggable.options.scope && inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) && $.ui.intersect(draggable, $.extend(inst, {
                        offset: inst.element.offset()
                    }), inst.options.tolerance)) {
                        childrenIntersection = true;
                        return false;
                    }
                });
                if (childrenIntersection)
                    return false;
                if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                    if (this.options.activeClass)
                        this.element.removeClass(this.options.activeClass);
                    if (this.options.hoverClass)
                        this.element.removeClass(this.options.hoverClass);
                    this._trigger('drop', event, this.ui(draggable));
                    return this.element;
                }
                return false;
            },
            ui: function(c) {
                return {
                    draggable: (c.currentItem || c.element),
                    helper: c.helper,
                    position: c.position,
                    offset: c.positionAbs
                };
            }
        });
        $.ui.intersect = function(draggable, droppable, toleranceMode) {
            if (!droppable.offset)
                return false;
            var x1 = (draggable.positionAbs || draggable.position.absolute).left
                , x2 = x1 + draggable.helperProportions.width
                , y1 = (draggable.positionAbs || draggable.position.absolute).top
                , y2 = y1 + draggable.helperProportions.height;
            var l = droppable.offset.left
                , r = l + droppable.proportions.width
                , t = droppable.offset.top
                , b = t + droppable.proportions.height;
            switch (toleranceMode) {
                case 'fit':
                    return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);
                    break;
                case 'intersect':
                    return (l < x1 + (draggable.helperProportions.width / 2) && x2 - (draggable.helperProportions.width / 2) < r && t < y1 + (draggable.helperProportions.height / 2) && y2 - (draggable.helperProportions.height / 2) < b);
                    break;
                case 'pointer':
                    var draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left)
                        , draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top)
                        , isOver = $.ui.isOver(draggableTop, draggableLeft, t, l, droppable.proportions.height, droppable.proportions.width);
                    return isOver;
                    break;
                case 'touch':
                    return ((y1 >= t && y1 <= b) || (y2 >= t && y2 <= b) || (y1 < t && y2 > b)) && ((x1 >= l && x1 <= r) || (x2 >= l && x2 <= r) || (x1 < l && x2 > r));
                    break;
                default:
                    return false;
                    break;
            }
        }
        ;
        $.ui.ddmanager = {
            current: null,
            droppables: {
                'default': []
            },
            prepareOffsets: function(t, event) {
                var m = $.ui.ddmanager.droppables[t.options.scope] || [];
                var type = event ? event.type : null;
                var list = (t.currentItem || t.element).find(":data(droppable)").andSelf();
                droppablesLoop: for (var i = 0; i < m.length; i++) {
                    if (m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0], (t.currentItem || t.element))))
                        continue;
                    for (var j = 0; j < list.length; j++) {
                        if (list[j] == m[i].element[0]) {
                            m[i].proportions.height = 0;
                            continue droppablesLoop;
                        }
                    }
                    ;m[i].visible = m[i].element.css("display") != "none";
                    if (!m[i].visible)
                        continue;
                    if (type == "mousedown")
                        m[i]._activate.call(m[i], event);
                    m[i].offset = m[i].element.offset();
                    m[i].proportions = {
                        width: m[i].element[0].offsetWidth,
                        height: m[i].element[0].offsetHeight
                    };
                }
            },
            drop: function(draggable, event) {
                var dropped = false;
                $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
                    if (!this.options)
                        return;
                    if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance))
                        dropped = this._drop.call(this, event) || dropped;
                    if (!this.options.disabled && this.visible && this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {
                        this.isout = 1;
                        this.isover = 0;
                        this._deactivate.call(this, event);
                    }
                });
                return dropped;
            },
            dragStart: function(draggable, event) {
                draggable.element.parentsUntil("body").bind("scroll.droppable", function() {
                    if (!draggable.options.refreshPositions)
                        $.ui.ddmanager.prepareOffsets(draggable, event);
                });
            },
            drag: function(draggable, event) {
                if (draggable.options.refreshPositions)
                    $.ui.ddmanager.prepareOffsets(draggable, event);
                $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
                    if (this.options.disabled || this.greedyChild || !this.visible)
                        return;
                    var intersects = $.ui.intersect(draggable, this, this.options.tolerance);
                    var c = !intersects && this.isover == 1 ? 'isout' : (intersects && this.isover == 0 ? 'isover' : null);
                    if (!c)
                        return;
                    var parentInstance;
                    if (this.options.greedy) {
                        var scope = this.options.scope;
                        var parent = this.element.parents(':data(droppable)').filter(function() {
                            return $.data(this, 'droppable').options.scope === scope;
                        });
                        if (parent.length) {
                            parentInstance = $.data(parent[0], 'droppable');
                            parentInstance.greedyChild = (c == 'isover' ? 1 : 0);
                        }
                    }
                    if (parentInstance && c == 'isover') {
                        parentInstance['isover'] = 0;
                        parentInstance['isout'] = 1;
                        parentInstance._out.call(parentInstance, event);
                    }
                    this[c] = 1;
                    this[c == 'isout' ? 'isover' : 'isout'] = 0;
                    this[c == "isover" ? "_over" : "_out"].call(this, event);
                    if (parentInstance && c == 'isout') {
                        parentInstance['isout'] = 0;
                        parentInstance['isover'] = 1;
                        parentInstance._over.call(parentInstance, event);
                    }
                });
            },
            dragStop: function(draggable, event) {
                draggable.element.parentsUntil("body").unbind("scroll.droppable");
                if (!draggable.options.refreshPositions)
                    $.ui.ddmanager.prepareOffsets(draggable, event);
            }
        };
    }
)(jQuery);
(function($, undefined) {
        $.widget("ui.resizable", $.ui.mouse, {
            version: "1.9.2",
            widgetEventPrefix: "resize",
            options: {
                alsoResize: false,
                animate: false,
                animateDuration: "slow",
                animateEasing: "swing",
                aspectRatio: false,
                autoHide: false,
                containment: false,
                ghost: false,
                grid: false,
                handles: "e,s,se",
                helper: false,
                maxHeight: null,
                maxWidth: null,
                minHeight: 10,
                minWidth: 10,
                zIndex: 1000
            },
            _create: function() {
                var that = this
                    , o = this.options;
                this.element.addClass("ui-resizable");
                $.extend(this, {
                    _aspectRatio: !!(o.aspectRatio),
                    aspectRatio: o.aspectRatio,
                    originalElement: this.element,
                    _proportionallyResizeElements: [],
                    _helper: o.helper || o.ghost || o.animate ? o.helper || 'ui-resizable-helper' : null
                });
                if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
                    this.element.wrap($('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
                        position: this.element.css('position'),
                        width: this.element.outerWidth(),
                        height: this.element.outerHeight(),
                        top: this.element.css('top'),
                        left: this.element.css('left')
                    }));
                    this.element = this.element.parent().data("resizable", this.element.data('resizable'));
                    this.elementIsWrapper = true;
                    this.element.css({
                        marginLeft: this.originalElement.css("marginLeft"),
                        marginTop: this.originalElement.css("marginTop"),
                        marginRight: this.originalElement.css("marginRight"),
                        marginBottom: this.originalElement.css("marginBottom")
                    });
                    this.originalElement.css({
                        marginLeft: 0,
                        marginTop: 0,
                        marginRight: 0,
                        marginBottom: 0
                    });
                    this.originalResizeStyle = this.originalElement.css('resize');
                    this.originalElement.css('resize', 'none');
                    this._proportionallyResizeElements.push(this.originalElement.css({
                        position: 'static',
                        zoom: 1,
                        display: 'block'
                    }));
                    this.originalElement.css({
                        margin: this.originalElement.css('margin')
                    });
                    this._proportionallyResize();
                }
                this.handles = o.handles || (!$('.ui-resizable-handle', this.element).length ? "e,s,se" : {
                    n: '.ui-resizable-n',
                    e: '.ui-resizable-e',
                    s: '.ui-resizable-s',
                    w: '.ui-resizable-w',
                    se: '.ui-resizable-se',
                    sw: '.ui-resizable-sw',
                    ne: '.ui-resizable-ne',
                    nw: '.ui-resizable-nw'
                });
                if (this.handles.constructor == String) {
                    if (this.handles == 'all')
                        this.handles = 'n,e,s,w,se,sw,ne,nw';
                    var n = this.handles.split(",");
                    this.handles = {};
                    for (var i = 0; i < n.length; i++) {
                        var handle = $.trim(n[i])
                            , hname = 'ui-resizable-' + handle;
                        var axis = $('<div class="ui-resizable-handle ' + hname + '"></div>');
                        axis.css({
                            zIndex: o.zIndex
                        });
                        if ('se' == handle) {
                            axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');
                        }
                        ;this.handles[handle] = '.ui-resizable-' + handle;
                        this.element.append(axis);
                    }
                }
                this._renderAxis = function(target) {
                    target = target || this.element;
                    for (var i in this.handles) {
                        if (this.handles[i].constructor == String)
                            this.handles[i] = $(this.handles[i], this.element).show();
                        if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                            var axis = $(this.handles[i], this.element)
                                , padWrapper = 0;
                            padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                            var padPos = ['padding', /ne|nw|n/.test(i) ? 'Top' : /se|sw|s/.test(i) ? 'Bottom' : /^e$/.test(i) ? 'Right' : 'Left'].join("");
                            target.css(padPos, padWrapper);
                            this._proportionallyResize();
                        }
                        if (!$(this.handles[i]).length)
                            continue;
                    }
                }
                ;
                this._renderAxis(this.element);
                this._handles = $('.ui-resizable-handle', this.element).disableSelection();
                this._handles.mouseover(function() {
                    if (!that.resizing) {
                        if (this.className)
                            var axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                        that.axis = axis && axis[1] ? axis[1] : 'se';
                    }
                });
                if (o.autoHide) {
                    this._handles.hide();
                    $(this.element).addClass("ui-resizable-autohide").mouseenter(function() {
                        if (o.disabled)
                            return;
                        $(this).removeClass("ui-resizable-autohide");
                        that._handles.show();
                    }).mouseleave(function() {
                        if (o.disabled)
                            return;
                        if (!that.resizing) {
                            $(this).addClass("ui-resizable-autohide");
                            that._handles.hide();
                        }
                    });
                }
                this._mouseInit();
            },
            _destroy: function() {
                this._mouseDestroy();
                var _destroy = function(exp) {
                    $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find('.ui-resizable-handle').remove();
                };
                if (this.elementIsWrapper) {
                    _destroy(this.element);
                    var wrapper = this.element;
                    this.originalElement.css({
                        position: wrapper.css('position'),
                        width: wrapper.outerWidth(),
                        height: wrapper.outerHeight(),
                        top: wrapper.css('top'),
                        left: wrapper.css('left')
                    }).insertAfter(wrapper);
                    wrapper.remove();
                }
                this.originalElement.css('resize', this.originalResizeStyle);
                _destroy(this.originalElement);
                return this;
            },
            _mouseCapture: function(event) {
                var handle = false;
                for (var i in this.handles) {
                    if ($(this.handles[i])[0] == event.target) {
                        handle = true;
                    }
                }
                return !this.options.disabled && handle;
            },
            _mouseStart: function(event) {
                var o = this.options
                    , iniPos = this.element.position()
                    , el = this.element;
                this.resizing = true;
                this.documentScroll = {
                    top: $(document).scrollTop(),
                    left: $(document).scrollLeft()
                };
                if (el.is('.ui-draggable') || (/absolute/).test(el.css('position'))) {
                    el.css({
                        position: 'absolute',
                        top: iniPos.top,
                        left: iniPos.left
                    });
                }
                this._renderProxy();
                var curleft = num(this.helper.css('left'))
                    , curtop = num(this.helper.css('top'));
                if (o.containment) {
                    curleft += $(o.containment).scrollLeft() || 0;
                    curtop += $(o.containment).scrollTop() || 0;
                }
                this.offset = this.helper.offset();
                this.position = {
                    left: curleft,
                    top: curtop
                };
                this.size = this._helper ? {
                    width: el.outerWidth(),
                    height: el.outerHeight()
                } : {
                    width: el.width(),
                    height: el.height()
                };
                this.originalSize = this._helper ? {
                    width: el.outerWidth(),
                    height: el.outerHeight()
                } : {
                    width: el.width(),
                    height: el.height()
                };
                this.originalPosition = {
                    left: curleft,
                    top: curtop
                };
                this.sizeDiff = {
                    width: el.outerWidth() - el.width(),
                    height: el.outerHeight() - el.height()
                };
                this.originalMousePosition = {
                    left: event.pageX,
                    top: event.pageY
                };
                this.aspectRatio = (typeof o.aspectRatio == 'number') ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);
                var cursor = $('.ui-resizable-' + this.axis).css('cursor');
                $('body').css('cursor', cursor == 'auto' ? this.axis + '-resize' : cursor);
                el.addClass("ui-resizable-resizing");
                this._propagate("start", event);
                return true;
            },
            _mouseDrag: function(event) {
                var el = this.helper
                    , o = this.options
                    , props = {}
                    , that = this
                    , smp = this.originalMousePosition
                    , a = this.axis;
                var dx = (event.pageX - smp.left) || 0
                    , dy = (event.pageY - smp.top) || 0;
                var trigger = this._change[a];
                if (!trigger)
                    return false;
                var data = trigger.apply(this, [event, dx, dy]);
                this._updateVirtualBoundaries(event.shiftKey);
                if (this._aspectRatio || event.shiftKey)
                    data = this._updateRatio(data, event);
                data = this._respectSize(data, event);
                this._propagate("resize", event);
                el.css({
                    top: this.position.top + "px",
                    left: this.position.left + "px",
                    width: this.size.width + "px",
                    height: this.size.height + "px"
                });
                if (!this._helper && this._proportionallyResizeElements.length)
                    this._proportionallyResize();
                this._updateCache(data);
                this._trigger('resize', event, this.ui());
                return false;
            },
            _mouseStop: function(event) {
                this.resizing = false;
                var o = this.options
                    , that = this;
                if (this._helper) {
                    var pr = this._proportionallyResizeElements
                        , ista = pr.length && (/textarea/i).test(pr[0].nodeName)
                        , soffseth = ista && $.ui.hasScroll(pr[0], 'left') ? 0 : that.sizeDiff.height
                        , soffsetw = ista ? 0 : that.sizeDiff.width;
                    var s = {
                        width: (that.helper.width() - soffsetw),
                        height: (that.helper.height() - soffseth)
                    }
                        , left = (parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left)) || null
                        , top = (parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top)) || null;
                    if (!o.animate)
                        this.element.css($.extend(s, {
                            top: top,
                            left: left
                        }));
                    that.helper.height(that.size.height);
                    that.helper.width(that.size.width);
                    if (this._helper && !o.animate)
                        this._proportionallyResize();
                }
                $('body').css('cursor', 'auto');
                this.element.removeClass("ui-resizable-resizing");
                this._propagate("stop", event);
                if (this._helper)
                    this.helper.remove();
                return false;
            },
            _updateVirtualBoundaries: function(forceAspectRatio) {
                var o = this.options, pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b;
                b = {
                    minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
                    maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
                    minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
                    maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
                };
                if (this._aspectRatio || forceAspectRatio) {
                    pMinWidth = b.minHeight * this.aspectRatio;
                    pMinHeight = b.minWidth / this.aspectRatio;
                    pMaxWidth = b.maxHeight * this.aspectRatio;
                    pMaxHeight = b.maxWidth / this.aspectRatio;
                    if (pMinWidth > b.minWidth)
                        b.minWidth = pMinWidth;
                    if (pMinHeight > b.minHeight)
                        b.minHeight = pMinHeight;
                    if (pMaxWidth < b.maxWidth)
                        b.maxWidth = pMaxWidth;
                    if (pMaxHeight < b.maxHeight)
                        b.maxHeight = pMaxHeight;
                }
                this._vBoundaries = b;
            },
            _updateCache: function(data) {
                var o = this.options;
                this.offset = this.helper.offset();
                if (isNumber(data.left))
                    this.position.left = data.left;
                if (isNumber(data.top))
                    this.position.top = data.top;
                if (isNumber(data.height))
                    this.size.height = data.height;
                if (isNumber(data.width))
                    this.size.width = data.width;
            },
            _updateRatio: function(data, event) {
                var o = this.options
                    , cpos = this.position
                    , csize = this.size
                    , a = this.axis;
                if (isNumber(data.height))
                    data.width = (data.height * this.aspectRatio);
                else if (isNumber(data.width))
                    data.height = (data.width / this.aspectRatio);
                if (a == 'sw') {
                    data.left = cpos.left + (csize.width - data.width);
                    data.top = null;
                }
                if (a == 'nw') {
                    data.top = cpos.top + (csize.height - data.height);
                    data.left = cpos.left + (csize.width - data.width);
                }
                return data;
            },
            _respectSize: function(data, event) {
                var el = this.helper
                    , o = this._vBoundaries
                    , pRatio = this._aspectRatio || event.shiftKey
                    , a = this.axis
                    , ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width)
                    , ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height)
                    , isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width)
                    , isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height);
                if (isminw)
                    data.width = o.minWidth;
                if (isminh)
                    data.height = o.minHeight;
                if (ismaxw)
                    data.width = o.maxWidth;
                if (ismaxh)
                    data.height = o.maxHeight;
                var dw = this.originalPosition.left + this.originalSize.width
                    , dh = this.position.top + this.size.height;
                var cw = /sw|nw|w/.test(a)
                    , ch = /nw|ne|n/.test(a);
                if (isminw && cw)
                    data.left = dw - o.minWidth;
                if (ismaxw && cw)
                    data.left = dw - o.maxWidth;
                if (isminh && ch)
                    data.top = dh - o.minHeight;
                if (ismaxh && ch)
                    data.top = dh - o.maxHeight;
                var isNotwh = !data.width && !data.height;
                if (isNotwh && !data.left && data.top)
                    data.top = null;
                else if (isNotwh && !data.top && data.left)
                    data.left = null;
                return data;
            },
            _proportionallyResize: function() {
                var o = this.options;
                if (!this._proportionallyResizeElements.length)
                    return;
                var element = this.helper || this.element;
                for (var i = 0; i < this._proportionallyResizeElements.length; i++) {
                    var prel = this._proportionallyResizeElements[i];
                    if (!this.borderDif) {
                        var b = [prel.css('borderTopWidth'), prel.css('borderRightWidth'), prel.css('borderBottomWidth'), prel.css('borderLeftWidth')]
                            , p = [prel.css('paddingTop'), prel.css('paddingRight'), prel.css('paddingBottom'), prel.css('paddingLeft')];
                        this.borderDif = $.map(b, function(v, i) {
                            var border = parseInt(v, 10) || 0
                                , padding = parseInt(p[i], 10) || 0;
                            return border + padding;
                        });
                    }
                    prel.css({
                        height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
                        width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
                    });
                }
                ;
            },
            _renderProxy: function() {
                var el = this.element
                    , o = this.options;
                this.elementOffset = el.offset();
                if (this._helper) {
                    this.helper = this.helper || $('<div style="overflow:hidden;"></div>');
                    var ie6offset = ($.ui.ie6 ? 1 : 0)
                        , pxyoffset = ($.ui.ie6 ? 2 : -1);
                    this.helper.addClass(this._helper).css({
                        width: this.element.outerWidth() + pxyoffset,
                        height: this.element.outerHeight() + pxyoffset,
                        position: 'absolute',
                        left: this.elementOffset.left - ie6offset + 'px',
                        top: this.elementOffset.top - ie6offset + 'px',
                        zIndex: ++o.zIndex
                    });
                    this.helper.appendTo("body").disableSelection();
                } else {
                    this.helper = this.element;
                }
            },
            _change: {
                e: function(event, dx, dy) {
                    return {
                        width: this.originalSize.width + dx
                    };
                },
                w: function(event, dx, dy) {
                    var o = this.options
                        , cs = this.originalSize
                        , sp = this.originalPosition;
                    return {
                        left: sp.left + dx,
                        width: cs.width - dx
                    };
                },
                n: function(event, dx, dy) {
                    var o = this.options
                        , cs = this.originalSize
                        , sp = this.originalPosition;
                    return {
                        top: sp.top + dy,
                        height: cs.height - dy
                    };
                },
                s: function(event, dx, dy) {
                    return {
                        height: this.originalSize.height + dy
                    };
                },
                se: function(event, dx, dy) {
                    return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
                },
                sw: function(event, dx, dy) {
                    return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
                },
                ne: function(event, dx, dy) {
                    return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
                },
                nw: function(event, dx, dy) {
                    return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
                }
            },
            _propagate: function(n, event) {
                $.ui.plugin.call(this, n, [event, this.ui()]);
                (n != "resize" && this._trigger(n, event, this.ui()));
            },
            plugins: {},
            ui: function() {
                return {
                    originalElement: this.originalElement,
                    element: this.element,
                    helper: this.helper,
                    position: this.position,
                    size: this.size,
                    originalSize: this.originalSize,
                    originalPosition: this.originalPosition
                };
            }
        });
        $.ui.plugin.add("resizable", "alsoResize", {
            start: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options;
                var _store = function(exp) {
                    $(exp).each(function() {
                        var el = $(this);
                        el.data("resizable-alsoresize", {
                            width: parseInt(el.width(), 10),
                            height: parseInt(el.height(), 10),
                            left: parseInt(el.css('left'), 10),
                            top: parseInt(el.css('top'), 10)
                        });
                    });
                };
                if (typeof (o.alsoResize) == 'object' && !o.alsoResize.parentNode) {
                    if (o.alsoResize.length) {
                        o.alsoResize = o.alsoResize[0];
                        _store(o.alsoResize);
                    } else {
                        $.each(o.alsoResize, function(exp) {
                            _store(exp);
                        });
                    }
                } else {
                    _store(o.alsoResize);
                }
            },
            resize: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options
                    , os = that.originalSize
                    , op = that.originalPosition;
                var delta = {
                    height: (that.size.height - os.height) || 0,
                    width: (that.size.width - os.width) || 0,
                    top: (that.position.top - op.top) || 0,
                    left: (that.position.left - op.left) || 0
                }
                    , _alsoResize = function(exp, c) {
                    $(exp).each(function() {
                        var el = $(this)
                            , start = $(this).data("resizable-alsoresize")
                            , style = {}
                            , css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ['width', 'height'] : ['width', 'height', 'top', 'left'];
                        $.each(css, function(i, prop) {
                            var sum = (start[prop] || 0) + (delta[prop] || 0);
                            if (sum && sum >= 0)
                                style[prop] = sum || null;
                        });
                        el.css(style);
                    });
                };
                if (typeof (o.alsoResize) == 'object' && !o.alsoResize.nodeType) {
                    $.each(o.alsoResize, function(exp, c) {
                        _alsoResize(exp, c);
                    });
                } else {
                    _alsoResize(o.alsoResize);
                }
            },
            stop: function(event, ui) {
                $(this).removeData("resizable-alsoresize");
            }
        });
        $.ui.plugin.add("resizable", "animate", {
            stop: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options;
                var pr = that._proportionallyResizeElements
                    , ista = pr.length && (/textarea/i).test(pr[0].nodeName)
                    , soffseth = ista && $.ui.hasScroll(pr[0], 'left') ? 0 : that.sizeDiff.height
                    , soffsetw = ista ? 0 : that.sizeDiff.width;
                var style = {
                    width: (that.size.width - soffsetw),
                    height: (that.size.height - soffseth)
                }
                    , left = (parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left)) || null
                    , top = (parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top)) || null;
                that.element.animate($.extend(style, top && left ? {
                    top: top,
                    left: left
                } : {}), {
                    duration: o.animateDuration,
                    easing: o.animateEasing,
                    step: function() {
                        var data = {
                            width: parseInt(that.element.css('width'), 10),
                            height: parseInt(that.element.css('height'), 10),
                            top: parseInt(that.element.css('top'), 10),
                            left: parseInt(that.element.css('left'), 10)
                        };
                        if (pr && pr.length)
                            $(pr[0]).css({
                                width: data.width,
                                height: data.height
                            });
                        that._updateCache(data);
                        that._propagate("resize", event);
                    }
                });
            }
        });
        $.ui.plugin.add("resizable", "containment", {
            start: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options
                    , el = that.element;
                var oc = o.containment
                    , ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;
                if (!ce)
                    return;
                that.containerElement = $(ce);
                if (/document/.test(oc) || oc == document) {
                    that.containerOffset = {
                        left: 0,
                        top: 0
                    };
                    that.containerPosition = {
                        left: 0,
                        top: 0
                    };
                    that.parentData = {
                        element: $(document),
                        left: 0,
                        top: 0,
                        width: $(document).width(),
                        height: $(document).height() || document.body.parentNode.scrollHeight
                    };
                } else {
                    var element = $(ce)
                        , p = [];
                    $(["Top", "Right", "Left", "Bottom"]).each(function(i, name) {
                        p[i] = num(element.css("padding" + name));
                    });
                    that.containerOffset = element.offset();
                    that.containerPosition = element.position();
                    that.containerSize = {
                        height: (element.innerHeight() - p[3]),
                        width: (element.innerWidth() - p[1])
                    };
                    var co = that.containerOffset
                        , ch = that.containerSize.height
                        , cw = that.containerSize.width
                        , width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw)
                        , height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);
                    that.parentData = {
                        element: ce,
                        left: co.left,
                        top: co.top,
                        width: width,
                        height: height
                    };
                }
            },
            resize: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options
                    , ps = that.containerSize
                    , co = that.containerOffset
                    , cs = that.size
                    , cp = that.position
                    , pRatio = that._aspectRatio || event.shiftKey
                    , cop = {
                    top: 0,
                    left: 0
                }
                    , ce = that.containerElement;
                if (ce[0] != document && (/static/).test(ce.css('position')))
                    cop = co;
                if (cp.left < (that._helper ? co.left : 0)) {
                    that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
                    if (pRatio)
                        that.size.height = that.size.width / that.aspectRatio;
                    that.position.left = o.helper ? co.left : 0;
                }
                if (cp.top < (that._helper ? co.top : 0)) {
                    that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
                    if (pRatio)
                        that.size.width = that.size.height * that.aspectRatio;
                    that.position.top = that._helper ? co.top : 0;
                }
                that.offset.left = that.parentData.left + that.position.left;
                that.offset.top = that.parentData.top + that.position.top;
                var woset = Math.abs((that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width)
                    , hoset = Math.abs((that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height);
                var isParent = that.containerElement.get(0) == that.element.parent().get(0)
                    , isOffsetRelative = /relative|absolute/.test(that.containerElement.css('position'));
                if (isParent && isOffsetRelative)
                    woset -= that.parentData.left;
                if (woset + that.size.width >= that.parentData.width) {
                    that.size.width = that.parentData.width - woset;
                    if (pRatio)
                        that.size.height = that.size.width / that.aspectRatio;
                }
                if (hoset + that.size.height >= that.parentData.height) {
                    that.size.height = that.parentData.height - hoset;
                    if (pRatio)
                        that.size.width = that.size.height * that.aspectRatio;
                }
            },
            stop: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options
                    , cp = that.position
                    , co = that.containerOffset
                    , cop = that.containerPosition
                    , ce = that.containerElement;
                var helper = $(that.helper)
                    , ho = helper.offset()
                    , w = helper.outerWidth() - that.sizeDiff.width
                    , h = helper.outerHeight() - that.sizeDiff.height;
                if (that._helper && !o.animate && (/relative/).test(ce.css('position')))
                    $(this).css({
                        left: ho.left - cop.left - co.left,
                        width: w,
                        height: h
                    });
                if (that._helper && !o.animate && (/static/).test(ce.css('position')))
                    $(this).css({
                        left: ho.left - cop.left - co.left,
                        width: w,
                        height: h
                    });
            }
        });
        $.ui.plugin.add("resizable", "ghost", {
            start: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options
                    , cs = that.size;
                that.ghost = that.originalElement.clone();
                that.ghost.css({
                    opacity: .25,
                    display: 'block',
                    position: 'relative',
                    height: cs.height,
                    width: cs.width,
                    margin: 0,
                    left: 0,
                    top: 0
                }).addClass('ui-resizable-ghost').addClass(typeof o.ghost == 'string' ? o.ghost : '');
                that.ghost.appendTo(that.helper);
            },
            resize: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options;
                if (that.ghost)
                    that.ghost.css({
                        position: 'relative',
                        height: that.size.height,
                        width: that.size.width
                    });
            },
            stop: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options;
                if (that.ghost && that.helper)
                    that.helper.get(0).removeChild(that.ghost.get(0));
            }
        });
        $.ui.plugin.add("resizable", "grid", {
            resize: function(event, ui) {
                var that = $(this).data("resizable")
                    , o = that.options
                    , cs = that.size
                    , os = that.originalSize
                    , op = that.originalPosition
                    , a = that.axis
                    , ratio = o._aspectRatio || event.shiftKey;
                o.grid = typeof o.grid == "number" ? [o.grid, o.grid] : o.grid;
                var ox = Math.round((cs.width - os.width) / (o.grid[0] || 1)) * (o.grid[0] || 1)
                    , oy = Math.round((cs.height - os.height) / (o.grid[1] || 1)) * (o.grid[1] || 1);
                if (/^(se|s|e)$/.test(a)) {
                    that.size.width = os.width + ox;
                    that.size.height = os.height + oy;
                } else if (/^(ne)$/.test(a)) {
                    that.size.width = os.width + ox;
                    that.size.height = os.height + oy;
                    that.position.top = op.top - oy;
                } else if (/^(sw)$/.test(a)) {
                    that.size.width = os.width + ox;
                    that.size.height = os.height + oy;
                    that.position.left = op.left - ox;
                } else {
                    that.size.width = os.width + ox;
                    that.size.height = os.height + oy;
                    that.position.top = op.top - oy;
                    that.position.left = op.left - ox;
                }
            }
        });
        var num = function(v) {
            return parseInt(v, 10) || 0;
        };
        var isNumber = function(value) {
            return !isNaN(parseInt(value, 10));
        };
    }
)(jQuery);
(function($, undefined) {
        $.widget("ui.selectable", $.ui.mouse, {
            version: "1.9.2",
            options: {
                appendTo: 'body',
                autoRefresh: true,
                distance: 0,
                filter: '*',
                tolerance: 'touch'
            },
            _create: function() {
                var that = this;
                this.element.addClass("ui-selectable");
                this.dragged = false;
                var selectees;
                this.refresh = function() {
                    selectees = $(that.options.filter, that.element[0]);
                    selectees.addClass("ui-selectee");
                    selectees.each(function() {
                        var $this = $(this);
                        var pos = $this.offset();
                        $.data(this, "selectable-item", {
                            element: this,
                            $element: $this,
                            left: pos.left,
                            top: pos.top,
                            right: pos.left + $this.outerWidth(),
                            bottom: pos.top + $this.outerHeight(),
                            startselected: false,
                            selected: $this.hasClass('ui-selected'),
                            selecting: $this.hasClass('ui-selecting'),
                            unselecting: $this.hasClass('ui-unselecting')
                        });
                    });
                }
                ;
                this.refresh();
                this.selectees = selectees.addClass("ui-selectee");
                this._mouseInit();
                this.helper = $("<div class='ui-selectable-helper'></div>");
            },
            _destroy: function() {
                this.selectees.removeClass("ui-selectee").removeData("selectable-item");
                this.element.removeClass("ui-selectable ui-selectable-disabled");
                this._mouseDestroy();
            },
            _mouseStart: function(event) {
                var that = this;
                this.opos = [event.pageX, event.pageY];
                if (this.options.disabled)
                    return;
                var options = this.options;
                this.selectees = $(options.filter, this.element[0]);
                this._trigger("start", event);
                $(options.appendTo).append(this.helper);
                this.helper.css({
                    "left": event.clientX,
                    "top": event.clientY,
                    "width": 0,
                    "height": 0
                });
                if (options.autoRefresh) {
                    this.refresh();
                }
                this.selectees.filter('.ui-selected').each(function() {
                    var selectee = $.data(this, "selectable-item");
                    selectee.startselected = true;
                    if (!event.metaKey && !event.ctrlKey) {
                        selectee.$element.removeClass('ui-selected');
                        selectee.selected = false;
                        selectee.$element.addClass('ui-unselecting');
                        selectee.unselecting = true;
                        that._trigger("unselecting", event, {
                            unselecting: selectee.element
                        });
                    }
                });
                $(event.target).parents().andSelf().each(function() {
                    var selectee = $.data(this, "selectable-item");
                    if (selectee) {
                        var doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass('ui-selected');
                        selectee.$element.removeClass(doSelect ? "ui-unselecting" : "ui-selected").addClass(doSelect ? "ui-selecting" : "ui-unselecting");
                        selectee.unselecting = !doSelect;
                        selectee.selecting = doSelect;
                        selectee.selected = doSelect;
                        if (doSelect) {
                            that._trigger("selecting", event, {
                                selecting: selectee.element
                            });
                        } else {
                            that._trigger("unselecting", event, {
                                unselecting: selectee.element
                            });
                        }
                        return false;
                    }
                });
            },
            _mouseDrag: function(event) {
                var that = this;
                this.dragged = true;
                if (this.options.disabled)
                    return;
                var options = this.options;
                var x1 = this.opos[0]
                    , y1 = this.opos[1]
                    , x2 = event.pageX
                    , y2 = event.pageY;
                if (x1 > x2) {
                    var tmp = x2;
                    x2 = x1;
                    x1 = tmp;
                }
                if (y1 > y2) {
                    var tmp = y2;
                    y2 = y1;
                    y1 = tmp;
                }
                this.helper.css({
                    left: x1,
                    top: y1,
                    width: x2 - x1,
                    height: y2 - y1
                });
                this.selectees.each(function() {
                    var selectee = $.data(this, "selectable-item");
                    if (!selectee || selectee.element == that.element[0])
                        return;
                    var hit = false;
                    if (options.tolerance == 'touch') {
                        hit = (!(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1));
                    } else if (options.tolerance == 'fit') {
                        hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
                    }
                    if (hit) {
                        if (selectee.selected) {
                            selectee.$element.removeClass('ui-selected');
                            selectee.selected = false;
                        }
                        if (selectee.unselecting) {
                            selectee.$element.removeClass('ui-unselecting');
                            selectee.unselecting = false;
                        }
                        if (!selectee.selecting) {
                            selectee.$element.addClass('ui-selecting');
                            selectee.selecting = true;
                            that._trigger("selecting", event, {
                                selecting: selectee.element
                            });
                        }
                    } else {
                        if (selectee.selecting) {
                            if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                                selectee.$element.removeClass('ui-selecting');
                                selectee.selecting = false;
                                selectee.$element.addClass('ui-selected');
                                selectee.selected = true;
                            } else {
                                selectee.$element.removeClass('ui-selecting');
                                selectee.selecting = false;
                                if (selectee.startselected) {
                                    selectee.$element.addClass('ui-unselecting');
                                    selectee.unselecting = true;
                                }
                                that._trigger("unselecting", event, {
                                    unselecting: selectee.element
                                });
                            }
                        }
                        if (selectee.selected) {
                            if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                                selectee.$element.removeClass('ui-selected');
                                selectee.selected = false;
                                selectee.$element.addClass('ui-unselecting');
                                selectee.unselecting = true;
                                that._trigger("unselecting", event, {
                                    unselecting: selectee.element
                                });
                            }
                        }
                    }
                });
                return false;
            },
            _mouseStop: function(event) {
                var that = this;
                this.dragged = false;
                var options = this.options;
                $('.ui-unselecting', this.element[0]).each(function() {
                    var selectee = $.data(this, "selectable-item");
                    selectee.$element.removeClass('ui-unselecting');
                    selectee.unselecting = false;
                    selectee.startselected = false;
                    that._trigger("unselected", event, {
                        unselected: selectee.element
                    });
                });
                $('.ui-selecting', this.element[0]).each(function() {
                    var selectee = $.data(this, "selectable-item");
                    selectee.$element.removeClass('ui-selecting').addClass('ui-selected');
                    selectee.selecting = false;
                    selectee.selected = true;
                    selectee.startselected = true;
                    that._trigger("selected", event, {
                        selected: selectee.element
                    });
                });
                this._trigger("stop", event);
                this.helper.remove();
                return false;
            }
        });
    }
)(jQuery);
(function($, undefined) {
        $.widget("ui.sortable", $.ui.mouse, {
            version: "1.9.2",
            widgetEventPrefix: "sort",
            ready: false,
            options: {
                appendTo: "parent",
                axis: false,
                connectWith: false,
                containment: false,
                cursor: 'auto',
                cursorAt: false,
                dropOnEmpty: true,
                forcePlaceholderSize: false,
                forceHelperSize: false,
                grid: false,
                handle: false,
                helper: "original",
                items: '> *',
                opacity: false,
                placeholder: false,
                revert: false,
                scroll: true,
                scrollSensitivity: 20,
                scrollSpeed: 20,
                scope: "default",
                tolerance: "intersect",
                zIndex: 1000
            },
            _create: function() {
                var o = this.options;
                this.containerCache = {};
                this.element.addClass("ui-sortable");
                this.refresh();
                this.floating = this.items.length ? o.axis === 'x' || (/left|right/).test(this.items[0].item.css('float')) || (/inline|table-cell/).test(this.items[0].item.css('display')) : false;
                this.offset = this.element.offset();
                this._mouseInit();
                this.ready = true
            },
            _destroy: function() {
                this.element.removeClass("ui-sortable ui-sortable-disabled");
                this._mouseDestroy();
                for (var i = this.items.length - 1; i >= 0; i--)
                    this.items[i].item.removeData(this.widgetName + "-item");
                return this;
            },
            _setOption: function(key, value) {
                if (key === "disabled") {
                    this.options[key] = value;
                    this.widget().toggleClass("ui-sortable-disabled", !!value);
                } else {
                    $.Widget.prototype._setOption.apply(this, arguments);
                }
            },
            _mouseCapture: function(event, overrideHandle) {
                var that = this;
                if (this.reverting) {
                    return false;
                }
                if (this.options.disabled || this.options.type == 'static')
                    return false;
                this._refreshItems(event);
                var currentItem = null
                    , nodes = $(event.target).parents().each(function() {
                    if ($.data(this, that.widgetName + '-item') == that) {
                        currentItem = $(this);
                        return false;
                    }
                });
                if ($.data(event.target, that.widgetName + '-item') == that)
                    currentItem = $(event.target);
                if (!currentItem)
                    return false;
                if (this.options.handle && !overrideHandle) {
                    var validHandle = false;
                    $(this.options.handle, currentItem).find("*").andSelf().each(function() {
                        if (this == event.target)
                            validHandle = true;
                    });
                    if (!validHandle)
                        return false;
                }
                this.currentItem = currentItem;
                this._removeCurrentsFromItems();
                return true;
            },
            _mouseStart: function(event, overrideHandle, noActivation) {
                var o = this.options;
                this.currentContainer = this;
                this.refreshPositions();
                this.helper = this._createHelper(event);
                this._cacheHelperProportions();
                this._cacheMargins();
                this.scrollParent = this.helper.scrollParent();
                this.offset = this.currentItem.offset();
                this.offset = {
                    top: this.offset.top - this.margins.top,
                    left: this.offset.left - this.margins.left
                };
                $.extend(this.offset, {
                    click: {
                        left: event.pageX - this.offset.left,
                        top: event.pageY - this.offset.top
                    },
                    parent: this._getParentOffset(),
                    relative: this._getRelativeOffset()
                });
                this.helper.css("position", "absolute");
                this.cssPosition = this.helper.css("position");
                this.originalPosition = this._generatePosition(event);
                this.originalPageX = event.pageX;
                this.originalPageY = event.pageY;
                (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
                this.domPosition = {
                    prev: this.currentItem.prev()[0],
                    parent: this.currentItem.parent()[0]
                };
                if (this.helper[0] != this.currentItem[0]) {
                    this.currentItem.hide();
                }
                this._createPlaceholder();
                if (o.containment)
                    this._setContainment();
                if (o.cursor) {
                    if ($('body').css("cursor"))
                        this._storedCursor = $('body').css("cursor");
                    $('body').css("cursor", o.cursor);
                }
                if (o.opacity) {
                    if (this.helper.css("opacity"))
                        this._storedOpacity = this.helper.css("opacity");
                    this.helper.css("opacity", o.opacity);
                }
                if (o.zIndex) {
                    if (this.helper.css("zIndex"))
                        this._storedZIndex = this.helper.css("zIndex");
                    this.helper.css("zIndex", o.zIndex);
                }
                if (this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML')
                    this.overflowOffset = this.scrollParent.offset();
                this._trigger("start", event, this._uiHash());
                if (!this._preserveHelperProportions)
                    this._cacheHelperProportions();
                if (!noActivation) {
                    for (var i = this.containers.length - 1; i >= 0; i--) {
                        this.containers[i]._trigger("activate", event, this._uiHash(this));
                    }
                }
                if ($.ui.ddmanager)
                    $.ui.ddmanager.current = this;
                if ($.ui.ddmanager && !o.dropBehaviour)
                    $.ui.ddmanager.prepareOffsets(this, event);
                this.dragging = true;
                this.helper.addClass("ui-sortable-helper");
                this._mouseDrag(event);
                return true;
            },
            _mouseDrag: function(event) {
                this.position = this._generatePosition(event);
                this.positionAbs = this._convertPositionTo("absolute");
                if (!this.lastPositionAbs) {
                    this.lastPositionAbs = this.positionAbs;
                }
                if (this.options.scroll) {
                    var o = this.options
                        , scrolled = false;
                    if (this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML') {
                        if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                        else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity)
                            this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                        if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                        else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity)
                            this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                    } else {
                        if (event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                            scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                        else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                            scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                        if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                            scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                        else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                            scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                    }
                    if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                        $.ui.ddmanager.prepareOffsets(this, event);
                }
                this.positionAbs = this._convertPositionTo("absolute");
                if (!this.options.axis || this.options.axis != "y")
                    this.helper[0].style.left = this.position.left + 'px';
                if (!this.options.axis || this.options.axis != "x")
                    this.helper[0].style.top = this.position.top + 'px';
                for (var i = this.items.length - 1; i >= 0; i--) {
                    var item = this.items[i]
                        , itemElement = item.item[0]
                        , intersection = this._intersectsWithPointer(item);
                    if (!intersection)
                        continue;
                    if (item.instance !== this.currentContainer)
                        continue;
                    if (itemElement != this.currentItem[0] && this.placeholder[intersection == 1 ? "next" : "prev"]()[0] != itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type == 'semi-dynamic' ? !$.contains(this.element[0], itemElement) : true)) {
                        this.direction = intersection == 1 ? "down" : "up";
                        if (this.options.tolerance == "pointer" || this._intersectsWithSides(item)) {
                            this._rearrange(event, item);
                        } else {
                            break;
                        }
                        this._trigger("change", event, this._uiHash());
                        break;
                    }
                }
                this._contactContainers(event);
                if ($.ui.ddmanager)
                    $.ui.ddmanager.drag(this, event);
                this._trigger('sort', event, this._uiHash());
                this.lastPositionAbs = this.positionAbs;
                return false;
            },
            _mouseStop: function(event, noPropagation) {
                if (!event)
                    return;
                if ($.ui.ddmanager && !this.options.dropBehaviour)
                    $.ui.ddmanager.drop(this, event);
                if (this.options.revert) {
                    var that = this;
                    var cur = this.placeholder.offset();
                    this.reverting = true;
                    $(this.helper).animate({
                        left: cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
                        top: cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
                    }, parseInt(this.options.revert, 10) || 500, function() {
                        that._clear(event);
                    });
                } else {
                    this._clear(event, noPropagation);
                }
                return false;
            },
            cancel: function() {
                if (this.dragging) {
                    this._mouseUp({
                        target: null
                    });
                    if (this.options.helper == "original")
                        this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
                    else
                        this.currentItem.show();
                    for (var i = this.containers.length - 1; i >= 0; i--) {
                        this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                        if (this.containers[i].containerCache.over) {
                            this.containers[i]._trigger("out", null, this._uiHash(this));
                            this.containers[i].containerCache.over = 0;
                        }
                    }
                }
                if (this.placeholder) {
                    if (this.placeholder[0].parentNode)
                        this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                    if (this.options.helper != "original" && this.helper && this.helper[0].parentNode)
                        this.helper.remove();
                    $.extend(this, {
                        helper: null,
                        dragging: false,
                        reverting: false,
                        _noFinalSort: null
                    });
                    if (this.domPosition.prev) {
                        $(this.domPosition.prev).after(this.currentItem);
                    } else {
                        $(this.domPosition.parent).prepend(this.currentItem);
                    }
                }
                return this;
            },
            serialize: function(o) {
                var items = this._getItemsAsjQuery(o && o.connected);
                var str = [];
                o = o || {};
                $(items).each(function() {
                    var res = ($(o.item || this).attr(o.attribute || 'id') || '').match(o.expression || (/(.+)[-=_](.+)/));
                    if (res)
                        str.push((o.key || res[1] + '[]') + '=' + (o.key && o.expression ? res[1] : res[2]));
                });
                if (!str.length && o.key) {
                    str.push(o.key + '=');
                }
                return str.join('&');
            },
            toArray: function(o) {
                var items = this._getItemsAsjQuery(o && o.connected);
                var ret = [];
                o = o || {};
                items.each(function() {
                    ret.push($(o.item || this).attr(o.attribute || 'id') || '');
                });
                return ret;
            },
            _intersectsWith: function(item) {
                var x1 = this.positionAbs.left
                    , x2 = x1 + this.helperProportions.width
                    , y1 = this.positionAbs.top
                    , y2 = y1 + this.helperProportions.height;
                var l = item.left
                    , r = l + item.width
                    , t = item.top
                    , b = t + item.height;
                var dyClick = this.offset.click.top
                    , dxClick = this.offset.click.left;
                var isOverElement = (y1 + dyClick) > t && (y1 + dyClick) < b && (x1 + dxClick) > l && (x1 + dxClick) < r;
                if (this.options.tolerance == "pointer" || this.options.forcePointerForContainers || (this.options.tolerance != "pointer" && this.helperProportions[this.floating ? 'width' : 'height'] > item[this.floating ? 'width' : 'height'])) {
                    return isOverElement;
                } else {
                    return (l < x1 + (this.helperProportions.width / 2) && x2 - (this.helperProportions.width / 2) < r && t < y1 + (this.helperProportions.height / 2) && y2 - (this.helperProportions.height / 2) < b);
                }
            },
            _intersectsWithPointer: function(item) {
                var isOverElementHeight = (this.options.axis === 'x') || $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height)
                    , isOverElementWidth = (this.options.axis === 'y') || $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width)
                    , isOverElement = isOverElementHeight && isOverElementWidth
                    , verticalDirection = this._getDragVerticalDirection()
                    , horizontalDirection = this._getDragHorizontalDirection();
                if (!isOverElement)
                    return false;
                return this.floating ? (((horizontalDirection && horizontalDirection == "right") || verticalDirection == "down") ? 2 : 1) : (verticalDirection && (verticalDirection == "down" ? 2 : 1));
            },
            _intersectsWithSides: function(item) {
                var isOverBottomHalf = $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height / 2), item.height)
                    , isOverRightHalf = $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width / 2), item.width)
                    , verticalDirection = this._getDragVerticalDirection()
                    , horizontalDirection = this._getDragHorizontalDirection();
                if (this.floating && horizontalDirection) {
                    return ((horizontalDirection == "right" && isOverRightHalf) || (horizontalDirection == "left" && !isOverRightHalf));
                } else {
                    return verticalDirection && ((verticalDirection == "down" && isOverBottomHalf) || (verticalDirection == "up" && !isOverBottomHalf));
                }
            },
            _getDragVerticalDirection: function() {
                var delta = this.positionAbs.top - this.lastPositionAbs.top;
                return delta != 0 && (delta > 0 ? "down" : "up");
            },
            _getDragHorizontalDirection: function() {
                var delta = this.positionAbs.left - this.lastPositionAbs.left;
                return delta != 0 && (delta > 0 ? "right" : "left");
            },
            refresh: function(event) {
                this._refreshItems(event);
                this.refreshPositions();
                return this;
            },
            _connectWith: function() {
                var options = this.options;
                return options.connectWith.constructor == String ? [options.connectWith] : options.connectWith;
            },
            _getItemsAsjQuery: function(connected) {
                var items = [];
                var queries = [];
                var connectWith = this._connectWith();
                if (connectWith && connected) {
                    for (var i = connectWith.length - 1; i >= 0; i--) {
                        var cur = $(connectWith[i]);
                        for (var j = cur.length - 1; j >= 0; j--) {
                            var inst = $.data(cur[j], this.widgetName);
                            if (inst && inst != this && !inst.options.disabled) {
                                queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), inst]);
                            }
                        }
                        ;
                    }
                    ;
                }
                queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                    options: this.options,
                    item: this.currentItem
                }) : $(this.options.items, this.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), this]);
                for (var i = queries.length - 1; i >= 0; i--) {
                    queries[i][0].each(function() {
                        items.push(this);
                    });
                }
                ;return $(items);
            },
            _removeCurrentsFromItems: function() {
                var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
                this.items = $.grep(this.items, function(item) {
                    for (var j = 0; j < list.length; j++) {
                        if (list[j] == item.item[0])
                            return false;
                    }
                    ;return true;
                });
            },
            _refreshItems: function(event) {
                this.items = [];
                this.containers = [this];
                var items = this.items;
                var queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {
                    item: this.currentItem
                }) : $(this.options.items, this.element), this]];
                var connectWith = this._connectWith();
                if (connectWith && this.ready) {
                    for (var i = connectWith.length - 1; i >= 0; i--) {
                        var cur = $(connectWith[i]);
                        for (var j = cur.length - 1; j >= 0; j--) {
                            var inst = $.data(cur[j], this.widgetName);
                            if (inst && inst != this && !inst.options.disabled) {
                                queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {
                                    item: this.currentItem
                                }) : $(inst.options.items, inst.element), inst]);
                                this.containers.push(inst);
                            }
                        }
                        ;
                    }
                    ;
                }
                for (var i = queries.length - 1; i >= 0; i--) {
                    var targetData = queries[i][1];
                    var _queries = queries[i][0];
                    for (var j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
                        var item = $(_queries[j]);
                        item.data(this.widgetName + '-item', targetData);
                        items.push({
                            item: item,
                            instance: targetData,
                            width: 0,
                            height: 0,
                            left: 0,
                            top: 0
                        });
                    }
                    ;
                }
                ;
            },
            refreshPositions: function(fast) {
                if (this.offsetParent && this.helper) {
                    this.offset.parent = this._getParentOffset();
                }
                for (var i = this.items.length - 1; i >= 0; i--) {
                    var item = this.items[i];
                    if (item.instance != this.currentContainer && this.currentContainer && item.item[0] != this.currentItem[0])
                        continue;
                    var t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                    if (!fast) {
                        item.width = t.outerWidth();
                        item.height = t.outerHeight();
                    }
                    var p = t.offset();
                    item.left = p.left;
                    item.top = p.top;
                }
                ;if (this.options.custom && this.options.custom.refreshContainers) {
                    this.options.custom.refreshContainers.call(this);
                } else {
                    for (var i = this.containers.length - 1; i >= 0; i--) {
                        var p = this.containers[i].element.offset();
                        this.containers[i].containerCache.left = p.left;
                        this.containers[i].containerCache.top = p.top;
                        this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                        this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
                    }
                    ;
                }
                return this;
            },
            _createPlaceholder: function(that) {
                that = that || this;
                var o = that.options;
                if (!o.placeholder || o.placeholder.constructor == String) {
                    var className = o.placeholder;
                    o.placeholder = {
                        element: function() {
                            var el = $(document.createElement(that.currentItem[0].nodeName)).addClass(className || that.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
                            if (!className)
                                el.style.visibility = "hidden";
                            return el;
                        },
                        update: function(container, p) {
                            if (className && !o.forcePlaceholderSize)
                                return;
                            if (!p.height()) {
                                p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css('paddingTop') || 0, 10) - parseInt(that.currentItem.css('paddingBottom') || 0, 10));
                            }
                            ;if (!p.width()) {
                                p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css('paddingLeft') || 0, 10) - parseInt(that.currentItem.css('paddingRight') || 0, 10));
                            }
                            ;
                        }
                    };
                }
                that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
                that.currentItem.after(that.placeholder);
                o.placeholder.update(that, that.placeholder);
            },
            _contactContainers: function(event) {
                var innermostContainer = null
                    , innermostIndex = null;
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    if ($.contains(this.currentItem[0], this.containers[i].element[0]))
                        continue;
                    if (this._intersectsWith(this.containers[i].containerCache)) {
                        if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0]))
                            continue;
                        innermostContainer = this.containers[i];
                        innermostIndex = i;
                    } else {
                        if (this.containers[i].containerCache.over) {
                            this.containers[i]._trigger("out", event, this._uiHash(this));
                            this.containers[i].containerCache.over = 0;
                        }
                    }
                }
                if (!innermostContainer)
                    return;
                if (this.containers.length === 1) {
                    this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1;
                } else {
                    var dist = 10000;
                    var itemWithLeastDistance = null;
                    var posProperty = this.containers[innermostIndex].floating ? 'left' : 'top';
                    var sizeProperty = this.containers[innermostIndex].floating ? 'width' : 'height';
                    var base = this.positionAbs[posProperty] + this.offset.click[posProperty];
                    for (var j = this.items.length - 1; j >= 0; j--) {
                        if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0]))
                            continue;
                        if (this.items[j].item[0] == this.currentItem[0])
                            continue;
                        var cur = this.items[j].item.offset()[posProperty];
                        var nearBottom = false;
                        if (Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)) {
                            nearBottom = true;
                            cur += this.items[j][sizeProperty];
                        }
                        if (Math.abs(cur - base) < dist) {
                            dist = Math.abs(cur - base);
                            itemWithLeastDistance = this.items[j];
                            this.direction = nearBottom ? "up" : "down";
                        }
                    }
                    if (!itemWithLeastDistance && !this.options.dropOnEmpty)
                        return;
                    this.currentContainer = this.containers[innermostIndex];
                    itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                    this._trigger("change", event, this._uiHash());
                    this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                    this.options.placeholder.update(this.currentContainer, this.placeholder);
                    this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1;
                }
            },
            _createHelper: function(event) {
                var o = this.options;
                var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper == 'clone' ? this.currentItem.clone() : this.currentItem);
                if (!helper.parents('body').length)
                    $(o.appendTo != 'parent' ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
                if (helper[0] == this.currentItem[0])
                    this._storedCSS = {
                        width: this.currentItem[0].style.width,
                        height: this.currentItem[0].style.height,
                        position: this.currentItem.css("position"),
                        top: this.currentItem.css("top"),
                        left: this.currentItem.css("left")
                    };
                if (helper[0].style.width == '' || o.forceHelperSize)
                    helper.width(this.currentItem.width());
                if (helper[0].style.height == '' || o.forceHelperSize)
                    helper.height(this.currentItem.height());
                return helper;
            },
            _adjustOffsetFromHelper: function(obj) {
                if (typeof obj == 'string') {
                    obj = obj.split(' ');
                }
                if ($.isArray(obj)) {
                    obj = {
                        left: +obj[0],
                        top: +obj[1] || 0
                    };
                }
                if ('left'in obj) {
                    this.offset.click.left = obj.left + this.margins.left;
                }
                if ('right'in obj) {
                    this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
                }
                if ('top'in obj) {
                    this.offset.click.top = obj.top + this.margins.top;
                }
                if ('bottom'in obj) {
                    this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
                }
            },
            _getParentOffset: function() {
                this.offsetParent = this.helper.offsetParent();
                var po = this.offsetParent.offset();
                if (this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                    po.left += this.scrollParent.scrollLeft();
                    po.top += this.scrollParent.scrollTop();
                }
                if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.ui.ie))
                    po = {
                        top: 0,
                        left: 0
                    };
                return {
                    top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                    left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
                };
            },
            _getRelativeOffset: function() {
                if (this.cssPosition == "relative") {
                    var p = this.currentItem.position();
                    return {
                        top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                        left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                    };
                } else {
                    return {
                        top: 0,
                        left: 0
                    };
                }
            },
            _cacheMargins: function() {
                this.margins = {
                    left: (parseInt(this.currentItem.css("marginLeft"), 10) || 0),
                    top: (parseInt(this.currentItem.css("marginTop"), 10) || 0)
                };
            },
            _cacheHelperProportions: function() {
                this.helperProportions = {
                    width: this.helper.outerWidth(),
                    height: this.helper.outerHeight()
                };
            },
            _setContainment: function() {
                var o = this.options;
                if (o.containment == 'parent')
                    o.containment = this.helper[0].parentNode;
                if (o.containment == 'document' || o.containment == 'window')
                    this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left, ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                if (!(/^(document|window|parent)$/).test(o.containment)) {
                    var ce = $(o.containment)[0];
                    var co = $(o.containment).offset();
                    var over = ($(ce).css("overflow") != 'hidden');
                    this.containment = [co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top];
                }
            },
            _convertPositionTo: function(d, pos) {
                if (!pos)
                    pos = this.position;
                var mod = d == "absolute" ? 1 : -1;
                var o = this.options
                    , scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
                    , scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                return {
                    top: (pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ((this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())) * mod)),
                    left: (pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ((this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod))
                };
            },
            _generatePosition: function(event) {
                var o = this.options
                    , scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
                    , scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                if (this.cssPosition == 'relative' && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
                    this.offset.relative = this._getRelativeOffset();
                }
                var pageX = event.pageX;
                var pageY = event.pageY;
                if (this.originalPosition) {
                    if (this.containment) {
                        if (event.pageX - this.offset.click.left < this.containment[0])
                            pageX = this.containment[0] + this.offset.click.left;
                        if (event.pageY - this.offset.click.top < this.containment[1])
                            pageY = this.containment[1] + this.offset.click.top;
                        if (event.pageX - this.offset.click.left > this.containment[2])
                            pageX = this.containment[2] + this.offset.click.left;
                        if (event.pageY - this.offset.click.top > this.containment[3])
                            pageY = this.containment[3] + this.offset.click.top;
                    }
                    if (o.grid) {
                        var top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                        pageY = this.containment ? (!(top - this.offset.click.top < this.containment[1] || top - this.offset.click.top > this.containment[3]) ? top : (!(top - this.offset.click.top < this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                        var left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                        pageX = this.containment ? (!(left - this.offset.click.left < this.containment[0] || left - this.offset.click.left > this.containment[2]) ? left : (!(left - this.offset.click.left < this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                    }
                }
                return {
                    top: (pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ((this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())))),
                    left: (pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ((this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())))
                };
            },
            _rearrange: function(event, i, a, hardRefresh) {
                a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction == 'down' ? i.item[0] : i.item[0].nextSibling));
                this.counter = this.counter ? ++this.counter : 1;
                var counter = this.counter;
                this._delay(function() {
                    if (counter == this.counter)
                        this.refreshPositions(!hardRefresh);
                });
            },
            _clear: function(event, noPropagation) {
                this.reverting = false;
                var delayedTriggers = [];
                if (!this._noFinalSort && this.currentItem.parent().length)
                    this.placeholder.before(this.currentItem);
                this._noFinalSort = null;
                if (this.helper[0] == this.currentItem[0]) {
                    for (var i in this._storedCSS) {
                        if (this._storedCSS[i] == 'auto' || this._storedCSS[i] == 'static')
                            this._storedCSS[i] = '';
                    }
                    this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
                } else {
                    this.currentItem.show();
                }
                if (this.fromOutside && !noPropagation)
                    delayedTriggers.push(function(event) {
                        this._trigger("receive", event, this._uiHash(this.fromOutside));
                    });
                if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !noPropagation)
                    delayedTriggers.push(function(event) {
                        this._trigger("update", event, this._uiHash());
                    });
                if (this !== this.currentContainer) {
                    if (!noPropagation) {
                        delayedTriggers.push(function(event) {
                            this._trigger("remove", event, this._uiHash());
                        });
                        delayedTriggers.push((function(c) {
                                return function(event) {
                                    c._trigger("receive", event, this._uiHash(this));
                                }
                                    ;
                            }
                        ).call(this, this.currentContainer));
                        delayedTriggers.push((function(c) {
                                return function(event) {
                                    c._trigger("update", event, this._uiHash(this));
                                }
                                    ;
                            }
                        ).call(this, this.currentContainer));
                    }
                }
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    if (!noPropagation)
                        delayedTriggers.push((function(c) {
                                return function(event) {
                                    c._trigger("deactivate", event, this._uiHash(this));
                                }
                                    ;
                            }
                        ).call(this, this.containers[i]));
                    if (this.containers[i].containerCache.over) {
                        delayedTriggers.push((function(c) {
                                return function(event) {
                                    c._trigger("out", event, this._uiHash(this));
                                }
                                    ;
                            }
                        ).call(this, this.containers[i]));
                        this.containers[i].containerCache.over = 0;
                    }
                }
                if (this._storedCursor)
                    $('body').css("cursor", this._storedCursor);
                if (this._storedOpacity)
                    this.helper.css("opacity", this._storedOpacity);
                if (this._storedZIndex)
                    this.helper.css("zIndex", this._storedZIndex == 'auto' ? '' : this._storedZIndex);
                this.dragging = false;
                if (this.cancelHelperRemoval) {
                    if (!noPropagation) {
                        this._trigger("beforeStop", event, this._uiHash());
                        for (var i = 0; i < delayedTriggers.length; i++) {
                            delayedTriggers[i].call(this, event);
                        }
                        ;this._trigger("stop", event, this._uiHash());
                    }
                    this.fromOutside = false;
                    return false;
                }
                if (!noPropagation)
                    this._trigger("beforeStop", event, this._uiHash());
                this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                if (this.helper[0] != this.currentItem[0])
                    this.helper.remove();
                this.helper = null;
                if (!noPropagation) {
                    for (var i = 0; i < delayedTriggers.length; i++) {
                        delayedTriggers[i].call(this, event);
                    }
                    ;this._trigger("stop", event, this._uiHash());
                }
                this.fromOutside = false;
                return true;
            },
            _trigger: function() {
                if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
                    this.cancel();
                }
            },
            _uiHash: function(_inst) {
                var inst = _inst || this;
                return {
                    helper: inst.helper,
                    placeholder: inst.placeholder || $([]),
                    position: inst.position,
                    originalPosition: inst.originalPosition,
                    offset: inst.positionAbs,
                    item: inst.currentItem,
                    sender: _inst ? _inst.element : null
                };
            }
        });
    }
)(jQuery);
(function($, undefined) {
        var uid = 0
            , hideProps = {}
            , showProps = {};
        hideProps.height = hideProps.paddingTop = hideProps.paddingBottom = hideProps.borderTopWidth = hideProps.borderBottomWidth = "hide";
        showProps.height = showProps.paddingTop = showProps.paddingBottom = showProps.borderTopWidth = showProps.borderBottomWidth = "show";
        $.widget("ui.accordion", {
            version: "1.9.2",
            options: {
                active: 0,
                animate: {},
                collapsible: false,
                event: "click",
                header: "> li > :first-child,> :not(li):even",
                heightStyle: "auto",
                icons: {
                    activeHeader: "ui-icon-triangle-1-s",
                    header: "ui-icon-triangle-1-e"
                },
                activate: null,
                beforeActivate: null
            },
            _create: function() {
                var accordionId = this.accordionId = "ui-accordion-" + (this.element.attr("id") || ++uid)
                    , options = this.options;
                this.prevShow = this.prevHide = $();
                this.element.addClass("ui-accordion ui-widget ui-helper-reset");
                this.headers = this.element.find(options.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all");
                this._hoverable(this.headers);
                this._focusable(this.headers);
                this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").hide();
                if (!options.collapsible && (options.active === false || options.active == null)) {
                    options.active = 0;
                }
                if (options.active < 0) {
                    options.active += this.headers.length;
                }
                this.active = this._findActive(options.active).addClass("ui-accordion-header-active ui-state-active").toggleClass("ui-corner-all ui-corner-top");
                this.active.next().addClass("ui-accordion-content-active").show();
                this._createIcons();
                this.refresh();
                this.element.attr("role", "tablist");
                this.headers.attr("role", "tab").each(function(i) {
                    var header = $(this)
                        , headerId = header.attr("id")
                        , panel = header.next()
                        , panelId = panel.attr("id");
                    if (!headerId) {
                        headerId = accordionId + "-header-" + i;
                        header.attr("id", headerId);
                    }
                    if (!panelId) {
                        panelId = accordionId + "-panel-" + i;
                        panel.attr("id", panelId);
                    }
                    header.attr("aria-controls", panelId);
                    panel.attr("aria-labelledby", headerId);
                }).next().attr("role", "tabpanel");
                this.headers.not(this.active).attr({
                    "aria-selected": "false",
                    tabIndex: -1
                }).next().attr({
                    "aria-expanded": "false",
                    "aria-hidden": "true"
                }).hide();
                if (!this.active.length) {
                    this.headers.eq(0).attr("tabIndex", 0);
                } else {
                    this.active.attr({
                        "aria-selected": "true",
                        tabIndex: 0
                    }).next().attr({
                        "aria-expanded": "true",
                        "aria-hidden": "false"
                    });
                }
                this._on(this.headers, {
                    keydown: "_keydown"
                });
                this._on(this.headers.next(), {
                    keydown: "_panelKeyDown"
                });
                this._setupEvents(options.event);
            },
            _getCreateEventData: function() {
                return {
                    header: this.active,
                    content: !this.active.length ? $() : this.active.next()
                };
            },
            _createIcons: function() {
                var icons = this.options.icons;
                if (icons) {
                    $("<span>").addClass("ui-accordion-header-icon ui-icon " + icons.header).prependTo(this.headers);
                    this.active.children(".ui-accordion-header-icon").removeClass(icons.header).addClass(icons.activeHeader);
                    this.headers.addClass("ui-accordion-icons");
                }
            },
            _destroyIcons: function() {
                this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove();
            },
            _destroy: function() {
                var contents;
                this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role");
                this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function() {
                    if (/^ui-accordion/.test(this.id)) {
                        this.removeAttribute("id");
                    }
                });
                this._destroyIcons();
                contents = this.headers.next().css("display", "").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function() {
                    if (/^ui-accordion/.test(this.id)) {
                        this.removeAttribute("id");
                    }
                });
                if (this.options.heightStyle !== "content") {
                    contents.css("height", "");
                }
            },
            _setOption: function(key, value) {
                if (key === "active") {
                    this._activate(value);
                    return;
                }
                if (key === "event") {
                    if (this.options.event) {
                        this._off(this.headers, this.options.event);
                    }
                    this._setupEvents(value);
                }
                this._super(key, value);
                if (key === "collapsible" && !value && this.options.active === false) {
                    this._activate(0);
                }
                if (key === "icons") {
                    this._destroyIcons();
                    if (value) {
                        this._createIcons();
                    }
                }
                if (key === "disabled") {
                    this.headers.add(this.headers.next()).toggleClass("ui-state-disabled", !!value);
                }
            },
            _keydown: function(event) {
                if (event.altKey || event.ctrlKey) {
                    return;
                }
                var keyCode = $.ui.keyCode
                    , length = this.headers.length
                    , currentIndex = this.headers.index(event.target)
                    , toFocus = false;
                switch (event.keyCode) {
                    case keyCode.RIGHT:
                    case keyCode.DOWN:
                        toFocus = this.headers[(currentIndex + 1) % length];
                        break;
                    case keyCode.LEFT:
                    case keyCode.UP:
                        toFocus = this.headers[(currentIndex - 1 + length) % length];
                        break;
                    case keyCode.SPACE:
                    case keyCode.ENTER:
                        this._eventHandler(event);
                        break;
                    case keyCode.HOME:
                        toFocus = this.headers[0];
                        break;
                    case keyCode.END:
                        toFocus = this.headers[length - 1];
                        break;
                }
                if (toFocus) {
                    $(event.target).attr("tabIndex", -1);
                    $(toFocus).attr("tabIndex", 0);
                    toFocus.focus();
                    event.preventDefault();
                }
            },
            _panelKeyDown: function(event) {
                if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {
                    $(event.currentTarget).prev().focus();
                }
            },
            refresh: function() {
                var maxHeight, overflow, heightStyle = this.options.heightStyle, parent = this.element.parent();
                if (heightStyle === "fill") {
                    if (!$.support.minHeight) {
                        overflow = parent.css("overflow");
                        parent.css("overflow", "hidden");
                    }
                    maxHeight = parent.height();
                    this.element.siblings(":visible").each(function() {
                        var elem = $(this)
                            , position = elem.css("position");
                        if (position === "absolute" || position === "fixed") {
                            return;
                        }
                        maxHeight -= elem.outerHeight(true);
                    });
                    if (overflow) {
                        parent.css("overflow", overflow);
                    }
                    this.headers.each(function() {
                        maxHeight -= $(this).outerHeight(true);
                    });
                    this.headers.next().each(function() {
                        $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                    }).css("overflow", "auto");
                } else if (heightStyle === "auto") {
                    maxHeight = 0;
                    this.headers.next().each(function() {
                        maxHeight = Math.max(maxHeight, $(this).css("height", "").height());
                    }).height(maxHeight);
                }
            },
            _activate: function(index) {
                var active = this._findActive(index)[0];
                if (active === this.active[0]) {
                    return;
                }
                active = active || this.active[0];
                this._eventHandler({
                    target: active,
                    currentTarget: active,
                    preventDefault: $.noop
                });
            },
            _findActive: function(selector) {
                return typeof selector === "number" ? this.headers.eq(selector) : $();
            },
            _setupEvents: function(event) {
                var events = {};
                if (!event) {
                    return;
                }
                $.each(event.split(" "), function(index, eventName) {
                    events[eventName] = "_eventHandler";
                });
                this._on(this.headers, events);
            },
            _eventHandler: function(event) {
                var options = this.options
                    , active = this.active
                    , clicked = $(event.currentTarget)
                    , clickedIsActive = clicked[0] === active[0]
                    , collapsing = clickedIsActive && options.collapsible
                    , toShow = collapsing ? $() : clicked.next()
                    , toHide = active.next()
                    , eventData = {
                    oldHeader: active,
                    oldPanel: toHide,
                    newHeader: collapsing ? $() : clicked,
                    newPanel: toShow
                };
                event.preventDefault();
                if ((clickedIsActive && !options.collapsible) || (this._trigger("beforeActivate", event, eventData) === false)) {
                    return;
                }
                options.active = collapsing ? false : this.headers.index(clicked);
                this.active = clickedIsActive ? $() : clicked;
                this._toggle(eventData);
                active.removeClass("ui-accordion-header-active ui-state-active");
                if (options.icons) {
                    active.children(".ui-accordion-header-icon").removeClass(options.icons.activeHeader).addClass(options.icons.header);
                }
                if (!clickedIsActive) {
                    clicked.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top");
                    if (options.icons) {
                        clicked.children(".ui-accordion-header-icon").removeClass(options.icons.header).addClass(options.icons.activeHeader);
                    }
                    clicked.next().addClass("ui-accordion-content-active");
                }
            },
            _toggle: function(data) {
                var toShow = data.newPanel
                    , toHide = this.prevShow.length ? this.prevShow : data.oldPanel;
                this.prevShow.add(this.prevHide).stop(true, true);
                this.prevShow = toShow;
                this.prevHide = toHide;
                if (this.options.animate) {
                    this._animate(toShow, toHide, data);
                } else {
                    toHide.hide();
                    toShow.show();
                    this._toggleComplete(data);
                }
                toHide.attr({
                    "aria-expanded": "false",
                    "aria-hidden": "true"
                });
                toHide.prev().attr("aria-selected", "false");
                if (toShow.length && toHide.length) {
                    toHide.prev().attr("tabIndex", -1);
                } else if (toShow.length) {
                    this.headers.filter(function() {
                        return $(this).attr("tabIndex") === 0;
                    }).attr("tabIndex", -1);
                }
                toShow.attr({
                    "aria-expanded": "true",
                    "aria-hidden": "false"
                }).prev().attr({
                    "aria-selected": "true",
                    tabIndex: 0
                });
            },
            _animate: function(toShow, toHide, data) {
                var total, easing, duration, that = this, adjust = 0, down = toShow.length && (!toHide.length || (toShow.index() < toHide.index())), animate = this.options.animate || {}, options = down && animate.down || animate, complete = function() {
                    that._toggleComplete(data);
                };
                if (typeof options === "number") {
                    duration = options;
                }
                if (typeof options === "string") {
                    easing = options;
                }
                easing = easing || options.easing || animate.easing;
                duration = duration || options.duration || animate.duration;
                if (!toHide.length) {
                    return toShow.animate(showProps, duration, easing, complete);
                }
                if (!toShow.length) {
                    return toHide.animate(hideProps, duration, easing, complete);
                }
                total = toShow.show().outerHeight();
                toHide.animate(hideProps, {
                    duration: duration,
                    easing: easing,
                    step: function(now, fx) {
                        fx.now = Math.round(now);
                    }
                });
                toShow.hide().animate(showProps, {
                    duration: duration,
                    easing: easing,
                    complete: complete,
                    step: function(now, fx) {
                        fx.now = Math.round(now);
                        if (fx.prop !== "height") {
                            adjust += fx.now;
                        } else if (that.options.heightStyle !== "content") {
                            fx.now = Math.round(total - toHide.outerHeight() - adjust);
                            adjust = 0;
                        }
                    }
                });
            },
            _toggleComplete: function(data) {
                var toHide = data.oldPanel;
                toHide.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all");
                if (toHide.length) {
                    toHide.parent()[0].className = toHide.parent()[0].className;
                }
                this._trigger("activate", null, data);
            }
        });
        if ($.uiBackCompat !== false) {
            (function($, prototype) {
                $.extend(prototype.options, {
                    navigation: false,
                    navigationFilter: function() {
                        return this.href.toLowerCase() === location.href.toLowerCase();
                    }
                });
                var _create = prototype._create;
                prototype._create = function() {
                    if (this.options.navigation) {
                        var that = this
                            , headers = this.element.find(this.options.header)
                            , content = headers.next()
                            , current = headers.add(content).find("a").filter(this.options.navigationFilter)[0];
                        if (current) {
                            headers.add(content).each(function(index) {
                                if ($.contains(this, current)) {
                                    that.options.active = Math.floor(index / 2);
                                    return false;
                                }
                            });
                        }
                    }
                    _create.call(this);
                }
                ;
            }(jQuery, jQuery.ui.accordion.prototype));
            (function($, prototype) {
                $.extend(prototype.options, {
                    heightStyle: null,
                    autoHeight: true,
                    clearStyle: false,
                    fillSpace: false
                });
                var _create = prototype._create
                    , _setOption = prototype._setOption;
                $.extend(prototype, {
                    _create: function() {
                        this.options.heightStyle = this.options.heightStyle || this._mergeHeightStyle();
                        _create.call(this);
                    },
                    _setOption: function(key) {
                        if (key === "autoHeight" || key === "clearStyle" || key === "fillSpace") {
                            this.options.heightStyle = this._mergeHeightStyle();
                        }
                        _setOption.apply(this, arguments);
                    },
                    _mergeHeightStyle: function() {
                        var options = this.options;
                        if (options.fillSpace) {
                            return "fill";
                        }
                        if (options.clearStyle) {
                            return "content";
                        }
                        if (options.autoHeight) {
                            return "auto";
                        }
                    }
                });
            }(jQuery, jQuery.ui.accordion.prototype));
            (function($, prototype) {
                $.extend(prototype.options.icons, {
                    activeHeader: null,
                    headerSelected: "ui-icon-triangle-1-s"
                });
                var _createIcons = prototype._createIcons;
                prototype._createIcons = function() {
                    if (this.options.icons) {
                        this.options.icons.activeHeader = this.options.icons.activeHeader || this.options.icons.headerSelected;
                    }
                    _createIcons.call(this);
                }
                ;
            }(jQuery, jQuery.ui.accordion.prototype));
            (function($, prototype) {
                prototype.activate = prototype._activate;
                var _findActive = prototype._findActive;
                prototype._findActive = function(index) {
                    if (index === -1) {
                        index = false;
                    }
                    if (index && typeof index !== "number") {
                        index = this.headers.index(this.headers.filter(index));
                        if (index === -1) {
                            index = false;
                        }
                    }
                    return _findActive.call(this, index);
                }
                ;
            }(jQuery, jQuery.ui.accordion.prototype));
            jQuery.ui.accordion.prototype.resize = jQuery.ui.accordion.prototype.refresh;
            (function($, prototype) {
                $.extend(prototype.options, {
                    change: null,
                    changestart: null
                });
                var _trigger = prototype._trigger;
                prototype._trigger = function(type, event, data) {
                    var ret = _trigger.apply(this, arguments);
                    if (!ret) {
                        return false;
                    }
                    if (type === "beforeActivate") {
                        ret = _trigger.call(this, "changestart", event, {
                            oldHeader: data.oldHeader,
                            oldContent: data.oldPanel,
                            newHeader: data.newHeader,
                            newContent: data.newPanel
                        });
                    } else if (type === "activate") {
                        ret = _trigger.call(this, "change", event, {
                            oldHeader: data.oldHeader,
                            oldContent: data.oldPanel,
                            newHeader: data.newHeader,
                            newContent: data.newPanel
                        });
                    }
                    return ret;
                }
                ;
            }(jQuery, jQuery.ui.accordion.prototype));
            (function($, prototype) {
                $.extend(prototype.options, {
                    animate: null,
                    animated: "slide"
                });
                var _create = prototype._create;
                prototype._create = function() {
                    var options = this.options;
                    if (options.animate === null) {
                        if (!options.animated) {
                            options.animate = false;
                        } else if (options.animated === "slide") {
                            options.animate = 300;
                        } else if (options.animated === "bounceslide") {
                            options.animate = {
                                duration: 200,
                                down: {
                                    easing: "easeOutBounce",
                                    duration: 1000
                                }
                            };
                        } else {
                            options.animate = options.animated;
                        }
                    }
                    _create.call(this);
                }
                ;
            }(jQuery, jQuery.ui.accordion.prototype));
        }
    }
)(jQuery);
(function($, undefined) {
    var requestIndex = 0;
    $.widget("ui.autocomplete", {
        version: "1.9.2",
        defaultElement: "<input>",
        options: {
            appendTo: "body",
            autoFocus: false,
            delay: 300,
            minLength: 1,
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            source: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
        pending: 0,
        _create: function() {
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput;
            this.isMultiLine = this._isMultiLine();
            this.valueMethod = this.element[this.element.is("input,textarea") ? "val" : "text"];
            this.isNewMenu = true;
            this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off");
            this._on(this.element, {
                keydown: function(event) {
                    if (this.element.prop("readOnly")) {
                        suppressKeyPress = true;
                        suppressInput = true;
                        suppressKeyPressRepeat = true;
                        return;
                    }
                    suppressKeyPress = false;
                    suppressInput = false;
                    suppressKeyPressRepeat = false;
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                        case keyCode.PAGE_UP:
                            suppressKeyPress = true;
                            this._move("previousPage", event);
                            break;
                        case keyCode.PAGE_DOWN:
                            suppressKeyPress = true;
                            this._move("nextPage", event);
                            break;
                        case keyCode.UP:
                            suppressKeyPress = true;
                            this._keyEvent("previous", event);
                            break;
                        case keyCode.DOWN:
                            suppressKeyPress = true;
                            this._keyEvent("next", event);
                            break;
                        case keyCode.ENTER:
                        case keyCode.NUMPAD_ENTER:
                            if (this.menu.active) {
                                suppressKeyPress = true;
                                event.preventDefault();
                                this.menu.select(event);
                            }
                            break;
                        case keyCode.TAB:
                            if (this.menu.active) {
                                this.menu.select(event);
                            }
                            break;
                        case keyCode.ESCAPE:
                            if (this.menu.element.is(":visible")) {
                                this._value(this.term);
                                this.close(event);
                                event.preventDefault();
                            }
                            break;
                        default:
                            suppressKeyPressRepeat = true;
                            this._searchTimeout(event);
                            break;
                    }
                },
                keypress: function(event) {
                    if (suppressKeyPress) {
                        suppressKeyPress = false;
                        event.preventDefault();
                        return;
                    }
                    if (suppressKeyPressRepeat) {
                        return;
                    }
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                        case keyCode.PAGE_UP:
                            this._move("previousPage", event);
                            break;
                        case keyCode.PAGE_DOWN:
                            this._move("nextPage", event);
                            break;
                        case keyCode.UP:
                            this._keyEvent("previous", event);
                            break;
                        case keyCode.DOWN:
                            this._keyEvent("next", event);
                            break;
                    }
                },
                input: function(event) {
                    if (suppressInput) {
                        suppressInput = false;
                        event.preventDefault();
                        return;
                    }
                    this._searchTimeout(event);
                },
                focus: function() {
                    this.selectedItem = null;
                    this.previous = this._value();
                },
                blur: function(event) {
                    if (this.cancelBlur) {
                        delete this.cancelBlur;
                        return;
                    }
                    clearTimeout(this.searching);
                    this.close(event);
                    this._change(event);
                }
            });
            this._initSource();
            this.menu = $("<ul>").addClass("ui-autocomplete").appendTo(this.document.find(this.options.appendTo || "body")[0]).menu({
                input: $(),
                role: null
            }).zIndex(this.element.zIndex() + 1).hide().data("menu");
            this._on(this.menu.element, {
                mousedown: function(event) {
                    event.preventDefault();
                    this.cancelBlur = true;
                    this._delay(function() {
                        delete this.cancelBlur;
                    });
                    var menuElement = this.menu.element[0];
                    if (!$(event.target).closest(".ui-menu-item").length) {
                        this._delay(function() {
                            var that = this;
                            this.document.one("mousedown", function(event) {
                                if (event.target !== that.element[0] && event.target !== menuElement && !$.contains(menuElement, event.target)) {
                                    that.close();
                                }
                            });
                        });
                    }
                },
                menufocus: function(event, ui) {
                    if (this.isNewMenu) {
                        this.isNewMenu = false;
                        if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                            this.menu.blur();
                            this.document.one("mousemove", function() {
                                $(event.target).trigger(event.originalEvent);
                            });
                            return;
                        }
                    }
                    var item = ui.item.data("ui-autocomplete-item") || ui.item.data("item.autocomplete");
                    if (false !== this._trigger("focus", event, {
                        item: item
                    })) {
                        if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
                            this._value(item.value);
                        }
                    } else {
                        this.liveRegion.text(item.value);
                    }
                },
                menuselect: function(event, ui) {
                    var item = ui.item.data("ui-autocomplete-item") || ui.item.data("item.autocomplete")
                        , previous = this.previous;
                    if (this.element[0] !== this.document[0].activeElement) {
                        this.element.focus();
                        this.previous = previous;
                        this._delay(function() {
                            this.previous = previous;
                            this.selectedItem = item;
                        });
                    }
                    if (false !== this._trigger("select", event, {
                        item: item
                    })) {
                        this._value(item.value);
                    }
                    this.term = this._value();
                    this.close(event);
                    this.selectedItem = item;
                }
            });
            this.liveRegion = $("<span>", {
                role: "status",
                "aria-live": "polite"
            }).addClass("ui-helper-hidden-accessible").insertAfter(this.element);
            if ($.fn.bgiframe) {
                this.menu.element.bgiframe();
            }
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete");
                }
            });
        },
        _destroy: function() {
            clearTimeout(this.searching);
            this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete");
            this.menu.element.remove();
            this.liveRegion.remove();
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "source") {
                this._initSource();
            }
            if (key === "appendTo") {
                this.menu.element.appendTo(this.document.find(value || "body")[0]);
            }
            if (key === "disabled" && value && this.xhr) {
                this.xhr.abort();
            }
        },
        _isMultiLine: function() {
            if (this.element.is("textarea")) {
                return true;
            }
            if (this.element.is("input")) {
                return false;
            }
            return this.element.prop("isContentEditable");
        },
        _initSource: function() {
            var array, url, that = this;
            if ($.isArray(this.options.source)) {
                array = this.options.source;
                this.source = function(request, response) {
                    response($.ui.autocomplete.filter(array, request.term));
                }
                ;
            } else if (typeof this.options.source === "string") {
                url = this.options.source;
                this.source = function(request, response) {
                    if (that.xhr) {
                        that.xhr.abort();
                    }
                    that.xhr = $.ajax({
                        url: url,
                        data: request,
                        dataType: "json",
                        success: function(data) {
                            response(data);
                        },
                        error: function() {
                            response([]);
                        }
                    });
                }
                ;
            } else {
                this.source = this.options.source;
            }
        },
        _searchTimeout: function(event) {
            clearTimeout(this.searching);
            this.searching = this._delay(function() {
                if (this.term !== this._value()) {
                    this.selectedItem = null;
                    this.search(null, event);
                }
            }, this.options.delay);
        },
        search: function(value, event) {
            value = value != null ? value : this._value();
            this.term = this._value();
            if (value.length < this.options.minLength) {
                return this.close(event);
            }
            if (this._trigger("search", event) === false) {
                return;
            }
            return this._search(value);
        },
        _search: function(value) {
            this.pending++;
            this.element.addClass("ui-autocomplete-loading");
            this.cancelSearch = false;
            this.source({
                term: value
            }, this._response());
        },
        _response: function() {
            var that = this
                , index = ++requestIndex;
            return function(content) {
                if (index === requestIndex) {
                    that.__response(content);
                }
                that.pending--;
                if (!that.pending) {
                    that.element.removeClass("ui-autocomplete-loading");
                }
            }
                ;
        },
        __response: function(content) {
            if (content) {
                content = this._normalize(content);
            }
            this._trigger("response", null, {
                content: content
            });
            if (!this.options.disabled && content && content.length && !this.cancelSearch) {
                this._suggest(content);
                this._trigger("open");
            } else {
                this._close();
            }
        },
        close: function(event) {
            this.cancelSearch = true;
            this._close(event);
        },
        _close: function(event) {
            if (this.menu.element.is(":visible")) {
                this.menu.element.hide();
                this.menu.blur();
                this.isNewMenu = true;
                this._trigger("close", event);
            }
        },
        _change: function(event) {
            if (this.previous !== this._value()) {
                this._trigger("change", event, {
                    item: this.selectedItem
                });
            }
        },
        _normalize: function(items) {
            if (items.length && items[0].label && items[0].value) {
                return items;
            }
            return $.map(items, function(item) {
                if (typeof item === "string") {
                    return {
                        label: item,
                        value: item
                    };
                }
                return $.extend({
                    label: item.label || item.value,
                    value: item.value || item.label
                }, item);
            });
        },
        _suggest: function(items) {
            var ul = this.menu.element.empty().zIndex(this.element.zIndex() + 1);
            this._renderMenu(ul, items);
            this.menu.refresh();
            ul.show();
            this._resizeMenu();
            ul.position($.extend({
                of: this.element
            }, this.options.position));
            if (this.options.autoFocus) {
                this.menu.next();
            }
        },
        _resizeMenu: function() {
            var ul = this.menu.element;
            ul.outerWidth(Math.max(ul.width("").outerWidth() + 1, this.element.outerWidth()));
        },
        _renderMenu: function(ul, items) {
            var that = this;
            $.each(items, function(index, item) {
                that._renderItemData(ul, item);
            });
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-autocomplete-item", item);
        },
        _renderItem: function(ul, item) {
            return $("<li>").append($("<a>").text(item.label)).appendTo(ul);
        },
        _move: function(direction, event) {
            if (!this.menu.element.is(":visible")) {
                this.search(null, event);
                return;
            }
            if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
                this._value(this.term);
                this.menu.blur();
                return;
            }
            this.menu[direction](event);
        },
        widget: function() {
            return this.menu.element;
        },
        _value: function() {
            return this.valueMethod.apply(this.element, arguments);
        },
        _keyEvent: function(keyEvent, event) {
            if (!this.isMultiLine || this.menu.element.is(":visible")) {
                this._move(keyEvent, event);
                event.preventDefault();
            }
        }
    });
    $.extend($.ui.autocomplete, {
        escapeRegex: function(value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
        },
        filter: function(array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term),"i");
            return $.grep(array, function(value) {
                return matcher.test(value.label || value.value || value);
            });
        }
    });
    $.widget("ui.autocomplete", $.ui.autocomplete, {
        options: {
            messages: {
                noResults: "No search results.",
                results: function(amount) {
                    return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
                }
            }
        },
        __response: function(content) {
            var message;
            this._superApply(arguments);
            if (this.options.disabled || this.cancelSearch) {
                return;
            }
            if (content && content.length) {
                message = this.options.messages.results(content.length);
            } else {
                message = this.options.messages.noResults;
            }
            this.liveRegion.text(message);
        }
    });
}(jQuery));
(function($, undefined) {
    var lastActive, startXPos, startYPos, clickDragged, baseClasses = "ui-button ui-widget ui-state-default ui-corner-all", stateClasses = "ui-state-hover ui-state-active ", typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", formResetHandler = function() {
        var buttons = $(this).find(":ui-button");
        setTimeout(function() {
            buttons.button("refresh");
        }, 1);
    }, radioGroup = function(radio) {
        var name = radio.name
            , form = radio.form
            , radios = $([]);
        if (name) {
            if (form) {
                radios = $(form).find("[name='" + name + "']");
            } else {
                radios = $("[name='" + name + "']", radio.ownerDocument).filter(function() {
                    return !this.form;
                });
            }
        }
        return radios;
    };
    $.widget("ui.button", {
        version: "1.9.2",
        defaultElement: "<button>",
        options: {
            disabled: null,
            text: true,
            label: null,
            icons: {
                primary: null,
                secondary: null
            }
        },
        _create: function() {
            this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, formResetHandler);
            if (typeof this.options.disabled !== "boolean") {
                this.options.disabled = !!this.element.prop("disabled");
            } else {
                this.element.prop("disabled", this.options.disabled);
            }
            this._determineButtonType();
            this.hasTitle = !!this.buttonElement.attr("title");
            var that = this
                , options = this.options
                , toggleButton = this.type === "checkbox" || this.type === "radio"
                , activeClass = !toggleButton ? "ui-state-active" : ""
                , focusClass = "ui-state-focus";
            if (options.label === null) {
                options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
            }
            this._hoverable(this.buttonElement);
            this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter" + this.eventNamespace, function() {
                if (options.disabled) {
                    return;
                }
                if (this === lastActive) {
                    $(this).addClass("ui-state-active");
                }
            }).bind("mouseleave" + this.eventNamespace, function() {
                if (options.disabled) {
                    return;
                }
                $(this).removeClass(activeClass);
            }).bind("click" + this.eventNamespace, function(event) {
                if (options.disabled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
            this.element.bind("focus" + this.eventNamespace, function() {
                that.buttonElement.addClass(focusClass);
            }).bind("blur" + this.eventNamespace, function() {
                that.buttonElement.removeClass(focusClass);
            });
            if (toggleButton) {
                this.element.bind("change" + this.eventNamespace, function() {
                    if (clickDragged) {
                        return;
                    }
                    that.refresh();
                });
                this.buttonElement.bind("mousedown" + this.eventNamespace, function(event) {
                    if (options.disabled) {
                        return;
                    }
                    clickDragged = false;
                    startXPos = event.pageX;
                    startYPos = event.pageY;
                }).bind("mouseup" + this.eventNamespace, function(event) {
                    if (options.disabled) {
                        return;
                    }
                    if (startXPos !== event.pageX || startYPos !== event.pageY) {
                        clickDragged = true;
                    }
                });
            }
            if (this.type === "checkbox") {
                this.buttonElement.bind("click" + this.eventNamespace, function() {
                    if (options.disabled || clickDragged) {
                        return false;
                    }
                    $(this).toggleClass("ui-state-active");
                    that.buttonElement.attr("aria-pressed", that.element[0].checked);
                });
            } else if (this.type === "radio") {
                this.buttonElement.bind("click" + this.eventNamespace, function() {
                    if (options.disabled || clickDragged) {
                        return false;
                    }
                    $(this).addClass("ui-state-active");
                    that.buttonElement.attr("aria-pressed", "true");
                    var radio = that.element[0];
                    radioGroup(radio).not(radio).map(function() {
                        return $(this).button("widget")[0];
                    }).removeClass("ui-state-active").attr("aria-pressed", "false");
                });
            } else {
                this.buttonElement.bind("mousedown" + this.eventNamespace, function() {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).addClass("ui-state-active");
                    lastActive = this;
                    that.document.one("mouseup", function() {
                        lastActive = null;
                    });
                }).bind("mouseup" + this.eventNamespace, function() {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).removeClass("ui-state-active");
                }).bind("keydown" + this.eventNamespace, function(event) {
                    if (options.disabled) {
                        return false;
                    }
                    if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) {
                        $(this).addClass("ui-state-active");
                    }
                }).bind("keyup" + this.eventNamespace, function() {
                    $(this).removeClass("ui-state-active");
                });
                if (this.buttonElement.is("a")) {
                    this.buttonElement.keyup(function(event) {
                        if (event.keyCode === $.ui.keyCode.SPACE) {
                            $(this).click();
                        }
                    });
                }
            }
            this._setOption("disabled", options.disabled);
            this._resetButton();
        },
        _determineButtonType: function() {
            var ancestor, labelSelector, checked;
            if (this.element.is("[type=checkbox]")) {
                this.type = "checkbox";
            } else if (this.element.is("[type=radio]")) {
                this.type = "radio";
            } else if (this.element.is("input")) {
                this.type = "input";
            } else {
                this.type = "button";
            }
            if (this.type === "checkbox" || this.type === "radio") {
                ancestor = this.element.parents().last();
                labelSelector = "label[for='" + this.element.attr("id") + "']";
                this.buttonElement = ancestor.find(labelSelector);
                if (!this.buttonElement.length) {
                    ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                    this.buttonElement = ancestor.filter(labelSelector);
                    if (!this.buttonElement.length) {
                        this.buttonElement = ancestor.find(labelSelector);
                    }
                }
                this.element.addClass("ui-helper-hidden-accessible");
                checked = this.element.is(":checked");
                if (checked) {
                    this.buttonElement.addClass("ui-state-active");
                }
                this.buttonElement.prop("aria-pressed", checked);
            } else {
                this.buttonElement = this.element;
            }
        },
        widget: function() {
            return this.buttonElement;
        },
        _destroy: function() {
            this.element.removeClass("ui-helper-hidden-accessible");
            this.buttonElement.removeClass(baseClasses + " " + stateClasses + " " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
            if (!this.hasTitle) {
                this.buttonElement.removeAttr("title");
            }
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "disabled") {
                if (value) {
                    this.element.prop("disabled", true);
                } else {
                    this.element.prop("disabled", false);
                }
                return;
            }
            this._resetButton();
        },
        refresh: function() {
            var isDisabled = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
            if (isDisabled !== this.options.disabled) {
                this._setOption("disabled", isDisabled);
            }
            if (this.type === "radio") {
                radioGroup(this.element[0]).each(function() {
                    if ($(this).is(":checked")) {
                        $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true");
                    } else {
                        $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false");
                    }
                });
            } else if (this.type === "checkbox") {
                if (this.element.is(":checked")) {
                    this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true");
                } else {
                    this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false");
                }
            }
        },
        _resetButton: function() {
            if (this.type === "input") {
                if (this.options.label) {
                    this.element.val(this.options.label);
                }
                return;
            }
            var buttonElement = this.buttonElement.removeClass(typeClasses)
                , buttonText = $("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text()
                , icons = this.options.icons
                , multipleIcons = icons.primary && icons.secondary
                , buttonClasses = [];
            if (icons.primary || icons.secondary) {
                if (this.options.text) {
                    buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : (icons.primary ? "-primary" : "-secondary")));
                }
                if (icons.primary) {
                    buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                }
                if (icons.secondary) {
                    buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                }
                if (!this.options.text) {
                    buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");
                    if (!this.hasTitle) {
                        buttonElement.attr("title", $.trim(buttonText));
                    }
                }
            } else {
                buttonClasses.push("ui-button-text-only");
            }
            buttonElement.addClass(buttonClasses.join(" "));
        }
    });
    $.widget("ui.buttonset", {
        version: "1.9.2",
        options: {
            items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(button)"
        },
        _create: function() {
            this.element.addClass("ui-buttonset");
        },
        _init: function() {
            this.refresh();
        },
        _setOption: function(key, value) {
            if (key === "disabled") {
                this.buttons.button("option", key, value);
            }
            this._super(key, value);
        },
        refresh: function() {
            var rtl = this.element.css("direction") === "rtl";
            this.buttons = this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(rtl ? "ui-corner-left" : "ui-corner-right").end().end();
        },
        _destroy: function() {
            this.element.removeClass("ui-buttonset");
            this.buttons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
        }
    });
}(jQuery));
(function($, undefined) {
        $.extend($.ui, {
            datepicker: {
                version: "1.9.2"
            }
        });
        var PROP_NAME = 'datepicker';
        var dpuuid = new Date().getTime();
        var instActive;
        function Datepicker() {
            this.debug = false;
            this._curInst = null;
            this._keyEvent = false;
            this._disabledInputs = [];
            this._datepickerShowing = false;
            this._inDialog = false;
            this._mainDivId = 'ui-datepicker-div';
            this._inlineClass = 'ui-datepicker-inline';
            this._appendClass = 'ui-datepicker-append';
            this._triggerClass = 'ui-datepicker-trigger';
            this._dialogClass = 'ui-datepicker-dialog';
            this._disableClass = 'ui-datepicker-disabled';
            this._unselectableClass = 'ui-datepicker-unselectable';
            this._currentClass = 'ui-datepicker-current-day';
            this._dayOverClass = 'ui-datepicker-days-cell-over';
            this.regional = [];
            this.regional[''] = {
                closeText: 'Done',
                prevText: 'Prev',
                nextText: 'Next',
                currentText: 'Today',
                monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                weekHeader: 'Wk',
                dateFormat: 'mm/dd/yy',
                firstDay: 0,
                isRTL: false,
                showMonthAfterYear: false,
                yearSuffix: ''
            };
            this._defaults = {
                showOn: 'focus',
                showAnim: 'fadeIn',
                showOptions: {},
                defaultDate: null,
                appendText: '',
                buttonText: '...',
                buttonImage: '',
                buttonImageOnly: false,
                hideIfNoPrevNext: false,
                navigationAsDateFormat: false,
                gotoCurrent: false,
                changeMonth: false,
                changeYear: false,
                yearRange: 'c-10:c+10',
                showOtherMonths: false,
                selectOtherMonths: false,
                showWeek: false,
                calculateWeek: this.iso8601Week,
                shortYearCutoff: '+10',
                minDate: null,
                maxDate: null,
                duration: 'fast',
                beforeShowDay: null,
                beforeShow: null,
                onSelect: null,
                onChangeMonthYear: null,
                onClose: null,
                numberOfMonths: 1,
                showCurrentAtPos: 0,
                stepMonths: 1,
                stepBigMonths: 12,
                altField: '',
                altFormat: '',
                constrainInput: true,
                showButtonPanel: false,
                autoSize: false,
                disabled: false
            };
            $.extend(this._defaults, this.regional['']);
            this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
        }
        $.extend(Datepicker.prototype, {
            markerClassName: 'hasDatepicker',
            maxRows: 4,
            log: function() {
                if (this.debug)
                    console.log.apply('', arguments);
            },
            _widgetDatepicker: function() {
                return this.dpDiv;
            },
            setDefaults: function(settings) {
                extendRemove(this._defaults, settings || {});
                return this;
            },
            _attachDatepicker: function(target, settings) {
                var inlineSettings = null;
                for (var attrName in this._defaults) {
                    var attrValue = target.getAttribute('date:' + attrName);
                    if (attrValue) {
                        inlineSettings = inlineSettings || {};
                        try {
                            inlineSettings[attrName] = eval(attrValue);
                        } catch (err) {
                            inlineSettings[attrName] = attrValue;
                        }
                    }
                }
                var nodeName = target.nodeName.toLowerCase();
                var inline = (nodeName == 'div' || nodeName == 'span');
                if (!target.id) {
                    this.uuid += 1;
                    target.id = 'dp' + this.uuid;
                }
                var inst = this._newInst($(target), inline);
                inst.settings = $.extend({}, settings || {}, inlineSettings || {});
                if (nodeName == 'input') {
                    this._connectDatepicker(target, inst);
                } else if (inline) {
                    this._inlineDatepicker(target, inst);
                }
            },
            _newInst: function(target, inline) {
                var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1');
                return {
                    id: id,
                    input: target,
                    selectedDay: 0,
                    selectedMonth: 0,
                    selectedYear: 0,
                    drawMonth: 0,
                    drawYear: 0,
                    inline: inline,
                    dpDiv: (!inline ? this.dpDiv : bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')))
                };
            },
            _connectDatepicker: function(target, inst) {
                var input = $(target);
                inst.append = $([]);
                inst.trigger = $([]);
                if (input.hasClass(this.markerClassName))
                    return;
                this._attachments(input, inst);
                input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker", function(event, key, value) {
                    inst.settings[key] = value;
                }).bind("getData.datepicker", function(event, key) {
                    return this._get(inst, key);
                });
                this._autoSize(inst);
                $.data(target, PROP_NAME, inst);
                if (inst.settings.disabled) {
                    this._disableDatepicker(target);
                }
            },
            _attachments: function(input, inst) {
                var appendText = this._get(inst, 'appendText');
                var isRTL = this._get(inst, 'isRTL');
                if (inst.append)
                    inst.append.remove();
                if (appendText) {
                    inst.append = $('<span class="' + this._appendClass + '">' + appendText + '</span>');
                    input[isRTL ? 'before' : 'after'](inst.append);
                }
                input.unbind('focus', this._showDatepicker);
                if (inst.trigger)
                    inst.trigger.remove();
                var showOn = this._get(inst, 'showOn');
                if (showOn == 'focus' || showOn == 'both')
                    input.focus(this._showDatepicker);
                if (showOn == 'button' || showOn == 'both') {
                    var buttonText = this._get(inst, 'buttonText');
                    var buttonImage = this._get(inst, 'buttonImage');
                    inst.trigger = $(this._get(inst, 'buttonImageOnly') ? $('<img/>').addClass(this._triggerClass).attr({
                        src: buttonImage,
                        alt: buttonText,
                        title: buttonText
                    }) : $('<button type="button"></button>').addClass(this._triggerClass).html(buttonImage == '' ? buttonText : $('<img/>').attr({
                        src: buttonImage,
                        alt: buttonText,
                        title: buttonText
                    })));
                    input[isRTL ? 'before' : 'after'](inst.trigger);
                    inst.trigger.click(function() {
                        if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])
                            $.datepicker._hideDatepicker();
                        else if ($.datepicker._datepickerShowing && $.datepicker._lastInput != input[0]) {
                            $.datepicker._hideDatepicker();
                            $.datepicker._showDatepicker(input[0]);
                        } else
                            $.datepicker._showDatepicker(input[0]);
                        return false;
                    });
                }
            },
            _autoSize: function(inst) {
                if (this._get(inst, 'autoSize') && !inst.inline) {
                    var date = new Date(2009,12 - 1,20);
                    var dateFormat = this._get(inst, 'dateFormat');
                    if (dateFormat.match(/[DM]/)) {
                        var findMax = function(names) {
                            var max = 0;
                            var maxI = 0;
                            for (var i = 0; i < names.length; i++) {
                                if (names[i].length > max) {
                                    max = names[i].length;
                                    maxI = i;
                                }
                            }
                            return maxI;
                        };
                        date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ? 'monthNames' : 'monthNamesShort'))));
                        date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ? 'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
                    }
                    inst.input.attr('size', this._formatDate(inst, date).length);
                }
            },
            _inlineDatepicker: function(target, inst) {
                var divSpan = $(target);
                if (divSpan.hasClass(this.markerClassName))
                    return;
                divSpan.addClass(this.markerClassName).append(inst.dpDiv).bind("setData.datepicker", function(event, key, value) {
                    inst.settings[key] = value;
                }).bind("getData.datepicker", function(event, key) {
                    return this._get(inst, key);
                });
                $.data(target, PROP_NAME, inst);
                this._setDate(inst, this._getDefaultDate(inst), true);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
                if (inst.settings.disabled) {
                    this._disableDatepicker(target);
                }
                inst.dpDiv.css("display", "block");
            },
            _dialogDatepicker: function(input, date, onSelect, settings, pos) {
                var inst = this._dialogInst;
                if (!inst) {
                    this.uuid += 1;
                    var id = 'dp' + this.uuid;
                    this._dialogInput = $('<input type="text" id="' + id + '" style="position: absolute; top: -100px; width: 0px;"/>');
                    this._dialogInput.keydown(this._doKeyDown);
                    $('body').append(this._dialogInput);
                    inst = this._dialogInst = this._newInst(this._dialogInput, false);
                    inst.settings = {};
                    $.data(this._dialogInput[0], PROP_NAME, inst);
                }
                extendRemove(inst.settings, settings || {});
                date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);
                this._dialogInput.val(date);
                this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
                if (!this._pos) {
                    var browserWidth = document.documentElement.clientWidth;
                    var browserHeight = document.documentElement.clientHeight;
                    var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                    var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                    this._pos = [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
                }
                this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');
                inst.settings.onSelect = onSelect;
                this._inDialog = true;
                this.dpDiv.addClass(this._dialogClass);
                this._showDatepicker(this._dialogInput[0]);
                if ($.blockUI)
                    $.blockUI(this.dpDiv);
                $.data(this._dialogInput[0], PROP_NAME, inst);
                return this;
            },
            _destroyDatepicker: function(target) {
                var $target = $(target);
                var inst = $.data(target, PROP_NAME);
                if (!$target.hasClass(this.markerClassName)) {
                    return;
                }
                var nodeName = target.nodeName.toLowerCase();
                $.removeData(target, PROP_NAME);
                if (nodeName == 'input') {
                    inst.append.remove();
                    inst.trigger.remove();
                    $target.removeClass(this.markerClassName).unbind('focus', this._showDatepicker).unbind('keydown', this._doKeyDown).unbind('keypress', this._doKeyPress).unbind('keyup', this._doKeyUp);
                } else if (nodeName == 'div' || nodeName == 'span')
                    $target.removeClass(this.markerClassName).empty();
            },
            _enableDatepicker: function(target) {
                var $target = $(target);
                var inst = $.data(target, PROP_NAME);
                if (!$target.hasClass(this.markerClassName)) {
                    return;
                }
                var nodeName = target.nodeName.toLowerCase();
                if (nodeName == 'input') {
                    target.disabled = false;
                    inst.trigger.filter('button').each(function() {
                        this.disabled = false;
                    }).end().filter('img').css({
                        opacity: '1.0',
                        cursor: ''
                    });
                } else if (nodeName == 'div' || nodeName == 'span') {
                    var inline = $target.children('.' + this._inlineClass);
                    inline.children().removeClass('ui-state-disabled');
                    inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false);
                }
                this._disabledInputs = $.map(this._disabledInputs, function(value) {
                    return (value == target ? null : value);
                });
            },
            _disableDatepicker: function(target) {
                var $target = $(target);
                var inst = $.data(target, PROP_NAME);
                if (!$target.hasClass(this.markerClassName)) {
                    return;
                }
                var nodeName = target.nodeName.toLowerCase();
                if (nodeName == 'input') {
                    target.disabled = true;
                    inst.trigger.filter('button').each(function() {
                        this.disabled = true;
                    }).end().filter('img').css({
                        opacity: '0.5',
                        cursor: 'default'
                    });
                } else if (nodeName == 'div' || nodeName == 'span') {
                    var inline = $target.children('.' + this._inlineClass);
                    inline.children().addClass('ui-state-disabled');
                    inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true);
                }
                this._disabledInputs = $.map(this._disabledInputs, function(value) {
                    return (value == target ? null : value);
                });
                this._disabledInputs[this._disabledInputs.length] = target;
            },
            _isDisabledDatepicker: function(target) {
                if (!target) {
                    return false;
                }
                for (var i = 0; i < this._disabledInputs.length; i++) {
                    if (this._disabledInputs[i] == target)
                        return true;
                }
                return false;
            },
            _getInst: function(target) {
                try {
                    return $.data(target, PROP_NAME);
                } catch (err) {
                    throw 'Missing instance data for this datepicker';
                }
            },
            _optionDatepicker: function(target, name, value) {
                var inst = this._getInst(target);
                if (arguments.length == 2 && typeof name == 'string') {
                    return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) : (inst ? (name == 'all' ? $.extend({}, inst.settings) : this._get(inst, name)) : null));
                }
                var settings = name || {};
                if (typeof name == 'string') {
                    settings = {};
                    settings[name] = value;
                }
                if (inst) {
                    if (this._curInst == inst) {
                        this._hideDatepicker();
                    }
                    var date = this._getDateDatepicker(target, true);
                    var minDate = this._getMinMaxDate(inst, 'min');
                    var maxDate = this._getMinMaxDate(inst, 'max');
                    extendRemove(inst.settings, settings);
                    if (minDate !== null && settings['dateFormat'] !== undefined && settings['minDate'] === undefined)
                        inst.settings.minDate = this._formatDate(inst, minDate);
                    if (maxDate !== null && settings['dateFormat'] !== undefined && settings['maxDate'] === undefined)
                        inst.settings.maxDate = this._formatDate(inst, maxDate);
                    this._attachments($(target), inst);
                    this._autoSize(inst);
                    this._setDate(inst, date);
                    this._updateAlternate(inst);
                    this._updateDatepicker(inst);
                }
            },
            _changeDatepicker: function(target, name, value) {
                this._optionDatepicker(target, name, value);
            },
            _refreshDatepicker: function(target) {
                var inst = this._getInst(target);
                if (inst) {
                    this._updateDatepicker(inst);
                }
            },
            _setDateDatepicker: function(target, date) {
                var inst = this._getInst(target);
                if (inst) {
                    this._setDate(inst, date);
                    this._updateDatepicker(inst);
                    this._updateAlternate(inst);
                }
            },
            _getDateDatepicker: function(target, noDefault) {
                var inst = this._getInst(target);
                if (inst && !inst.inline)
                    this._setDateFromField(inst, noDefault);
                return (inst ? this._getDate(inst) : null);
            },
            _doKeyDown: function(event) {
                var inst = $.datepicker._getInst(event.target);
                var handled = true;
                var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
                inst._keyEvent = true;
                if ($.datepicker._datepickerShowing)
                    switch (event.keyCode) {
                        case 9:
                            $.datepicker._hideDatepicker();
                            handled = false;
                            break;
                        case 13:
                            var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' + $.datepicker._currentClass + ')', inst.dpDiv);
                            if (sel[0])
                                $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                            var onSelect = $.datepicker._get(inst, 'onSelect');
                            if (onSelect) {
                                var dateStr = $.datepicker._formatDate(inst);
                                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
                            } else
                                $.datepicker._hideDatepicker();
                            return false;
                            break;
                        case 27:
                            $.datepicker._hideDatepicker();
                            break;
                        case 33:
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, 'stepBigMonths') : -$.datepicker._get(inst, 'stepMonths')), 'M');
                            break;
                        case 34:
                            $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, 'stepBigMonths') : +$.datepicker._get(inst, 'stepMonths')), 'M');
                            break;
                        case 35:
                            if (event.ctrlKey || event.metaKey)
                                $.datepicker._clearDate(event.target);
                            handled = event.ctrlKey || event.metaKey;
                            break;
                        case 36:
                            if (event.ctrlKey || event.metaKey)
                                $.datepicker._gotoToday(event.target);
                            handled = event.ctrlKey || event.metaKey;
                            break;
                        case 37:
                            if (event.ctrlKey || event.metaKey)
                                $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
                            handled = event.ctrlKey || event.metaKey;
                            if (event.originalEvent.altKey)
                                $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, 'stepBigMonths') : -$.datepicker._get(inst, 'stepMonths')), 'M');
                            break;
                        case 38:
                            if (event.ctrlKey || event.metaKey)
                                $.datepicker._adjustDate(event.target, -7, 'D');
                            handled = event.ctrlKey || event.metaKey;
                            break;
                        case 39:
                            if (event.ctrlKey || event.metaKey)
                                $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
                            handled = event.ctrlKey || event.metaKey;
                            if (event.originalEvent.altKey)
                                $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, 'stepBigMonths') : +$.datepicker._get(inst, 'stepMonths')), 'M');
                            break;
                        case 40:
                            if (event.ctrlKey || event.metaKey)
                                $.datepicker._adjustDate(event.target, +7, 'D');
                            handled = event.ctrlKey || event.metaKey;
                            break;
                        default:
                            handled = false;
                    }
                else if (event.keyCode == 36 && event.ctrlKey)
                    $.datepicker._showDatepicker(this);
                else {
                    handled = false;
                }
                if (handled) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            },
            _doKeyPress: function(event) {
                var inst = $.datepicker._getInst(event.target);
                if ($.datepicker._get(inst, 'constrainInput')) {
                    var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
                    var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
                    return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
                }
            },
            _doKeyUp: function(event) {
                var inst = $.datepicker._getInst(event.target);
                if (inst.input.val() != inst.lastVal) {
                    try {
                        var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'), (inst.input ? inst.input.val() : null), $.datepicker._getFormatConfig(inst));
                        if (date) {
                            $.datepicker._setDateFromField(inst);
                            $.datepicker._updateAlternate(inst);
                            $.datepicker._updateDatepicker(inst);
                        }
                    } catch (err) {
                        $.datepicker.log(err);
                    }
                }
                return true;
            },
            _showDatepicker: function(input) {
                input = input.target || input;
                if (input.nodeName.toLowerCase() != 'input')
                    input = $('input', input.parentNode)[0];
                if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input)
                    return;
                var inst = $.datepicker._getInst(input);
                if ($.datepicker._curInst && $.datepicker._curInst != inst) {
                    $.datepicker._curInst.dpDiv.stop(true, true);
                    if (inst && $.datepicker._datepickerShowing) {
                        $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
                    }
                }
                var beforeShow = $.datepicker._get(inst, 'beforeShow');
                var beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
                if (beforeShowSettings === false) {
                    return;
                }
                extendRemove(inst.settings, beforeShowSettings);
                inst.lastVal = null;
                $.datepicker._lastInput = input;
                $.datepicker._setDateFromField(inst);
                if ($.datepicker._inDialog)
                    input.value = '';
                if (!$.datepicker._pos) {
                    $.datepicker._pos = $.datepicker._findPos(input);
                    $.datepicker._pos[1] += input.offsetHeight;
                }
                var isFixed = false;
                $(input).parents().each(function() {
                    isFixed |= $(this).css('position') == 'fixed';
                    return !isFixed;
                });
                var offset = {
                    left: $.datepicker._pos[0],
                    top: $.datepicker._pos[1]
                };
                $.datepicker._pos = null;
                inst.dpDiv.empty();
                inst.dpDiv.css({
                    position: 'absolute',
                    display: 'block',
                    top: '-1000px'
                });
                $.datepicker._updateDatepicker(inst);
                offset = $.datepicker._checkOffset(inst, offset, isFixed);
                inst.dpDiv.css({
                    position: ($.datepicker._inDialog && $.blockUI ? 'static' : (isFixed ? 'fixed' : 'absolute')),
                    display: 'none',
                    left: offset.left + 'px',
                    top: offset.top + 'px'
                });
                if (!inst.inline) {
                    var showAnim = $.datepicker._get(inst, 'showAnim');
                    var duration = $.datepicker._get(inst, 'duration');
                    var postProcess = function() {
                        var cover = inst.dpDiv.find('iframe.ui-datepicker-cover');
                        if (!!cover.length) {
                            var borders = $.datepicker._getBorders(inst.dpDiv);
                            cover.css({
                                left: -borders[0],
                                top: -borders[1],
                                width: inst.dpDiv.outerWidth(),
                                height: inst.dpDiv.outerHeight()
                            });
                        }
                    };
                    inst.dpDiv.zIndex($(input).zIndex() + 1);
                    $.datepicker._datepickerShowing = true;
                    if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim]))
                        inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
                    else
                        inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);
                    if (!showAnim || !duration)
                        postProcess();
                    if (inst.input.is(':visible') && !inst.input.is(':disabled'))
                        inst.input.focus();
                    $.datepicker._curInst = inst;
                }
            },
            _updateDatepicker: function(inst) {
                this.maxRows = 4;
                var borders = $.datepicker._getBorders(inst.dpDiv);
                instActive = inst;
                inst.dpDiv.empty().append(this._generateHTML(inst));
                this._attachHandlers(inst);
                var cover = inst.dpDiv.find('iframe.ui-datepicker-cover');
                if (!!cover.length) {
                    cover.css({
                        left: -borders[0],
                        top: -borders[1],
                        width: inst.dpDiv.outerWidth(),
                        height: inst.dpDiv.outerHeight()
                    })
                }
                inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();
                var numMonths = this._getNumberOfMonths(inst);
                var cols = numMonths[1];
                var width = 17;
                inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
                if (cols > 1)
                    inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');
                inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') + 'Class']('ui-datepicker-multi');
                inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') + 'Class']('ui-datepicker-rtl');
                if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input && inst.input.is(':visible') && !inst.input.is(':disabled') && inst.input[0] != document.activeElement)
                    inst.input.focus();
                if (inst.yearshtml) {
                    var origyearshtml = inst.yearshtml;
                    setTimeout(function() {
                        if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                            inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
                        }
                        origyearshtml = inst.yearshtml = null;
                    }, 0);
                }
            },
            _getBorders: function(elem) {
                var convert = function(value) {
                    return {
                        thin: 1,
                        medium: 2,
                        thick: 3
                    }[value] || value;
                };
                return [parseFloat(convert(elem.css('border-left-width'))), parseFloat(convert(elem.css('border-top-width')))];
            },
            _checkOffset: function(inst, offset, isFixed) {
                var dpWidth = inst.dpDiv.outerWidth();
                var dpHeight = inst.dpDiv.outerHeight();
                var inputWidth = inst.input ? inst.input.outerWidth() : 0;
                var inputHeight = inst.input ? inst.input.outerHeight() : 0;
                var viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft());
                var viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
                offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
                offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
                offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;
                offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
                offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ? Math.abs(dpHeight + inputHeight) : 0);
                return offset;
            },
            _findPos: function(obj) {
                var inst = this._getInst(obj);
                var isRTL = this._get(inst, 'isRTL');
                while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
                    obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
                }
                var position = $(obj).offset();
                return [position.left, position.top];
            },
            _hideDatepicker: function(input) {
                var inst = this._curInst;
                if (!inst || (input && inst != $.data(input, PROP_NAME)))
                    return;
                if (this._datepickerShowing) {
                    var showAnim = this._get(inst, 'showAnim');
                    var duration = this._get(inst, 'duration');
                    var postProcess = function() {
                        $.datepicker._tidyDialog(inst);
                    };
                    if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim]))
                        inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
                    else
                        inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' : (showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);
                    if (!showAnim)
                        postProcess();
                    this._datepickerShowing = false;
                    var onClose = this._get(inst, 'onClose');
                    if (onClose)
                        onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ''), inst]);
                    this._lastInput = null;
                    if (this._inDialog) {
                        this._dialogInput.css({
                            position: 'absolute',
                            left: '0',
                            top: '-100px'
                        });
                        if ($.blockUI) {
                            $.unblockUI();
                            $('body').append(this.dpDiv);
                        }
                    }
                    this._inDialog = false;
                }
            },
            _tidyDialog: function(inst) {
                inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
            },
            _checkExternalClick: function(event) {
                if (!$.datepicker._curInst)
                    return;
                var $target = $(event.target)
                    , inst = $.datepicker._getInst($target[0]);
                if ((($target[0].id != $.datepicker._mainDivId && $target.parents('#' + $.datepicker._mainDivId).length == 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI))) || ($target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != inst))
                    $.datepicker._hideDatepicker();
            },
            _adjustDate: function(id, offset, period) {
                var target = $(id);
                var inst = this._getInst(target[0]);
                if (this._isDisabledDatepicker(target[0])) {
                    return;
                }
                this._adjustInstDate(inst, offset + (period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), period);
                this._updateDatepicker(inst);
            },
            _gotoToday: function(id) {
                var target = $(id);
                var inst = this._getInst(target[0]);
                if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
                    inst.selectedDay = inst.currentDay;
                    inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                    inst.drawYear = inst.selectedYear = inst.currentYear;
                } else {
                    var date = new Date();
                    inst.selectedDay = date.getDate();
                    inst.drawMonth = inst.selectedMonth = date.getMonth();
                    inst.drawYear = inst.selectedYear = date.getFullYear();
                }
                this._notifyChange(inst);
                this._adjustDate(target);
            },
            _selectMonthYear: function(id, select, period) {
                var target = $(id);
                var inst = this._getInst(target[0]);
                inst['selected' + (period == 'M' ? 'Month' : 'Year')] = inst['draw' + (period == 'M' ? 'Month' : 'Year')] = parseInt(select.options[select.selectedIndex].value, 10);
                this._notifyChange(inst);
                this._adjustDate(target);
            },
            _selectDay: function(id, month, year, td) {
                var target = $(id);
                if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                    return;
                }
                var inst = this._getInst(target[0]);
                inst.selectedDay = inst.currentDay = $('a', td).html();
                inst.selectedMonth = inst.currentMonth = month;
                inst.selectedYear = inst.currentYear = year;
                this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
            },
            _clearDate: function(id) {
                var target = $(id);
                var inst = this._getInst(target[0]);
                this._selectDate(target, '');
            },
            _selectDate: function(id, dateStr) {
                var target = $(id);
                var inst = this._getInst(target[0]);
                dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
                if (inst.input)
                    inst.input.val(dateStr);
                this._updateAlternate(inst);
                var onSelect = this._get(inst, 'onSelect');
                if (onSelect)
                    onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
                else if (inst.input)
                    inst.input.trigger('change');
                if (inst.inline)
                    this._updateDatepicker(inst);
                else {
                    this._hideDatepicker();
                    this._lastInput = inst.input[0];
                    if (typeof (inst.input[0]) != 'object')
                        inst.input.focus();
                    this._lastInput = null;
                }
            },
            _updateAlternate: function(inst) {
                var altField = this._get(inst, 'altField');
                if (altField) {
                    var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
                    var date = this._getDate(inst);
                    var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                    $(altField).each(function() {
                        $(this).val(dateStr);
                    });
                }
            },
            noWeekends: function(date) {
                var day = date.getDay();
                return [(day > 0 && day < 6), ''];
            },
            iso8601Week: function(date) {
                var checkDate = new Date(date.getTime());
                checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
                var time = checkDate.getTime();
                checkDate.setMonth(0);
                checkDate.setDate(1);
                return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
            },
            parseDate: function(format, value, settings) {
                if (format == null || value == null)
                    throw 'Invalid arguments';
                value = (typeof value == 'object' ? value.toString() : value + '');
                if (value == '')
                    return null;
                var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
                shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
                var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
                var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
                var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
                var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
                var year = -1;
                var month = -1;
                var day = -1;
                var doy = -1;
                var literal = false;
                var lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                    if (matches)
                        iFormat++;
                    return matches;
                };
                var getNumber = function(match) {
                    var isDoubled = lookAhead(match);
                    var size = (match == '@' ? 14 : (match == '!' ? 20 : (match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));
                    var digits = new RegExp('^\\d{1,' + size + '}');
                    var num = value.substring(iValue).match(digits);
                    if (!num)
                        throw 'Missing number at position ' + iValue;
                    iValue += num[0].length;
                    return parseInt(num[0], 10);
                };
                var getName = function(match, shortNames, longNames) {
                    var names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                        return [[k, v]];
                    }).sort(function(a, b) {
                        return -(a[1].length - b[1].length);
                    });
                    var index = -1;
                    $.each(names, function(i, pair) {
                        var name = pair[1];
                        if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {
                            index = pair[0];
                            iValue += name.length;
                            return false;
                        }
                    });
                    if (index != -1)
                        return index + 1;
                    else
                        throw 'Unknown name at position ' + iValue;
                };
                var checkLiteral = function() {
                    if (value.charAt(iValue) != format.charAt(iFormat))
                        throw 'Unexpected literal at position ' + iValue;
                    iValue++;
                };
                var iValue = 0;
                for (var iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal)
                        if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                            literal = false;
                        else
                            checkLiteral();
                    else
                        switch (format.charAt(iFormat)) {
                            case 'd':
                                day = getNumber('d');
                                break;
                            case 'D':
                                getName('D', dayNamesShort, dayNames);
                                break;
                            case 'o':
                                doy = getNumber('o');
                                break;
                            case 'm':
                                month = getNumber('m');
                                break;
                            case 'M':
                                month = getName('M', monthNamesShort, monthNames);
                                break;
                            case 'y':
                                year = getNumber('y');
                                break;
                            case '@':
                                var date = new Date(getNumber('@'));
                                year = date.getFullYear();
                                month = date.getMonth() + 1;
                                day = date.getDate();
                                break;
                            case '!':
                                var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
                                year = date.getFullYear();
                                month = date.getMonth() + 1;
                                day = date.getDate();
                                break;
                            case "'":
                                if (lookAhead("'"))
                                    checkLiteral();
                                else
                                    literal = true;
                                break;
                            default:
                                checkLiteral();
                        }
                }
                if (iValue < value.length) {
                    var extra = value.substr(iValue);
                    if (!/^\s+/.test(extra)) {
                        throw "Extra/unparsed characters found in date: " + extra;
                    }
                }
                if (year == -1)
                    year = new Date().getFullYear();
                else if (year < 100)
                    year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);
                if (doy > -1) {
                    month = 1;
                    day = doy;
                    do {
                        var dim = this._getDaysInMonth(year, month - 1);
                        if (day <= dim)
                            break;
                        month++;
                        day -= dim;
                    } while (true);
                }
                var date = this._daylightSavingAdjust(new Date(year,month - 1,day));
                if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)
                    throw 'Invalid date';
                return date;
            },
            ATOM: 'yy-mm-dd',
            COOKIE: 'D, dd M yy',
            ISO_8601: 'yy-mm-dd',
            RFC_822: 'D, d M y',
            RFC_850: 'DD, dd-M-y',
            RFC_1036: 'D, d M y',
            RFC_1123: 'D, d M yy',
            RFC_2822: 'D, d M yy',
            RSS: 'D, d M y',
            TICKS: '!',
            TIMESTAMP: '@',
            W3C: 'yy-mm-dd',
            _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),
            formatDate: function(format, date, settings) {
                if (!date)
                    return '';
                var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
                var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
                var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
                var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
                var lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                    if (matches)
                        iFormat++;
                    return matches;
                };
                var formatNumber = function(match, value, len) {
                    var num = '' + value;
                    if (lookAhead(match))
                        while (num.length < len)
                            num = '0' + num;
                    return num;
                };
                var formatName = function(match, value, shortNames, longNames) {
                    return (lookAhead(match) ? longNames[value] : shortNames[value]);
                };
                var output = '';
                var literal = false;
                if (date)
                    for (var iFormat = 0; iFormat < format.length; iFormat++) {
                        if (literal)
                            if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                                literal = false;
                            else
                                output += format.charAt(iFormat);
                        else
                            switch (format.charAt(iFormat)) {
                                case 'd':
                                    output += formatNumber('d', date.getDate(), 2);
                                    break;
                                case 'D':
                                    output += formatName('D', date.getDay(), dayNamesShort, dayNames);
                                    break;
                                case 'o':
                                    output += formatNumber('o', Math.round((new Date(date.getFullYear(),date.getMonth(),date.getDate()).getTime() - new Date(date.getFullYear(),0,0).getTime()) / 86400000), 3);
                                    break;
                                case 'm':
                                    output += formatNumber('m', date.getMonth() + 1, 2);
                                    break;
                                case 'M':
                                    output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
                                    break;
                                case 'y':
                                    output += (lookAhead('y') ? date.getFullYear() : (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
                                    break;
                                case '@':
                                    output += date.getTime();
                                    break;
                                case '!':
                                    output += date.getTime() * 10000 + this._ticksTo1970;
                                    break;
                                case "'":
                                    if (lookAhead("'"))
                                        output += "'";
                                    else
                                        literal = true;
                                    break;
                                default:
                                    output += format.charAt(iFormat);
                            }
                    }
                return output;
            },
            _possibleChars: function(format) {
                var chars = '';
                var literal = false;
                var lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
                    if (matches)
                        iFormat++;
                    return matches;
                };
                for (var iFormat = 0; iFormat < format.length; iFormat++)
                    if (literal)
                        if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                            literal = false;
                        else
                            chars += format.charAt(iFormat);
                    else
                        switch (format.charAt(iFormat)) {
                            case 'd':
                            case 'm':
                            case 'y':
                            case '@':
                                chars += '0123456789';
                                break;
                            case 'D':
                            case 'M':
                                return null;
                            case "'":
                                if (lookAhead("'"))
                                    chars += "'";
                                else
                                    literal = true;
                                break;
                            default:
                                chars += format.charAt(iFormat);
                        }
                return chars;
            },
            _get: function(inst, name) {
                return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];
            },
            _setDateFromField: function(inst, noDefault) {
                if (inst.input.val() == inst.lastVal) {
                    return;
                }
                var dateFormat = this._get(inst, 'dateFormat');
                var dates = inst.lastVal = inst.input ? inst.input.val() : null;
                var date, defaultDate;
                date = defaultDate = this._getDefaultDate(inst);
                var settings = this._getFormatConfig(inst);
                try {
                    date = this.parseDate(dateFormat, dates, settings) || defaultDate;
                } catch (event) {
                    this.log(event);
                    dates = (noDefault ? '' : dates);
                }
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
                inst.currentDay = (dates ? date.getDate() : 0);
                inst.currentMonth = (dates ? date.getMonth() : 0);
                inst.currentYear = (dates ? date.getFullYear() : 0);
                this._adjustInstDate(inst);
            },
            _getDefaultDate: function(inst) {
                return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
            },
            _determineDate: function(inst, date, defaultDate) {
                var offsetNumeric = function(offset) {
                    var date = new Date();
                    date.setDate(date.getDate() + offset);
                    return date;
                };
                var offsetString = function(offset) {
                    try {
                        return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'), offset, $.datepicker._getFormatConfig(inst));
                    } catch (e) {}
                    var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date();
                    var year = date.getFullYear();
                    var month = date.getMonth();
                    var day = date.getDate();
                    var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
                    var matches = pattern.exec(offset);
                    while (matches) {
                        switch (matches[2] || 'd') {
                            case 'd':
                            case 'D':
                                day += parseInt(matches[1], 10);
                                break;
                            case 'w':
                            case 'W':
                                day += parseInt(matches[1], 10) * 7;
                                break;
                            case 'm':
                            case 'M':
                                month += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                            case 'y':
                            case 'Y':
                                year += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                        }
                        matches = pattern.exec(offset);
                    }
                    return new Date(year,month,day);
                };
                var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) : (typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
                newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);
                if (newDate) {
                    newDate.setHours(0);
                    newDate.setMinutes(0);
                    newDate.setSeconds(0);
                    newDate.setMilliseconds(0);
                }
                return this._daylightSavingAdjust(newDate);
            },
            _daylightSavingAdjust: function(date) {
                if (!date)
                    return null;
                date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
                return date;
            },
            _setDate: function(inst, date, noChange) {
                var clear = !date;
                var origMonth = inst.selectedMonth;
                var origYear = inst.selectedYear;
                var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
                inst.selectedDay = inst.currentDay = newDate.getDate();
                inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
                inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
                if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)
                    this._notifyChange(inst);
                this._adjustInstDate(inst);
                if (inst.input) {
                    inst.input.val(clear ? '' : this._formatDate(inst));
                }
            },
            _getDate: function(inst) {
                var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null : this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));
                return startDate;
            },
            _attachHandlers: function(inst) {
                var stepMonths = this._get(inst, 'stepMonths');
                var id = '#' + inst.id.replace(/\\\\/g, "\\");
                inst.dpDiv.find('[data-handler]').map(function() {
                    var handler = {
                        prev: function() {
                            window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, -stepMonths, 'M');
                        },
                        next: function() {
                            window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, +stepMonths, 'M');
                        },
                        hide: function() {
                            window['DP_jQuery_' + dpuuid].datepicker._hideDatepicker();
                        },
                        today: function() {
                            window['DP_jQuery_' + dpuuid].datepicker._gotoToday(id);
                        },
                        selectDay: function() {
                            window['DP_jQuery_' + dpuuid].datepicker._selectDay(id, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this);
                            return false;
                        },
                        selectMonth: function() {
                            window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'M');
                            return false;
                        },
                        selectYear: function() {
                            window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'Y');
                            return false;
                        }
                    };
                    $(this).bind(this.getAttribute('data-event'), handler[this.getAttribute('data-handler')]);
                });
            },
            _generateHTML: function(inst) {
                var today = new Date();
                today = this._daylightSavingAdjust(new Date(today.getFullYear(),today.getMonth(),today.getDate()));
                var isRTL = this._get(inst, 'isRTL');
                var showButtonPanel = this._get(inst, 'showButtonPanel');
                var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');
                var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');
                var numMonths = this._getNumberOfMonths(inst);
                var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');
                var stepMonths = this._get(inst, 'stepMonths');
                var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
                var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999,9,9) : new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));
                var minDate = this._getMinMaxDate(inst, 'min');
                var maxDate = this._getMinMaxDate(inst, 'max');
                var drawMonth = inst.drawMonth - showCurrentAtPos;
                var drawYear = inst.drawYear;
                if (drawMonth < 0) {
                    drawMonth += 12;
                    drawYear--;
                }
                if (maxDate) {
                    var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1,maxDate.getDate()));
                    maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
                    while (this._daylightSavingAdjust(new Date(drawYear,drawMonth,1)) > maxDraw) {
                        drawMonth--;
                        if (drawMonth < 0) {
                            drawMonth = 11;
                            drawYear--;
                        }
                    }
                }
                inst.drawMonth = drawMonth;
                inst.drawYear = drawYear;
                var prevText = this._get(inst, 'prevText');
                prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear,drawMonth - stepMonths,1)), this._getFormatConfig(inst)));
                var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? '<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click"' + ' title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' : (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));
                var nextText = this._get(inst, 'nextText');
                nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear,drawMonth + stepMonths,1)), this._getFormatConfig(inst)));
                var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? '<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click"' + ' title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' : (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));
                var currentText = this._get(inst, 'currentText');
                var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);
                currentText = (!navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
                var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">' + this._get(inst, 'closeText') + '</button>' : '');
                var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : '') + (this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click"' + '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';
                var firstDay = parseInt(this._get(inst, 'firstDay'), 10);
                firstDay = (isNaN(firstDay) ? 0 : firstDay);
                var showWeek = this._get(inst, 'showWeek');
                var dayNames = this._get(inst, 'dayNames');
                var dayNamesShort = this._get(inst, 'dayNamesShort');
                var dayNamesMin = this._get(inst, 'dayNamesMin');
                var monthNames = this._get(inst, 'monthNames');
                var monthNamesShort = this._get(inst, 'monthNamesShort');
                var beforeShowDay = this._get(inst, 'beforeShowDay');
                var showOtherMonths = this._get(inst, 'showOtherMonths');
                var selectOtherMonths = this._get(inst, 'selectOtherMonths');
                var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;
                var defaultDate = this._getDefaultDate(inst);
                var html = '';
                for (var row = 0; row < numMonths[0]; row++) {
                    var group = '';
                    this.maxRows = 4;
                    for (var col = 0; col < numMonths[1]; col++) {
                        var selectedDate = this._daylightSavingAdjust(new Date(drawYear,drawMonth,inst.selectedDay));
                        var cornerClass = ' ui-corner-all';
                        var calender = '';
                        if (isMultiMonth) {
                            calender += '<div class="ui-datepicker-group';
                            if (numMonths[1] > 1)
                                switch (col) {
                                    case 0:
                                        calender += ' ui-datepicker-group-first';
                                        cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left');
                                        break;
                                    case numMonths[1] - 1:
                                        calender += ' ui-datepicker-group-last';
                                        cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right');
                                        break;
                                    default:
                                        calender += ' ui-datepicker-group-middle';
                                        cornerClass = '';
                                        break;
                                }
                            calender += '">';
                        }
                        calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' + (/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') + (/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + '</div><table class="ui-datepicker-calendar"><thead>' + '<tr>';
                        var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');
                        for (var dow = 0; dow < 7; dow++) {
                            var day = (dow + firstDay) % 7;
                            thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' + '<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';
                        }
                        calender += thead + '</tr></thead><tbody>';
                        var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                        if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)
                            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                        var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                        var curRows = Math.ceil((leadDays + daysInMonth) / 7);
                        var numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows);
                        this.maxRows = numRows;
                        var printDate = this._daylightSavingAdjust(new Date(drawYear,drawMonth,1 - leadDays));
                        for (var dRow = 0; dRow < numRows; dRow++) {
                            calender += '<tr>';
                            var tbody = (!showWeek ? '' : '<td class="ui-datepicker-week-col">' + this._get(inst, 'calculateWeek')(printDate) + '</td>');
                            for (var dow = 0; dow < 7; dow++) {
                                var daySettings = (beforeShowDay ? beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);
                                var otherMonth = (printDate.getMonth() != drawMonth);
                                var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] || (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                                tbody += '<td class="' + ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + (otherMonth ? ' ui-datepicker-other-month' : '') + ((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || (defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ? ' ' + this._dayOverClass : '') + (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') + (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + (printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + (printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' + ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : '') + (unselectable ? '' : ' data-handler="selectDay" data-event="click" data-month="' + printDate.getMonth() + '" data-year="' + printDate.getFullYear() + '"') + '>' + (otherMonth && !showOtherMonths ? '&#xa0;' : (unselectable ? '<span class="ui-state-default">' + printDate.getDate() + '</span>' : '<a class="ui-state-default' + (printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') + (printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + (otherMonth ? ' ui-priority-secondary' : '') + '" href="#">' + printDate.getDate() + '</a>')) + '</td>';
                                printDate.setDate(printDate.getDate() + 1);
                                printDate = this._daylightSavingAdjust(printDate);
                            }
                            calender += tbody + '</tr>';
                        }
                        drawMonth++;
                        if (drawMonth > 11) {
                            drawMonth = 0;
                            drawYear++;
                        }
                        calender += '</tbody></table>' + (isMultiMonth ? '</div>' + ((numMonths[0] > 0 && col == numMonths[1] - 1) ? '<div class="ui-datepicker-row-break"></div>' : '') : '');
                        group += calender;
                    }
                    html += group;
                }
                html += buttonPanel + ($.ui.ie6 && !inst.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : '');
                inst._keyEvent = false;
                return html;
            },
            _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
                var changeMonth = this._get(inst, 'changeMonth');
                var changeYear = this._get(inst, 'changeYear');
                var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');
                var html = '<div class="ui-datepicker-title">';
                var monthHtml = '';
                if (secondary || !changeMonth)
                    monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + '</span>';
                else {
                    var inMinYear = (minDate && minDate.getFullYear() == drawYear);
                    var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
                    monthHtml += '<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';
                    for (var month = 0; month < 12; month++) {
                        if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth()))
                            monthHtml += '<option value="' + month + '"' + (month == drawMonth ? ' selected="selected"' : '') + '>' + monthNamesShort[month] + '</option>';
                    }
                    monthHtml += '</select>';
                }
                if (!showMonthAfterYear)
                    html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
                if (!inst.yearshtml) {
                    inst.yearshtml = '';
                    if (secondary || !changeYear)
                        html += '<span class="ui-datepicker-year">' + drawYear + '</span>';
                    else {
                        var years = this._get(inst, 'yearRange').split(':');
                        var thisYear = new Date().getFullYear();
                        var determineYear = function(value) {
                            var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) : (value.match(/[+-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10)));
                            return (isNaN(year) ? thisYear : year);
                        };
                        var year = determineYear(years[0]);
                        var endYear = Math.max(year, determineYear(years[1] || ''));
                        year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                        endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                        inst.yearshtml += '<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">';
                        for (; year <= endYear; year++) {
                            inst.yearshtml += '<option value="' + year + '"' + (year == drawYear ? ' selected="selected"' : '') + '>' + year + '</option>';
                        }
                        inst.yearshtml += '</select>';
                        html += inst.yearshtml;
                        inst.yearshtml = null;
                    }
                }
                html += this._get(inst, 'yearSuffix');
                if (showMonthAfterYear)
                    html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
                html += '</div>';
                return html;
            },
            _adjustInstDate: function(inst, offset, period) {
                var year = inst.drawYear + (period == 'Y' ? offset : 0);
                var month = inst.drawMonth + (period == 'M' ? offset : 0);
                var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period == 'D' ? offset : 0);
                var date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year,month,day)));
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
                if (period == 'M' || period == 'Y')
                    this._notifyChange(inst);
            },
            _restrictMinMax: function(inst, date) {
                var minDate = this._getMinMaxDate(inst, 'min');
                var maxDate = this._getMinMaxDate(inst, 'max');
                var newDate = (minDate && date < minDate ? minDate : date);
                newDate = (maxDate && newDate > maxDate ? maxDate : newDate);
                return newDate;
            },
            _notifyChange: function(inst) {
                var onChange = this._get(inst, 'onChangeMonthYear');
                if (onChange)
                    onChange.apply((inst.input ? inst.input[0] : null), [inst.selectedYear, inst.selectedMonth + 1, inst]);
            },
            _getNumberOfMonths: function(inst) {
                var numMonths = this._get(inst, 'numberOfMonths');
                return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));
            },
            _getMinMaxDate: function(inst, minMax) {
                return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
            },
            _getDaysInMonth: function(year, month) {
                return 32 - this._daylightSavingAdjust(new Date(year,month,32)).getDate();
            },
            _getFirstDayOfMonth: function(year, month) {
                return new Date(year,month,1).getDay();
            },
            _canAdjustMonth: function(inst, offset, curYear, curMonth) {
                var numMonths = this._getNumberOfMonths(inst);
                var date = this._daylightSavingAdjust(new Date(curYear,curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]),1));
                if (offset < 0)
                    date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
                return this._isInRange(inst, date);
            },
            _isInRange: function(inst, date) {
                var minDate = this._getMinMaxDate(inst, 'min');
                var maxDate = this._getMinMaxDate(inst, 'max');
                return ((!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()));
            },
            _getFormatConfig: function(inst) {
                var shortYearCutoff = this._get(inst, 'shortYearCutoff');
                shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
                return {
                    shortYearCutoff: shortYearCutoff,
                    dayNamesShort: this._get(inst, 'dayNamesShort'),
                    dayNames: this._get(inst, 'dayNames'),
                    monthNamesShort: this._get(inst, 'monthNamesShort'),
                    monthNames: this._get(inst, 'monthNames')
                };
            },
            _formatDate: function(inst, day, month, year) {
                if (!day) {
                    inst.currentDay = inst.selectedDay;
                    inst.currentMonth = inst.selectedMonth;
                    inst.currentYear = inst.selectedYear;
                }
                var date = (day ? (typeof day == 'object' ? day : this._daylightSavingAdjust(new Date(year,month,day))) : this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));
                return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
            }
        });
        function bindHover(dpDiv) {
            var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
            return dpDiv.delegate(selector, 'mouseout', function() {
                $(this).removeClass('ui-state-hover');
                if (this.className.indexOf('ui-datepicker-prev') != -1)
                    $(this).removeClass('ui-datepicker-prev-hover');
                if (this.className.indexOf('ui-datepicker-next') != -1)
                    $(this).removeClass('ui-datepicker-next-hover');
            }).delegate(selector, 'mouseover', function() {
                if (!$.datepicker._isDisabledDatepicker(instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
                    $(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
                    $(this).addClass('ui-state-hover');
                    if (this.className.indexOf('ui-datepicker-prev') != -1)
                        $(this).addClass('ui-datepicker-prev-hover');
                    if (this.className.indexOf('ui-datepicker-next') != -1)
                        $(this).addClass('ui-datepicker-next-hover');
                }
            });
        }
        function extendRemove(target, props) {
            $.extend(target, props);
            for (var name in props)
                if (props[name] == null || props[name] == undefined)
                    target[name] = props[name];
            return target;
        }
        ;$.fn.datepicker = function(options) {
            if (!this.length) {
                return this;
            }
            if (!$.datepicker.initialized) {
                $(document).mousedown($.datepicker._checkExternalClick).find(document.body).append($.datepicker.dpDiv);
                $.datepicker.initialized = true;
            }
            var otherArgs = Array.prototype.slice.call(arguments, 1);
            if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))
                return $.datepicker['_' + options + 'Datepicker'].apply($.datepicker, [this[0]].concat(otherArgs));
            if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')
                return $.datepicker['_' + options + 'Datepicker'].apply($.datepicker, [this[0]].concat(otherArgs));
            return this.each(function() {
                typeof options == 'string' ? $.datepicker['_' + options + 'Datepicker'].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
            });
        }
        ;
        $.datepicker = new Datepicker();
        $.datepicker.initialized = false;
        $.datepicker.uuid = new Date().getTime();
        $.datepicker.version = "1.9.2";
        window['DP_jQuery_' + dpuuid] = $;
    }
)(jQuery);
(function($, undefined) {
    var uiDialogClasses = "ui-dialog ui-widget ui-widget-content ui-corner-all "
        , sizeRelatedOptions = {
        buttons: true,
        height: true,
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true,
        width: true
    }
        , resizableRelatedOptions = {
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true
    };
    $.widget("ui.dialog", {
        version: "1.9.2",
        options: {
            autoOpen: true,
            buttons: {},
            closeOnEscape: true,
            closeText: "close",
            dialogClass: "",
            draggable: true,
            hide: null,
            height: "auto",
            maxHeight: false,
            maxWidth: false,
            minHeight: 150,
            minWidth: 150,
            modal: false,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                using: function(pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    if (topOffset < 0) {
                        $(this).css("top", pos.top - topOffset);
                    }
                }
            },
            resizable: true,
            show: null,
            stack: true,
            title: "",
            width: 300,
            zIndex: 1000
        },
        _create: function() {
            this.originalTitle = this.element.attr("title");
            if (typeof this.originalTitle !== "string") {
                this.originalTitle = "";
            }
            this.oldPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            };
            this.options.title = this.options.title || this.originalTitle;
            var that = this, options = this.options, title = options.title || "&#160;", uiDialog, uiDialogTitlebar, uiDialogTitlebarClose, uiDialogTitle, uiDialogButtonPane;
            uiDialog = (this.uiDialog = $("<div>")).addClass(uiDialogClasses + options.dialogClass).css({
                display: "none",
                outline: 0,
                zIndex: options.zIndex
            }).attr("tabIndex", -1).keydown(function(event) {
                if (options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                    that.close(event);
                    event.preventDefault();
                }
            }).mousedown(function(event) {
                that.moveToTop(false, event);
            }).appendTo("body");
            this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(uiDialog);
            uiDialogTitlebar = (this.uiDialogTitlebar = $("<div>")).addClass("ui-dialog-titlebar  ui-widget-header  " + "ui-corner-all  ui-helper-clearfix").bind("mousedown", function() {
                uiDialog.focus();
            }).prependTo(uiDialog);
            uiDialogTitlebarClose = $("<a href='#'></a>").addClass("ui-dialog-titlebar-close  ui-corner-all").attr("role", "button").click(function(event) {
                event.preventDefault();
                that.close(event);
            }).appendTo(uiDialogTitlebar);
            (this.uiDialogTitlebarCloseText = $("<span>")).addClass("ui-icon ui-icon-closethick").text(options.closeText).appendTo(uiDialogTitlebarClose);
            uiDialogTitle = $("<span>").uniqueId().addClass("ui-dialog-title").html(title).prependTo(uiDialogTitlebar);
            uiDialogButtonPane = (this.uiDialogButtonPane = $("<div>")).addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
            (this.uiButtonSet = $("<div>")).addClass("ui-dialog-buttonset").appendTo(uiDialogButtonPane);
            uiDialog.attr({
                role: "dialog",
                "aria-labelledby": uiDialogTitle.attr("id")
            });
            uiDialogTitlebar.find("*").add(uiDialogTitlebar).disableSelection();
            this._hoverable(uiDialogTitlebarClose);
            this._focusable(uiDialogTitlebarClose);
            if (options.draggable && $.fn.draggable) {
                this._makeDraggable();
            }
            if (options.resizable && $.fn.resizable) {
                this._makeResizable();
            }
            this._createButtons(options.buttons);
            this._isOpen = false;
            if ($.fn.bgiframe) {
                uiDialog.bgiframe();
            }
            this._on(uiDialog, {
                keydown: function(event) {
                    if (!options.modal || event.keyCode !== $.ui.keyCode.TAB) {
                        return;
                    }
                    var tabbables = $(":tabbable", uiDialog)
                        , first = tabbables.filter(":first")
                        , last = tabbables.filter(":last");
                    if (event.target === last[0] && !event.shiftKey) {
                        first.focus(1);
                        return false;
                    } else if (event.target === first[0] && event.shiftKey) {
                        last.focus(1);
                        return false;
                    }
                }
            });
        },
        _init: function() {
            if (this.options.autoOpen) {
                this.open();
            }
        },
        _destroy: function() {
            var next, oldPosition = this.oldPosition;
            if (this.overlay) {
                this.overlay.destroy();
            }
            this.uiDialog.hide();
            this.element.removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body");
            this.uiDialog.remove();
            if (this.originalTitle) {
                this.element.attr("title", this.originalTitle);
            }
            next = oldPosition.parent.children().eq(oldPosition.index);
            if (next.length && next[0] !== this.element[0]) {
                next.before(this.element);
            } else {
                oldPosition.parent.append(this.element);
            }
        },
        widget: function() {
            return this.uiDialog;
        },
        close: function(event) {
            var that = this, maxZ, thisZ;
            if (!this._isOpen) {
                return;
            }
            if (false === this._trigger("beforeClose", event)) {
                return;
            }
            this._isOpen = false;
            if (this.overlay) {
                this.overlay.destroy();
            }
            if (this.options.hide) {
                this._hide(this.uiDialog, this.options.hide, function() {
                    that._trigger("close", event);
                });
            } else {
                this.uiDialog.hide();
                this._trigger("close", event);
            }
            $.ui.dialog.overlay.resize();
            if (this.options.modal) {
                maxZ = 0;
                $(".ui-dialog").each(function() {
                    if (this !== that.uiDialog[0]) {
                        thisZ = $(this).css("z-index");
                        if (!isNaN(thisZ)) {
                            maxZ = Math.max(maxZ, thisZ);
                        }
                    }
                });
                $.ui.dialog.maxZ = maxZ;
            }
            return this;
        },
        isOpen: function() {
            return this._isOpen;
        },
        moveToTop: function(force, event) {
            var options = this.options, saveScroll;
            if ((options.modal && !force) || (!options.stack && !options.modal)) {
                return this._trigger("focus", event);
            }
            if (options.zIndex > $.ui.dialog.maxZ) {
                $.ui.dialog.maxZ = options.zIndex;
            }
            if (this.overlay) {
                $.ui.dialog.maxZ += 1;
                $.ui.dialog.overlay.maxZ = $.ui.dialog.maxZ;
                this.overlay.$el.css("z-index", $.ui.dialog.overlay.maxZ);
            }
            saveScroll = {
                scrollTop: this.element.scrollTop(),
                scrollLeft: this.element.scrollLeft()
            };
            $.ui.dialog.maxZ += 1;
            this.uiDialog.css("z-index", $.ui.dialog.maxZ);
            this.element.attr(saveScroll);
            this._trigger("focus", event);
            return this;
        },
        open: function() {
            if (this._isOpen) {
                return;
            }
            var hasFocus, options = this.options, uiDialog = this.uiDialog;
            this._size();
            this._position(options.position);
            uiDialog.show(options.show);
            this.overlay = options.modal ? new $.ui.dialog.overlay(this) : null;
            this.moveToTop(true);
            hasFocus = this.element.find(":tabbable");
            if (!hasFocus.length) {
                hasFocus = this.uiDialogButtonPane.find(":tabbable");
                if (!hasFocus.length) {
                    hasFocus = uiDialog;
                }
            }
            hasFocus.eq(0).focus();
            this._isOpen = true;
            this._trigger("open");
            return this;
        },
        _createButtons: function(buttons) {
            var that = this
                , hasButtons = false;
            this.uiDialogButtonPane.remove();
            this.uiButtonSet.empty();
            if (typeof buttons === "object" && buttons !== null) {
                $.each(buttons, function() {
                    return !(hasButtons = true);
                });
            }
            if (hasButtons) {
                $.each(buttons, function(name, props) {
                    var button, click;
                    props = $.isFunction(props) ? {
                        click: props,
                        text: name
                    } : props;
                    props = $.extend({
                        type: "button"
                    }, props);
                    click = props.click;
                    props.click = function() {
                        click.apply(that.element[0], arguments);
                    }
                    ;
                    button = $("<button></button>", props).appendTo(that.uiButtonSet);
                    if ($.fn.button) {
                        button.button();
                    }
                });
                this.uiDialog.addClass("ui-dialog-buttons");
                this.uiDialogButtonPane.appendTo(this.uiDialog);
            } else {
                this.uiDialog.removeClass("ui-dialog-buttons");
            }
        },
        _makeDraggable: function() {
            var that = this
                , options = this.options;
            function filteredUi(ui) {
                return {
                    position: ui.position,
                    offset: ui.offset
                };
            }
            this.uiDialog.draggable({
                cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-dragging");
                    that._trigger("dragStart", event, filteredUi(ui));
                },
                drag: function(event, ui) {
                    that._trigger("drag", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    options.position = [ui.position.left - that.document.scrollLeft(), ui.position.top - that.document.scrollTop()];
                    $(this).removeClass("ui-dialog-dragging");
                    that._trigger("dragStop", event, filteredUi(ui));
                    $.ui.dialog.overlay.resize();
                }
            });
        },
        _makeResizable: function(handles) {
            handles = (handles === undefined ? this.options.resizable : handles);
            var that = this
                , options = this.options
                , position = this.uiDialog.css("position")
                , resizeHandles = typeof handles === 'string' ? handles : "n,e,s,w,se,sw,ne,nw";
            function filteredUi(ui) {
                return {
                    originalPosition: ui.originalPosition,
                    originalSize: ui.originalSize,
                    position: ui.position,
                    size: ui.size
                };
            }
            this.uiDialog.resizable({
                cancel: ".ui-dialog-content",
                containment: "document",
                alsoResize: this.element,
                maxWidth: options.maxWidth,
                maxHeight: options.maxHeight,
                minWidth: options.minWidth,
                minHeight: this._minHeight(),
                handles: resizeHandles,
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-resizing");
                    that._trigger("resizeStart", event, filteredUi(ui));
                },
                resize: function(event, ui) {
                    that._trigger("resize", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    $(this).removeClass("ui-dialog-resizing");
                    options.height = $(this).height();
                    options.width = $(this).width();
                    that._trigger("resizeStop", event, filteredUi(ui));
                    $.ui.dialog.overlay.resize();
                }
            }).css("position", position).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se");
        },
        _minHeight: function() {
            var options = this.options;
            if (options.height === "auto") {
                return options.minHeight;
            } else {
                return Math.min(options.minHeight, options.height);
            }
        },
        _position: function(position) {
            var myAt = [], offset = [0, 0], isVisible;
            if (position) {
                if (typeof position === "string" || (typeof position === "object" && "0"in position)) {
                    myAt = position.split ? position.split(" ") : [position[0], position[1]];
                    if (myAt.length === 1) {
                        myAt[1] = myAt[0];
                    }
                    $.each(["left", "top"], function(i, offsetPosition) {
                        if (+myAt[i] === myAt[i]) {
                            offset[i] = myAt[i];
                            myAt[i] = offsetPosition;
                        }
                    });
                    position = {
                        my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " + myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
                        at: myAt.join(" ")
                    };
                }
                position = $.extend({}, $.ui.dialog.prototype.options.position, position);
            } else {
                position = $.ui.dialog.prototype.options.position;
            }
            isVisible = this.uiDialog.is(":visible");
            if (!isVisible) {
                this.uiDialog.show();
            }
            this.uiDialog.position(position);
            if (!isVisible) {
                this.uiDialog.hide();
            }
        },
        _setOptions: function(options) {
            var that = this
                , resizableOptions = {}
                , resize = false;
            $.each(options, function(key, value) {
                that._setOption(key, value);
                if (key in sizeRelatedOptions) {
                    resize = true;
                }
                if (key in resizableRelatedOptions) {
                    resizableOptions[key] = value;
                }
            });
            if (resize) {
                this._size();
            }
            if (this.uiDialog.is(":data(resizable)")) {
                this.uiDialog.resizable("option", resizableOptions);
            }
        },
        _setOption: function(key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog;
            switch (key) {
                case "buttons":
                    this._createButtons(value);
                    break;
                case "closeText":
                    this.uiDialogTitlebarCloseText.text("" + value);
                    break;
                case "dialogClass":
                    uiDialog.removeClass(this.options.dialogClass).addClass(uiDialogClasses + value);
                    break;
                case "disabled":
                    if (value) {
                        uiDialog.addClass("ui-dialog-disabled");
                    } else {
                        uiDialog.removeClass("ui-dialog-disabled");
                    }
                    break;
                case "draggable":
                    isDraggable = uiDialog.is(":data(draggable)");
                    if (isDraggable && !value) {
                        uiDialog.draggable("destroy");
                    }
                    if (!isDraggable && value) {
                        this._makeDraggable();
                    }
                    break;
                case "position":
                    this._position(value);
                    break;
                case "resizable":
                    isResizable = uiDialog.is(":data(resizable)");
                    if (isResizable && !value) {
                        uiDialog.resizable("destroy");
                    }
                    if (isResizable && typeof value === "string") {
                        uiDialog.resizable("option", "handles", value);
                    }
                    if (!isResizable && value !== false) {
                        this._makeResizable(value);
                    }
                    break;
                case "title":
                    $(".ui-dialog-title", this.uiDialogTitlebar).html("" + (value || "&#160;"));
                    break;
            }
            this._super(key, value);
        },
        _size: function() {
            var nonContentHeight, minContentHeight, autoHeight, options = this.options, isVisible = this.uiDialog.is(":visible");
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                height: 0
            });
            if (options.minWidth > options.width) {
                options.width = options.minWidth;
            }
            nonContentHeight = this.uiDialog.css({
                height: "auto",
                width: options.width
            }).outerHeight();
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
            if (options.height === "auto") {
                if ($.support.minHeight) {
                    this.element.css({
                        minHeight: minContentHeight,
                        height: "auto"
                    });
                } else {
                    this.uiDialog.show();
                    autoHeight = this.element.css("height", "auto").height();
                    if (!isVisible) {
                        this.uiDialog.hide();
                    }
                    this.element.height(Math.max(autoHeight, minContentHeight));
                }
            } else {
                this.element.height(Math.max(options.height - nonContentHeight, 0));
            }
            if (this.uiDialog.is(":data(resizable)")) {
                this.uiDialog.resizable("option", "minHeight", this._minHeight());
            }
        }
    });
    $.extend($.ui.dialog, {
        uuid: 0,
        maxZ: 0,
        getTitleId: function($el) {
            var id = $el.attr("id");
            if (!id) {
                this.uuid += 1;
                id = this.uuid;
            }
            return "ui-dialog-title-" + id;
        },
        overlay: function(dialog) {
            this.$el = $.ui.dialog.overlay.create(dialog);
        }
    });
    $.extend($.ui.dialog.overlay, {
        instances: [],
        oldInstances: [],
        maxZ: 0,
        events: $.map("focus,mousedown,mouseup,keydown,keypress,click".split(","), function(event) {
            return event + ".dialog-overlay";
        }).join(" "),
        create: function(dialog) {
            if (this.instances.length === 0) {
                setTimeout(function() {
                    if ($.ui.dialog.overlay.instances.length) {
                        $(document).bind($.ui.dialog.overlay.events, function(event) {
                            if ($(event.target).zIndex() < $.ui.dialog.overlay.maxZ) {
                                return false;
                            }
                        });
                    }
                }, 1);
                $(window).bind("resize.dialog-overlay", $.ui.dialog.overlay.resize);
            }
            var $el = (this.oldInstances.pop() || $("<div>").addClass("ui-widget-overlay"));
            $(document).bind("keydown.dialog-overlay", function(event) {
                var instances = $.ui.dialog.overlay.instances;
                if (instances.length !== 0 && instances[instances.length - 1] === $el && dialog.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                    dialog.close(event);
                    event.preventDefault();
                }
            });
            $el.appendTo(document.body).css({
                width: this.width(),
                height: this.height()
            });
            if ($.fn.bgiframe) {
                $el.bgiframe();
            }
            this.instances.push($el);
            return $el;
        },
        destroy: function($el) {
            var indexOf = $.inArray($el, this.instances)
                , maxZ = 0;
            if (indexOf !== -1) {
                this.oldInstances.push(this.instances.splice(indexOf, 1)[0]);
            }
            if (this.instances.length === 0) {
                $([document, window]).unbind(".dialog-overlay");
            }
            $el.height(0).width(0).remove();
            $.each(this.instances, function() {
                maxZ = Math.max(maxZ, this.css("z-index"));
            });
            this.maxZ = maxZ;
        },
        height: function() {
            var scrollHeight, offsetHeight;
            if ($.ui.ie) {
                scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
                offsetHeight = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight);
                if (scrollHeight < offsetHeight) {
                    return $(window).height() + "px";
                } else {
                    return scrollHeight + "px";
                }
            } else {
                return $(document).height() + "px";
            }
        },
        width: function() {
            var scrollWidth, offsetWidth;
            if ($.ui.ie) {
                scrollWidth = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
                offsetWidth = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);
                if (scrollWidth < offsetWidth) {
                    return $(window).width() + "px";
                } else {
                    return scrollWidth + "px";
                }
            } else {
                return $(document).width() + "px";
            }
        },
        resize: function() {
            var $overlays = $([]);
            $.each($.ui.dialog.overlay.instances, function() {
                $overlays = $overlays.add(this);
            });
            $overlays.css({
                width: 0,
                height: 0
            }).css({
                width: $.ui.dialog.overlay.width(),
                height: $.ui.dialog.overlay.height()
            });
        }
    });
    $.extend($.ui.dialog.overlay.prototype, {
        destroy: function() {
            $.ui.dialog.overlay.destroy(this.$el);
        }
    });
}(jQuery));
(function($, undefined) {
    var mouseHandled = false;
    $.widget("ui.menu", {
        version: "1.9.2",
        defaultElement: "<ul>",
        delay: 300,
        options: {
            icons: {
                submenu: "ui-icon-carat-1-e"
            },
            menus: "ul",
            position: {
                my: "left top",
                at: "right top"
            },
            role: "menu",
            blur: null,
            focus: null,
            select: null
        },
        _create: function() {
            this.activeMenu = this.element;
            this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({
                role: this.options.role,
                tabIndex: 0
            }).bind("click" + this.eventNamespace, $.proxy(function(event) {
                if (this.options.disabled) {
                    event.preventDefault();
                }
            }, this));
            if (this.options.disabled) {
                this.element.addClass("ui-state-disabled").attr("aria-disabled", "true");
            }
            this._on({
                "mousedown .ui-menu-item > a": function(event) {
                    event.preventDefault();
                },
                "click .ui-state-disabled > a": function(event) {
                    event.preventDefault();
                },
                "click .ui-menu-item:has(a)": function(event) {
                    var target = $(event.target).closest(".ui-menu-item");
                    if (!mouseHandled && target.not(".ui-state-disabled").length) {
                        mouseHandled = true;
                        this.select(event);
                        if (target.has(".ui-menu").length) {
                            this.expand(event);
                        } else if (!this.element.is(":focus")) {
                            this.element.trigger("focus", [true]);
                            if (this.active && this.active.parents(".ui-menu").length === 1) {
                                clearTimeout(this.timer);
                            }
                        }
                    }
                },
                "mouseenter .ui-menu-item": function(event) {
                    var target = $(event.currentTarget);
                    target.siblings().children(".ui-state-active").removeClass("ui-state-active");
                    this.focus(event, target);
                },
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function(event, keepActiveItem) {
                    var item = this.active || this.element.children(".ui-menu-item").eq(0);
                    if (!keepActiveItem) {
                        this.focus(event, item);
                    }
                },
                blur: function(event) {
                    this._delay(function() {
                        if (!$.contains(this.element[0], this.document[0].activeElement)) {
                            this.collapseAll(event);
                        }
                    });
                },
                keydown: "_keydown"
            });
            this.refresh();
            this._on(this.document, {
                click: function(event) {
                    if (!$(event.target).closest(".ui-menu").length) {
                        this.collapseAll(event);
                    }
                    mouseHandled = false;
                }
            });
        },
        _destroy: function() {
            this.element.removeAttr("aria-activedescendant").find(".ui-menu").andSelf().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show();
            this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function() {
                var elem = $(this);
                if (elem.data("ui-menu-submenu-carat")) {
                    elem.remove();
                }
            });
            this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content");
        },
        _keydown: function(event) {
            var match, prev, character, skip, regex, preventDefault = true;
            function escape(value) {
                return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
            }
            switch (event.keyCode) {
                case $.ui.keyCode.PAGE_UP:
                    this.previousPage(event);
                    break;
                case $.ui.keyCode.PAGE_DOWN:
                    this.nextPage(event);
                    break;
                case $.ui.keyCode.HOME:
                    this._move("first", "first", event);
                    break;
                case $.ui.keyCode.END:
                    this._move("last", "last", event);
                    break;
                case $.ui.keyCode.UP:
                    this.previous(event);
                    break;
                case $.ui.keyCode.DOWN:
                    this.next(event);
                    break;
                case $.ui.keyCode.LEFT:
                    this.collapse(event);
                    break;
                case $.ui.keyCode.RIGHT:
                    if (this.active && !this.active.is(".ui-state-disabled")) {
                        this.expand(event);
                    }
                    break;
                case $.ui.keyCode.ENTER:
                case $.ui.keyCode.SPACE:
                    this._activate(event);
                    break;
                case $.ui.keyCode.ESCAPE:
                    this.collapse(event);
                    break;
                default:
                    preventDefault = false;
                    prev = this.previousFilter || "";
                    character = String.fromCharCode(event.keyCode);
                    skip = false;
                    clearTimeout(this.filterTimer);
                    if (character === prev) {
                        skip = true;
                    } else {
                        character = prev + character;
                    }
                    regex = new RegExp("^" + escape(character),"i");
                    match = this.activeMenu.children(".ui-menu-item").filter(function() {
                        return regex.test($(this).children("a").text());
                    });
                    match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(".ui-menu-item") : match;
                    if (!match.length) {
                        character = String.fromCharCode(event.keyCode);
                        regex = new RegExp("^" + escape(character),"i");
                        match = this.activeMenu.children(".ui-menu-item").filter(function() {
                            return regex.test($(this).children("a").text());
                        });
                    }
                    if (match.length) {
                        this.focus(event, match);
                        if (match.length > 1) {
                            this.previousFilter = character;
                            this.filterTimer = this._delay(function() {
                                delete this.previousFilter;
                            }, 1000);
                        } else {
                            delete this.previousFilter;
                        }
                    } else {
                        delete this.previousFilter;
                    }
            }
            if (preventDefault) {
                event.preventDefault();
            }
        },
        _activate: function(event) {
            if (!this.active.is(".ui-state-disabled")) {
                if (this.active.children("a[aria-haspopup='true']").length) {
                    this.expand(event);
                } else {
                    this.select(event);
                }
            }
        },
        refresh: function() {
            var menus, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus);
            submenus.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({
                role: this.options.role,
                "aria-hidden": "true",
                "aria-expanded": "false"
            }).each(function() {
                var menu = $(this)
                    , item = menu.prev("a")
                    , submenuCarat = $("<span>").addClass("ui-menu-icon ui-icon " + icon).data("ui-menu-submenu-carat", true);
                item.attr("aria-haspopup", "true").prepend(submenuCarat);
                menu.attr("aria-labelledby", item.attr("id"));
            });
            menus = submenus.add(this.element);
            menus.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role", "presentation").children("a").uniqueId().addClass("ui-corner-all").attr({
                tabIndex: -1,
                role: this._itemRole()
            });
            menus.children(":not(.ui-menu-item)").each(function() {
                var item = $(this);
                if (!/[^\-—–\s]/.test(item.text())) {
                    item.addClass("ui-widget-content ui-menu-divider");
                }
            });
            menus.children(".ui-state-disabled").attr("aria-disabled", "true");
            if (this.active && !$.contains(this.element[0], this.active[0])) {
                this.blur();
            }
        },
        _itemRole: function() {
            return {
                menu: "menuitem",
                listbox: "option"
            }[this.options.role];
        },
        focus: function(event, item) {
            var nested, focused;
            this.blur(event, event && event.type === "focus");
            this._scrollIntoView(item);
            this.active = item.first();
            focused = this.active.children("a").addClass("ui-state-focus");
            if (this.options.role) {
                this.element.attr("aria-activedescendant", focused.attr("id"));
            }
            this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active");
            if (event && event.type === "keydown") {
                this._close();
            } else {
                this.timer = this._delay(function() {
                    this._close();
                }, this.delay);
            }
            nested = item.children(".ui-menu");
            if (nested.length && (/^mouse/.test(event.type))) {
                this._startOpening(nested);
            }
            this.activeMenu = item.parent();
            this._trigger("focus", event, {
                item: item
            });
        },
        _scrollIntoView: function(item) {
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            if (this._hasScroll()) {
                borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
                paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                scroll = this.activeMenu.scrollTop();
                elementHeight = this.activeMenu.height();
                itemHeight = item.height();
                if (offset < 0) {
                    this.activeMenu.scrollTop(scroll + offset);
                } else if (offset + itemHeight > elementHeight) {
                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);
                }
            }
        },
        blur: function(event, fromFocus) {
            if (!fromFocus) {
                clearTimeout(this.timer);
            }
            if (!this.active) {
                return;
            }
            this.active.children("a").removeClass("ui-state-focus");
            this.active = null;
            this._trigger("blur", event, {
                item: this.active
            });
        },
        _startOpening: function(submenu) {
            clearTimeout(this.timer);
            if (submenu.attr("aria-hidden") !== "true") {
                return;
            }
            this.timer = this._delay(function() {
                this._close();
                this._open(submenu);
            }, this.delay);
        },
        _open: function(submenu) {
            var position = $.extend({
                of: this.active
            }, this.options.position);
            clearTimeout(this.timer);
            this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");
            submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position);
        },
        collapseAll: function(event, all) {
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));
                if (!currentMenu.length) {
                    currentMenu = this.element;
                }
                this._close(currentMenu);
                this.blur(event);
                this.activeMenu = currentMenu;
            }, this.delay);
        },
        _close: function(startMenu) {
            if (!startMenu) {
                startMenu = this.active ? this.active.parent() : this.element;
            }
            startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find("a.ui-state-active").removeClass("ui-state-active");
        },
        collapse: function(event) {
            var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
            if (newItem && newItem.length) {
                this._close();
                this.focus(event, newItem);
            }
        },
        expand: function(event) {
            var newItem = this.active && this.active.children(".ui-menu ").children(".ui-menu-item").first();
            if (newItem && newItem.length) {
                this._open(newItem.parent());
                this._delay(function() {
                    this.focus(event, newItem);
                });
            }
        },
        next: function(event) {
            this._move("next", "first", event);
        },
        previous: function(event) {
            this._move("prev", "last", event);
        },
        isFirstItem: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length;
        },
        isLastItem: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length;
        },
        _move: function(direction, filter, event) {
            var next;
            if (this.active) {
                if (direction === "first" || direction === "last") {
                    next = this.active[direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1);
                } else {
                    next = this.active[direction + "All"](".ui-menu-item").eq(0);
                }
            }
            if (!next || !next.length || !this.active) {
                next = this.activeMenu.children(".ui-menu-item")[filter]();
            }
            this.focus(event, next);
        },
        nextPage: function(event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return;
            }
            if (this.isLastItem()) {
                return;
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.nextAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base - height < 0;
                });
                this.focus(event, item);
            } else {
                this.focus(event, this.activeMenu.children(".ui-menu-item")[!this.active ? "first" : "last"]());
            }
        },
        previousPage: function(event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return;
            }
            if (this.isFirstItem()) {
                return;
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.prevAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base + height > 0;
                });
                this.focus(event, item);
            } else {
                this.focus(event, this.activeMenu.children(".ui-menu-item").first());
            }
        },
        _hasScroll: function() {
            return this.element.outerHeight() < this.element.prop("scrollHeight");
        },
        select: function(event) {
            this.active = this.active || $(event.target).closest(".ui-menu-item");
            var ui = {
                item: this.active
            };
            if (!this.active.has(".ui-menu").length) {
                this.collapseAll(event, true);
            }
            this._trigger("select", event, ui);
        }
    });
}(jQuery));
(function($, undefined) {
        $.widget("ui.progressbar", {
            version: "1.9.2",
            options: {
                value: 0,
                max: 100
            },
            min: 0,
            _create: function() {
                this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                    role: "progressbar",
                    "aria-valuemin": this.min,
                    "aria-valuemax": this.options.max,
                    "aria-valuenow": this._value()
                });
                this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
                this.oldValue = this._value();
                this._refreshValue();
            },
            _destroy: function() {
                this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
                this.valueDiv.remove();
            },
            value: function(newValue) {
                if (newValue === undefined) {
                    return this._value();
                }
                this._setOption("value", newValue);
                return this;
            },
            _setOption: function(key, value) {
                if (key === "value") {
                    this.options.value = value;
                    this._refreshValue();
                    if (this._value() === this.options.max) {
                        this._trigger("complete");
                    }
                }
                this._super(key, value);
            },
            _value: function() {
                var val = this.options.value;
                if (typeof val !== "number") {
                    val = 0;
                }
                return Math.min(this.options.max, Math.max(this.min, val));
            },
            _percentage: function() {
                return 100 * this._value() / this.options.max;
            },
            _refreshValue: function() {
                var value = this.value()
                    , percentage = this._percentage();
                if (this.oldValue !== value) {
                    this.oldValue = value;
                    this._trigger("change");
                }
                this.valueDiv.toggle(value > this.min).toggleClass("ui-corner-right", value === this.options.max).width(percentage.toFixed(0) + "%");
                this.element.attr("aria-valuenow", value);
            }
        });
    }
)(jQuery);
(function($, undefined) {
    var numPages = 5;
    $.widget("ui.slider", $.ui.mouse, {
        version: "1.9.2",
        widgetEventPrefix: "slide",
        options: {
            animate: false,
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: false,
            step: 1,
            value: 0,
            values: null
        },
        _create: function() {
            var i, handleCount, o = this.options, existingHandles = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>", handles = [];
            this._keySliding = false;
            this._mouseSliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this.element.addClass("ui-slider" + " ui-slider-" + this.orientation + " ui-widget" + " ui-widget-content" + " ui-corner-all" + (o.disabled ? " ui-slider-disabled ui-disabled" : ""));
            this.range = $([]);
            if (o.range) {
                if (o.range === true) {
                    if (!o.values) {
                        o.values = [this._valueMin(), this._valueMin()];
                    }
                    if (o.values.length && o.values.length !== 2) {
                        o.values = [o.values[0], o.values[0]];
                    }
                }
                this.range = $("<div></div>").appendTo(this.element).addClass("ui-slider-range" + " ui-widget-header" + ((o.range === "min" || o.range === "max") ? " ui-slider-range-" + o.range : ""));
            }
            handleCount = (o.values && o.values.length) || 1;
            for (i = existingHandles.length; i < handleCount; i++) {
                handles.push(handle);
            }
            this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));
            this.handle = this.handles.eq(0);
            this.handles.add(this.range).filter("a").click(function(event) {
                event.preventDefault();
            }).mouseenter(function() {
                if (!o.disabled) {
                    $(this).addClass("ui-state-hover");
                }
            }).mouseleave(function() {
                $(this).removeClass("ui-state-hover");
            }).focus(function() {
                if (!o.disabled) {
                    $(".ui-slider .ui-state-focus").removeClass("ui-state-focus");
                    $(this).addClass("ui-state-focus");
                } else {
                    $(this).blur();
                }
            }).blur(function() {
                $(this).removeClass("ui-state-focus");
            });
            this.handles.each(function(i) {
                $(this).data("ui-slider-handle-index", i);
            });
            this._on(this.handles, {
                keydown: function(event) {
                    var allowed, curVal, newVal, step, index = $(event.target).data("ui-slider-handle-index");
                    switch (event.keyCode) {
                        case $.ui.keyCode.HOME:
                        case $.ui.keyCode.END:
                        case $.ui.keyCode.PAGE_UP:
                        case $.ui.keyCode.PAGE_DOWN:
                        case $.ui.keyCode.UP:
                        case $.ui.keyCode.RIGHT:
                        case $.ui.keyCode.DOWN:
                        case $.ui.keyCode.LEFT:
                            event.preventDefault();
                            if (!this._keySliding) {
                                this._keySliding = true;
                                $(event.target).addClass("ui-state-active");
                                allowed = this._start(event, index);
                                if (allowed === false) {
                                    return;
                                }
                            }
                            break;
                    }
                    step = this.options.step;
                    if (this.options.values && this.options.values.length) {
                        curVal = newVal = this.values(index);
                    } else {
                        curVal = newVal = this.value();
                    }
                    switch (event.keyCode) {
                        case $.ui.keyCode.HOME:
                            newVal = this._valueMin();
                            break;
                        case $.ui.keyCode.END:
                            newVal = this._valueMax();
                            break;
                        case $.ui.keyCode.PAGE_UP:
                            newVal = this._trimAlignValue(curVal + ((this._valueMax() - this._valueMin()) / numPages));
                            break;
                        case $.ui.keyCode.PAGE_DOWN:
                            newVal = this._trimAlignValue(curVal - ((this._valueMax() - this._valueMin()) / numPages));
                            break;
                        case $.ui.keyCode.UP:
                        case $.ui.keyCode.RIGHT:
                            if (curVal === this._valueMax()) {
                                return;
                            }
                            newVal = this._trimAlignValue(curVal + step);
                            break;
                        case $.ui.keyCode.DOWN:
                        case $.ui.keyCode.LEFT:
                            if (curVal === this._valueMin()) {
                                return;
                            }
                            newVal = this._trimAlignValue(curVal - step);
                            break;
                    }
                    this._slide(event, index, newVal);
                },
                keyup: function(event) {
                    var index = $(event.target).data("ui-slider-handle-index");
                    if (this._keySliding) {
                        this._keySliding = false;
                        this._stop(event, index);
                        this._change(event, index);
                        $(event.target).removeClass("ui-state-active");
                    }
                }
            });
            this._refreshValue();
            this._animateOff = false;
        },
        _destroy: function() {
            this.handles.remove();
            this.range.remove();
            this.element.removeClass("ui-slider" + " ui-slider-horizontal" + " ui-slider-vertical" + " ui-slider-disabled" + " ui-widget" + " ui-widget-content" + " ui-corner-all");
            this._mouseDestroy();
        },
        _mouseCapture: function(event) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this, o = this.options;
            if (o.disabled) {
                return false;
            }
            this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();
            position = {
                x: event.pageX,
                y: event.pageY
            };
            normValue = this._normValueFromMouse(position);
            distance = this._valueMax() - this._valueMin() + 1;
            this.handles.each(function(i) {
                var thisDistance = Math.abs(normValue - that.values(i));
                if (distance > thisDistance) {
                    distance = thisDistance;
                    closestHandle = $(this);
                    index = i;
                }
            });
            if (o.range === true && this.values(1) === o.min) {
                index += 1;
                closestHandle = $(this.handles[index]);
            }
            allowed = this._start(event, index);
            if (allowed === false) {
                return false;
            }
            this._mouseSliding = true;
            this._handleIndex = index;
            closestHandle.addClass("ui-state-active").focus();
            offset = closestHandle.offset();
            mouseOverHandle = !$(event.target).parents().andSelf().is(".ui-slider-handle");
            this._clickOffset = mouseOverHandle ? {
                left: 0,
                top: 0
            } : {
                left: event.pageX - offset.left - (closestHandle.width() / 2),
                top: event.pageY - offset.top - (closestHandle.height() / 2) - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
            };
            if (!this.handles.hasClass("ui-state-hover")) {
                this._slide(event, index, normValue);
            }
            this._animateOff = true;
            return true;
        },
        _mouseStart: function() {
            return true;
        },
        _mouseDrag: function(event) {
            var position = {
                x: event.pageX,
                y: event.pageY
            }
                , normValue = this._normValueFromMouse(position);
            this._slide(event, this._handleIndex, normValue);
            return false;
        },
        _mouseStop: function(event) {
            this.handles.removeClass("ui-state-active");
            this._mouseSliding = false;
            this._stop(event, this._handleIndex);
            this._change(event, this._handleIndex);
            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = false;
            return false;
        },
        _detectOrientation: function() {
            this.orientation = (this.options.orientation === "vertical") ? "vertical" : "horizontal";
        },
        _normValueFromMouse: function(position) {
            var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
            if (this.orientation === "horizontal") {
                pixelTotal = this.elementSize.width;
                pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
            } else {
                pixelTotal = this.elementSize.height;
                pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
            }
            percentMouse = (pixelMouse / pixelTotal);
            if (percentMouse > 1) {
                percentMouse = 1;
            }
            if (percentMouse < 0) {
                percentMouse = 0;
            }
            if (this.orientation === "vertical") {
                percentMouse = 1 - percentMouse;
            }
            valueTotal = this._valueMax() - this._valueMin();
            valueMouse = this._valueMin() + percentMouse * valueTotal;
            return this._trimAlignValue(valueMouse);
        },
        _start: function(event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            return this._trigger("start", event, uiHash);
        },
        _slide: function(event, index, newVal) {
            var otherVal, newValues, allowed;
            if (this.options.values && this.options.values.length) {
                otherVal = this.values(index ? 0 : 1);
                if ((this.options.values.length === 2 && this.options.range === true) && ((index === 0 && newVal > otherVal) || (index === 1 && newVal < otherVal))) {
                    newVal = otherVal;
                }
                if (newVal !== this.values(index)) {
                    newValues = this.values();
                    newValues[index] = newVal;
                    allowed = this._trigger("slide", event, {
                        handle: this.handles[index],
                        value: newVal,
                        values: newValues
                    });
                    otherVal = this.values(index ? 0 : 1);
                    if (allowed !== false) {
                        this.values(index, newVal, true);
                    }
                }
            } else {
                if (newVal !== this.value()) {
                    allowed = this._trigger("slide", event, {
                        handle: this.handles[index],
                        value: newVal
                    });
                    if (allowed !== false) {
                        this.value(newVal);
                    }
                }
            }
        },
        _stop: function(event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            this._trigger("stop", event, uiHash);
        },
        _change: function(event, index) {
            if (!this._keySliding && !this._mouseSliding) {
                var uiHash = {
                    handle: this.handles[index],
                    value: this.value()
                };
                if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);
                    uiHash.values = this.values();
                }
                this._trigger("change", event, uiHash);
            }
        },
        value: function(newValue) {
            if (arguments.length) {
                this.options.value = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, 0);
                return;
            }
            return this._value();
        },
        values: function(index, newValue) {
            var vals, newValues, i;
            if (arguments.length > 1) {
                this.options.values[index] = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, index);
                return;
            }
            if (arguments.length) {
                if ($.isArray(arguments[0])) {
                    vals = this.options.values;
                    newValues = arguments[0];
                    for (i = 0; i < vals.length; i += 1) {
                        vals[i] = this._trimAlignValue(newValues[i]);
                        this._change(null, i);
                    }
                    this._refreshValue();
                } else {
                    if (this.options.values && this.options.values.length) {
                        return this._values(index);
                    } else {
                        return this.value();
                    }
                }
            } else {
                return this._values();
            }
        },
        _setOption: function(key, value) {
            var i, valsLength = 0;
            if ($.isArray(this.options.values)) {
                valsLength = this.options.values.length;
            }
            $.Widget.prototype._setOption.apply(this, arguments);
            switch (key) {
                case "disabled":
                    if (value) {
                        this.handles.filter(".ui-state-focus").blur();
                        this.handles.removeClass("ui-state-hover");
                        this.handles.prop("disabled", true);
                        this.element.addClass("ui-disabled");
                    } else {
                        this.handles.prop("disabled", false);
                        this.element.removeClass("ui-disabled");
                    }
                    break;
                case "orientation":
                    this._detectOrientation();
                    this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
                    this._refreshValue();
                    break;
                case "value":
                    this._animateOff = true;
                    this._refreshValue();
                    this._change(null, 0);
                    this._animateOff = false;
                    break;
                case "values":
                    this._animateOff = true;
                    this._refreshValue();
                    for (i = 0; i < valsLength; i += 1) {
                        this._change(null, i);
                    }
                    this._animateOff = false;
                    break;
                case "min":
                case "max":
                    this._animateOff = true;
                    this._refreshValue();
                    this._animateOff = false;
                    break;
            }
        },
        _value: function() {
            var val = this.options.value;
            val = this._trimAlignValue(val);
            return val;
        },
        _values: function(index) {
            var val, vals, i;
            if (arguments.length) {
                val = this.options.values[index];
                val = this._trimAlignValue(val);
                return val;
            } else {
                vals = this.options.values.slice();
                for (i = 0; i < vals.length; i += 1) {
                    vals[i] = this._trimAlignValue(vals[i]);
                }
                return vals;
            }
        },
        _trimAlignValue: function(val) {
            if (val <= this._valueMin()) {
                return this._valueMin();
            }
            if (val >= this._valueMax()) {
                return this._valueMax();
            }
            var step = (this.options.step > 0) ? this.options.step : 1
                , valModStep = (val - this._valueMin()) % step
                , alignValue = val - valModStep;
            if (Math.abs(valModStep) * 2 >= step) {
                alignValue += (valModStep > 0) ? step : (-step);
            }
            return parseFloat(alignValue.toFixed(5));
        },
        _valueMin: function() {
            return this.options.min;
        },
        _valueMax: function() {
            return this.options.max;
        },
        _refreshValue: function() {
            var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = (!this._animateOff) ? o.animate : false, _set = {};
            if (this.options.values && this.options.values.length) {
                this.handles.each(function(i) {
                    valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
                    _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                    $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                    if (that.options.range === true) {
                        if (that.orientation === "horizontal") {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    left: valPercent + "%"
                                }, o.animate);
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    width: (valPercent - lastValPercent) + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                });
                            }
                        } else {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    bottom: (valPercent) + "%"
                                }, o.animate);
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    height: (valPercent - lastValPercent) + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                });
                            }
                        }
                    }
                    lastValPercent = valPercent;
                });
            } else {
                value = this.value();
                valueMin = this._valueMin();
                valueMax = this._valueMax();
                valPercent = (valueMax !== valueMin) ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
                _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                if (oRange === "min" && this.orientation === "horizontal") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        width: valPercent + "%"
                    }, o.animate);
                }
                if (oRange === "max" && this.orientation === "horizontal") {
                    this.range[animate ? "animate" : "css"]({
                        width: (100 - valPercent) + "%"
                    }, {
                        queue: false,
                        duration: o.animate
                    });
                }
                if (oRange === "min" && this.orientation === "vertical") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        height: valPercent + "%"
                    }, o.animate);
                }
                if (oRange === "max" && this.orientation === "vertical") {
                    this.range[animate ? "animate" : "css"]({
                        height: (100 - valPercent) + "%"
                    }, {
                        queue: false,
                        duration: o.animate
                    });
                }
            }
        }
    });
}(jQuery));
(function($) {
    function modifier(fn) {
        return function() {
            var previous = this.element.val();
            fn.apply(this, arguments);
            this._refresh();
            if (previous !== this.element.val()) {
                this._trigger("change");
            }
        }
            ;
    }
    $.widget("ui.spinner", {
        version: "1.9.2",
        defaultElement: "<input>",
        widgetEventPrefix: "spin",
        options: {
            culture: null,
            icons: {
                down: "ui-icon-triangle-1-s",
                up: "ui-icon-triangle-1-n"
            },
            incremental: true,
            max: null,
            min: null,
            numberFormat: null,
            page: 10,
            step: 1,
            change: null,
            spin: null,
            start: null,
            stop: null
        },
        _create: function() {
            this._setOption("max", this.options.max);
            this._setOption("min", this.options.min);
            this._setOption("step", this.options.step);
            this._value(this.element.val(), true);
            this._draw();
            this._on(this._events);
            this._refresh();
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete");
                }
            });
        },
        _getCreateOptions: function() {
            var options = {}
                , element = this.element;
            $.each(["min", "max", "step"], function(i, option) {
                var value = element.attr(option);
                if (value !== undefined && value.length) {
                    options[option] = value;
                }
            });
            return options;
        },
        _events: {
            keydown: function(event) {
                if (this._start(event) && this._keydown(event)) {
                    event.preventDefault();
                }
            },
            keyup: "_stop",
            focus: function() {
                this.previous = this.element.val();
            },
            blur: function(event) {
                if (this.cancelBlur) {
                    delete this.cancelBlur;
                    return;
                }
                this._refresh();
                if (this.previous !== this.element.val()) {
                    this._trigger("change", event);
                }
            },
            mousewheel: function(event, delta) {
                if (!delta) {
                    return;
                }
                if (!this.spinning && !this._start(event)) {
                    return false;
                }
                this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
                clearTimeout(this.mousewheelTimer);
                this.mousewheelTimer = this._delay(function() {
                    if (this.spinning) {
                        this._stop(event);
                    }
                }, 100);
                event.preventDefault();
            },
            "mousedown .ui-spinner-button": function(event) {
                var previous;
                previous = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();
                function checkFocus() {
                    var isActive = this.element[0] === this.document[0].activeElement;
                    if (!isActive) {
                        this.element.focus();
                        this.previous = previous;
                        this._delay(function() {
                            this.previous = previous;
                        });
                    }
                }
                event.preventDefault();
                checkFocus.call(this);
                this.cancelBlur = true;
                this._delay(function() {
                    delete this.cancelBlur;
                    checkFocus.call(this);
                });
                if (this._start(event) === false) {
                    return;
                }
                this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
            },
            "mouseup .ui-spinner-button": "_stop",
            "mouseenter .ui-spinner-button": function(event) {
                if (!$(event.currentTarget).hasClass("ui-state-active")) {
                    return;
                }
                if (this._start(event) === false) {
                    return false;
                }
                this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
            },
            "mouseleave .ui-spinner-button": "_stop"
        },
        _draw: function() {
            var uiSpinner = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
            this.element.attr("role", "spinbutton");
            this.buttons = uiSpinner.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all");
            if (this.buttons.height() > Math.ceil(uiSpinner.height() * 0.5) && uiSpinner.height() > 0) {
                uiSpinner.height(uiSpinner.height());
            }
            if (this.options.disabled) {
                this.disable();
            }
        },
        _keydown: function(event) {
            var options = this.options
                , keyCode = $.ui.keyCode;
            switch (event.keyCode) {
                case keyCode.UP:
                    this._repeat(null, 1, event);
                    return true;
                case keyCode.DOWN:
                    this._repeat(null, -1, event);
                    return true;
                case keyCode.PAGE_UP:
                    this._repeat(null, options.page, event);
                    return true;
                case keyCode.PAGE_DOWN:
                    this._repeat(null, -options.page, event);
                    return true;
            }
            return false;
        },
        _uiSpinnerHtml: function() {
            return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
        },
        _buttonHtml: function() {
            return "" + "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" + "<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" + "</a>" + "<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" + "<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" + "</a>";
        },
        _start: function(event) {
            if (!this.spinning && this._trigger("start", event) === false) {
                return false;
            }
            if (!this.counter) {
                this.counter = 1;
            }
            this.spinning = true;
            return true;
        },
        _repeat: function(i, steps, event) {
            i = i || 500;
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                this._repeat(40, steps, event);
            }, i);
            this._spin(steps * this.options.step, event);
        },
        _spin: function(step, event) {
            var value = this.value() || 0;
            if (!this.counter) {
                this.counter = 1;
            }
            value = this._adjustValue(value + step * this._increment(this.counter));
            if (!this.spinning || this._trigger("spin", event, {
                value: value
            }) !== false) {
                this._value(value);
                this.counter++;
            }
        },
        _increment: function(i) {
            var incremental = this.options.incremental;
            if (incremental) {
                return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);
            }
            return 1;
        },
        _precision: function() {
            var precision = this._precisionOf(this.options.step);
            if (this.options.min !== null) {
                precision = Math.max(precision, this._precisionOf(this.options.min));
            }
            return precision;
        },
        _precisionOf: function(num) {
            var str = num.toString()
                , decimal = str.indexOf(".");
            return decimal === -1 ? 0 : str.length - decimal - 1;
        },
        _adjustValue: function(value) {
            var base, aboveMin, options = this.options;
            base = options.min !== null ? options.min : 0;
            aboveMin = value - base;
            aboveMin = Math.round(aboveMin / options.step) * options.step;
            value = base + aboveMin;
            value = parseFloat(value.toFixed(this._precision()));
            if (options.max !== null && value > options.max) {
                return options.max;
            }
            if (options.min !== null && value < options.min) {
                return options.min;
            }
            return value;
        },
        _stop: function(event) {
            if (!this.spinning) {
                return;
            }
            clearTimeout(this.timer);
            clearTimeout(this.mousewheelTimer);
            this.counter = 0;
            this.spinning = false;
            this._trigger("stop", event);
        },
        _setOption: function(key, value) {
            if (key === "culture" || key === "numberFormat") {
                var prevValue = this._parse(this.element.val());
                this.options[key] = value;
                this.element.val(this._format(prevValue));
                return;
            }
            if (key === "max" || key === "min" || key === "step") {
                if (typeof value === "string") {
                    value = this._parse(value);
                }
            }
            this._super(key, value);
            if (key === "disabled") {
                if (value) {
                    this.element.prop("disabled", true);
                    this.buttons.button("disable");
                } else {
                    this.element.prop("disabled", false);
                    this.buttons.button("enable");
                }
            }
        },
        _setOptions: modifier(function(options) {
            this._super(options);
            this._value(this.element.val());
        }),
        _parse: function(val) {
            if (typeof val === "string" && val !== "") {
                val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;
            }
            return val === "" || isNaN(val) ? null : val;
        },
        _format: function(value) {
            if (value === "") {
                return "";
            }
            return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
        },
        _refresh: function() {
            this.element.attr({
                "aria-valuemin": this.options.min,
                "aria-valuemax": this.options.max,
                "aria-valuenow": this._parse(this.element.val())
            });
        },
        _value: function(value, allowAny) {
            var parsed;
            if (value !== "") {
                parsed = this._parse(value);
                if (parsed !== null) {
                    if (!allowAny) {
                        parsed = this._adjustValue(parsed);
                    }
                    value = this._format(parsed);
                }
            }
            this.element.val(value);
            this._refresh();
        },
        _destroy: function() {
            this.element.removeClass("ui-spinner-input").prop("disabled", false).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.uiSpinner.replaceWith(this.element);
        },
        stepUp: modifier(function(steps) {
            this._stepUp(steps);
        }),
        _stepUp: function(steps) {
            this._spin((steps || 1) * this.options.step);
        },
        stepDown: modifier(function(steps) {
            this._stepDown(steps);
        }),
        _stepDown: function(steps) {
            this._spin((steps || 1) * -this.options.step);
        },
        pageUp: modifier(function(pages) {
            this._stepUp((pages || 1) * this.options.page);
        }),
        pageDown: modifier(function(pages) {
            this._stepDown((pages || 1) * this.options.page);
        }),
        value: function(newVal) {
            if (!arguments.length) {
                return this._parse(this.element.val());
            }
            modifier(this._value).call(this, newVal);
        },
        widget: function() {
            return this.uiSpinner;
        }
    });
}(jQuery));
(function($, undefined) {
        var tabId = 0
            , rhash = /#.*$/;
        function getNextTabId() {
            return ++tabId;
        }
        function isLocal(anchor) {
            return anchor.hash.length > 1 && anchor.href.replace(rhash, "") === location.href.replace(rhash, "").replace(/\s/g, "%20");
        }
        $.widget("ui.tabs", {
            version: "1.9.2",
            delay: 300,
            options: {
                active: null,
                collapsible: false,
                event: "click",
                heightStyle: "content",
                hide: null,
                show: null,
                activate: null,
                beforeActivate: null,
                beforeLoad: null,
                load: null
            },
            _create: function() {
                var that = this
                    , options = this.options
                    , active = options.active
                    , locationHash = location.hash.substring(1);
                this.running = false;
                this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", options.collapsible).delegate(".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function(event) {
                    if ($(this).is(".ui-state-disabled")) {
                        event.preventDefault();
                    }
                }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
                    if ($(this).closest("li").is(".ui-state-disabled")) {
                        this.blur();
                    }
                });
                this._processTabs();
                if (active === null) {
                    if (locationHash) {
                        this.tabs.each(function(i, tab) {
                            if ($(tab).attr("aria-controls") === locationHash) {
                                active = i;
                                return false;
                            }
                        });
                    }
                    if (active === null) {
                        active = this.tabs.index(this.tabs.filter(".ui-tabs-active"));
                    }
                    if (active === null || active === -1) {
                        active = this.tabs.length ? 0 : false;
                    }
                }
                if (active !== false) {
                    active = this.tabs.index(this.tabs.eq(active));
                    if (active === -1) {
                        active = options.collapsible ? false : 0;
                    }
                }
                options.active = active;
                if (!options.collapsible && options.active === false && this.anchors.length) {
                    options.active = 0;
                }
                if ($.isArray(options.disabled)) {
                    options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function(li) {
                        return that.tabs.index(li);
                    }))).sort();
                }
                if (this.options.active !== false && this.anchors.length) {
                    this.active = this._findActive(this.options.active);
                } else {
                    this.active = $();
                }
                this._refresh();
                if (this.active.length) {
                    this.load(options.active);
                }
            },
            _getCreateEventData: function() {
                return {
                    tab: this.active,
                    panel: !this.active.length ? $() : this._getPanelForTab(this.active)
                };
            },
            _tabKeydown: function(event) {
                var focusedTab = $(this.document[0].activeElement).closest("li")
                    , selectedIndex = this.tabs.index(focusedTab)
                    , goingForward = true;
                if (this._handlePageNav(event)) {
                    return;
                }
                switch (event.keyCode) {
                    case $.ui.keyCode.RIGHT:
                    case $.ui.keyCode.DOWN:
                        selectedIndex++;
                        break;
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.LEFT:
                        goingForward = false;
                        selectedIndex--;
                        break;
                    case $.ui.keyCode.END:
                        selectedIndex = this.anchors.length - 1;
                        break;
                    case $.ui.keyCode.HOME:
                        selectedIndex = 0;
                        break;
                    case $.ui.keyCode.SPACE:
                        event.preventDefault();
                        clearTimeout(this.activating);
                        this._activate(selectedIndex);
                        return;
                    case $.ui.keyCode.ENTER:
                        event.preventDefault();
                        clearTimeout(this.activating);
                        this._activate(selectedIndex === this.options.active ? false : selectedIndex);
                        return;
                    default:
                        return;
                }
                event.preventDefault();
                clearTimeout(this.activating);
                selectedIndex = this._focusNextTab(selectedIndex, goingForward);
                if (!event.ctrlKey) {
                    focusedTab.attr("aria-selected", "false");
                    this.tabs.eq(selectedIndex).attr("aria-selected", "true");
                    this.activating = this._delay(function() {
                        this.option("active", selectedIndex);
                    }, this.delay);
                }
            },
            _panelKeydown: function(event) {
                if (this._handlePageNav(event)) {
                    return;
                }
                if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                    event.preventDefault();
                    this.active.focus();
                }
            },
            _handlePageNav: function(event) {
                if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                    this._activate(this._focusNextTab(this.options.active - 1, false));
                    return true;
                }
                if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                    this._activate(this._focusNextTab(this.options.active + 1, true));
                    return true;
                }
            },
            _findNextTab: function(index, goingForward) {
                var lastTabIndex = this.tabs.length - 1;
                function constrain() {
                    if (index > lastTabIndex) {
                        index = 0;
                    }
                    if (index < 0) {
                        index = lastTabIndex;
                    }
                    return index;
                }
                while ($.inArray(constrain(), this.options.disabled) !== -1) {
                    index = goingForward ? index + 1 : index - 1;
                }
                return index;
            },
            _focusNextTab: function(index, goingForward) {
                index = this._findNextTab(index, goingForward);
                this.tabs.eq(index).focus();
                return index;
            },
            _setOption: function(key, value) {
                if (key === "active") {
                    this._activate(value);
                    return;
                }
                if (key === "disabled") {
                    this._setupDisabled(value);
                    return;
                }
                this._super(key, value);
                if (key === "collapsible") {
                    this.element.toggleClass("ui-tabs-collapsible", value);
                    if (!value && this.options.active === false) {
                        this._activate(0);
                    }
                }
                if (key === "event") {
                    this._setupEvents(value);
                }
                if (key === "heightStyle") {
                    this._setupHeightStyle(value);
                }
            },
            _tabId: function(tab) {
                return tab.attr("aria-controls") || "ui-tabs-" + getNextTabId();
            },
            _sanitizeSelector: function(hash) {
                return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
            },
            refresh: function() {
                var options = this.options
                    , lis = this.tablist.children(":has(a[href])");
                options.disabled = $.map(lis.filter(".ui-state-disabled"), function(tab) {
                    return lis.index(tab);
                });
                this._processTabs();
                if (options.active === false || !this.anchors.length) {
                    options.active = false;
                    this.active = $();
                } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {
                    if (this.tabs.length === options.disabled.length) {
                        options.active = false;
                        this.active = $();
                    } else {
                        this._activate(this._findNextTab(Math.max(0, options.active - 1), false));
                    }
                } else {
                    options.active = this.tabs.index(this.active);
                }
                this._refresh();
            },
            _refresh: function() {
                this._setupDisabled(this.options.disabled);
                this._setupEvents(this.options.event);
                this._setupHeightStyle(this.options.heightStyle);
                this.tabs.not(this.active).attr({
                    "aria-selected": "false",
                    tabIndex: -1
                });
                this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                    "aria-expanded": "false",
                    "aria-hidden": "true"
                });
                if (!this.active.length) {
                    this.tabs.eq(0).attr("tabIndex", 0);
                } else {
                    this.active.addClass("ui-tabs-active ui-state-active").attr({
                        "aria-selected": "true",
                        tabIndex: 0
                    });
                    this._getPanelForTab(this.active).show().attr({
                        "aria-expanded": "true",
                        "aria-hidden": "false"
                    });
                }
            },
            _processTabs: function() {
                var that = this;
                this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist");
                this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
                    role: "tab",
                    tabIndex: -1
                });
                this.anchors = this.tabs.map(function() {
                    return $("a", this)[0];
                }).addClass("ui-tabs-anchor").attr({
                    role: "presentation",
                    tabIndex: -1
                });
                this.panels = $();
                this.anchors.each(function(i, anchor) {
                    var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"), tab = $(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls");
                    if (isLocal(anchor)) {
                        selector = anchor.hash;
                        panel = that.element.find(that._sanitizeSelector(selector));
                    } else {
                        panelId = that._tabId(tab);
                        selector = "#" + panelId;
                        panel = that.element.find(selector);
                        if (!panel.length) {
                            panel = that._createPanel(panelId);
                            panel.insertAfter(that.panels[i - 1] || that.tablist);
                        }
                        panel.attr("aria-live", "polite");
                    }
                    if (panel.length) {
                        that.panels = that.panels.add(panel);
                    }
                    if (originalAriaControls) {
                        tab.data("ui-tabs-aria-controls", originalAriaControls);
                    }
                    tab.attr({
                        "aria-controls": selector.substring(1),
                        "aria-labelledby": anchorId
                    });
                    panel.attr("aria-labelledby", anchorId);
                });
                this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel");
            },
            _getList: function() {
                return this.element.find("ol,ul").eq(0);
            },
            _createPanel: function(id) {
                return $("<div>").attr("id", id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", true);
            },
            _setupDisabled: function(disabled) {
                if ($.isArray(disabled)) {
                    if (!disabled.length) {
                        disabled = false;
                    } else if (disabled.length === this.anchors.length) {
                        disabled = true;
                    }
                }
                for (var i = 0, li; (li = this.tabs[i]); i++) {
                    if (disabled === true || $.inArray(i, disabled) !== -1) {
                        $(li).addClass("ui-state-disabled").attr("aria-disabled", "true");
                    } else {
                        $(li).removeClass("ui-state-disabled").removeAttr("aria-disabled");
                    }
                }
                this.options.disabled = disabled;
            },
            _setupEvents: function(event) {
                var events = {
                    click: function(event) {
                        event.preventDefault();
                    }
                };
                if (event) {
                    $.each(event.split(" "), function(index, eventName) {
                        events[eventName] = "_eventHandler";
                    });
                }
                this._off(this.anchors.add(this.tabs).add(this.panels));
                this._on(this.anchors, events);
                this._on(this.tabs, {
                    keydown: "_tabKeydown"
                });
                this._on(this.panels, {
                    keydown: "_panelKeydown"
                });
                this._focusable(this.tabs);
                this._hoverable(this.tabs);
            },
            _setupHeightStyle: function(heightStyle) {
                var maxHeight, overflow, parent = this.element.parent();
                if (heightStyle === "fill") {
                    if (!$.support.minHeight) {
                        overflow = parent.css("overflow");
                        parent.css("overflow", "hidden");
                    }
                    maxHeight = parent.height();
                    this.element.siblings(":visible").each(function() {
                        var elem = $(this)
                            , position = elem.css("position");
                        if (position === "absolute" || position === "fixed") {
                            return;
                        }
                        maxHeight -= elem.outerHeight(true);
                    });
                    if (overflow) {
                        parent.css("overflow", overflow);
                    }
                    this.element.children().not(this.panels).each(function() {
                        maxHeight -= $(this).outerHeight(true);
                    });
                    this.panels.each(function() {
                        $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                    }).css("overflow", "auto");
                } else if (heightStyle === "auto") {
                    maxHeight = 0;
                    this.panels.each(function() {
                        maxHeight = Math.max(maxHeight, $(this).height("").height());
                    }).height(maxHeight);
                }
            },
            _eventHandler: function(event) {
                var options = this.options
                    , active = this.active
                    , anchor = $(event.currentTarget)
                    , tab = anchor.closest("li")
                    , clickedIsActive = tab[0] === active[0]
                    , collapsing = clickedIsActive && options.collapsible
                    , toShow = collapsing ? $() : this._getPanelForTab(tab)
                    , toHide = !active.length ? $() : this._getPanelForTab(active)
                    , eventData = {
                    oldTab: active,
                    oldPanel: toHide,
                    newTab: collapsing ? $() : tab,
                    newPanel: toShow
                };
                event.preventDefault();
                if (tab.hasClass("ui-state-disabled") || tab.hasClass("ui-tabs-loading") || this.running || (clickedIsActive && !options.collapsible) || (this._trigger("beforeActivate", event, eventData) === false)) {
                    return;
                }
                options.active = collapsing ? false : this.tabs.index(tab);
                this.active = clickedIsActive ? $() : tab;
                if (this.xhr) {
                    this.xhr.abort();
                }
                if (!toHide.length && !toShow.length) {
                    $.error("jQuery UI Tabs: Mismatching fragment identifier.");
                }
                if (toShow.length) {
                    this.load(this.tabs.index(tab), event);
                }
                this._toggle(event, eventData);
            },
            _toggle: function(event, eventData) {
                var that = this
                    , toShow = eventData.newPanel
                    , toHide = eventData.oldPanel;
                this.running = true;
                function complete() {
                    that.running = false;
                    that._trigger("activate", event, eventData);
                }
                function show() {
                    eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
                    if (toShow.length && that.options.show) {
                        that._show(toShow, that.options.show, complete);
                    } else {
                        toShow.show();
                        complete();
                    }
                }
                if (toHide.length && this.options.hide) {
                    this._hide(toHide, this.options.hide, function() {
                        eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                        show();
                    });
                } else {
                    eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                    toHide.hide();
                    show();
                }
                toHide.attr({
                    "aria-expanded": "false",
                    "aria-hidden": "true"
                });
                eventData.oldTab.attr("aria-selected", "false");
                if (toShow.length && toHide.length) {
                    eventData.oldTab.attr("tabIndex", -1);
                } else if (toShow.length) {
                    this.tabs.filter(function() {
                        return $(this).attr("tabIndex") === 0;
                    }).attr("tabIndex", -1);
                }
                toShow.attr({
                    "aria-expanded": "true",
                    "aria-hidden": "false"
                });
                eventData.newTab.attr({
                    "aria-selected": "true",
                    tabIndex: 0
                });
            },
            _activate: function(index) {
                var anchor, active = this._findActive(index);
                if (active[0] === this.active[0]) {
                    return;
                }
                if (!active.length) {
                    active = this.active;
                }
                anchor = active.find(".ui-tabs-anchor")[0];
                this._eventHandler({
                    target: anchor,
                    currentTarget: anchor,
                    preventDefault: $.noop
                });
            },
            _findActive: function(index) {
                return index === false ? $() : this.tabs.eq(index);
            },
            _getIndex: function(index) {
                if (typeof index === "string") {
                    index = this.anchors.index(this.anchors.filter("[href$='" + index + "']"));
                }
                return index;
            },
            _destroy: function() {
                if (this.xhr) {
                    this.xhr.abort();
                }
                this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");
                this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role");
                this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeData("href.tabs").removeData("load.tabs").removeUniqueId();
                this.tabs.add(this.panels).each(function() {
                    if ($.data(this, "ui-tabs-destroy")) {
                        $(this).remove();
                    } else {
                        $(this).removeClass("ui-state-default ui-state-active ui-state-disabled " + "ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role");
                    }
                });
                this.tabs.each(function() {
                    var li = $(this)
                        , prev = li.data("ui-tabs-aria-controls");
                    if (prev) {
                        li.attr("aria-controls", prev);
                    } else {
                        li.removeAttr("aria-controls");
                    }
                });
                this.panels.show();
                if (this.options.heightStyle !== "content") {
                    this.panels.css("height", "");
                }
            },
            enable: function(index) {
                var disabled = this.options.disabled;
                if (disabled === false) {
                    return;
                }
                if (index === undefined) {
                    disabled = false;
                } else {
                    index = this._getIndex(index);
                    if ($.isArray(disabled)) {
                        disabled = $.map(disabled, function(num) {
                            return num !== index ? num : null;
                        });
                    } else {
                        disabled = $.map(this.tabs, function(li, num) {
                            return num !== index ? num : null;
                        });
                    }
                }
                this._setupDisabled(disabled);
            },
            disable: function(index) {
                var disabled = this.options.disabled;
                if (disabled === true) {
                    return;
                }
                if (index === undefined) {
                    disabled = true;
                } else {
                    index = this._getIndex(index);
                    if ($.inArray(index, disabled) !== -1) {
                        return;
                    }
                    if ($.isArray(disabled)) {
                        disabled = $.merge([index], disabled).sort();
                    } else {
                        disabled = [index];
                    }
                }
                this._setupDisabled(disabled);
            },
            load: function(index, event) {
                index = this._getIndex(index);
                var that = this
                    , tab = this.tabs.eq(index)
                    , anchor = tab.find(".ui-tabs-anchor")
                    , panel = this._getPanelForTab(tab)
                    , eventData = {
                    tab: tab,
                    panel: panel
                };
                if (isLocal(anchor[0])) {
                    return;
                }
                this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));
                if (this.xhr && this.xhr.statusText !== "canceled") {
                    tab.addClass("ui-tabs-loading");
                    panel.attr("aria-busy", "true");
                    this.xhr.success(function(response) {
                        setTimeout(function() {
                            panel.html(response);
                            that._trigger("load", event, eventData);
                        }, 1);
                    }).complete(function(jqXHR, status) {
                        setTimeout(function() {
                            if (status === "abort") {
                                that.panels.stop(false, true);
                            }
                            tab.removeClass("ui-tabs-loading");
                            panel.removeAttr("aria-busy");
                            if (jqXHR === that.xhr) {
                                delete that.xhr;
                            }
                        }, 1);
                    });
                }
            },
            _ajaxSettings: function(anchor, event, eventData) {
                var that = this;
                return {
                    url: anchor.attr("href"),
                    beforeSend: function(jqXHR, settings) {
                        return that._trigger("beforeLoad", event, $.extend({
                            jqXHR: jqXHR,
                            ajaxSettings: settings
                        }, eventData));
                    }
                };
            },
            _getPanelForTab: function(tab) {
                var id = $(tab).attr("aria-controls");
                return this.element.find(this._sanitizeSelector("#" + id));
            }
        });
        if ($.uiBackCompat !== false) {
            $.ui.tabs.prototype._ui = function(tab, panel) {
                return {
                    tab: tab,
                    panel: panel,
                    index: this.anchors.index(tab)
                };
            }
            ;
            $.widget("ui.tabs", $.ui.tabs, {
                url: function(index, url) {
                    this.anchors.eq(index).attr("href", url);
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                options: {
                    ajaxOptions: null,
                    cache: false
                },
                _create: function() {
                    this._super();
                    var that = this;
                    this._on({
                        tabsbeforeload: function(event, ui) {
                            if ($.data(ui.tab[0], "cache.tabs")) {
                                event.preventDefault();
                                return;
                            }
                            ui.jqXHR.success(function() {
                                if (that.options.cache) {
                                    $.data(ui.tab[0], "cache.tabs", true);
                                }
                            });
                        }
                    });
                },
                _ajaxSettings: function(anchor, event, ui) {
                    var ajaxOptions = this.options.ajaxOptions;
                    return $.extend({}, ajaxOptions, {
                        error: function(xhr, status) {
                            try {
                                ajaxOptions.error(xhr, status, ui.tab.closest("li").index(), ui.tab[0]);
                            } catch (error) {}
                        }
                    }, this._superApply(arguments));
                },
                _setOption: function(key, value) {
                    if (key === "cache" && value === false) {
                        this.anchors.removeData("cache.tabs");
                    }
                    this._super(key, value);
                },
                _destroy: function() {
                    this.anchors.removeData("cache.tabs");
                    this._super();
                },
                url: function(index) {
                    this.anchors.eq(index).removeData("cache.tabs");
                    this._superApply(arguments);
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                abort: function() {
                    if (this.xhr) {
                        this.xhr.abort();
                    }
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                options: {
                    spinner: "<em>Loading&#8230;</em>"
                },
                _create: function() {
                    this._super();
                    this._on({
                        tabsbeforeload: function(event, ui) {
                            if (event.target !== this.element[0] || !this.options.spinner) {
                                return;
                            }
                            var span = ui.tab.find("span")
                                , html = span.html();
                            span.html(this.options.spinner);
                            ui.jqXHR.complete(function() {
                                span.html(html);
                            });
                        }
                    });
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                options: {
                    enable: null,
                    disable: null
                },
                enable: function(index) {
                    var options = this.options, trigger;
                    if (index && options.disabled === true || ($.isArray(options.disabled) && $.inArray(index, options.disabled) !== -1)) {
                        trigger = true;
                    }
                    this._superApply(arguments);
                    if (trigger) {
                        this._trigger("enable", null, this._ui(this.anchors[index], this.panels[index]));
                    }
                },
                disable: function(index) {
                    var options = this.options, trigger;
                    if (index && options.disabled === false || ($.isArray(options.disabled) && $.inArray(index, options.disabled) === -1)) {
                        trigger = true;
                    }
                    this._superApply(arguments);
                    if (trigger) {
                        this._trigger("disable", null, this._ui(this.anchors[index], this.panels[index]));
                    }
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                options: {
                    add: null,
                    remove: null,
                    tabTemplate: "<li><a href='#{href}'><span>#{label}</span></a></li>"
                },
                add: function(url, label, index) {
                    if (index === undefined) {
                        index = this.anchors.length;
                    }
                    var doInsertAfter, panel, options = this.options, li = $(options.tabTemplate.replace(/#\{href\}/g, url).replace(/#\{label\}/g, label)), id = !url.indexOf("#") ? url.replace("#", "") : this._tabId(li);
                    li.addClass("ui-state-default ui-corner-top").data("ui-tabs-destroy", true);
                    li.attr("aria-controls", id);
                    doInsertAfter = index >= this.tabs.length;
                    panel = this.element.find("#" + id);
                    if (!panel.length) {
                        panel = this._createPanel(id);
                        if (doInsertAfter) {
                            if (index > 0) {
                                panel.insertAfter(this.panels.eq(-1));
                            } else {
                                panel.appendTo(this.element);
                            }
                        } else {
                            panel.insertBefore(this.panels[index]);
                        }
                    }
                    panel.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").hide();
                    if (doInsertAfter) {
                        li.appendTo(this.tablist);
                    } else {
                        li.insertBefore(this.tabs[index]);
                    }
                    options.disabled = $.map(options.disabled, function(n) {
                        return n >= index ? ++n : n;
                    });
                    this.refresh();
                    if (this.tabs.length === 1 && options.active === false) {
                        this.option("active", 0);
                    }
                    this._trigger("add", null, this._ui(this.anchors[index], this.panels[index]));
                    return this;
                },
                remove: function(index) {
                    index = this._getIndex(index);
                    var options = this.options
                        , tab = this.tabs.eq(index).remove()
                        , panel = this._getPanelForTab(tab).remove();
                    if (tab.hasClass("ui-tabs-active") && this.anchors.length > 2) {
                        this._activate(index + (index + 1 < this.anchors.length ? 1 : -1));
                    }
                    options.disabled = $.map($.grep(options.disabled, function(n) {
                        return n !== index;
                    }), function(n) {
                        return n >= index ? --n : n;
                    });
                    this.refresh();
                    this._trigger("remove", null, this._ui(tab.find("a")[0], panel[0]));
                    return this;
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                length: function() {
                    return this.anchors.length;
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                options: {
                    idPrefix: "ui-tabs-"
                },
                _tabId: function(tab) {
                    var a = tab.is("li") ? tab.find("a[href]") : tab;
                    a = a[0];
                    return $(a).closest("li").attr("aria-controls") || a.title && a.title.replace(/\s/g, "_").replace(/[^\w\u00c0-\uFFFF\-]/g, "") || this.options.idPrefix + getNextTabId();
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                options: {
                    panelTemplate: "<div></div>"
                },
                _createPanel: function(id) {
                    return $(this.options.panelTemplate).attr("id", id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", true);
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                _create: function() {
                    var options = this.options;
                    if (options.active === null && options.selected !== undefined) {
                        options.active = options.selected === -1 ? false : options.selected;
                    }
                    this._super();
                    options.selected = options.active;
                    if (options.selected === false) {
                        options.selected = -1;
                    }
                },
                _setOption: function(key, value) {
                    if (key !== "selected") {
                        return this._super(key, value);
                    }
                    var options = this.options;
                    this._super("active", value === -1 ? false : value);
                    options.selected = options.active;
                    if (options.selected === false) {
                        options.selected = -1;
                    }
                },
                _eventHandler: function() {
                    this._superApply(arguments);
                    this.options.selected = this.options.active;
                    if (this.options.selected === false) {
                        this.options.selected = -1;
                    }
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                options: {
                    show: null,
                    select: null
                },
                _create: function() {
                    this._super();
                    if (this.options.active !== false) {
                        this._trigger("show", null, this._ui(this.active.find(".ui-tabs-anchor")[0], this._getPanelForTab(this.active)[0]));
                    }
                },
                _trigger: function(type, event, data) {
                    var tab, panel, ret = this._superApply(arguments);
                    if (!ret) {
                        return false;
                    }
                    if (type === "beforeActivate") {
                        tab = data.newTab.length ? data.newTab : data.oldTab;
                        panel = data.newPanel.length ? data.newPanel : data.oldPanel;
                        ret = this._super("select", event, {
                            tab: tab.find(".ui-tabs-anchor")[0],
                            panel: panel[0],
                            index: tab.closest("li").index()
                        });
                    } else if (type === "activate" && data.newTab.length) {
                        ret = this._super("show", event, {
                            tab: data.newTab.find(".ui-tabs-anchor")[0],
                            panel: data.newPanel[0],
                            index: data.newTab.closest("li").index()
                        });
                    }
                    return ret;
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                select: function(index) {
                    index = this._getIndex(index);
                    if (index === -1) {
                        if (this.options.collapsible && this.options.selected !== -1) {
                            index = this.options.selected;
                        } else {
                            return;
                        }
                    }
                    this.anchors.eq(index).trigger(this.options.event + this.eventNamespace);
                }
            });
            (function() {
                    var listId = 0;
                    $.widget("ui.tabs", $.ui.tabs, {
                        options: {
                            cookie: null
                        },
                        _create: function() {
                            var options = this.options, active;
                            if (options.active == null && options.cookie) {
                                active = parseInt(this._cookie(), 10);
                                if (active === -1) {
                                    active = false;
                                }
                                options.active = active;
                            }
                            this._super();
                        },
                        _cookie: function(active) {
                            var cookie = [this.cookie || (this.cookie = this.options.cookie.name || "ui-tabs-" + (++listId))];
                            if (arguments.length) {
                                cookie.push(active === false ? -1 : active);
                                cookie.push(this.options.cookie);
                            }
                            return $.cookie.apply(null, cookie);
                        },
                        _refresh: function() {
                            this._super();
                            if (this.options.cookie) {
                                this._cookie(this.options.active, this.options.cookie);
                            }
                        },
                        _eventHandler: function() {
                            this._superApply(arguments);
                            if (this.options.cookie) {
                                this._cookie(this.options.active, this.options.cookie);
                            }
                        },
                        _destroy: function() {
                            this._super();
                            if (this.options.cookie) {
                                this._cookie(null, this.options.cookie);
                            }
                        }
                    });
                }
            )();
            $.widget("ui.tabs", $.ui.tabs, {
                _trigger: function(type, event, data) {
                    var _data = $.extend({}, data);
                    if (type === "load") {
                        _data.panel = _data.panel[0];
                        _data.tab = _data.tab.find(".ui-tabs-anchor")[0];
                    }
                    return this._super(type, event, _data);
                }
            });
            $.widget("ui.tabs", $.ui.tabs, {
                options: {
                    fx: null
                },
                _getFx: function() {
                    var hide, show, fx = this.options.fx;
                    if (fx) {
                        if ($.isArray(fx)) {
                            hide = fx[0];
                            show = fx[1];
                        } else {
                            hide = show = fx;
                        }
                    }
                    return fx ? {
                        show: show,
                        hide: hide
                    } : null;
                },
                _toggle: function(event, eventData) {
                    var that = this
                        , toShow = eventData.newPanel
                        , toHide = eventData.oldPanel
                        , fx = this._getFx();
                    if (!fx) {
                        return this._super(event, eventData);
                    }
                    that.running = true;
                    function complete() {
                        that.running = false;
                        that._trigger("activate", event, eventData);
                    }
                    function show() {
                        eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
                        if (toShow.length && fx.show) {
                            toShow.animate(fx.show, fx.show.duration, function() {
                                complete();
                            });
                        } else {
                            toShow.show();
                            complete();
                        }
                    }
                    if (toHide.length && fx.hide) {
                        toHide.animate(fx.hide, fx.hide.duration, function() {
                            eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                            show();
                        });
                    } else {
                        eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                        toHide.hide();
                        show();
                    }
                }
            });
        }
    }
)(jQuery);
(function($) {
    var increments = 0;
    function addDescribedBy(elem, id) {
        var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
        describedby.push(id);
        elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" ")));
    }
    function removeDescribedBy(elem) {
        var id = elem.data("ui-tooltip-id")
            , describedby = (elem.attr("aria-describedby") || "").split(/\s+/)
            , index = $.inArray(id, describedby);
        if (index !== -1) {
            describedby.splice(index, 1);
        }
        elem.removeData("ui-tooltip-id");
        describedby = $.trim(describedby.join(" "));
        if (describedby) {
            elem.attr("aria-describedby", describedby);
        } else {
            elem.removeAttr("aria-describedby");
        }
    }
    $.widget("ui.tooltip", {
        version: "1.9.2",
        options: {
            content: function() {
                return $(this).attr("title");
            },
            hide: true,
            items: "[title]:not([disabled])",
            position: {
                my: "left top+15",
                at: "left bottom",
                collision: "flipfit flip"
            },
            show: true,
            tooltipClass: null,
            track: false,
            close: null,
            open: null
        },
        _create: function() {
            this._on({
                mouseover: "open",
                focusin: "open"
            });
            this.tooltips = {};
            this.parents = {};
            if (this.options.disabled) {
                this._disable();
            }
        },
        _setOption: function(key, value) {
            var that = this;
            if (key === "disabled") {
                this[value ? "_disable" : "_enable"]();
                this.options[key] = value;
                return;
            }
            this._super(key, value);
            if (key === "content") {
                $.each(this.tooltips, function(id, element) {
                    that._updateContent(element);
                });
            }
        },
        _disable: function() {
            var that = this;
            $.each(this.tooltips, function(id, element) {
                var event = $.Event("blur");
                event.target = event.currentTarget = element[0];
                that.close(event, true);
            });
            this.element.find(this.options.items).andSelf().each(function() {
                var element = $(this);
                if (element.is("[title]")) {
                    element.data("ui-tooltip-title", element.attr("title")).attr("title", "");
                }
            });
        },
        _enable: function() {
            this.element.find(this.options.items).andSelf().each(function() {
                var element = $(this);
                if (element.data("ui-tooltip-title")) {
                    element.attr("title", element.data("ui-tooltip-title"));
                }
            });
        },
        open: function(event) {
            var that = this
                , target = $(event ? event.target : this.element).closest(this.options.items);
            if (!target.length || target.data("ui-tooltip-id")) {
                return;
            }
            if (target.attr("title")) {
                target.data("ui-tooltip-title", target.attr("title"));
            }
            target.data("ui-tooltip-open", true);
            if (event && event.type === "mouseover") {
                target.parents().each(function() {
                    var parent = $(this), blurEvent;
                    if (parent.data("ui-tooltip-open")) {
                        blurEvent = $.Event("blur");
                        blurEvent.target = blurEvent.currentTarget = this;
                        that.close(blurEvent, true);
                    }
                    if (parent.attr("title")) {
                        parent.uniqueId();
                        that.parents[this.id] = {
                            element: this,
                            title: parent.attr("title")
                        };
                        parent.attr("title", "");
                    }
                });
            }
            this._updateContent(target, event);
        },
        _updateContent: function(target, event) {
            var content, contentOption = this.options.content, that = this, eventType = event ? event.type : null;
            if (typeof contentOption === "string") {
                return this._open(event, target, contentOption);
            }
            content = contentOption.call(target[0], function(response) {
                if (!target.data("ui-tooltip-open")) {
                    return;
                }
                that._delay(function() {
                    if (event) {
                        event.type = eventType;
                    }
                    this._open(event, target, response);
                });
            });
            if (content) {
                this._open(event, target, content);
            }
        },
        _open: function(event, target, content) {
            var tooltip, events, delayedShow, positionOption = $.extend({}, this.options.position);
            if (!content) {
                return;
            }
            tooltip = this._find(target);
            if (tooltip.length) {
                tooltip.find(".ui-tooltip-content").html(content);
                return;
            }
            if (target.is("[title]")) {
                if (event && event.type === "mouseover") {
                    target.attr("title", "");
                } else {
                    target.removeAttr("title");
                }
            }
            tooltip = this._tooltip(target);
            addDescribedBy(target, tooltip.attr("id"));
            tooltip.find(".ui-tooltip-content").html(content);
            function position(event) {
                positionOption.of = event;
                if (tooltip.is(":hidden")) {
                    return;
                }
                tooltip.position(positionOption);
            }
            if (this.options.track && event && /^mouse/.test(event.type)) {
                this._on(this.document, {
                    mousemove: position
                });
                position(event);
            } else {
                tooltip.position($.extend({
                    of: target
                }, this.options.position));
            }
            tooltip.hide();
            this._show(tooltip, this.options.show);
            if (this.options.show && this.options.show.delay) {
                delayedShow = setInterval(function() {
                    if (tooltip.is(":visible")) {
                        position(positionOption.of);
                        clearInterval(delayedShow);
                    }
                }, $.fx.interval);
            }
            this._trigger("open", event, {
                tooltip: tooltip
            });
            events = {
                keyup: function(event) {
                    if (event.keyCode === $.ui.keyCode.ESCAPE) {
                        var fakeEvent = $.Event(event);
                        fakeEvent.currentTarget = target[0];
                        this.close(fakeEvent, true);
                    }
                },
                remove: function() {
                    this._removeTooltip(tooltip);
                }
            };
            if (!event || event.type === "mouseover") {
                events.mouseleave = "close";
            }
            if (!event || event.type === "focusin") {
                events.focusout = "close";
            }
            this._on(true, target, events);
        },
        close: function(event) {
            var that = this
                , target = $(event ? event.currentTarget : this.element)
                , tooltip = this._find(target);
            if (this.closing) {
                return;
            }
            if (target.data("ui-tooltip-title")) {
                target.attr("title", target.data("ui-tooltip-title"));
            }
            removeDescribedBy(target);
            tooltip.stop(true);
            this._hide(tooltip, this.options.hide, function() {
                that._removeTooltip($(this));
            });
            target.removeData("ui-tooltip-open");
            this._off(target, "mouseleave focusout keyup");
            if (target[0] !== this.element[0]) {
                this._off(target, "remove");
            }
            this._off(this.document, "mousemove");
            if (event && event.type === "mouseleave") {
                $.each(this.parents, function(id, parent) {
                    $(parent.element).attr("title", parent.title);
                    delete that.parents[id];
                });
            }
            this.closing = true;
            this._trigger("close", event, {
                tooltip: tooltip
            });
            this.closing = false;
        },
        _tooltip: function(element) {
            var id = "ui-tooltip-" + increments++
                , tooltip = $("<div>").attr({
                id: id,
                role: "tooltip"
            }).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content " + (this.options.tooltipClass || ""));
            $("<div>").addClass("ui-tooltip-content").appendTo(tooltip);
            tooltip.appendTo(this.document[0].body);
            if ($.fn.bgiframe) {
                tooltip.bgiframe();
            }
            this.tooltips[id] = element;
            return tooltip;
        },
        _find: function(target) {
            var id = target.data("ui-tooltip-id");
            return id ? $("#" + id) : $();
        },
        _removeTooltip: function(tooltip) {
            tooltip.remove();
            delete this.tooltips[tooltip.attr("id")];
        },
        _destroy: function() {
            var that = this;
            $.each(this.tooltips, function(id, element) {
                var event = $.Event("blur");
                event.target = event.currentTarget = element[0];
                that.close(event, true);
                $("#" + id).remove();
                if (element.data("ui-tooltip-title")) {
                    element.attr("title", element.data("ui-tooltip-title"));
                    element.removeData("ui-tooltip-title");
                }
            });
        }
    });
}(jQuery));
;(jQuery.effects || (function($, undefined) {
        var backCompat = $.uiBackCompat !== false
            , dataSpace = "ui-effects-";
        $.effects = {
            effect: {}
        };
        (function(jQuery, undefined) {
                var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor".split(" "), rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [{
                    re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
                    parse: function(execResult) {
                        return [execResult[1], execResult[2], execResult[3], execResult[4]];
                    }
                }, {
                    re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
                    parse: function(execResult) {
                        return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]];
                    }
                }, {
                    re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
                    parse: function(execResult) {
                        return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)];
                    }
                }, {
                    re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
                    parse: function(execResult) {
                        return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)];
                    }
                }, {
                    re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
                    space: "hsla",
                    parse: function(execResult) {
                        return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]];
                    }
                }], color = jQuery.Color = function(color, green, blue, alpha) {
                    return new jQuery.Color.fn.parse(color,green,blue,alpha);
                }
                    , spaces = {
                    rgba: {
                        props: {
                            red: {
                                idx: 0,
                                type: "byte"
                            },
                            green: {
                                idx: 1,
                                type: "byte"
                            },
                            blue: {
                                idx: 2,
                                type: "byte"
                            }
                        }
                    },
                    hsla: {
                        props: {
                            hue: {
                                idx: 0,
                                type: "degrees"
                            },
                            saturation: {
                                idx: 1,
                                type: "percent"
                            },
                            lightness: {
                                idx: 2,
                                type: "percent"
                            }
                        }
                    }
                }, propTypes = {
                    "byte": {
                        floor: true,
                        max: 255
                    },
                    "percent": {
                        max: 1
                    },
                    "degrees": {
                        mod: 360,
                        floor: true
                    }
                }, support = color.support = {}, supportElem = jQuery("<p>")[0], colors, each = jQuery.each;
                supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
                support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
                each(spaces, function(spaceName, space) {
                    space.cache = "_" + spaceName;
                    space.props.alpha = {
                        idx: 3,
                        type: "percent",
                        def: 1
                    };
                });
                function clamp(value, prop, allowEmpty) {
                    var type = propTypes[prop.type] || {};
                    if (value == null) {
                        return (allowEmpty || !prop.def) ? null : prop.def;
                    }
                    value = type.floor ? ~~value : parseFloat(value);
                    if (isNaN(value)) {
                        return prop.def;
                    }
                    if (type.mod) {
                        return (value + type.mod) % type.mod;
                    }
                    return 0 > value ? 0 : type.max < value ? type.max : value;
                }
                function stringParse(string) {
                    var inst = color()
                        , rgba = inst._rgba = [];
                    string = string.toLowerCase();
                    each(stringParsers, function(i, parser) {
                        var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
                        if (values) {
                            parsed = inst[spaceName](values);
                            inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                            rgba = inst._rgba = parsed._rgba;
                            return false;
                        }
                    });
                    if (rgba.length) {
                        if (rgba.join() === "0,0,0,0") {
                            jQuery.extend(rgba, colors.transparent);
                        }
                        return inst;
                    }
                    return colors[string];
                }
                color.fn = jQuery.extend(color.prototype, {
                    parse: function(red, green, blue, alpha) {
                        if (red === undefined) {
                            this._rgba = [null, null, null, null];
                            return this;
                        }
                        if (red.jquery || red.nodeType) {
                            red = jQuery(red).css(green);
                            green = undefined;
                        }
                        var inst = this
                            , type = jQuery.type(red)
                            , rgba = this._rgba = [];
                        if (green !== undefined) {
                            red = [red, green, blue, alpha];
                            type = "array";
                        }
                        if (type === "string") {
                            return this.parse(stringParse(red) || colors._default);
                        }
                        if (type === "array") {
                            each(spaces.rgba.props, function(key, prop) {
                                rgba[prop.idx] = clamp(red[prop.idx], prop);
                            });
                            return this;
                        }
                        if (type === "object") {
                            if (red instanceof color) {
                                each(spaces, function(spaceName, space) {
                                    if (red[space.cache]) {
                                        inst[space.cache] = red[space.cache].slice();
                                    }
                                });
                            } else {
                                each(spaces, function(spaceName, space) {
                                    var cache = space.cache;
                                    each(space.props, function(key, prop) {
                                        if (!inst[cache] && space.to) {
                                            if (key === "alpha" || red[key] == null) {
                                                return;
                                            }
                                            inst[cache] = space.to(inst._rgba);
                                        }
                                        inst[cache][prop.idx] = clamp(red[key], prop, true);
                                    });
                                    if (inst[cache] && $.inArray(null, inst[cache].slice(0, 3)) < 0) {
                                        inst[cache][3] = 1;
                                        if (space.from) {
                                            inst._rgba = space.from(inst[cache]);
                                        }
                                    }
                                });
                            }
                            return this;
                        }
                    },
                    is: function(compare) {
                        var is = color(compare)
                            , same = true
                            , inst = this;
                        each(spaces, function(_, space) {
                            var localCache, isCache = is[space.cache];
                            if (isCache) {
                                localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                                each(space.props, function(_, prop) {
                                    if (isCache[prop.idx] != null) {
                                        same = (isCache[prop.idx] === localCache[prop.idx]);
                                        return same;
                                    }
                                });
                            }
                            return same;
                        });
                        return same;
                    },
                    _space: function() {
                        var used = []
                            , inst = this;
                        each(spaces, function(spaceName, space) {
                            if (inst[space.cache]) {
                                used.push(spaceName);
                            }
                        });
                        return used.pop();
                    },
                    transition: function(other, distance) {
                        var end = color(other)
                            , spaceName = end._space()
                            , space = spaces[spaceName]
                            , startColor = this.alpha() === 0 ? color("transparent") : this
                            , start = startColor[space.cache] || space.to(startColor._rgba)
                            , result = start.slice();
                        end = end[space.cache];
                        each(space.props, function(key, prop) {
                            var index = prop.idx
                                , startValue = start[index]
                                , endValue = end[index]
                                , type = propTypes[prop.type] || {};
                            if (endValue === null) {
                                return;
                            }
                            if (startValue === null) {
                                result[index] = endValue;
                            } else {
                                if (type.mod) {
                                    if (endValue - startValue > type.mod / 2) {
                                        startValue += type.mod;
                                    } else if (startValue - endValue > type.mod / 2) {
                                        startValue -= type.mod;
                                    }
                                }
                                result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                            }
                        });
                        return this[spaceName](result);
                    },
                    blend: function(opaque) {
                        if (this._rgba[3] === 1) {
                            return this;
                        }
                        var rgb = this._rgba.slice()
                            , a = rgb.pop()
                            , blend = color(opaque)._rgba;
                        return color(jQuery.map(rgb, function(v, i) {
                            return (1 - a) * blend[i] + a * v;
                        }));
                    },
                    toRgbaString: function() {
                        var prefix = "rgba("
                            , rgba = jQuery.map(this._rgba, function(v, i) {
                            return v == null ? (i > 2 ? 1 : 0) : v;
                        });
                        if (rgba[3] === 1) {
                            rgba.pop();
                            prefix = "rgb(";
                        }
                        return prefix + rgba.join() + ")";
                    },
                    toHslaString: function() {
                        var prefix = "hsla("
                            , hsla = jQuery.map(this.hsla(), function(v, i) {
                            if (v == null) {
                                v = i > 2 ? 1 : 0;
                            }
                            if (i && i < 3) {
                                v = Math.round(v * 100) + "%";
                            }
                            return v;
                        });
                        if (hsla[3] === 1) {
                            hsla.pop();
                            prefix = "hsl(";
                        }
                        return prefix + hsla.join() + ")";
                    },
                    toHexString: function(includeAlpha) {
                        var rgba = this._rgba.slice()
                            , alpha = rgba.pop();
                        if (includeAlpha) {
                            rgba.push(~~(alpha * 255));
                        }
                        return "#" + jQuery.map(rgba, function(v) {
                            v = (v || 0).toString(16);
                            return v.length === 1 ? "0" + v : v;
                        }).join("");
                    },
                    toString: function() {
                        return this._rgba[3] === 0 ? "transparent" : this.toRgbaString();
                    }
                });
                color.fn.parse.prototype = color.fn;
                function hue2rgb(p, q, h) {
                    h = (h + 1) % 1;
                    if (h * 6 < 1) {
                        return p + (q - p) * h * 6;
                    }
                    if (h * 2 < 1) {
                        return q;
                    }
                    if (h * 3 < 2) {
                        return p + (q - p) * ((2 / 3) - h) * 6;
                    }
                    return p;
                }
                spaces.hsla.to = function(rgba) {
                    if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {
                        return [null, null, null, rgba[3]];
                    }
                    var r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = add * 0.5, h, s;
                    if (min === max) {
                        h = 0;
                    } else if (r === max) {
                        h = (60 * (g - b) / diff) + 360;
                    } else if (g === max) {
                        h = (60 * (b - r) / diff) + 120;
                    } else {
                        h = (60 * (r - g) / diff) + 240;
                    }
                    if (l === 0 || l === 1) {
                        s = l;
                    } else if (l <= 0.5) {
                        s = diff / add;
                    } else {
                        s = diff / (2 - add);
                    }
                    return [Math.round(h) % 360, s, l, a == null ? 1 : a];
                }
                ;
                spaces.hsla.from = function(hsla) {
                    if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {
                        return [null, null, null, hsla[3]];
                    }
                    var h = hsla[0] / 360
                        , s = hsla[1]
                        , l = hsla[2]
                        , a = hsla[3]
                        , q = l <= 0.5 ? l * (1 + s) : l + s - l * s
                        , p = 2 * l - q;
                    return [Math.round(hue2rgb(p, q, h + (1 / 3)) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - (1 / 3)) * 255), a];
                }
                ;
                each(spaces, function(spaceName, space) {
                    var props = space.props
                        , cache = space.cache
                        , to = space.to
                        , from = space.from;
                    color.fn[spaceName] = function(value) {
                        if (to && !this[cache]) {
                            this[cache] = to(this._rgba);
                        }
                        if (value === undefined) {
                            return this[cache].slice();
                        }
                        var ret, type = jQuery.type(value), arr = (type === "array" || type === "object") ? value : arguments, local = this[cache].slice();
                        each(props, function(key, prop) {
                            var val = arr[type === "object" ? key : prop.idx];
                            if (val == null) {
                                val = local[prop.idx];
                            }
                            local[prop.idx] = clamp(val, prop);
                        });
                        if (from) {
                            ret = color(from(local));
                            ret[cache] = local;
                            return ret;
                        } else {
                            return color(local);
                        }
                    }
                    ;
                    each(props, function(key, prop) {
                        if (color.fn[key]) {
                            return;
                        }
                        color.fn[key] = function(value) {
                            var vtype = jQuery.type(value), fn = (key === "alpha" ? (this._hsla ? "hsla" : "rgba") : spaceName), local = this[fn](), cur = local[prop.idx], match;
                            if (vtype === "undefined") {
                                return cur;
                            }
                            if (vtype === "function") {
                                value = value.call(this, cur);
                                vtype = jQuery.type(value);
                            }
                            if (value == null && prop.empty) {
                                return this;
                            }
                            if (vtype === "string") {
                                match = rplusequals.exec(value);
                                if (match) {
                                    value = cur + parseFloat(match[2]) * (match[1] === "+" ? 1 : -1);
                                }
                            }
                            local[prop.idx] = value;
                            return this[fn](local);
                        }
                        ;
                    });
                });
                each(stepHooks, function(i, hook) {
                    jQuery.cssHooks[hook] = {
                        set: function(elem, value) {
                            var parsed, curElem, backgroundColor = "";
                            if (jQuery.type(value) !== "string" || (parsed = stringParse(value))) {
                                value = color(parsed || value);
                                if (!support.rgba && value._rgba[3] !== 1) {
                                    curElem = hook === "backgroundColor" ? elem.parentNode : elem;
                                    while ((backgroundColor === "" || backgroundColor === "transparent") && curElem && curElem.style) {
                                        try {
                                            backgroundColor = jQuery.css(curElem, "backgroundColor");
                                            curElem = curElem.parentNode;
                                        } catch (e) {}
                                    }
                                    value = value.blend(backgroundColor && backgroundColor !== "transparent" ? backgroundColor : "_default");
                                }
                                value = value.toRgbaString();
                            }
                            try {
                                elem.style[hook] = value;
                            } catch (error) {}
                        }
                    };
                    jQuery.fx.step[hook] = function(fx) {
                        if (!fx.colorInit) {
                            fx.start = color(fx.elem, hook);
                            fx.end = color(fx.end);
                            fx.colorInit = true;
                        }
                        jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                    }
                    ;
                });
                jQuery.cssHooks.borderColor = {
                    expand: function(value) {
                        var expanded = {};
                        each(["Top", "Right", "Bottom", "Left"], function(i, part) {
                            expanded["border" + part + "Color"] = value;
                        });
                        return expanded;
                    }
                };
                colors = jQuery.Color.names = {
                    aqua: "#00ffff",
                    black: "#000000",
                    blue: "#0000ff",
                    fuchsia: "#ff00ff",
                    gray: "#808080",
                    green: "#008000",
                    lime: "#00ff00",
                    maroon: "#800000",
                    navy: "#000080",
                    olive: "#808000",
                    purple: "#800080",
                    red: "#ff0000",
                    silver: "#c0c0c0",
                    teal: "#008080",
                    white: "#ffffff",
                    yellow: "#ffff00",
                    transparent: [null, null, null, 0],
                    _default: "#ffffff"
                };
            }
        )(jQuery);
        (function() {
                var classAnimationActions = ["add", "remove", "toggle"]
                    , shorthandStyles = {
                    border: 1,
                    borderBottom: 1,
                    borderColor: 1,
                    borderLeft: 1,
                    borderRight: 1,
                    borderTop: 1,
                    borderWidth: 1,
                    margin: 1,
                    padding: 1
                };
                $.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function(_, prop) {
                    $.fx.step[prop] = function(fx) {
                        if (fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {
                            jQuery.style(fx.elem, prop, fx.end);
                            fx.setAttr = true;
                        }
                    }
                    ;
                });
                function getElementStyles() {
                    var style = this.ownerDocument.defaultView ? this.ownerDocument.defaultView.getComputedStyle(this, null) : this.currentStyle, newStyle = {}, key, len;
                    if (style && style.length && style[0] && style[style[0]]) {
                        len = style.length;
                        while (len--) {
                            key = style[len];
                            if (typeof style[key] === "string") {
                                newStyle[$.camelCase(key)] = style[key];
                            }
                        }
                    } else {
                        for (key in style) {
                            if (typeof style[key] === "string") {
                                newStyle[key] = style[key];
                            }
                        }
                    }
                    return newStyle;
                }
                function styleDifference(oldStyle, newStyle) {
                    var diff = {}, name, value;
                    for (name in newStyle) {
                        value = newStyle[name];
                        if (oldStyle[name] !== value) {
                            if (!shorthandStyles[name]) {
                                if ($.fx.step[name] || !isNaN(parseFloat(value))) {
                                    diff[name] = value;
                                }
                            }
                        }
                    }
                    return diff;
                }
                $.effects.animateClass = function(value, duration, easing, callback) {
                    var o = $.speed(duration, easing, callback);
                    return this.queue(function() {
                        var animated = $(this), baseClass = animated.attr("class") || "", applyClassChange, allAnimations = o.children ? animated.find("*").andSelf() : animated;
                        allAnimations = allAnimations.map(function() {
                            var el = $(this);
                            return {
                                el: el,
                                start: getElementStyles.call(this)
                            };
                        });
                        applyClassChange = function() {
                            $.each(classAnimationActions, function(i, action) {
                                if (value[action]) {
                                    animated[action + "Class"](value[action]);
                                }
                            });
                        }
                        ;
                        applyClassChange();
                        allAnimations = allAnimations.map(function() {
                            this.end = getElementStyles.call(this.el[0]);
                            this.diff = styleDifference(this.start, this.end);
                            return this;
                        });
                        animated.attr("class", baseClass);
                        allAnimations = allAnimations.map(function() {
                            var styleInfo = this
                                , dfd = $.Deferred()
                                , opts = jQuery.extend({}, o, {
                                queue: false,
                                complete: function() {
                                    dfd.resolve(styleInfo);
                                }
                            });
                            this.el.animate(this.diff, opts);
                            return dfd.promise();
                        });
                        $.when.apply($, allAnimations.get()).done(function() {
                            applyClassChange();
                            $.each(arguments, function() {
                                var el = this.el;
                                $.each(this.diff, function(key) {
                                    el.css(key, '');
                                });
                            });
                            o.complete.call(animated[0]);
                        });
                    });
                }
                ;
                $.fn.extend({
                    _addClass: $.fn.addClass,
                    addClass: function(classNames, speed, easing, callback) {
                        return speed ? $.effects.animateClass.call(this, {
                            add: classNames
                        }, speed, easing, callback) : this._addClass(classNames);
                    },
                    _removeClass: $.fn.removeClass,
                    removeClass: function(classNames, speed, easing, callback) {
                        return speed ? $.effects.animateClass.call(this, {
                            remove: classNames
                        }, speed, easing, callback) : this._removeClass(classNames);
                    },
                    _toggleClass: $.fn.toggleClass,
                    toggleClass: function(classNames, force, speed, easing, callback) {
                        if (typeof force === "boolean" || force === undefined) {
                            if (!speed) {
                                return this._toggleClass(classNames, force);
                            } else {
                                return $.effects.animateClass.call(this, (force ? {
                                    add: classNames
                                } : {
                                    remove: classNames
                                }), speed, easing, callback);
                            }
                        } else {
                            return $.effects.animateClass.call(this, {
                                toggle: classNames
                            }, force, speed, easing);
                        }
                    },
                    switchClass: function(remove, add, speed, easing, callback) {
                        return $.effects.animateClass.call(this, {
                            add: add,
                            remove: remove
                        }, speed, easing, callback);
                    }
                });
            }
        )();
        (function() {
                $.extend($.effects, {
                    version: "1.9.2",
                    save: function(element, set) {
                        for (var i = 0; i < set.length; i++) {
                            if (set[i] !== null) {
                                element.data(dataSpace + set[i], element[0].style[set[i]]);
                            }
                        }
                    },
                    restore: function(element, set) {
                        var val, i;
                        for (i = 0; i < set.length; i++) {
                            if (set[i] !== null) {
                                val = element.data(dataSpace + set[i]);
                                if (val === undefined) {
                                    val = "";
                                }
                                element.css(set[i], val);
                            }
                        }
                    },
                    setMode: function(el, mode) {
                        if (mode === "toggle") {
                            mode = el.is(":hidden") ? "show" : "hide";
                        }
                        return mode;
                    },
                    getBaseline: function(origin, original) {
                        var y, x;
                        switch (origin[0]) {
                            case "top":
                                y = 0;
                                break;
                            case "middle":
                                y = 0.5;
                                break;
                            case "bottom":
                                y = 1;
                                break;
                            default:
                                y = origin[0] / original.height;
                        }
                        switch (origin[1]) {
                            case "left":
                                x = 0;
                                break;
                            case "center":
                                x = 0.5;
                                break;
                            case "right":
                                x = 1;
                                break;
                            default:
                                x = origin[1] / original.width;
                        }
                        return {
                            x: x,
                            y: y
                        };
                    },
                    createWrapper: function(element) {
                        if (element.parent().is(".ui-effects-wrapper")) {
                            return element.parent();
                        }
                        var props = {
                            width: element.outerWidth(true),
                            height: element.outerHeight(true),
                            "float": element.css("float")
                        }
                            , wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                            fontSize: "100%",
                            background: "transparent",
                            border: "none",
                            margin: 0,
                            padding: 0
                        })
                            , size = {
                            width: element.width(),
                            height: element.height()
                        }
                            , active = document.activeElement;
                        try {
                            active.id;
                        } catch (e) {
                            active = document.body;
                        }
                        element.wrap(wrapper);
                        if (element[0] === active || $.contains(element[0], active)) {
                            $(active).focus();
                        }
                        wrapper = element.parent();
                        if (element.css("position") === "static") {
                            wrapper.css({
                                position: "relative"
                            });
                            element.css({
                                position: "relative"
                            });
                        } else {
                            $.extend(props, {
                                position: element.css("position"),
                                zIndex: element.css("z-index")
                            });
                            $.each(["top", "left", "bottom", "right"], function(i, pos) {
                                props[pos] = element.css(pos);
                                if (isNaN(parseInt(props[pos], 10))) {
                                    props[pos] = "auto";
                                }
                            });
                            element.css({
                                position: "relative",
                                top: 0,
                                left: 0,
                                right: "auto",
                                bottom: "auto"
                            });
                        }
                        element.css(size);
                        return wrapper.css(props).show();
                    },
                    removeWrapper: function(element) {
                        var active = document.activeElement;
                        if (element.parent().is(".ui-effects-wrapper")) {
                            element.parent().replaceWith(element);
                            if (element[0] === active || $.contains(element[0], active)) {
                                $(active).focus();
                            }
                        }
                        return element;
                    },
                    setTransition: function(element, list, factor, value) {
                        value = value || {};
                        $.each(list, function(i, x) {
                            var unit = element.cssUnit(x);
                            if (unit[0] > 0) {
                                value[x] = unit[0] * factor + unit[1];
                            }
                        });
                        return value;
                    }
                });
                function _normalizeArguments(effect, options, speed, callback) {
                    if ($.isPlainObject(effect)) {
                        options = effect;
                        effect = effect.effect;
                    }
                    effect = {
                        effect: effect
                    };
                    if (options == null) {
                        options = {};
                    }
                    if ($.isFunction(options)) {
                        callback = options;
                        speed = null;
                        options = {};
                    }
                    if (typeof options === "number" || $.fx.speeds[options]) {
                        callback = speed;
                        speed = options;
                        options = {};
                    }
                    if ($.isFunction(speed)) {
                        callback = speed;
                        speed = null;
                    }
                    if (options) {
                        $.extend(effect, options);
                    }
                    speed = speed || options.duration;
                    effect.duration = $.fx.off ? 0 : typeof speed === "number" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
                    effect.complete = callback || options.complete;
                    return effect;
                }
                function standardSpeed(speed) {
                    if (!speed || typeof speed === "number" || $.fx.speeds[speed]) {
                        return true;
                    }
                    if (typeof speed === "string" && !$.effects.effect[speed]) {
                        if (backCompat && $.effects[speed]) {
                            return false;
                        }
                        return true;
                    }
                    return false;
                }
                $.fn.extend({
                    effect: function() {
                        var args = _normalizeArguments.apply(this, arguments)
                            , mode = args.mode
                            , queue = args.queue
                            , effectMethod = $.effects.effect[args.effect]
                            , oldEffectMethod = !effectMethod && backCompat && $.effects[args.effect];
                        if ($.fx.off || !(effectMethod || oldEffectMethod)) {
                            if (mode) {
                                return this[mode](args.duration, args.complete);
                            } else {
                                return this.each(function() {
                                    if (args.complete) {
                                        args.complete.call(this);
                                    }
                                });
                            }
                        }
                        function run(next) {
                            var elem = $(this)
                                , complete = args.complete
                                , mode = args.mode;
                            function done() {
                                if ($.isFunction(complete)) {
                                    complete.call(elem[0]);
                                }
                                if ($.isFunction(next)) {
                                    next();
                                }
                            }
                            if (elem.is(":hidden") ? mode === "hide" : mode === "show") {
                                done();
                            } else {
                                effectMethod.call(elem[0], args, done);
                            }
                        }
                        if (effectMethod) {
                            return queue === false ? this.each(run) : this.queue(queue || "fx", run);
                        } else {
                            return oldEffectMethod.call(this, {
                                options: args,
                                duration: args.duration,
                                callback: args.complete,
                                mode: args.mode
                            });
                        }
                    },
                    _show: $.fn.show,
                    show: function(speed) {
                        if (standardSpeed(speed)) {
                            return this._show.apply(this, arguments);
                        } else {
                            var args = _normalizeArguments.apply(this, arguments);
                            args.mode = "show";
                            return this.effect.call(this, args);
                        }
                    },
                    _hide: $.fn.hide,
                    hide: function(speed) {
                        if (standardSpeed(speed)) {
                            return this._hide.apply(this, arguments);
                        } else {
                            var args = _normalizeArguments.apply(this, arguments);
                            args.mode = "hide";
                            return this.effect.call(this, args);
                        }
                    },
                    __toggle: $.fn.toggle,
                    toggle: function(speed) {
                        if (standardSpeed(speed) || typeof speed === "boolean" || $.isFunction(speed)) {
                            return this.__toggle.apply(this, arguments);
                        } else {
                            var args = _normalizeArguments.apply(this, arguments);
                            args.mode = "toggle";
                            return this.effect.call(this, args);
                        }
                    },
                    cssUnit: function(key) {
                        var style = this.css(key)
                            , val = [];
                        $.each(["em", "px", "%", "pt"], function(i, unit) {
                            if (style.indexOf(unit) > 0) {
                                val = [parseFloat(style), unit];
                            }
                        });
                        return val;
                    }
                });
            }
        )();
        (function() {
                var baseEasings = {};
                $.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function(i, name) {
                    baseEasings[name] = function(p) {
                        return Math.pow(p, i + 2);
                    }
                    ;
                });
                $.extend(baseEasings, {
                    Sine: function(p) {
                        return 1 - Math.cos(p * Math.PI / 2);
                    },
                    Circ: function(p) {
                        return 1 - Math.sqrt(1 - p * p);
                    },
                    Elastic: function(p) {
                        return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);
                    },
                    Back: function(p) {
                        return p * p * (3 * p - 2);
                    },
                    Bounce: function(p) {
                        var pow2, bounce = 4;
                        while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}
                        return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);
                    }
                });
                $.each(baseEasings, function(name, easeIn) {
                    $.easing["easeIn" + name] = easeIn;
                    $.easing["easeOut" + name] = function(p) {
                        return 1 - easeIn(1 - p);
                    }
                    ;
                    $.easing["easeInOut" + name] = function(p) {
                        return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;
                    }
                    ;
                });
            }
        )();
    }
)(jQuery));
(function($, undefined) {
        var rvertical = /up|down|vertical/
            , rpositivemotion = /up|left|vertical|horizontal/;
        $.effects.effect.blind = function(o, done) {
            var el = $(this), props = ["position", "top", "bottom", "left", "right", "height", "width"], mode = $.effects.setMode(el, o.mode || "hide"), direction = o.direction || "up", vertical = rvertical.test(direction), ref = vertical ? "height" : "width", ref2 = vertical ? "top" : "left", motion = rpositivemotion.test(direction), animation = {}, show = mode === "show", wrapper, distance, margin;
            if (el.parent().is(".ui-effects-wrapper")) {
                $.effects.save(el.parent(), props);
            } else {
                $.effects.save(el, props);
            }
            el.show();
            wrapper = $.effects.createWrapper(el).css({
                overflow: "hidden"
            });
            distance = wrapper[ref]();
            margin = parseFloat(wrapper.css(ref2)) || 0;
            animation[ref] = show ? distance : 0;
            if (!motion) {
                el.css(vertical ? "bottom" : "right", 0).css(vertical ? "top" : "left", "auto").css({
                    position: "absolute"
                });
                animation[ref2] = show ? margin : distance + margin;
            }
            if (show) {
                wrapper.css(ref, 0);
                if (!motion) {
                    wrapper.css(ref2, margin + distance);
                }
            }
            wrapper.animate(animation, {
                duration: o.duration,
                easing: o.easing,
                queue: false,
                complete: function() {
                    if (mode === "hide") {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                }
            });
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.bounce = function(o, done) {
            var el = $(this), props = ["position", "top", "bottom", "left", "right", "height", "width"], mode = $.effects.setMode(el, o.mode || "effect"), hide = mode === "hide", show = mode === "show", direction = o.direction || "up", distance = o.distance, times = o.times || 5, anims = times * 2 + (show || hide ? 1 : 0), speed = o.duration / anims, easing = o.easing, ref = (direction === "up" || direction === "down") ? "top" : "left", motion = (direction === "up" || direction === "left"), i, upAnim, downAnim, queue = el.queue(), queuelen = queue.length;
            if (show || hide) {
                props.push("opacity");
            }
            $.effects.save(el, props);
            el.show();
            $.effects.createWrapper(el);
            if (!distance) {
                distance = el[ref === "top" ? "outerHeight" : "outerWidth"]() / 3;
            }
            if (show) {
                downAnim = {
                    opacity: 1
                };
                downAnim[ref] = 0;
                el.css("opacity", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);
            }
            if (hide) {
                distance = distance / Math.pow(2, times - 1);
            }
            downAnim = {};
            downAnim[ref] = 0;
            for (i = 0; i < times; i++) {
                upAnim = {};
                upAnim[ref] = (motion ? "-=" : "+=") + distance;
                el.animate(upAnim, speed, easing).animate(downAnim, speed, easing);
                distance = hide ? distance * 2 : distance / 2;
            }
            if (hide) {
                upAnim = {
                    opacity: 0
                };
                upAnim[ref] = (motion ? "-=" : "+=") + distance;
                el.animate(upAnim, speed, easing);
            }
            el.queue(function() {
                if (hide) {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            });
            if (queuelen > 1) {
                queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));
            }
            el.dequeue();
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.clip = function(o, done) {
            var el = $(this), props = ["position", "top", "bottom", "left", "right", "height", "width"], mode = $.effects.setMode(el, o.mode || "hide"), show = mode === "show", direction = o.direction || "vertical", vert = direction === "vertical", size = vert ? "height" : "width", position = vert ? "top" : "left", animation = {}, wrapper, animate, distance;
            $.effects.save(el, props);
            el.show();
            wrapper = $.effects.createWrapper(el).css({
                overflow: "hidden"
            });
            animate = (el[0].tagName === "IMG") ? wrapper : el;
            distance = animate[size]();
            if (show) {
                animate.css(size, 0);
                animate.css(position, distance / 2);
            }
            animation[size] = show ? distance : 0;
            animation[position] = show ? 0 : distance / 2;
            animate.animate(animation, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function() {
                    if (!show) {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                }
            });
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.drop = function(o, done) {
            var el = $(this), props = ["position", "top", "bottom", "left", "right", "opacity", "height", "width"], mode = $.effects.setMode(el, o.mode || "hide"), show = mode === "show", direction = o.direction || "left", ref = (direction === "up" || direction === "down") ? "top" : "left", motion = (direction === "up" || direction === "left") ? "pos" : "neg", animation = {
                opacity: show ? 1 : 0
            }, distance;
            $.effects.save(el, props);
            el.show();
            $.effects.createWrapper(el);
            distance = o.distance || el[ref === "top" ? "outerHeight" : "outerWidth"](true) / 2;
            if (show) {
                el.css("opacity", 0).css(ref, motion === "pos" ? -distance : distance);
            }
            animation[ref] = (show ? (motion === "pos" ? "+=" : "-=") : (motion === "pos" ? "-=" : "+=")) + distance;
            el.animate(animation, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function() {
                    if (mode === "hide") {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                }
            });
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.explode = function(o, done) {
            var rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3, cells = rows, el = $(this), mode = $.effects.setMode(el, o.mode || "hide"), show = mode === "show", offset = el.show().css("visibility", "hidden").offset(), width = Math.ceil(el.outerWidth() / cells), height = Math.ceil(el.outerHeight() / rows), pieces = [], i, j, left, top, mx, my;
            function childComplete() {
                pieces.push(this);
                if (pieces.length === rows * cells) {
                    animComplete();
                }
            }
            for (i = 0; i < rows; i++) {
                top = offset.top + i * height;
                my = i - (rows - 1) / 2;
                for (j = 0; j < cells; j++) {
                    left = offset.left + j * width;
                    mx = j - (cells - 1) / 2;
                    el.clone().appendTo("body").wrap("<div></div>").css({
                        position: "absolute",
                        visibility: "visible",
                        left: -j * width,
                        top: -i * height
                    }).parent().addClass("ui-effects-explode").css({
                        position: "absolute",
                        overflow: "hidden",
                        width: width,
                        height: height,
                        left: left + (show ? mx * width : 0),
                        top: top + (show ? my * height : 0),
                        opacity: show ? 0 : 1
                    }).animate({
                        left: left + (show ? 0 : mx * width),
                        top: top + (show ? 0 : my * height),
                        opacity: show ? 1 : 0
                    }, o.duration || 500, o.easing, childComplete);
                }
            }
            function animComplete() {
                el.css({
                    visibility: "visible"
                });
                $(pieces).remove();
                if (!show) {
                    el.hide();
                }
                done();
            }
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.fade = function(o, done) {
            var el = $(this)
                , mode = $.effects.setMode(el, o.mode || "toggle");
            el.animate({
                opacity: mode
            }, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: done
            });
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.fold = function(o, done) {
            var el = $(this), props = ["position", "top", "bottom", "left", "right", "height", "width"], mode = $.effects.setMode(el, o.mode || "hide"), show = mode === "show", hide = mode === "hide", size = o.size || 15, percent = /([0-9]+)%/.exec(size), horizFirst = !!o.horizFirst, widthFirst = show !== horizFirst, ref = widthFirst ? ["width", "height"] : ["height", "width"], duration = o.duration / 2, wrapper, distance, animation1 = {}, animation2 = {};
            $.effects.save(el, props);
            el.show();
            wrapper = $.effects.createWrapper(el).css({
                overflow: "hidden"
            });
            distance = widthFirst ? [wrapper.width(), wrapper.height()] : [wrapper.height(), wrapper.width()];
            if (percent) {
                size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1];
            }
            if (show) {
                wrapper.css(horizFirst ? {
                    height: 0,
                    width: size
                } : {
                    height: size,
                    width: 0
                });
            }
            animation1[ref[0]] = show ? distance[0] : size;
            animation2[ref[1]] = show ? distance[1] : 0;
            wrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function() {
                if (hide) {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            });
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.highlight = function(o, done) {
            var elem = $(this)
                , props = ["backgroundImage", "backgroundColor", "opacity"]
                , mode = $.effects.setMode(elem, o.mode || "show")
                , animation = {
                backgroundColor: elem.css("backgroundColor")
            };
            if (mode === "hide") {
                animation.opacity = 0;
            }
            $.effects.save(elem, props);
            elem.show().css({
                backgroundImage: "none",
                backgroundColor: o.color || "#ffff99"
            }).animate(animation, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function() {
                    if (mode === "hide") {
                        elem.hide();
                    }
                    $.effects.restore(elem, props);
                    done();
                }
            });
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.pulsate = function(o, done) {
            var elem = $(this), mode = $.effects.setMode(elem, o.mode || "show"), show = mode === "show", hide = mode === "hide", showhide = (show || mode === "hide"), anims = ((o.times || 5) * 2) + (showhide ? 1 : 0), duration = o.duration / anims, animateTo = 0, queue = elem.queue(), queuelen = queue.length, i;
            if (show || !elem.is(":visible")) {
                elem.css("opacity", 0).show();
                animateTo = 1;
            }
            for (i = 1; i < anims; i++) {
                elem.animate({
                    opacity: animateTo
                }, duration, o.easing);
                animateTo = 1 - animateTo;
            }
            elem.animate({
                opacity: animateTo
            }, duration, o.easing);
            elem.queue(function() {
                if (hide) {
                    elem.hide();
                }
                done();
            });
            if (queuelen > 1) {
                queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));
            }
            elem.dequeue();
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.puff = function(o, done) {
            var elem = $(this)
                , mode = $.effects.setMode(elem, o.mode || "hide")
                , hide = mode === "hide"
                , percent = parseInt(o.percent, 10) || 150
                , factor = percent / 100
                , original = {
                height: elem.height(),
                width: elem.width(),
                outerHeight: elem.outerHeight(),
                outerWidth: elem.outerWidth()
            };
            $.extend(o, {
                effect: "scale",
                queue: false,
                fade: true,
                mode: mode,
                complete: done,
                percent: hide ? percent : 100,
                from: hide ? original : {
                    height: original.height * factor,
                    width: original.width * factor,
                    outerHeight: original.outerHeight * factor,
                    outerWidth: original.outerWidth * factor
                }
            });
            elem.effect(o);
        }
        ;
        $.effects.effect.scale = function(o, done) {
            var el = $(this)
                , options = $.extend(true, {}, o)
                , mode = $.effects.setMode(el, o.mode || "effect")
                , percent = parseInt(o.percent, 10) || (parseInt(o.percent, 10) === 0 ? 0 : (mode === "hide" ? 0 : 100))
                , direction = o.direction || "both"
                , origin = o.origin
                , original = {
                height: el.height(),
                width: el.width(),
                outerHeight: el.outerHeight(),
                outerWidth: el.outerWidth()
            }
                , factor = {
                y: direction !== "horizontal" ? (percent / 100) : 1,
                x: direction !== "vertical" ? (percent / 100) : 1
            };
            options.effect = "size";
            options.queue = false;
            options.complete = done;
            if (mode !== "effect") {
                options.origin = origin || ["middle", "center"];
                options.restore = true;
            }
            options.from = o.from || (mode === "show" ? {
                height: 0,
                width: 0,
                outerHeight: 0,
                outerWidth: 0
            } : original);
            options.to = {
                height: original.height * factor.y,
                width: original.width * factor.x,
                outerHeight: original.outerHeight * factor.y,
                outerWidth: original.outerWidth * factor.x
            };
            if (options.fade) {
                if (mode === "show") {
                    options.from.opacity = 0;
                    options.to.opacity = 1;
                }
                if (mode === "hide") {
                    options.from.opacity = 1;
                    options.to.opacity = 0;
                }
            }
            el.effect(options);
        }
        ;
        $.effects.effect.size = function(o, done) {
            var original, baseline, factor, el = $(this), props0 = ["position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity"], props1 = ["position", "top", "bottom", "left", "right", "overflow", "opacity"], props2 = ["width", "height", "overflow"], cProps = ["fontSize"], vProps = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"], hProps = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"], mode = $.effects.setMode(el, o.mode || "effect"), restore = o.restore || mode !== "effect", scale = o.scale || "both", origin = o.origin || ["middle", "center"], position = el.css("position"), props = restore ? props0 : props1, zero = {
                height: 0,
                width: 0,
                outerHeight: 0,
                outerWidth: 0
            };
            if (mode === "show") {
                el.show();
            }
            original = {
                height: el.height(),
                width: el.width(),
                outerHeight: el.outerHeight(),
                outerWidth: el.outerWidth()
            };
            if (o.mode === "toggle" && mode === "show") {
                el.from = o.to || zero;
                el.to = o.from || original;
            } else {
                el.from = o.from || (mode === "show" ? zero : original);
                el.to = o.to || (mode === "hide" ? zero : original);
            }
            factor = {
                from: {
                    y: el.from.height / original.height,
                    x: el.from.width / original.width
                },
                to: {
                    y: el.to.height / original.height,
                    x: el.to.width / original.width
                }
            };
            if (scale === "box" || scale === "both") {
                if (factor.from.y !== factor.to.y) {
                    props = props.concat(vProps);
                    el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);
                    el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);
                }
                if (factor.from.x !== factor.to.x) {
                    props = props.concat(hProps);
                    el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);
                    el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);
                }
            }
            if (scale === "content" || scale === "both") {
                if (factor.from.y !== factor.to.y) {
                    props = props.concat(cProps).concat(props2);
                    el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);
                    el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);
                }
            }
            $.effects.save(el, props);
            el.show();
            $.effects.createWrapper(el);
            el.css("overflow", "hidden").css(el.from);
            if (origin) {
                baseline = $.effects.getBaseline(origin, original);
                el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;
                el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;
                el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;
                el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;
            }
            el.css(el.from);
            if (scale === "content" || scale === "both") {
                vProps = vProps.concat(["marginTop", "marginBottom"]).concat(cProps);
                hProps = hProps.concat(["marginLeft", "marginRight"]);
                props2 = props0.concat(vProps).concat(hProps);
                el.find("*[width]").each(function() {
                    var child = $(this)
                        , c_original = {
                        height: child.height(),
                        width: child.width(),
                        outerHeight: child.outerHeight(),
                        outerWidth: child.outerWidth()
                    };
                    if (restore) {
                        $.effects.save(child, props2);
                    }
                    child.from = {
                        height: c_original.height * factor.from.y,
                        width: c_original.width * factor.from.x,
                        outerHeight: c_original.outerHeight * factor.from.y,
                        outerWidth: c_original.outerWidth * factor.from.x
                    };
                    child.to = {
                        height: c_original.height * factor.to.y,
                        width: c_original.width * factor.to.x,
                        outerHeight: c_original.height * factor.to.y,
                        outerWidth: c_original.width * factor.to.x
                    };
                    if (factor.from.y !== factor.to.y) {
                        child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);
                        child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);
                    }
                    if (factor.from.x !== factor.to.x) {
                        child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);
                        child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);
                    }
                    child.css(child.from);
                    child.animate(child.to, o.duration, o.easing, function() {
                        if (restore) {
                            $.effects.restore(child, props2);
                        }
                    });
                });
            }
            el.animate(el.to, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function() {
                    if (el.to.opacity === 0) {
                        el.css("opacity", el.from.opacity);
                    }
                    if (mode === "hide") {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    if (!restore) {
                        if (position === "static") {
                            el.css({
                                position: "relative",
                                top: el.to.top,
                                left: el.to.left
                            });
                        } else {
                            $.each(["top", "left"], function(idx, pos) {
                                el.css(pos, function(_, str) {
                                    var val = parseInt(str, 10)
                                        , toRef = idx ? el.to.left : el.to.top;
                                    if (str === "auto") {
                                        return toRef + "px";
                                    }
                                    return val + toRef + "px";
                                });
                            });
                        }
                    }
                    $.effects.removeWrapper(el);
                    done();
                }
            });
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.shake = function(o, done) {
            var el = $(this), props = ["position", "top", "bottom", "left", "right", "height", "width"], mode = $.effects.setMode(el, o.mode || "effect"), direction = o.direction || "left", distance = o.distance || 20, times = o.times || 3, anims = times * 2 + 1, speed = Math.round(o.duration / anims), ref = (direction === "up" || direction === "down") ? "top" : "left", positiveMotion = (direction === "up" || direction === "left"), animation = {}, animation1 = {}, animation2 = {}, i, queue = el.queue(), queuelen = queue.length;
            $.effects.save(el, props);
            el.show();
            $.effects.createWrapper(el);
            animation[ref] = (positiveMotion ? "-=" : "+=") + distance;
            animation1[ref] = (positiveMotion ? "+=" : "-=") + distance * 2;
            animation2[ref] = (positiveMotion ? "-=" : "+=") + distance * 2;
            el.animate(animation, speed, o.easing);
            for (i = 1; i < times; i++) {
                el.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);
            }
            el.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function() {
                if (mode === "hide") {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            });
            if (queuelen > 1) {
                queue.splice.apply(queue, [1, 0].concat(queue.splice(queuelen, anims + 1)));
            }
            el.dequeue();
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.slide = function(o, done) {
            var el = $(this), props = ["position", "top", "bottom", "left", "right", "width", "height"], mode = $.effects.setMode(el, o.mode || "show"), show = mode === "show", direction = o.direction || "left", ref = (direction === "up" || direction === "down") ? "top" : "left", positiveMotion = (direction === "up" || direction === "left"), distance, animation = {};
            $.effects.save(el, props);
            el.show();
            distance = o.distance || el[ref === "top" ? "outerHeight" : "outerWidth"](true);
            $.effects.createWrapper(el).css({
                overflow: "hidden"
            });
            if (show) {
                el.css(ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance);
            }
            animation[ref] = (show ? (positiveMotion ? "+=" : "-=") : (positiveMotion ? "-=" : "+=")) + distance;
            el.animate(animation, {
                queue: false,
                duration: o.duration,
                easing: o.easing,
                complete: function() {
                    if (mode === "hide") {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                }
            });
        }
        ;
    }
)(jQuery);
(function($, undefined) {
        $.effects.effect.transfer = function(o, done) {
            var elem = $(this)
                , target = $(o.to)
                , targetFixed = target.css("position") === "fixed"
                , body = $("body")
                , fixTop = targetFixed ? body.scrollTop() : 0
                , fixLeft = targetFixed ? body.scrollLeft() : 0
                , endPosition = target.offset()
                , animation = {
                top: endPosition.top - fixTop,
                left: endPosition.left - fixLeft,
                height: target.innerHeight(),
                width: target.innerWidth()
            }
                , startPosition = elem.offset()
                , transfer = $('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(o.className).css({
                top: startPosition.top - fixTop,
                left: startPosition.left - fixLeft,
                height: elem.innerHeight(),
                width: elem.innerWidth(),
                position: targetFixed ? "fixed" : "absolute"
            }).animate(animation, o.duration, o.easing, function() {
                transfer.remove();
                done();
            });
        }
        ;
    }
)(jQuery);

jQuery.cookie = function(name, value, options) {
    if (typeof value != 'undefined') {
        options = options || {};
        if (value === null) {
            value = '';
            options.expires = -1;
        }
        var expires = '';
        if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
            var date;
            if (typeof options.expires == 'number') {
                date = new Date();
                date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
            } else {
                date = options.expires;
            }
            expires = '; expires=' + date.toUTCString();
        }
        var path = options.path ? '; path=' + (options.path) : '';
        var domain = options.domain ? '; domain=' + (options.domain) : '';
        var secure = options.secure ? '; secure' : '';
        document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
    } else {
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
}
;

if (window.jQuery && !window.jQuery.createTemplate) {
    (function(jQuery) {
            var Template = function(s, includes, settings) {
                this._tree = [];
                this._param = {};
                this._includes = null;
                this._templates = {};
                this._templates_code = {};
                this.settings = jQuery.extend({
                    disallow_functions: false,
                    filter_data: true,
                    filter_params: false,
                    runnable_functions: false,
                    clone_data: true,
                    clone_params: true
                }, settings);
                this.f_cloneData = (this.settings.f_cloneData !== undefined) ? (this.settings.f_cloneData) : (TemplateUtils.cloneData);
                this.f_escapeString = (this.settings.f_escapeString !== undefined) ? (this.settings.f_escapeString) : (TemplateUtils.escapeHTML);
                this.splitTemplates(s, includes);
                if (s) {
                    this.setTemplate(this._templates_code['MAIN'], includes, this.settings);
                }
                this._templates_code = null;
            };
            Template.prototype.version = '0.7.8';
            Template.DEBUG_MODE = true;
            Template.prototype.splitTemplates = function(s, includes) {
                var reg = /\{#template *(\w*?)( .*)*\}/g;
                var iter, tname, se;
                var lastIndex = null;
                var _template_settings = [];
                while ((iter = reg.exec(s)) != null) {
                    lastIndex = reg.lastIndex;
                    tname = iter[1];
                    se = s.indexOf('{#/template ' + tname + '}', lastIndex);
                    if (se == -1) {
                        throw new Error('jTemplates: Template "' + tname + '" is not closed.');
                    }
                    this._templates_code[tname] = s.substring(lastIndex, se);
                    _template_settings[tname] = TemplateUtils.optionToObject(iter[2]);
                }
                if (lastIndex === null) {
                    this._templates_code['MAIN'] = s;
                    return;
                }
                for (var i in this._templates_code) {
                    if (i != 'MAIN') {
                        this._templates[i] = new Template();
                    }
                }
                for (var i in this._templates_code) {
                    if (i != 'MAIN') {
                        this._templates[i].setTemplate(this._templates_code[i], jQuery.extend({}, includes || {}, this._templates || {}), jQuery.extend({}, this.settings, _template_settings[i]));
                        this._templates_code[i] = null;
                    }
                }
            }
            ;
            Template.prototype.setTemplate = function(s, includes, settings) {
                if (s == undefined) {
                    this._tree.push(new TextNode('',1,this));
                    return;
                }
                s = s.replace(/[\n\r]/g, '');
                s = s.replace(/\{\*.*?\*\}/g, '');
                this._includes = jQuery.extend({}, this._templates || {}, includes || {});
                this.settings = new Object(settings);
                var node = this._tree;
                var op = s.match(/\{#.*?\}/g);
                var ss = 0
                    , se = 0;
                var e;
                var literalMode = 0;
                var elseif_level = 0;
                for (var i = 0, l = (op) ? (op.length) : (0); i < l; ++i) {
                    var this_op = op[i];
                    if (literalMode) {
                        se = s.indexOf('{#/literal}');
                        if (se == -1) {
                            throw new Error("jTemplates: No end of literal.");
                        }
                        if (se > ss) {
                            node.push(new TextNode(s.substring(ss, se),1,this));
                        }
                        ss = se + 11;
                        literalMode = 0;
                        i = jQuery.inArray('{#/literal}', op);
                        continue;
                    }
                    se = s.indexOf(this_op, ss);
                    if (se > ss) {
                        node.push(new TextNode(s.substring(ss, se),literalMode,this));
                    }
                    var ppp = this_op.match(/\{#([\w\/]+).*?\}/);
                    var op_ = RegExp.$1;
                    switch (op_) {
                        case 'elseif':
                            ++elseif_level;
                            node.switchToElse();
                        case 'if':
                            e = new opIF(this_op,node);
                            node.push(e);
                            node = e;
                            break;
                        case 'else':
                            node.switchToElse();
                            break;
                        case '/if':
                            while (elseif_level) {
                                node = node.getParent();
                                --elseif_level;
                            }
                        case '/for':
                        case '/foreach':
                            node = node.getParent();
                            break;
                        case 'foreach':
                            e = new opFOREACH(this_op,node,this);
                            node.push(e);
                            node = e;
                            break;
                        case 'for':
                            e = opFORFactory(this_op, node, this);
                            node.push(e);
                            node = e;
                            break;
                        case 'continue':
                        case 'break':
                            node.push(new JTException(op_));
                            break;
                        case 'include':
                            node.push(new Include(this_op,this._includes));
                            break;
                        case 'param':
                            node.push(new UserParam(this_op));
                            break;
                        case 'cycle':
                            node.push(new Cycle(this_op));
                            break;
                        case 'ldelim':
                            node.push(new TextNode('{',1,this));
                            break;
                        case 'rdelim':
                            node.push(new TextNode('}',1,this));
                            break;
                        case 'literal':
                            literalMode = 1;
                            break;
                        case '/literal':
                            if (Template.DEBUG_MODE) {
                                throw new Error("jTemplates: Missing begin of literal.");
                            }
                            break;
                        default:
                            if (Template.DEBUG_MODE) {
                                throw new Error('jTemplates: unknown tag: ' + op_ + '.');
                            }
                    }
                    ss = se + this_op.length;
                }
                if (s.length > ss) {
                    node.push(new TextNode(s.substr(ss),literalMode,this));
                }
            }
            ;
            Template.prototype.get = function(d, param, element, deep) {
                ++deep;
                var $T = d, _param1, _param2;
                if (this.settings.clone_data) {
                    $T = this.f_cloneData(d, {
                        escapeData: (this.settings.filter_data && deep == 1),
                        noFunc: this.settings.disallow_functions
                    }, this.f_escapeString);
                }
                if (!this.settings.clone_params) {
                    _param1 = this._param;
                    _param2 = param;
                } else {
                    _param1 = this.f_cloneData(this._param, {
                        escapeData: (this.settings.filter_params),
                        noFunc: false
                    }, this.f_escapeString);
                    _param2 = this.f_cloneData(param, {
                        escapeData: (this.settings.filter_params && deep == 1),
                        noFunc: false
                    }, this.f_escapeString);
                }
                var $P = jQuery.extend({}, _param1, _param2);
                var $Q = (element != undefined) ? (element) : ({});
                $Q.version = this.version;
                var ret = '';
                for (var i = 0, l = this._tree.length; i < l; ++i) {
                    ret += this._tree[i].get($T, $P, $Q, deep);
                }
                --deep;
                return ret;
            }
            ;
            Template.prototype.setParam = function(name, value) {
                this._param[name] = value;
            }
            ;
            var TemplateUtils = function() {};
            TemplateUtils.escapeHTML = function(txt) {
                return txt.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
            }
            ;
            TemplateUtils.cloneData = function(d, filter, f_escapeString) {
                if (d == null) {
                    return d;
                }
                switch (d.constructor) {
                    case Object:
                        var o = {};
                        for (var i in d) {
                            o[i] = TemplateUtils.cloneData(d[i], filter, f_escapeString);
                        }
                        if (!filter.noFunc) {
                            if (d.hasOwnProperty("toString"))
                                o.toString = d.toString;
                        }
                        return o;
                    case Array:
                        var o = [];
                        for (var i = 0, l = d.length; i < l; ++i) {
                            o[i] = TemplateUtils.cloneData(d[i], filter, f_escapeString);
                        }
                        return o;
                    case String:
                        return (filter.escapeData) ? (f_escapeString(d)) : (d);
                    case Function:
                        if (filter.noFunc) {
                            if (Template.DEBUG_MODE)
                                throw new Error("jTemplates: Functions are not allowed.");
                            else
                                return undefined;
                        }
                    default:
                        return d;
                }
            }
            ;
            TemplateUtils.optionToObject = function(optionText) {
                if (optionText === null || optionText === undefined) {
                    return {};
                }
                var o = optionText.split(/[= ]/);
                if (o[0] === '') {
                    o.shift();
                }
                var obj = {};
                for (var i = 0, l = o.length; i < l; i += 2) {
                    obj[o[i]] = o[i + 1];
                }
                return obj;
            }
            ;
            var TextNode = function(val, literalMode, template) {
                this._value = val;
                this._literalMode = literalMode;
                this._template = template;
            };
            TextNode.prototype.get = function(d, param, element, deep) {
                var __t = this._value;
                if (!this._literalMode) {
                    var __template = this._template;
                    var $T = d;
                    var $P = param;
                    var $Q = element;
                    __t = __t.replace(/\{(.*?)\}/g, function(__0, __1) {
                        try {
                            var __tmp = eval(__1);
                            if (typeof __tmp == 'function') {
                                if (__template.settings.disallow_functions || !__template.settings.runnable_functions) {
                                    return '';
                                } else {
                                    __tmp = __tmp($T, $P, $Q);
                                }
                            }
                            return (__tmp === undefined) ? ("") : (String(__tmp));
                        } catch (e) {
                            if (Template.DEBUG_MODE) {
                                if (e instanceof JTException)
                                    e.type = "subtemplate";
                                throw e;
                            }
                            return "";
                        }
                    });
                }
                return __t;
            }
            ;
            var opIF = function(oper, par) {
                this._parent = par;
                oper.match(/\{#(?:else)*if (.*?)\}/);
                this._cond = RegExp.$1;
                this._onTrue = [];
                this._onFalse = [];
                this._currentState = this._onTrue;
            };
            opIF.prototype.push = function(e) {
                this._currentState.push(e);
            }
            ;
            opIF.prototype.getParent = function() {
                return this._parent;
            }
            ;
            opIF.prototype.switchToElse = function() {
                this._currentState = this._onFalse;
            }
            ;
            opIF.prototype.get = function(d, param, element, deep) {
                var $T = d;
                var $P = param;
                var $Q = element;
                var ret = '';
                try {
                    var tab = (eval(this._cond)) ? (this._onTrue) : (this._onFalse);
                    for (var i = 0, l = tab.length; i < l; ++i) {
                        ret += tab[i].get(d, param, element, deep);
                    }
                } catch (e) {
                    if (Template.DEBUG_MODE || (e instanceof JTException))
                        throw e;
                }
                return ret;
            }
            ;
            opFORFactory = function(oper, par, template) {
                if (oper.match(/\{#for (\w+?) *= *(\S+?) +to +(\S+?) *(?:step=(\S+?))*\}/)) {
                    oper = '{#foreach opFORFactory.funcIterator as ' + RegExp.$1 + ' begin=' + (RegExp.$2 || 0) + ' end=' + (RegExp.$3 || -1) + ' step=' + (RegExp.$4 || 1) + ' extData=$T}';
                    return new opFOREACH(oper,par,template);
                } else {
                    throw new Error('jTemplates: Operator failed "find": ' + oper);
                }
            }
            ;
            opFORFactory.funcIterator = function(i) {
                return i;
            }
            ;
            var opFOREACH = function(oper, par, template) {
                this._parent = par;
                this._template = template;
                oper.match(/\{#foreach (.+?) as (\w+?)( .+)*\}/);
                this._arg = RegExp.$1;
                this._name = RegExp.$2;
                this._option = RegExp.$3 || null;
                this._option = TemplateUtils.optionToObject(this._option);
                this._onTrue = [];
                this._onFalse = [];
                this._currentState = this._onTrue;
            };
            opFOREACH.prototype.push = function(e) {
                this._currentState.push(e);
            }
            ;
            opFOREACH.prototype.getParent = function() {
                return this._parent;
            }
            ;
            opFOREACH.prototype.switchToElse = function() {
                this._currentState = this._onFalse;
            }
            ;
            opFOREACH.prototype.get = function(d, param, element, deep) {
                try {
                    var $T = d;
                    var $P = param;
                    var $Q = element;
                    var fcount = eval(this._arg);
                    var key = [];
                    var mode = typeof fcount;
                    if (mode == 'object') {
                        var arr = [];
                        jQuery.each(fcount, function(k, v) {
                            key.push(k);
                            arr.push(v);
                        });
                        fcount = arr;
                    }
                    var extData = (this._option.extData !== undefined) ? (eval(this._option.extData)) : (($T != null) ? ($T) : ({}));
                    var s = Number(eval(this._option.begin) || 0), e;
                    var step = Number(eval(this._option.step) || 1);
                    if (mode != 'function') {
                        e = fcount.length;
                    } else {
                        if (this._option.end === undefined || this._option.end === null) {
                            e = Number.MAX_VALUE;
                        } else {
                            e = Number(eval(this._option.end)) + ((step > 0) ? (1) : (-1));
                        }
                    }
                    var ret = '';
                    var i, l;
                    if (this._option.count) {
                        var tmp = s + Number(eval(this._option.count));
                        e = (tmp > e) ? (e) : (tmp);
                    }
                    if ((e > s && step > 0) || (e < s && step < 0)) {
                        var iteration = 0;
                        var _total = (mode != 'function') ? (Math.ceil((e - s) / step)) : undefined;
                        var ckey, cval;
                        for (; ((step > 0) ? (s < e) : (s > e)); s += step,
                            ++iteration) {
                            ckey = key[s];
                            if (mode != 'function') {
                                cval = fcount[s];
                            } else {
                                cval = fcount(s);
                                if (cval === undefined || cval === null) {
                                    break;
                                }
                            }
                            if ((typeof cval == 'function') && (this._template.settings.disallow_functions || !this._template.settings.runnable_functions)) {
                                continue;
                            }
                            if ((mode == 'object') && (ckey in Object)) {
                                continue;
                            }
                            var prevValue = extData[this._name];
                            extData[this._name] = cval;
                            extData[this._name + '$index'] = s;
                            extData[this._name + '$iteration'] = iteration;
                            extData[this._name + '$first'] = (iteration == 0);
                            extData[this._name + '$last'] = (s + step >= e);
                            extData[this._name + '$total'] = _total;
                            extData[this._name + '$key'] = (ckey !== undefined && ckey.constructor == String) ? (this._template.f_escapeString(ckey)) : (ckey);
                            extData[this._name + '$typeof'] = typeof cval;
                            for (i = 0,
                                     l = this._onTrue.length; i < l; ++i) {
                                try {
                                    ret += this._onTrue[i].get(extData, param, element, deep);
                                } catch (ex) {
                                    if (ex instanceof JTException) {
                                        switch (ex.type) {
                                            case 'continue':
                                                i = l;
                                                break;
                                            case 'break':
                                                i = l;
                                                s = e;
                                                break;
                                            default:
                                                throw e;
                                        }
                                    } else {
                                        throw e;
                                    }
                                }
                            }
                            delete extData[this._name + '$index'];
                            delete extData[this._name + '$iteration'];
                            delete extData[this._name + '$first'];
                            delete extData[this._name + '$last'];
                            delete extData[this._name + '$total'];
                            delete extData[this._name + '$key'];
                            delete extData[this._name + '$typeof'];
                            delete extData[this._name];
                            extData[this._name] = prevValue;
                        }
                    } else {
                        for (i = 0,
                                 l = this._onFalse.length; i < l; ++i) {
                            ret += this._onFalse[i].get($T, param, element, deep);
                        }
                    }
                    return ret;
                } catch (e) {
                    if (Template.DEBUG_MODE || (e instanceof JTException))
                        throw e;
                    return "";
                }
            }
            ;
            var JTException = function(type) {
                this.type = type;
            };
            JTException.prototype = Error;
            JTException.prototype.get = function(d) {
                throw this;
            }
            ;
            var Include = function(oper, includes) {
                oper.match(/\{#include (.*?)(?: root=(.*?))?\}/);
                this._template = includes[RegExp.$1];
                if (this._template == undefined) {
                    if (Template.DEBUG_MODE)
                        throw new Error('jTemplates: Cannot find include: ' + RegExp.$1);
                }
                this._root = RegExp.$2;
            };
            Include.prototype.get = function(d, param, element, deep) {
                var $T = d;
                var $P = param;
                try {
                    return this._template.get(eval(this._root), param, element, deep);
                } catch (e) {
                    if (Template.DEBUG_MODE || (e instanceof JTException))
                        throw e;
                }
                return '';
            }
            ;
            var UserParam = function(oper) {
                oper.match(/\{#param name=(\w*?) value=(.*?)\}/);
                this._name = RegExp.$1;
                this._value = RegExp.$2;
            };
            UserParam.prototype.get = function(d, param, element, deep) {
                var $T = d;
                var $P = param;
                var $Q = element;
                try {
                    param[this._name] = eval(this._value);
                } catch (e) {
                    if (Template.DEBUG_MODE || (e instanceof JTException))
                        throw e;
                    param[this._name] = undefined;
                }
                return '';
            }
            ;
            var Cycle = function(oper) {
                oper.match(/\{#cycle values=(.*?)\}/);
                this._values = eval(RegExp.$1);
                this._length = this._values.length;
                if (this._length <= 0) {
                    throw new Error('jTemplates: cycle has no elements');
                }
                this._index = 0;
                this._lastSessionID = -1;
            };
            Cycle.prototype.get = function(d, param, element, deep) {
                var sid = jQuery.data(element, 'jTemplateSID');
                if (sid != this._lastSessionID) {
                    this._lastSessionID = sid;
                    this._index = 0;
                }
                var i = this._index++ % this._length;
                return this._values[i];
            }
            ;
            jQuery.fn.setTemplate = function(s, includes, settings) {
                if (s.constructor === Template) {
                    return jQuery(this).each(function() {
                        jQuery.data(this, 'jTemplate', s);
                        jQuery.data(this, 'jTemplateSID', 0);
                    });
                } else {
                    return jQuery(this).each(function() {
                        jQuery.data(this, 'jTemplate', new Template(s,includes,settings));
                        jQuery.data(this, 'jTemplateSID', 0);
                    });
                }
            }
            ;
            jQuery.fn.setTemplateURL = function(url_, includes, settings) {
                var s = jQuery.ajax({
                    url: url_,
                    async: false
                }).responseText;
                return jQuery(this).setTemplate(s, includes, settings);
            }
            ;
            jQuery.fn.setTemplateElement = function(elementName, includes, settings) {
                var s = jQuery('#' + elementName).val();
                if (s == null) {
                    s = jQuery('#' + elementName).html();
                    s = s.replace(/&lt;/g, "<").replace(/&gt;/g, ">");
                }
                s = jQuery.trim(s);
                s = s.replace(/^<\!\[CDATA\[([\s\S]*)\]\]>$/im, '$1');
                s = s.replace(/^<\!--([\s\S]*)-->$/im, '$1');
                return jQuery(this).setTemplate(s, includes, settings);
            }
            ;
            jQuery.fn.hasTemplate = function() {
                var count = 0;
                jQuery(this).each(function() {
                    if (jQuery.getTemplate(this)) {
                        ++count;
                    }
                });
                return count;
            }
            ;
            jQuery.fn.removeTemplate = function() {
                jQuery(this).processTemplateStop();
                return jQuery(this).each(function() {
                    jQuery.removeData(this, 'jTemplate');
                });
            }
            ;
            jQuery.fn.setParam = function(name, value) {
                return jQuery(this).each(function() {
                    var t = jQuery.getTemplate(this);
                    if (t === undefined) {
                        if (Template.DEBUG_MODE)
                            throw new Error('jTemplates: Template is not defined.');
                        else
                            return;
                    }
                    t.setParam(name, value);
                });
            }
            ;
            jQuery.fn.processTemplate = function(d, param) {
                return jQuery(this).each(function() {
                    var t = jQuery.getTemplate(this);
                    if (t === undefined) {
                        if (Template.DEBUG_MODE)
                            throw new Error('jTemplates: Template is not defined.');
                        else
                            return;
                    }
                    jQuery.data(this, 'jTemplateSID', jQuery.data(this, 'jTemplateSID') + 1);
                    jQuery(this).html(t.get(d, param, this, 0));
                });
            }
            ;
            jQuery.fn.processTemplateURL = function(url_, param, options) {
                var that = this;
                options = jQuery.extend({
                    type: 'GET',
                    async: true,
                    cache: false
                }, options);
                jQuery.ajax({
                    url: url_,
                    type: options.type,
                    data: options.data,
                    dataFilter: options.dataFilter,
                    async: options.async,
                    cache: options.cache,
                    timeout: options.timeout,
                    dataType: 'json',
                    success: function(d) {
                        var r = jQuery(that).processTemplate(d, param);
                        if (options.on_success) {
                            options.on_success(r);
                        }
                    },
                    error: options.on_error,
                    complete: options.on_complete
                });
                return this;
            }
            ;
            var Updater = function(url, param, interval, args, objs, options) {
                this._url = url;
                this._param = param;
                this._interval = interval;
                this._args = args;
                this.objs = objs;
                this.timer = null;
                this._options = options || {};
                var that = this;
                jQuery(objs).each(function() {
                    jQuery.data(this, 'jTemplateUpdater', that);
                });
                this.run();
            };
            Updater.prototype.run = function() {
                this.detectDeletedNodes();
                if (this.objs.length == 0) {
                    return;
                }
                var that = this;
                jQuery.getJSON(this._url, this._args, function(d) {
                    var r = jQuery(that.objs).processTemplate(d, that._param);
                    if (that._options.on_success) {
                        that._options.on_success(r);
                    }
                });
                this.timer = setTimeout(function() {
                    that.run();
                }, this._interval);
            }
            ;
            Updater.prototype.detectDeletedNodes = function() {
                this.objs = jQuery.grep(this.objs, function(o) {
                    if (jQuery.browser.msie) {
                        var n = o.parentNode;
                        while (n && n != document) {
                            n = n.parentNode;
                        }
                        return n != null;
                    } else {
                        return o.parentNode != null;
                    }
                });
            }
            ;
            jQuery.fn.processTemplateStart = function(url, param, interval, args, options) {
                return new Updater(url,param,interval,args,this,options);
            }
            ;
            jQuery.fn.processTemplateStop = function() {
                return jQuery(this).each(function() {
                    var updater = jQuery.data(this, 'jTemplateUpdater');
                    if (updater == null) {
                        return;
                    }
                    var that = this;
                    updater.objs = jQuery.grep(updater.objs, function(o) {
                        return o != that;
                    });
                    jQuery.removeData(this, 'jTemplateUpdater');
                });
            }
            ;
            jQuery.extend({
                createTemplate: function(s, includes, settings) {
                    return new Template(s,includes,settings);
                },
                createTemplateURL: function(url_, includes, settings) {
                    var s = jQuery.ajax({
                        url: url_,
                        async: false
                    }).responseText;
                    return new Template(s,includes,settings);
                },
                getTemplate: function(element) {
                    return jQuery.data(element, 'jTemplate');
                },
                processTemplateToText: function(template, data, parameter) {
                    return template.get(data, parameter, undefined, 0);
                },
                jTemplatesDebugMode: function(value) {
                    Template.DEBUG_MODE = value;
                }
            });
        }
    )(jQuery);
}

(function(factory) {
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory;
    } else {
        factory(jQuery);
    }
}(function($) {
    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'], toBind = ('onwheel'in document || document.documentMode >= 9) ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'], slice = Array.prototype.slice, nullLowestDeltaTimeout, lowestDelta;
    if ($.event.fixHooks) {
        for (var i = toFix.length; i; ) {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }
    }
    var special = $.event.special.mousewheel = {
        version: '3.1.12',
        setup: function() {
            if (this.addEventListener) {
                for (var i = toBind.length; i; ) {
                    this.addEventListener(toBind[--i], handler, {
                        passive: false
                    });
                }
            } else {
                this.onmousewheel = handler;
            }
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },
        teardown: function() {
            if (this.removeEventListener) {
                for (var i = toBind.length; i; ) {
                    this.removeEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = null;
            }
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },
        getLineHeight: function(elem) {
            var $elem = $(elem)
                , $parent = $elem['offsetParent'in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },
        getPageHeight: function(elem) {
            return $(elem).height();
        },
        settings: {
            adjustOldDeltas: true,
            normalizeOffset: true
        }
    };
    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },
        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });
    function handler(event) {
        var orgEvent = event || window.event
            , args = slice.call(arguments, 1)
            , delta = 0
            , deltaX = 0
            , deltaY = 0
            , absDelta = 0
            , offsetX = 0
            , offsetY = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';
        if ('detail'in orgEvent) {
            deltaY = orgEvent.detail * -1;
        }
        if ('wheelDelta'in orgEvent) {
            deltaY = orgEvent.wheelDelta;
        }
        if ('wheelDeltaY'in orgEvent) {
            deltaY = orgEvent.wheelDeltaY;
        }
        if ('wheelDeltaX'in orgEvent) {
            deltaX = orgEvent.wheelDeltaX * -1;
        }
        if ('axis'in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }
        delta = deltaY === 0 ? deltaX : deltaY;
        if ('deltaY'in orgEvent) {
            deltaY = orgEvent.deltaY * -1;
            delta = deltaY;
        }
        if ('deltaX'in orgEvent) {
            deltaX = orgEvent.deltaX;
            if (deltaY === 0) {
                delta = deltaX * -1;
            }
        }
        if (deltaY === 0 && deltaX === 0) {
            return;
        }
        if (orgEvent.deltaMode === 1) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if (orgEvent.deltaMode === 2) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }
        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if (!lowestDelta || absDelta < lowestDelta) {
            lowestDelta = absDelta;
            if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                lowestDelta /= 40;
            }
        }
        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
            delta /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }
        delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
        deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
        deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);
        if (special.settings.normalizeOffset && this.getBoundingClientRect) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        event.deltaMode = 0;
        args.unshift(event, delta, deltaX, deltaY);
        if (nullLowestDeltaTimeout) {
            clearTimeout(nullLowestDeltaTimeout);
        }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);
        return ($.event.dispatch || $.event.handle).apply(this, args);
    }
    function nullLowestDelta() {
        lowestDelta = null;
    }
    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }
}));
;(function($) {
        if (/1\.(0|1|2)\.(0|1|2)/.test($.fn.jquery) || /^1.1/.test($.fn.jquery)) {
            alert('blockUI requires jQuery v1.2.3 or later!  You are using v' + $.fn.jquery);
            return;
        }
        $.fn._fadeIn = $.fn.fadeIn;
        var noOp = function() {};
        var mode = document.documentMode || 0;
        var setExpr = $.browser.msie && (($.browser.version < 8 && !mode) || mode < 8);
        var ie6 = $.browser.msie && /MSIE 6.0/.test(navigator.userAgent) && !mode;
        $.blockUI = function(opts) {
            install(window, opts);
        }
        ;
        $.unblockUI = function(opts) {
            remove(window, opts);
        }
        ;
        $.growlUI = function(title, message, timeout, onClose) {
            var $m = $('<div class="growlUI"></div>');
            if (title)
                $m.append('<h1>' + title + '</h1>');
            if (message)
                $m.append('<h2>' + message + '</h2>');
            if (timeout == undefined)
                timeout = 3000;
            $.blockUI({
                message: $m,
                fadeIn: 700,
                fadeOut: 1000,
                centerY: false,
                timeout: timeout,
                showOverlay: false,
                onUnblock: onClose,
                css: $.blockUI.defaults.growlCSS
            });
        }
        ;
        $.fn.block = function(opts) {
            return this.unblock({
                fadeOut: 0
            }).each(function() {
                if ($.css(this, 'position') == 'static')
                    this.style.position = 'relative';
                if ($.browser.msie)
                    this.style.zoom = 1;
                install(this, opts);
            });
        }
        ;
        $.fn.unblock = function(opts) {
            return this.each(function() {
                remove(this, opts);
            });
        }
        ;
        $.blockUI.version = 2.33;
        $.blockUI.defaults = {
            message: '<h1>Please wait...</h1>',
            title: null,
            draggable: true,
            theme: false,
            css: {
                padding: 0,
                margin: 0,
                width: '30%',
                top: '40%',
                left: '35%',
                textAlign: 'center',
                color: '#000',
                border: '3px solid #aaa',
                backgroundColor: '#fff',
                cursor: 'wait'
            },
            themedCSS: {
                width: '30%',
                top: '40%',
                left: '35%'
            },
            overlayCSS: {
                backgroundColor: '#000',
                opacity: 0.6,
                cursor: 'wait'
            },
            growlCSS: {
                width: '350px',
                top: '10px',
                left: '',
                right: '10px',
                border: 'none',
                padding: '5px',
                opacity: 0.6,
                cursor: 'default',
                color: '#fff',
                backgroundColor: '#000',
                '-webkit-border-radius': '10px',
                '-moz-border-radius': '10px',
                'border-radius': '10px'
            },
            iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank',
            forceIframe: false,
            baseZ: 1000,
            centerX: true,
            centerY: true,
            allowBodyStretch: true,
            bindEvents: true,
            constrainTabKey: true,
            fadeIn: 200,
            fadeOut: 400,
            timeout: 0,
            showOverlay: true,
            focusInput: true,
            applyPlatformOpacityRules: true,
            onBlock: null,
            onUnblock: null,
            quirksmodeOffsetHack: 4
        };
        var pageBlock = null;
        var pageBlockEls = [];
        function install(el, opts) {
            var full = (el == window);
            var msg = opts && opts.message !== undefined ? opts.message : undefined;
            opts = $.extend({}, $.blockUI.defaults, opts || {});
            opts.overlayCSS = $.extend({}, $.blockUI.defaults.overlayCSS, opts.overlayCSS || {});
            var css = $.extend({}, $.blockUI.defaults.css, opts.css || {});
            var themedCSS = $.extend({}, $.blockUI.defaults.themedCSS, opts.themedCSS || {});
            msg = msg === undefined ? opts.message : msg;
            if (full && pageBlock)
                remove(window, {
                    fadeOut: 0
                });
            if (msg && typeof msg != 'string' && (msg.parentNode || msg.jquery)) {
                var node = msg.jquery ? msg[0] : msg;
                var data = {};
                $(el).data('blockUI.history', data);
                data.el = node;
                data.parent = node.parentNode;
                data.display = node.style.display;
                data.position = node.style.position;
                if (data.parent)
                    data.parent.removeChild(node);
            }
            var z = opts.baseZ;
            var lyr1 = ($.browser.msie || opts.forceIframe) ? $('<iframe class="blockUI" style="z-index:' + (z++) + ';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="' + opts.iframeSrc + '"></iframe>') : $('<div class="blockUI" style="display:none"></div>');
            var lyr2 = $('<div class="blockUI blockOverlay" style="z-index:' + (z++) + ';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"></div>');
            var lyr3, s;
            if (opts.theme && full) {
                s = '<div class="blockUI blockMsg blockPage ui-dialog ui-widget ui-corner-all" style="z-index:' + z + ';display:none;position:fixed">' + '<div class="ui-widget-header ui-dialog-titlebar blockTitle">' + (opts.title || '&nbsp;') + '</div>' + '<div class="ui-widget-content ui-dialog-content"></div>' + '</div>';
            } else if (opts.theme) {
                s = '<div class="blockUI blockMsg blockElement ui-dialog ui-widget ui-corner-all" style="z-index:' + z + ';display:none;position:absolute">' + '<div class="ui-widget-header ui-dialog-titlebar blockTitle">' + (opts.title || '&nbsp;') + '</div>' + '<div class="ui-widget-content ui-dialog-content"></div>' + '</div>';
            } else if (full) {
                s = '<div class="blockUI blockMsg blockPage" style="z-index:' + z + ';display:none;position:fixed"></div>';
            } else {
                s = '<div class="blockUI blockMsg blockElement" style="z-index:' + z + ';display:none;position:absolute"></div>';
            }
            lyr3 = $(s);
            if (msg) {
                if (opts.theme) {
                    lyr3.css(themedCSS);
                    lyr3.addClass('ui-widget-content');
                } else
                    lyr3.css(css);
            }
            if (!opts.applyPlatformOpacityRules || !($.browser.mozilla && /Linux/.test(navigator.platform)))
                lyr2.css(opts.overlayCSS);
            lyr2.css('position', full ? 'fixed' : 'absolute');
            if ($.browser.msie || opts.forceIframe)
                lyr1.css('opacity', 0.0);
            var layers = [lyr1, lyr2, lyr3]
                , $par = full ? $.body : $(el);
            $.each(layers, function() {
                this.appendTo($par);
            });
            if (opts.theme && opts.draggable && $.fn.draggable) {
                lyr3.draggable({
                    handle: '.ui-dialog-titlebar',
                    cancel: 'li'
                });
            }
            var expr = setExpr && (!$.boxModel || $('object,embed', full ? null : el).length > 0);
            if (ie6 || expr) {
                if (full && opts.allowBodyStretch && $.boxModel)
                    $('html,body').css('height', '100%');
                if ((ie6 || !$.boxModel) && !full) {
                    var t = sz(el, 'borderTopWidth')
                        , l = sz(el, 'borderLeftWidth');
                    var fixT = t ? '(0 - ' + t + ')' : 0;
                    var fixL = l ? '(0 - ' + l + ')' : 0;
                }
                $.each([lyr1, lyr2, lyr3], function(i, o) {
                    var s = o[0].style;
                    s.position = 'absolute';
                    if (i < 2) {
                        full ? s.setExpression('height', 'Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.boxModel?0:' + opts.quirksmodeOffsetHack + ') + "px"') : s.setExpression('height', 'this.parentNode.offsetHeight + "px"');
                        full ? s.setExpression('width', 'jQuery.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"') : s.setExpression('width', 'this.parentNode.offsetWidth + "px"');
                        if (fixL)
                            s.setExpression('left', fixL);
                        if (fixT)
                            s.setExpression('top', fixT);
                    } else if (opts.centerY) {
                        if (full)
                            s.setExpression('top', '(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"');
                        s.marginTop = 0;
                    } else if (!opts.centerY && full) {
                        var top = (opts.css && opts.css.top) ? parseInt(opts.css.top) : 0;
                        var expression = '((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + ' + top + ') + "px"';
                        s.setExpression('top', expression);
                    }
                });
            }
            if (msg) {
                if (opts.theme)
                    lyr3.find('.ui-widget-content').append(msg);
                else
                    lyr3.append(msg);
                if (msg.jquery || msg.nodeType)
                    $(msg).show();
            }
            if (($.browser.msie || opts.forceIframe) && opts.showOverlay)
                lyr1.show();
            if (opts.fadeIn) {
                var cb = opts.onBlock ? opts.onBlock : noOp;
                var cb1 = (opts.showOverlay && !msg) ? cb : noOp;
                var cb2 = msg ? cb : noOp;
                if (opts.showOverlay)
                    lyr2._fadeIn(opts.fadeIn, cb1);
                if (msg)
                    lyr3._fadeIn(opts.fadeIn, cb2);
            } else {
                if (opts.showOverlay)
                    lyr2.show();
                if (msg)
                    lyr3.show();
                if (opts.onBlock)
                    opts.onBlock();
            }
            bind(1, el, opts);
            if (full) {
                pageBlock = lyr3[0];
                pageBlockEls = $(':input:enabled:visible', pageBlock);
                if (opts.focusInput)
                    setTimeout(focus, 20);
            } else
                center(lyr3[0], opts.centerX, opts.centerY);
            if (opts.timeout) {
                var to = setTimeout(function() {
                    full ? $.unblockUI(opts) : $(el).unblock(opts);
                }, opts.timeout);
                $(el).data('blockUI.timeout', to);
            }
        }
        ;function remove(el, opts) {
            var full = (el == window);
            var $el = $(el);
            var data = $el.data('blockUI.history');
            var to = $el.data('blockUI.timeout');
            if (to) {
                clearTimeout(to);
                $el.removeData('blockUI.timeout');
            }
            opts = $.extend({}, $.blockUI.defaults, opts || {});
            bind(0, el, opts);
            var els;
            if (full)
                els = $.body.children().filter('.blockUI').add('body > .blockUI');
            else
                els = $('.blockUI', el);
            if (full)
                pageBlock = pageBlockEls = null;
            if (opts.fadeOut) {
                els.fadeOut(opts.fadeOut);
                setTimeout(function() {
                    reset(els, data, opts, el);
                }, opts.fadeOut);
            } else
                reset(els, data, opts, el);
        }
        ;function reset(els, data, opts, el) {
            els.each(function(i, o) {
                if (this.parentNode)
                    this.parentNode.removeChild(this);
            });
            if (data && data.el) {
                data.el.style.display = data.display;
                data.el.style.position = data.position;
                if (data.parent)
                    data.parent.appendChild(data.el);
                $(el).removeData('blockUI.history');
            }
            if (typeof opts.onUnblock == 'function')
                opts.onUnblock(el, opts);
        }
        ;function bind(b, el, opts) {
            var full = el == window
                , $el = $(el);
            if (!b && (full && !pageBlock || !full && !$el.data('blockUI.isBlocked')))
                return;
            if (!full)
                $el.data('blockUI.isBlocked', b);
            if (!opts.bindEvents || (b && !opts.showOverlay))
                return;
            var events = 'mousedown mouseup keydown keypress';
            b ? $.document.bind(events, opts, handler) : $.document.unbind(events, handler);
        }
        ;function handler(e) {
            if (e.keyCode && e.keyCode == 9) {
                if (pageBlock && e.data.constrainTabKey) {
                    var els = pageBlockEls;
                    var fwd = !e.shiftKey && e.target == els[els.length - 1];
                    var back = e.shiftKey && e.target == els[0];
                    if (fwd || back) {
                        setTimeout(function() {
                            focus(back)
                        }, 10);
                        return false;
                    }
                }
            }
            if ($(e.target).parents('div.blockMsg').length > 0)
                return true;
            return $(e.target).parents().children().filter('div.blockUI').length == 0;
        }
        ;function focus(back) {
            if (!pageBlockEls)
                return;
            var e = pageBlockEls[back === true ? pageBlockEls.length - 1 : 0];
            if (e)
                e.focus();
        }
        ;function center(el, x, y) {
            var p = el.parentNode
                , s = el.style;
            var l = ((p.offsetWidth - el.offsetWidth) / 2) - sz(p, 'borderLeftWidth');
            var t = ((p.offsetHeight - el.offsetHeight) / 2) - sz(p, 'borderTopWidth');
            if (x)
                s.left = l > 0 ? (l + 'px') : '0';
            if (y)
                s.top = t > 0 ? (t + 'px') : '0';
        }
        ;function sz(el, p) {
            return parseInt($.css(el, p)) || 0;
        }
        ;
    }
)(jQuery);

(function($) {
        $.fn.bgIframe = $.fn.bgiframe = function(s) {
            if ($.browser.msie && parseInt($.browser.version) <= 6) {
                s = $.extend({
                    top: 'auto',
                    left: 'auto',
                    width: 'auto',
                    height: 'auto',
                    opacity: true,
                    src: 'javascript:false;'
                }, s || {});
                var prop = function(n) {
                    return n && n.constructor == Number ? n + 'px' : n;
                }
                    , html = '<iframe class="bgiframe"frameborder="0"tabindex="-1"src="' + s.src + '"' + 'style="display:block;position:absolute;z-index:-1;' + (s.opacity !== false ? 'filter:Alpha(Opacity=\'0\');' : '') + 'top:' + (s.top == 'auto' ? 'expression(((parseInt(this.parentNode.currentStyle.borderTopWidth)||0)*-1)+\'px\')' : prop(s.top)) + ';' + 'left:' + (s.left == 'auto' ? 'expression(((parseInt(this.parentNode.currentStyle.borderLeftWidth)||0)*-1)+\'px\')' : prop(s.left)) + ';' + 'width:' + (s.width == 'auto' ? 'expression(this.parentNode.offsetWidth+\'px\')' : prop(s.width)) + ';' + 'height:' + (s.height == 'auto' ? 'expression(this.parentNode.offsetHeight+\'px\')' : prop(s.height)) + ';' + '"/>';
                return this.each(function() {
                    if ($('> iframe.bgiframe', this).length == 0)
                        this.insertBefore(document.createElement(html), this.firstChild);
                });
            }
            return this;
        }
        ;
        if (!$.browser.version)
            $.browser.version = navigator.userAgent.toLowerCase().match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/)[1];
    }
)(jQuery);
;(function($) {
        $.each({
            focus: 'focusin',
            blur: 'focusout'
        }, function(original, fix) {
            $.event.special[fix] = {
                setup: function() {
                    if ($.browser.msie)
                        return false;
                    this.addEventListener(original, $.event.special[fix].handler, true);
                },
                teardown: function() {
                    if ($.browser.msie)
                        return false;
                    this.removeEventListener(original, $.event.special[fix].handler, true);
                },
                handler: function(e) {
                    arguments[0] = $.event.fix(e);
                    arguments[0].type = fix;
                    return $.event.handle.apply(this, arguments);
                }
            };
        });
        $.extend($.fn, {
            delegate: function(type, delegate, handler) {
                return this.bind(type, function(event) {
                    var target = $(event.target);
                    if (target.is(delegate)) {
                        return handler.apply(target, arguments);
                    }
                });
            },
            triggerEvent: function(type, target) {
                return this.triggerHandler(type, [jQuery.event.fix({
                    type: type,
                    target: target
                })]);
            }
        })
    }
)(jQuery);

jQuery.fn.extend({
    everyTime: function(interval, label, fn, times) {
        return this.each(function() {
            jQuery.timer.add(this, interval, label, fn, times);
        });
    },
    oneTime: function(interval, label, fn) {
        return this.each(function() {
            jQuery.timer.add(this, interval, label, fn, 1);
        });
    },
    stopTime: function(label, fn) {
        return this.each(function() {
            jQuery.timer.remove(this, label, fn);
        });
    }
});
jQuery.extend({
    timer: {
        global: [],
        guid: 1,
        dataKey: "jQuery.timer",
        regex: /^([0-9]+(?:\.[0-9]*)?)\s*(.*s)?$/,
        powers: {
            'ms': 1,
            'cs': 10,
            'ds': 100,
            's': 1000,
            'das': 10000,
            'hs': 100000,
            'ks': 1000000
        },
        timeParse: function(value) {
            if (value == undefined || value == null)
                return null;
            var result = this.regex.exec(jQuery.trim(value.toString()));
            if (result[2]) {
                var num = parseFloat(result[1]);
                var mult = this.powers[result[2]] || 1;
                return num * mult;
            } else {
                return value;
            }
        },
        add: function(element, interval, label, fn, times) {
            var counter = 0
                , firstTimeUpdate = new Date().getTime() / 1000;
            if (jQuery.isFunction(label)) {
                if (!times)
                    times = fn;
                fn = label;
                label = interval;
            }
            interval = jQuery.timer.timeParse(interval);
            if (typeof interval != 'number' || isNaN(interval) || interval < 0)
                return;
            if (typeof times != 'number' || isNaN(times) || times < 0)
                times = 0;
            times = times || 0;
            var timers = jQuery.data(element, this.dataKey) || jQuery.data(element, this.dataKey, {});
            if (!timers[label])
                timers[label] = {};
            fn.timerID = fn.timerID || this.guid++;
            var handler = function() {
                var curTime = new Date().getTime() / 1000;
                var counter = Math.round(curTime - firstTimeUpdate);
                timingModel.counter = counter;
                if ((counter > times && times !== 0) || fn.call(element, counter) === false)
                    jQuery.timer.remove(element, label, fn);
            };
            handler.timerID = fn.timerID;
            if (!timers[label][fn.timerID])
                timers[label][fn.timerID] = window.setInterval(handler, interval);
            this.global.push(element);
        },
        remove: function(element, label, fn) {
            var timers = jQuery.data(element, this.dataKey), ret;
            if (timers) {
                if (!label) {
                    for (label in timers)
                        this.remove(element, label, fn);
                } else if (timers[label]) {
                    if (fn) {
                        if (fn.timerID) {
                            window.clearInterval(timers[label][fn.timerID]);
                            delete timers[label][fn.timerID];
                        }
                    } else {
                        for (var fn in timers[label]) {
                            window.clearInterval(timers[label][fn]);
                            delete timers[label][fn];
                        }
                    }
                    for (ret in timers[label])
                        break;
                    if (!ret) {
                        ret = null;
                        delete timers[label];
                    }
                }
                for (ret in timers)
                    break;
                if (!ret)
                    jQuery.removeData(element, this.dataKey);
            }
        }
    }
});
jQuery(window).bind("unload", function() {
    jQuery.each(jQuery.timer.global, function(index, item) {
        jQuery.timer.remove(item);
    });
});
;(function($) {
        var helper = {}, current = this, title, tID, IE = $.browser.msie && /MSIE\s(5\.5|6\.)/.test(navigator.userAgent), track = false;
        $.tooltip = {
            blocked: false,
            defaults: {
                delay: 200,
                fade: false,
                showURL: true,
                extraClass: "",
                top: 25,
                left: 25,
                id: "tooltip"
            },
            block: function() {
                $.tooltip.blocked = !$.tooltip.blocked;
            },
            close: function() {
                $.tooltip.blocked = false;
                current = null;
                if (tID)
                    clearTimeout(tID);
                helper.parent.removeClass().hide().css("opacity", "");
            }
        };
        $.fn.extend({
            tooltip: function(settings) {
                settings = $.extend({}, $.tooltip.defaults, settings);
                createHelper(settings);
                return this.each(function() {
                    $.data(this, "tooltip", settings);
                    this.tOpacity = helper.parent.css("opacity");
                    this.tooltipText = this.title;
                    $(this).removeAttr("title");
                    this.alt = "";
                }).mouseover(save).mouseout(hide).click(hide);
            },
            fixPNG: IE ? function() {
                    return this.each(function() {
                        var image = $(this).css('backgroundImage');
                        if (image.match(/^url\(["']?(.*\.png)["']?\)$/i)) {
                            image = RegExp.$1;
                            $(this).css({
                                'backgroundImage': 'none',
                                'filter': "progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=crop, src='" + image + "')"
                            }).each(function() {
                                var position = $(this).css('position');
                                if (position != 'absolute' && position != 'relative')
                                    $(this).css('position', 'relative');
                            });
                        }
                    });
                }
                : function() {
                    return this;
                }
            ,
            unfixPNG: IE ? function() {
                    return this.each(function() {
                        $(this).css({
                            'filter': '',
                            backgroundImage: ''
                        });
                    });
                }
                : function() {
                    return this;
                }
            ,
            hideWhenEmpty: function() {
                return this.each(function() {
                    $(this)[$(this).html() ? "show" : "hide"]();
                });
            },
            url: function() {
                return this.attr('href') || this.attr('src');
            }
        });
        function createHelper(settings) {
            if (helper.parent)
                return;
            helper.parent = $('<div id="' + settings.id + '"><h3></h3><div class="body"></div><div class="url"></div></div>').appendTo(document.body).hide();
            if ($.fn.bgiframe)
                helper.parent.bgiframe();
            helper.title = $('h3', helper.parent);
            helper.body = $('div.body', helper.parent);
            helper.url = $('div.url', helper.parent);
        }
        function settings(element) {
            return $.data(element, "tooltip");
        }
        function handle(event) {
            if (settings(this).delay)
                tID = setTimeout(show, settings(this).delay);
            else
                show();
            track = !!settings(this).track;
            $(document.body).bind('mousemove', update);
            update(event);
        }
        function save() {
            if ($.tooltip.blocked || this == current || (!this.tooltipText && !settings(this).bodyHandler))
                return;
            current = this;
            title = this.tooltipText;
            if (settings(this).bodyHandler) {
                helper.title.hide();
                var bodyContent = settings(this).bodyHandler.call(this);
                if (bodyContent.nodeType || bodyContent.jquery) {
                    helper.body.empty().append(bodyContent)
                } else {
                    helper.body.html(bodyContent);
                }
                helper.body.show();
            } else if (settings(this).showBody) {
                var parts = title.split(settings(this).showBody);
                helper.title.html(parts.shift()).show();
                helper.body.empty();
                for (var i = 0, part; (part = parts[i]); i++) {
                    if (i > 0)
                        helper.body.append("<br/>");
                    helper.body.append(part);
                }
                helper.body.hideWhenEmpty();
            } else {
                helper.title.html(title).show();
                helper.body.hide();
            }
            if (settings(this).showURL && $(this).url())
                helper.url.html($(this).url().replace('http://', '')).show();
            else
                helper.url.hide();
            helper.parent.addClass(settings(this).extraClass);
            if (settings(this).fixPNG)
                helper.parent.fixPNG();
            handle.apply(this, arguments);
        }
        function show() {
            tID = null;
            if ((!IE || !$.fn.bgiframe) && settings(current).fade) {
                if (helper.parent.is(":animated"))
                    helper.parent.stop().show().fadeTo(settings(current).fade, current.tOpacity);
                else
                    helper.parent.is(':visible') ? helper.parent.fadeTo(settings(current).fade, current.tOpacity) : helper.parent.fadeIn(settings(current).fade);
            } else {
                helper.parent.show();
            }
            update();
        }
        function update(event) {
            if ($.tooltip.blocked)
                return;
            if (event && event.target.tagName == "OPTION") {
                return;
            }
            if (!track && helper.parent.is(":visible")) {
                $(document.body).unbind('mousemove', update)
            }
            if (current == null) {
                $(document.body).unbind('mousemove', update);
                return;
            }
            helper.parent.removeClass("viewport-right").removeClass("viewport-bottom");
            var left = helper.parent[0].offsetLeft;
            var top = helper.parent[0].offsetTop;
            if (event) {
                left = event.pageX + settings(current).left;
                top = event.pageY + settings(current).top;
                var right = 'auto';
                if (settings(current).positionLeft) {
                    right = $.window.width() - left;
                    left = 'auto';
                }
                helper.parent.css({
                    left: left,
                    right: right,
                    top: top
                });
            }
            var v = viewport()
                , h = helper.parent[0];
            if (v.x + v.cx < h.offsetLeft + h.offsetWidth) {
                left -= h.offsetWidth + 30 + settings(current).left;
                helper.parent.css({
                    left: left + 'px'
                }).addClass("viewport-right");
            }
            if (v.y + v.cy < h.offsetTop + h.offsetHeight) {
                top -= h.offsetHeight + 30 + settings(current).top;
                if (top < 63)
                    top = 63;
                helper.parent.css({
                    top: top + 'px'
                }).addClass("viewport-bottom");
            }
        }
        function viewport() {
            return {
                x: $.window.scrollLeft(),
                y: $.window.scrollTop(),
                cx: $.window.width(),
                cy: $.window.height()
            };
        }
        function hide(event) {
            if ($.tooltip.blocked)
                return;
            if (tID)
                clearTimeout(tID);
            current = null;
            var tsettings = settings(this);
            if (!tsettings) {
                return;
            }
            function complete() {
                helper.parent.removeClass(tsettings.extraClass).hide().css("opacity", "");
            }
            if ((!IE || !$.fn.bgiframe) && tsettings.fade) {
                if (helper.parent.is(':animated'))
                    helper.parent.stop().fadeTo(tsettings.fade, 0, complete);
                else
                    helper.parent.stop().fadeOut(tsettings.fade, complete);
            } else
                complete();
            if (settings(this).fixPNG)
                helper.parent.unfixPNG();
        }
    }
)(jQuery);

(function($) {
        $.toJSON = function(o) {
            if (typeof (JSON) == 'object' && JSON.stringify)
                return JSON.stringify(o);
            var type = typeof (o);
            if (o === null)
                return "null";
            if (type == "undefined")
                return undefined;
            if (type == "number" || type == "boolean")
                return o + "";
            if (type == "string")
                return $.quoteString(o);
            if (type == 'object') {
                if (typeof o.toJSON == "function")
                    return $.toJSON(o.toJSON());
                if (o.constructor === Date) {
                    var month = o.getUTCMonth() + 1;
                    if (month < 10)
                        month = '0' + month;
                    var day = o.getUTCDate();
                    if (day < 10)
                        day = '0' + day;
                    var year = o.getUTCFullYear();
                    var hours = o.getUTCHours();
                    if (hours < 10)
                        hours = '0' + hours;
                    var minutes = o.getUTCMinutes();
                    if (minutes < 10)
                        minutes = '0' + minutes;
                    var seconds = o.getUTCSeconds();
                    if (seconds < 10)
                        seconds = '0' + seconds;
                    var milli = o.getUTCMilliseconds();
                    if (milli < 100)
                        milli = '0' + milli;
                    if (milli < 10)
                        milli = '0' + milli;
                    return '"' + year + '-' + month + '-' + day + 'T' + hours + ':' + minutes + ':' + seconds + '.' + milli + 'Z"';
                }
                if (o.constructor === Array) {
                    var ret = [];
                    for (var i = 0; i < o.length; i++)
                        ret.push($.toJSON(o[i]) || "null");
                    return "[" + ret.join(",") + "]";
                }
                var pairs = [];
                for (var k in o) {
                    var name;
                    var type = typeof k;
                    if (type == "number")
                        name = '"' + k + '"';
                    else if (type == "string")
                        name = $.quoteString(k);
                    else
                        continue;
                    if (typeof o[k] == "function")
                        continue;
                    var val = $.toJSON(o[k]);
                    pairs.push(name + ":" + val);
                }
                return "{" + pairs.join(", ") + "}";
            }
        }
        ;
        $.evalJSON = function(src) {
            if (typeof (JSON) == 'object' && JSON.parse)
                return JSON.parse(src);
            return eval("(" + src + ")");
        }
        ;
        $.secureEvalJSON = function(src) {
            if (typeof (JSON) == 'object' && JSON.parse)
                return JSON.parse(src);
            var filtered = src;
            filtered = filtered.replace(/\\["\\\/bfnrtu]/g, '@');
            filtered = filtered.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
            filtered = filtered.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
            if (/^[\],:{}\s]*$/.test(filtered))
                return eval("(" + src + ")");
            else
                throw new SyntaxError("Error parsing JSON, source is not valid.");
        }
        ;
        $.quoteString = function(string) {
            if (string.match(_escapeable)) {
                return '"' + string.replace(_escapeable, function(a) {
                    var c = _meta[a];
                    if (typeof c === 'string')
                        return c;
                    c = a.charCodeAt();
                    return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
                }) + '"';
            }
            return '"' + string + '"';
        }
        ;
        var _escapeable = /["\\\x00-\x1f\x7f-\x9f]/g;
        var _meta = {
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        };
    }
)(jQuery);
!function(a) {
    function f(a, b) {
        if (!(a.originalEvent.touches.length > 1)) {
            a.preventDefault();
            var c = a.originalEvent.changedTouches[0]
                , d = document.createEvent("MouseEvents");
            d.initMouseEvent(b, !0, !0, window, 1, c.screenX, c.screenY, c.clientX, c.clientY, !1, !1, !1, !1, 0, null),
                a.target.dispatchEvent(d)
        }
    }
    if (a.support.touch = "ontouchend"in document,
        a.support.touch) {
        var e, b = a.ui.mouse.prototype, c = b._mouseInit, d = b._mouseDestroy;
        b._touchStart = function(a) {
            var b = this;
            !e && b._mouseCapture(a.originalEvent.changedTouches[0]) && (e = !0,
                b._touchMoved = !1,
                f(a, "mouseover"),
                f(a, "mousemove"),
                f(a, "mousedown"))
        }
            ,
            b._touchMove = function(a) {
                e && (this._touchMoved = !0,
                    f(a, "mousemove"))
            }
            ,
            b._touchEnd = function(a) {
                e && (f(a, "mouseup"),
                    f(a, "mouseout"),
                this._touchMoved || f(a, "click"),
                    e = !1)
            }
            ,
            b._mouseInit = function() {
                var b = this;
                b.element.bind({
                    touchstart: a.proxy(b, "_touchStart"),
                    touchmove: a.proxy(b, "_touchMove"),
                    touchend: a.proxy(b, "_touchEnd")
                }),
                    c.call(b)
            }
            ,
            b._mouseDestroy = function() {
                var b = this;
                b.element.unbind({
                    touchstart: a.proxy(b, "_touchStart"),
                    touchmove: a.proxy(b, "_touchMove"),
                    touchend: a.proxy(b, "_touchEnd")
                }),
                    d.call(b)
            }
    }
}(jQuery);
eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('$.bj({7B:fJ,1i:u(bG){A bG.2e()+\'1i\'},fI:u(2T,9D){C(1m.M==1){9D=7y}A L.aZ(7y,L.6f(2T/9D*7y)).2e()+\'%\'},fH:u(w,h,l,t){A{2l:w,1I:h,1C:l,O:t}},bF:u(9C,bE){A L.7C(L.bF()*(bE-9C))+9C},fG:u(e){A(e.bD==13||e.bD==10)&&!e.fF&&!e.fE&&e.fD},fC:u(e){A fB(e)},fA:u(2h,2g){q 6o=2g.1C+2g.2l-1,6m=2g.O+2g.1I-1;C(2h.1C>=2g.1C&&2h.1C<=6o&&2h.O>=2g.O&&2h.O<=6m){A 2P}q 6p=2h.1C+2h.2l-1;C(6p>=2g.1C&&6p<=6o&&2h.O>=2g.O&&2h.O<=6m){A 2P}q 6n=2h.O+2h.1I-1;C(6p>=2g.1C&&6p<=6o&&6n>=2g.O&&6n<=6m){A 2P}C(2h.1C>=2g.1C&&2h.1C<=6o&&6n>=2g.O&&6n<=6m){A 2P}A 1Q},1A:u(4u,bC){q 6l=1;1j(q i=1;i<bC;i++){6l*=10}6l=6l.2e();q 1w=4u.2e();4q(1w.M<6l.M)1w=\'0\'+1w;A 1w},bA:u(4F){A{3z:L.7C(4F/bB),3y:L.7C(4F%bB/60),3x:L.7C(4F%60)}},fz:u(4F,1N){q 2o=$.bA(4F);A 1S.1N(1N,$.1A(2o.3z,2),$.1A(2o.3y,2),$.1A(2o.3x,2))},bs:u(1U){1U+=$.7B;q 2o=Q 79(1U*9B);A{3z:2o.bv(),3y:2o.bu(),3x:2o.bt()}},9A:u(1U){1U+=$.7B;q 3A=Q 79(1U*9B);A{3X:3A.by(),3W:3A.bx()+1,3U:3A.bw()}},fy:u(bz){q 3Y=bz.9l(/^(\\d+)-(\\d+)-(\\d+)\\s+(\\d+):(\\d+):(\\d+)$/);A{3X:3Y[3],3W:3Y[2],3U:3Y[1],3z:3Y[4],3y:3Y[5],3x:3Y[6]}},br:u(1U){1U+=$.7B;q 1T=Q 79(1U*9B);A{3X:1T.by(),3W:1T.bx()+1,3U:1T.bw(),3z:1T.bv(),3y:1T.bu(),3x:1T.bt()}},fx:u(1U,1N){q 2o=$.bs(1U);A 1S.1N(1N,$.1A(2o.3z,2),$.1A(2o.3y,2),$.1A(2o.3x,2))},fw:u(1U,1N){q 3A=$.9A(1U);A 1S.1N(1N,$.1A(3A.3X,2),$.1A(3A.3W,2),$.1A(3A.3U,2))},fv:u(1U,1N,4E){q 1T=$.br(1U);C(1m.M>2){C(4E.fu&&4E.bq&&4E.bp){q 7A=$.9A(4E.bq);C(1T.3X==7A.3X&&1T.3W==7A.3W&&1T.3U==7A.3U){A 1S.1N(4E.bp,$.1A(1T.3z,2),$.1A(1T.3y,2),$.1A(1T.3x,2))}}}A $.bo(1T,1N)},bo:u(3V,1N){A 1S.1N(1N,$.1A(3V.3z,2),$.1A(3V.3y,2),$.1A(3V.3x,2),$.1A(3V.3X,2),$.1A(3V.3W,2),$.1A(3V.3U,2))},6s:u(9z,9y){q dx=9z.x-9y.x,dy=9z.y-9y.y;A L.2v(dx*dx+dy*dy)},ft:u(3J){q 1w=[];C(3J.aG==2y){1j(q i 2N 3J){1w.2w(i)}}A 1w},9U:u(bn,7z){q 1w=\'\';1j(q i=0;i<7z.M;i++){1w=1w+7z[i].2e();C(i<7z.M-1){1w=1w+bn.2e()}}A 1w},fs:u(72,bm){fr{A 4w(72.34(\'5z\').9l(bm)[1],10)}fq(e){A 1Q}},fp:u(bl){A(bl/7y.0).2e().5Z(\'.\',\',\')},fo:u(bk,3T){q 1w=bk.2e().5Z(\'.\',\',\');3T=3T>0?3T:0;C(1w.3I(\',\')==-1&&3T){1w+=\',\'}C(3T){4q(1w.3I(\',\')>1w.M-1-3T){1w+=\'0\'}}A 1w}});fm.fn.bj({3R:u(1b){J.9o(u(){q E=$(J),6j=1R,1E=1b.1E||E.34(\'2A\');C(!1E&&2M 1b.1e.fl!=4k){1j(q 1o 2N 1b.1e){C(2M 1o!=\'1b\'){1E=1o}Z{1j(q bi 2N 1b.1e[1o]){1E=bi;3n}}3n}}1j(q 1o 2N 1b.1e){aH(2M 1o){7o\'1b\':C(1b.1e[1o][1E]){E.1e(\'K\',1b.1e[1o][1E]);6j=1b.1e[1o]}3n;7o\'27\':C(1o==1E){E.1e(\'K\',[1E]);6j=1b.1e[1o]}3n}}C(E.1e(\'3R\')){A 1Q}Z{E.1e(\'3R\',2P)}q 7u=E.9n(be.bd(\'7u\',1b.1e)),1z=E.9v(\'1z\'),7v=0,9r=E.2E(\'2n.9u-9t-4n\'),fk=E.9v(\'2n.9u-9t\').4D(u(e){C(!1z.4x(\'3w\')){$.7x.4D();1z.2m(\'3w\');E.2E(\'.3Q-6h\').2m(\'3w\');e.fj();$.7x.4A(\'4D.3R\',u(){1z.31(\'3w\');E.2E(\'.3Q-6h\').31(\'3w\');$.7x.fi(\'4D.3R\')});1z.1l(\'9s\',$.1i(7v));q 2F=1z;do{2F=2F.2t()}4q(2F.M&&2F.1l(\'fh\')!=\'fg\'&&2F[0]!=$.7x[0]);q 7w=2F.1P().O,6k=7w+2F.ff(),9x=1z.1P().O,9w=1z.33(),bh=9x+9w;C(($(1D).1I()<6k)||(2F==1z)){6k=$(1D).1I();C(2F==1z){7w==0}}C((bh>6k)&&(((7w+6k)/2)<9x)){q bg=-(7v+9w+1z.2t().9v(\'.9u-9t\').33());1z.1l(\'9s\',$.1i(bg))}}Z{1z.31(\'3w\');E.2E(\'.3Q-6h\').31(\'3w\')}});q fe=1z.1P().O;E.2m(\'fd-b9-3R\');7v=4w(1z.1l(\'9s\'));C(1E){9r.4n(6j===1R?\'\':6j);7u.2E(\'4C[2A=\'+1E+\']\').2m(\'3v\')}C(1z.2l()){E.1l(\'2l\',1z.2l()+21+\'1i\')}!E.1e(\'K\')&&E.1e(\'K\',[]);q 6i=7u.2E(\'4C[2D!="9q"]\').4D(u(){q el=$(J),7t=[],3S=1R;9r.4n(el.4n());1z.31(\'3w\');E.bf(\'3S\');1z.2E(\'4C.3v\').31(\'3v\');C(el.4x(\'9q-fc\')){3S=el.34(\'2A\')||1R;el.fb().2E(\'4C\').9o(u(){$(J).2m(\'3v\');7t.2w($(J).34(\'2A\'))})}Z C(el.34(\'2A\')&&el.34(\'2A\').M>0){7t.2w(el.34(\'2A\'));q 2t=el.2t().2t();C(2t.4x(\'9q\')&&2t.34(\'2A\')){3S=2t.34(\'2A\')}}Z{E.bf(\'K\');A}el.2m(\'3v\');E.1e(\'K\',7t);3S&&E.1e(\'3S\',3S)});C(1b.4B){1j(q 3s 2N 1b.4B){6i.4A(3s,1b.4B[3s])}}});A J},bc:u(1b,3v){q E=J,7s;C(!2z.3H){7s=(2y.4i.2e.6J(1b.1e)==="[1b 2z]")}Z{7s=2z.3H(1b.1e)}E.2m(\'fa-f9-3R\');E.9n(be.bd(\'bc\',{1e:1b.1e,f8:7s}));q 6i=E.2E(\'4C\').4D(u(){6i.31(\'9p\');$(J).2m(\'9p\')});E.2E(\'4C\'+(3v?\'[1o=\'+3v+\']\':\':f7\')).2m(\'9p\');C(1b.4B){1j(q 3s 2N 1b.4B){6i.4A(3s,1b.4B[3s])}}A J},f6:u(1b){J.9o(u(){$(J).4A(\'f5\',u(){$(J).2m(\'bb\')});$(J).4A(\'f4 f3\',u(){$(J).31(\'bb\')})});A J},f2:u(){A $(\'<2n>\').9n(J).f1()},6d:u(){q E=J;C(E.4x(\'3Q-6h\')){A}C(2M(1m[0])==\'27\'&&1m[0]==\'6c\'&&2M(1m[1])==\'ba\'){J.1s.6c=1m[1];A}J.1s={aT:40,3t:0,2C:0,f0:11,9m:eZ,6c:2M(1m[0])==\'ba\'?1m[0]:1Q};J.28=$(\'<2n 2D="3Q-eY"/>\');J.2f=$(\'<2n 2D="2f"/>\').3u(J.28);J.2f.4A(\'eX\',u(e){A 1Q});J.b4=$(\'<2n 2D="8b"/>\').3u(J.2f);J.b3=$(\'<2n 2D="b9"/>\').3u(J.2f);J.b1=$(\'<2n 2D="b8"/>\').3u(J.2f);J.b0=$(\'<2n 2D="b8-eW"/>\').3u(J.2f);J.9h=$(\'<2n 2D="b7-O"/>\').3u(J.28);J.9g=$(\'<2n 2D="b7-2L"/>\').3u(J.28);J.2m(\'3Q-eV\').eU(\'<2n 2D="3Q-6h"/>\');J.6e=J.2t();J.28.3u(J.6e);J.aW=u(){E.2f.1l({O:$.1i(0)});E.1l({\'30-O\':$.1i(0)});E.4y();A E};J.eT=u(){E.9d(E.9k()-E.6e.1I());A E};J.9k=u(){A E.33()};J.9d=u(1P){C(E.4x(\'7p-6d\')){A E}q b6=1m.M>1&&1m[1],5A=1m[2];C(b6){E.2f.b5({O:$.1i(L.6f(1P/E.1s.2C*E.1s.3t))},E.1s.9m);E.b5({\'30-O\':$.1i(-1P)},E.1s.9m,u(){E.4y();5A&&5A()})}Z{E.2f.1l({O:$.1i(L.6f(1P/E.1s.2C*E.1s.3t))});E.1l({\'30-O\':$.1i(-1P)});E.4y()}A E};J.4y=u(){q 9b=J.28.1l(\'6b-3G\'),x=9b?J.28.1l(\'6b-3G\').9l(/^(\\S+)/)[1]:\'eS\',y=$.1i(4w(J.1l(\'30-O\'),10));J.28.1l({\'6b-3G\':1S.1N(\'{0} {1}\',x,y)})};J.aS=u(){q E=J,7q=E.9k(),6g=E.6e.1I();E.28.aX();E.1s.2C=7q-6g;q 9j=E.b4.33()+E.b3.33(),b2=E.9h.33()+E.9g.33(),7r=6g-b2,4z=L.6f(7r*6g/L.78(7q,1)),9i=L.78(4z-9j,0);4z=L.78(4z,9j);E.b1.1l(\'1I\',$.1i(9i));E.b0.1l(\'1I\',$.1i(9i));E.1s.3t=7r-4z;E.2f.1l({\'1I\':$.1i(4z),\'O\':$.1i(L.aZ(-E.1s.3t*4w(E.1l(\'30-O\'),10)/E.1s.2C,E.1s.3t))});E.28.1l({1I:$.1i(7r),\'aY-O\':$.1i(E.9h.33()),\'aY-2L\':$.1i(E.9g.33())});E.4y();C(7q>6g&&!E.1s.6c){E.28.aX();E.31(\'7p-6d\');C(4w(E.1l(\'30-O\'),10)<-E.1s.2C){E.1l({\'30-O\':$.1i(-E.1s.2C)})}q o=E.28.1P().O;E.2f.aV({aU:\'2t\'})}Z{E.28.aR();E.2m(\'7p-6d\');E.aW()}A E};E.2f.aV({aU:\'2t\',2K:\'y\',eR:u(3s,9f){E.1l({\'30-O\':$.1i(L.6f(-(9f.3G.O>=E.1s.3t?1:9f.3G.O/E.1s.3t)*E.1s.2C))});E.4y()}});E.6e.eQ(u(3s,9e){C(E.4x(\'7p-6d\')){A 1Q}q 3P=4w(E.1l(\'30-O\'),10);9e*=E.1s.aT;3P+=9e;C(3P>0){3P=0}Z C(3P<-E.1s.2C){3P=-E.1s.2C}E.9d(-3P);A 1Q});E.aS();C(J.1s.6c){J.28.aR()}A J},eP:u(9c,9a,6a,aK,95,68,2Z,97,99,aJ){q E=J,2Y=1R,69=68?68:-1,4v=6a;C(!2Z){2Z={x:0,y:0}}J.1l({6b:\'aQ aP(\'+9c+\') aO-aN \'+(-2Z.x)+\'1i \'+(-2Z.y)+\'1i\'});q 98=u(){2Y&&aM(2Y);2Y=1R;4v=6a;E.1l({6b:\'aQ aP(\'+9c+\') aO-aN \'+(-2Z.x)+\'1i \'+(-2Z.y)+\'1i\'});A J};q aL=u(){C(2Y){aM(2Y);2Y=1R}Z{2Y=aI(96,95)}A J};J.eO=98;J.eN=aL;q 96=u(){q 3O=(6a-4v)*aK;E.1l({9b:(-2Z.x+(9a?-3O:0))+\'1i \'+(-2Z.y+(9a?0:-3O))+\'1i\'});4v--;C(!4v){99&&99();C(69!=-1){69--;C(!69){98();97&&97()}}4v=6a}};C(68){69=68}C(!aJ){2Y=aI(96,95)}A J}});1S.1N=u(){q s=1m[0];C(1m.M==1){A 1m[0]}C(1m[1]!=1R){aH(1m[1].aG){7o 2z:q 2d=1m[1];3n;7o 2y:q 2d=[];1j(q i 2N 1m[1]){2d.2w(1m[1][i])}3n;eM:q 2d=$(1m).4c(1).aF()}}Z{q 2d=$(1m).4c(1).aF()}1j(q i=0;i<2d.M;i++){q 94=\'{\'+i+\'}\',93=2d[i]==1R?\'\':2d[i].2e(),3O=0;4q((3O=s.3I(94,3O))!=-1){s=s.5Z(94,93);3O+=93.M}}A s};C(2M 1S.4i.aE!==\'u\'){1S.4i.aE=u(){A J.5Z(/^\\s+|\\s+$/g,\'\')}}L.eL=u(4u){A 4u==0?0:4u/L.eK(4u)};C(!2z.3I){2z.4i.3I=u(3J){1j(q i=0;i<J.M;i++){C(J[i]==3J){A i}}A-1}}C(!1D.2X){1D.2X={}}C(!1D.2X.75){1D.2X.75=u(){}}q eJ=u(27){u 67(62,92){A(62<<92)|(62>>>(32-92))}u 1v(7n,7m){q 7l,7k,4t,4s,3N;4t=(7n&91);4s=(7m&91);7l=(7n&7j);7k=(7m&7j);3N=(7n&aD)+(7m&aD);C(7l&7k){A(3N^91^4t^4s)}C(7l|7k){C(3N&7j){A(3N^eI^4t^4s)}Z{A(3N^7j^4t^4s)}}Z{A(3N^4t^4s)}}u F(x,y,z){A(x&y)|((~x)&z)}u G(x,y,z){A(x&z)|(y&(~z))}u H(x,y,z){A(x^y^z)}u I(x,y,z){A(y^(x|(~z)))}u 1M(a,b,c,d,x,s,ac){a=1v(a,1v(1v(F(b,c,d),x),ac));A 1v(67(a,s),b)}u 1L(a,b,c,d,x,s,ac){a=1v(a,1v(1v(G(b,c,d),x),ac));A 1v(67(a,s),b)}u 1K(a,b,c,d,x,s,ac){a=1v(a,1v(1v(H(b,c,d),x),ac));A 1v(67(a,s),b)}u 1J(a,b,c,d,x,s,ac){a=1v(a,1v(1v(I(b,c,d),x),ac));A 1v(67(a,s),b)}u aA(27){q 3M;q 65=27.M;q 90=65+8;q aC=(90-(90%64))/64;q 7i=(aC+1)*16;q 3r=2z(7i-1);q 66=0;q 2B=0;4q(2B<65){3M=(2B-(2B%4))/4;66=(2B%4)*8;3r[3M]=(3r[3M]|(27.5G(2B)<<66));2B++}3M=(2B-(2B%4))/4;66=(2B%4)*8;3r[3M]=3r[3M]|(eH<<66);3r[7i-2]=65<<3;3r[7i-1]=65>>>29;A 3r}u 5I(62){q 7g="",7h="",8Z,61;1j(61=0;61<=3;61++){8Z=(62>>>(61*8))&eG;7h="0"+8Z.2e(16);7g=7g+7h.6X(7h.M-2,2)}A 7g}u aB(27){27=27.5Z(/\\r\\n/g,"\\n");q 3q="";1j(q n=0;n<27.M;n++){q c=27.5G(n);C(c<7f){3q+=1S.4r(c)}Z C((c>eF)&&(c<eE)){3q+=1S.4r((c>>6)|eD);3q+=1S.4r((c&63)|7f)}Z{3q+=1S.4r((c>>12)|eC);3q+=1S.4r(((c>>6)&63)|7f);3q+=1S.4r((c&63)|7f)}}A 3q}q x=2z();q k,8Y,8X,8W,8V,a,b,c,d;q 5Y=7,5X=12,5W=17,5V=22;q 5U=5,5T=9,5S=14,5R=20;q 5Q=4,5P=11,5O=16,5N=23;q 5M=6,5L=10,5K=15,5J=21;27=aB(27);x=aA(27);a=eB;b=eA;c=ez;d=ey;1j(k=0;k<x.M;k+=16){8Y=a;8X=b;8W=c;8V=d;a=1M(a,b,c,d,x[k+0],5Y,ex);d=1M(d,a,b,c,x[k+1],5X,ew);c=1M(c,d,a,b,x[k+2],5W,ev);b=1M(b,c,d,a,x[k+3],5V,eu);a=1M(a,b,c,d,x[k+4],5Y,et);d=1M(d,a,b,c,x[k+5],5X,es);c=1M(c,d,a,b,x[k+6],5W,er);b=1M(b,c,d,a,x[k+7],5V,eq);a=1M(a,b,c,d,x[k+8],5Y,ep);d=1M(d,a,b,c,x[k+9],5X,eo);c=1M(c,d,a,b,x[k+10],5W,en);b=1M(b,c,d,a,x[k+11],5V,em);a=1M(a,b,c,d,x[k+12],5Y,ek);d=1M(d,a,b,c,x[k+13],5X,ej);c=1M(c,d,a,b,x[k+14],5W,ei);b=1M(b,c,d,a,x[k+15],5V,eh);a=1L(a,b,c,d,x[k+1],5U,eg);d=1L(d,a,b,c,x[k+6],5T,ef);c=1L(c,d,a,b,x[k+11],5S,ee);b=1L(b,c,d,a,x[k+0],5R,ed);a=1L(a,b,c,d,x[k+5],5U,ec);d=1L(d,a,b,c,x[k+10],5T,eb);c=1L(c,d,a,b,x[k+15],5S,ea);b=1L(b,c,d,a,x[k+4],5R,e9);a=1L(a,b,c,d,x[k+9],5U,e8);d=1L(d,a,b,c,x[k+14],5T,e7);c=1L(c,d,a,b,x[k+3],5S,e6);b=1L(b,c,d,a,x[k+8],5R,e5);a=1L(a,b,c,d,x[k+13],5U,e4);d=1L(d,a,b,c,x[k+2],5T,e3);c=1L(c,d,a,b,x[k+7],5S,e2);b=1L(b,c,d,a,x[k+12],5R,e1);a=1K(a,b,c,d,x[k+5],5Q,e0);d=1K(d,a,b,c,x[k+8],5P,dZ);c=1K(c,d,a,b,x[k+11],5O,dY);b=1K(b,c,d,a,x[k+14],5N,dX);a=1K(a,b,c,d,x[k+1],5Q,dW);d=1K(d,a,b,c,x[k+4],5P,dV);c=1K(c,d,a,b,x[k+7],5O,dU);b=1K(b,c,d,a,x[k+10],5N,dT);a=1K(a,b,c,d,x[k+13],5Q,dS);d=1K(d,a,b,c,x[k+0],5P,dR);c=1K(c,d,a,b,x[k+3],5O,dQ);b=1K(b,c,d,a,x[k+6],5N,dP);a=1K(a,b,c,d,x[k+9],5Q,dO);d=1K(d,a,b,c,x[k+12],5P,dN);c=1K(c,d,a,b,x[k+15],5O,dM);b=1K(b,c,d,a,x[k+2],5N,dL);a=1J(a,b,c,d,x[k+0],5M,dK);d=1J(d,a,b,c,x[k+7],5L,dJ);c=1J(c,d,a,b,x[k+14],5K,dI);b=1J(b,c,d,a,x[k+5],5J,dH);a=1J(a,b,c,d,x[k+12],5M,dG);d=1J(d,a,b,c,x[k+3],5L,dF);c=1J(c,d,a,b,x[k+10],5K,dE);b=1J(b,c,d,a,x[k+1],5J,dD);a=1J(a,b,c,d,x[k+8],5M,dC);d=1J(d,a,b,c,x[k+15],5L,dB);c=1J(c,d,a,b,x[k+6],5K,dA);b=1J(b,c,d,a,x[k+13],5J,dw);a=1J(a,b,c,d,x[k+4],5M,dv);d=1J(d,a,b,c,x[k+11],5L,du);c=1J(c,d,a,b,x[k+2],5K,dt);b=1J(b,c,d,a,x[k+9],5J,ds);a=1v(a,8Y);b=1v(b,8X);c=1v(c,8W);d=1v(d,8V)}q az=5I(a)+5I(b)+5I(c)+5I(d);A az.dr()};q dq={5D:"dp+/=",dn:u(5H){q 7b="";q 7e,5F,5E,8U,8T,7d,5C;q i=0;4q(i<5H.M){7e=5H.5G(i++);5F=5H.5G(i++);5E=5H.5G(i++);8U=7e>>2;8T=((7e&3)<<4)|(5F>>4);7d=((5F&15)<<2)|(5E>>6);5C=5E&63;C(ay(5F)){7d=5C=64}Z C(ay(5E)){5C=64}7b=7b+J.5D.7c(8U)+J.5D.7c(8T)+J.5D.7c(7d)+J.5D.7c(5C)}A 7b}};(u(){q 8S=0;q 5B=[\'dm\',\'dl\',\'dk\',\'o\'];1j(q x=0;x<5B.M&&!1D.7a;++x){1D.7a=1D[5B[x]+\'dj\'];1D.8R=1D[5B[x]+\'di\']||1D[5B[x]+\'dh\']}C(!1D.7a)1D.7a=u(5A,72){q 77=Q 79().dg();q 76=L.78(0,16-(77-8S));q 5z=1D.df(u(){5A(77+76)},76);8S=77+76;A 5z};C(!1D.8R)1D.8R=u(5z){de(5z)}}());(u(4f,4e){C(2M 4g===\'u\'&&4g.9M){4g([],u(){A 4e.6J(4f)})}Z{4f.af=4e.6J(4f)}}(J,u(){\'9L 9K\';D 3L=J;u dd(w){w=w||3L;A w!==w.O}u 5y(8Q){C(3L.2X){C(3L.2X.5y){3L.2X.5y(8Q)}Z C(3L.2X.75){3L.2X.75(8Q)}}}u 8K(B,4p,3p,24){D 74=24||5y;D 26=B.dc(3p);B.4p(26,4p);B.db(26);D ax=B.da(26,B.d9);C(!ax){D 73=B.d8(26);74(\'*** 71 d7 26 \\\'\'+26+\'\\\':\'+73);B.d6(26);A 1R}A 26}u 4h(B,3o,2V,2U,24){D 74=24||5y;D 1k=B.4h();3o.2Q(u(26){B.d5(1k,26)});C(2V){2V.2Q(u(aw,8P){B.d4(1k,2U?2U[8P]:8P,aw)})}B.d3(1k);D av=B.8z(1k,B.d2);C(!av){D 73=B.d1(1k);74(\'71 2N 1k d0:\'+73);B.cZ(1k);A 1R}A 1k}u au(B,8O,70,24){1x 4p=\'\';1x 3p;D 5x=8l.ag(8O);C(!5x){5v(\'*** 71: 8C 6V 72\'+8O)}4p=5x.4n;C(!70){C(5x.K===\'x-26/x-cY\'){3p=B.8N}Z C(5x.K===\'x-26/x-cX\'){3p=B.8M}Z C(3p!==B.8N&&3p!==B.8M){5v(\'*** 71: 8C 26 K\')}}A 8K(B,4p,70?70:3p,24)}D 8J=[\'8N\',\'8M\',];u 8i(B,8L,2V,2U,24){D 3o=[];1j(1x 1c=0;1c<8L.M;++1c){3o.2w(au(B,8L[1c],B[8J[1c]],24))}A 4h(B,3o,2V,2U,24)}u 6F(B,3K,2V,2U,24){D 3o=[];1j(1x 1c=0;1c<3K.M;++1c){3o.2w(8K(B,3K[1c],B[8J[1c]],24))}A 4h(B,3o,2V,2U,24)}u 8E(B,K){C(K===B.8H)A B.cW;C(K===B.8G)A B.cV;A 4k}u 6E(B,1k){1x 8D=0;u ak(1k,2W){D 1y=B.cU(1k,2W.1d);D K=2W.K;D 3H=(2W.8A>1&&2W.1d.6X(-3)===\'[0]\');C(K===B.6R&&3H){A u(v){B.cT(1y,v)}}C(K===B.6R){A u(v){B.cS(1y,v)}}C(K===B.cR){A u(v){B.cQ(1y,v)}}C(K===B.cP){A u(v){B.cO(1y,v)}}C(K===B.cN){A u(v){B.cM(1y,v)}}C(K===B.8u&&3H){A u(v){B.8I(1y,v)}}C(K===B.8u){A u(v){B.ap(1y,v)}}C(K===B.cL){A u(v){B.at(1y,v)}}C(K===B.cK){A u(v){B.as(1y,v)}}C(K===B.cJ){A u(v){B.ar(1y,v)}}C(K===B.cI){A u(v){B.8I(1y,v)}}C(K===B.cH){A u(v){B.at(1y,v)}}C(K===B.cG){A u(v){B.as(1y,v)}}C(K===B.cF){A u(v){B.ar(1y,v)}}C(K===B.cE){A u(v){B.cD(1y,1Q,v)}}C(K===B.cC){A u(v){B.cB(1y,1Q,v)}}C(K===B.cA){A u(v){B.cz(1y,1Q,v)}}C((K===B.8H||K===B.8G)&&3H){D 4o=[];1j(1x 1c=0;1c<2A.8A;++1c){4o.2w(8D++)}A u(6Z,4o){A u(aq){B.8I(1y,4o);aq.2Q(u(6Y,1E){B.ao(B.an+4o[1E]);B.am(6Z,6Y)})}}(8E(B,K),4o)}C(K===B.8H||K===B.8G){A u(6Z,8F){A u(6Y){B.ap(1y,8F);B.ao(B.an+8F);B.am(6Z,6Y)}}(8E(B,K),8D++)}5v(\'8C K: 9T\'+K.2e(16))}D 3k={};D al=B.8z(1k,B.cy);1j(1x 1c=0;1c<al;++1c){D 2W=B.cx(1k,1c);C(!2W){3n}1x 1d=2W.1d;C(1d.6X(-3)===\'[0]\'){1d=1d.6X(0,1d.M-3)}D 3m=ak(1k,2W);3k[1d]=3m}A 3k}u 6A(1Z,8B){1Z=1Z.3k||1Z;2y.4l(8B).2Q(u(1d){D 3m=1Z[1d];C(3m){3m(8B[1d])}})}u 6G(B,1k){D 2O={};u ai(1E){A u(b){B.6S(B.8q,b.2S);B.cw(1E);B.cv(1E,b.1r||b.8A,b.K||B.6R,b.35||1Q,b.cu||0,b.1P||0)}}D aj=B.8z(1k,B.ct);1j(1x 1c=0;1c<aj;++1c){D 6W=B.cs(1k,1c);C(!6W){3n}D 1E=B.cr(1k,6W.1d);2O[6W.1d]=ai(1E)}A 2O}u 5u(1Z,2s){1Z=1Z.2O||1Z;2y.4l(2s).2Q(u(1d){D 3m=1Z[1d];C(3m){3m(2s[1d])}})}u 6D(B,1Z,2s,1q){D 8y=B.cq();B.ah(8y);5u(1Z,2s);C(1q){B.6S(B.6N,1q)}B.ah(1R);A 8y}u 8g(B,2x,1G){A 6D(B,2x.2O||2x,1G.2s,1G.1q)}u 8h(B,3K,2V,2U,24){3K=3K.cp(u(8x){D 6V=8l.ag(8x);A 6V?6V.4n:8x});D 1k=af.6F(B,3K,2V,2U,24);C(!1k){A 1R}D 3k=6E(B,1k);D 2O=6G(B,1k);A{1k:1k,3k:3k,2O:2O,}}u 6B(B,1Z,2R){5u(1Z,2R.2s);C(2R.1q){B.6S(B.6N,2R.1q)}}D 8w=[\'\',\'co\',\'cn\',\'cm\',];u 8d(B,1d){1j(1x 1c=0;1c<8w.M;++1c){D ae=8w[1c]+1d;D 8v=B.cl(ae);C(8v){A 8v}}A 4k}u 8c(3l,5w){5w=5w||1;D 2l=3l.ck*5w|0;D 1I=3l.cj*5w|0;C(3l.2l!==2l||3l.1I!==1I){3l.2l=L.ad(2l/10)*10;3l.1I=L.ad(1I/10)*10;$(3l).1l({\'2l\':\'ab\',\'1I\':\'ab\'});A 2P}A 1Q}u a8(1t,1r){1x 6T=0;1t.2w=u(){1j(1x 1c=0;1c<1m.M;++1c){D 2T=1m[1c];C(2T 2k 2z||(2T.2S&&2T.2S 2k a2)){1j(1x 6U=0;6U<2T.M;++6U){1t[6T++]=2T[6U]}}Z{1t[6T++]=2T}}};1t.ci=u(aa){6T=aa||0};1t.1r=1r;2y.ch(1t,\'2j\',{cg:u(){A J.M/J.1r|0},});A 1t}u 6I(1r,2j,a9){D a7=a9||U;A a8(Q a7(1r*2j),1r)}u 6L(B,Y,K,a6){K=K||B.8q;D 2S=B.cf();B.6S(K,2S);B.ce(K,Y,a6||B.cd);A 2S}u a5(1d){A 1d!==\'1q\'}u a0(3J){D 4m={};2y.4l(3J).cc(a5).2Q(u(1o){4m[\'cb\'+1o]=1o});A 4m}u 9Z(B,1t){C(1t 2k a4){A B.ca}C(1t 2k a3){A B.c9}C(1t 2k c8){A B.c7}C(1t 2k a1){A B.9W}C(1t 2k c6){A B.8u}C(1t 2k c5){A B.c4}C(1t 2k U){A B.6R}5v\'c3 c2 Y K\'}u 9Y(1t){C(1t 2k a4){A 2P}C(1t 2k a3){A 2P}A 1Q}u 6P(a){A a.2S&&a.2S 2k a2}u 8r(1d,M){1x 1r;C(1d.3I(\'c1\')>=0){1r=2}Z C(1d.3I(\'c0\')>=0){1r=4}Z{1r=3}C(M%1r>0){5v\'bZ bY bX 1r. bW bV bU bT.\'}A 1r}u 6M(Y,1d){C(6P(Y)){A Y}C(Y.1e&&6P(Y.1e)){A Y.1e}C(2z.3H(Y)){Y={1e:Y,}}C(!Y.1r){Y.1r=8r(1d,Y.M)}1x K=Y.K;C(!K){C(1d===\'1q\'){K=a1}}D 1t=6I(Y.1r,Y.1e.M/Y.1r|0,K);1t.2w(Y.1e);A 1t}u 6H(B,1H,6O){D 4m=6O||a0(1H);D 2s={};2y.4l(4m).2Q(u(8t){D 6Q=4m[8t];D 8s=1H[6Q];D Y=6M(8s,6Q);2s[8t]={2S:6L(B,Y),1r:8s.1r||Y.1r||8r(6Q),K:9Z(B,Y),35:9Y(Y),}});A 2s}u 9X(1H){D 1o=2y.4l(1H)[0];D Y=1H[1o];C(6P(Y)){A Y.2j}Z{A Y.1e.M/Y.1r}}u 8j(B,1H,6O){D 1G={2s:6H(B,1H,6O),};1x 1q=1H.1q;C(1q){1q=6M(1q,\'1q\');1G.1q=6L(B,1q,B.6N);1G.2j=1q.M}Z{1G.2j=9X(1H)}A 1G}u 8k(B,1H){D 2R={};2y.4l(1H).2Q(u(1o){D K=1o===\'1q\'?B.6N:B.8q;D Y=6M(1H[1o],1d);2R[1o]=6L(B,Y,K)});C(1H.1q){2R.2j=1H.1q.M}Z C(1H.3G){2R.2j=1H.3G.M/3}A 2R}u 6C(B,1G,4j,8p,1P){D 1q=1G.1q;4j=4j===4k?B.bS:4j;D 2j=8p===4k?1G.2j:8p;1P=1P===4k?1P:0;C(1q){B.bR(4j,2j,B.9W,1P)}Z{B.bQ(4j,1P,2j)}}u 8f(B,9V){1x 8o=1R;1x 8m=1R;9V.2Q(u(1b){D 2x=1b.2x;D 1G=1b.1G;1x 8n=1Q;C(2x!==8o){8o=2x;B.bP(2x.1k);8n=2P}C(8n||1G!==8m){8m=1G;6B(B,2x.2O,1G)}6A(2x.3k,1b.bO);6C(B,1G)})}u 8e(B,v){D 6K=[];1j(D 1o 2N B){C(B[1o]===v){6K.2w(1o)}}A 6K.M?6K.9U(\' | \'):`9T${v.2e(16)}`}D 9S=1Q||!!8l.bN;D 9R=!9S&&!!1D.bM;C(9R){9O.4i.9N=u(9P){A u(){1x 2d=1m;D K=2d[0];C(K===\'9Q\'){2d=[].4c.6J(1m);2d[0]=\'bL-9Q\'}A 9P.bK(J,2d)}}(9O.4i.9N)}A{6I:6I,6H:6H,8k:8k,8j:8j,6G:6G,4h:4h,8i:8i,6F:6F,8h:8h,6E:6E,6D:6D,8g:8g,6C:6C,8f:8f,8e:8e,8d:8d,8c:8c,5u:5u,6B:6B,6A:6A,}}));(u(4f,4e){C(2M 4g===\'u\'&&4g.9M){4g([],4e)}Z{4f.4L=4e()}}(J,u(){"9L 9K";u 7H(a,b,p){p=p||Q U(16);q 5t=b[0*4+0];q 5s=b[0*4+1];q 5r=b[0*4+2];q 5q=b[0*4+3];q 5p=b[1*4+0];q 5o=b[1*4+1];q 5n=b[1*4+2];q 5m=b[1*4+3];q 5l=b[2*4+0];q 5k=b[2*4+1];q 5j=b[2*4+2];q 5i=b[2*4+3];q 55=b[3*4+0];q 53=b[3*4+1];q 51=b[3*4+2];q 4Z=b[3*4+3];q 5h=a[0*4+0];q 5d=a[0*4+1];q 59=a[0*4+2];q 54=a[0*4+3];q 5g=a[1*4+0];q 5c=a[1*4+1];q 58=a[1*4+2];q 52=a[1*4+3];q 5f=a[2*4+0];q 5b=a[2*4+1];q 57=a[2*4+2];q 50=a[2*4+3];q 5e=a[3*4+0];q 5a=a[3*4+1];q 56=a[3*4+2];q 4Y=a[3*4+3];p[0]=5t*5h+5s*5g+5r*5f+5q*5e;p[1]=5t*5d+5s*5c+5r*5b+5q*5a;p[2]=5t*59+5s*58+5r*57+5q*56;p[3]=5t*54+5s*52+5r*50+5q*4Y;p[4]=5p*5h+5o*5g+5n*5f+5m*5e;p[5]=5p*5d+5o*5c+5n*5b+5m*5a;p[6]=5p*59+5o*58+5n*57+5m*56;p[7]=5p*54+5o*52+5n*50+5m*4Y;p[8]=5l*5h+5k*5g+5j*5f+5i*5e;p[9]=5l*5d+5k*5c+5j*5b+5i*5a;p[10]=5l*59+5k*58+5j*57+5i*56;p[11]=5l*54+5k*52+5j*50+5i*4Y;p[12]=55*5h+53*5g+51*5f+4Z*5e;p[13]=55*5d+53*5c+51*5b+4Z*5a;p[14]=55*59+53*58+51*57+4Z*56;p[15]=55*54+53*52+51*50+4Z*4Y;A p}u 80(a,b,p){p=p||Q U(3);p[0]=a[0]+b[0];p[1]=a[1]+b[1];p[2]=a[2]+b[2];A p}u 6t(a,b,p){p=p||Q U(3);p[0]=a[0]-b[0];p[1]=a[1]-b[1];p[2]=a[2]-b[2];A p}u 35(v,p){p=p||Q U(3);q M=L.2v(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);C(M>0.bJ){p[0]=v[0]/M;p[1]=v[1]/M;p[2]=v[2]/M}A p}u M(v){A L.2v(v[0]*v[0]+v[1]*v[1]+v[2]*v[2])}u 4G(a,b,p){p=p||Q U(3);p[0]=a[1]*b[2]-a[2]*b[1];p[1]=a[2]*b[0]-a[0]*b[2];p[2]=a[0]*b[1]-a[1]*b[0];A p}u 7X(a,b){A(a[0]*b[0])+(a[1]*b[1])+(a[2]*b[2])}u 6r(a,b){D dx=a[0]-b[0];D dy=a[1]-b[1];D dz=a[2]-b[2];A dx*dx+dy*dy+dz*dz}u 6s(a,b){A L.2v(6r(a,b))}u 7W(p){p=p||Q U(16);p[0]=1;p[1]=0;p[2]=0;p[3]=0;p[4]=0;p[5]=1;p[6]=0;p[7]=0;p[8]=0;p[9]=0;p[10]=1;p[11]=0;p[12]=0;p[13]=0;p[14]=0;p[15]=1;A p}u 7V(m,p){p=p||Q U(16);p[0]=m[0];p[1]=m[4];p[2]=m[8];p[3]=m[12];p[4]=m[1];p[5]=m[5];p[6]=m[9];p[7]=m[13];p[8]=m[2];p[9]=m[6];p[10]=m[10];p[11]=m[14];p[12]=m[3];p[13]=m[7];p[14]=m[11];p[15]=m[15];A p}u 81(4W,9J,8b,p){p=p||Q U(16);q 4d=35(6t(4W,9J));q 4X=35(4G(8b,4d));q 6z=35(4G(4d,4X));p[0]=4X[0];p[1]=4X[1];p[2]=4X[2];p[3]=0;p[4]=6z[0];p[5]=6z[1];p[6]=6z[2];p[7]=0;p[8]=4d[0];p[9]=4d[1];p[10]=4d[2];p[11]=0;p[12]=4W[0];p[13]=4W[1];p[14]=4W[2];p[15]=1;A p}u 7S(9I,9H,1Y,2i,p){p=p||Q U(16);q f=L.bI(L.bH*0.5-0.5*9I);q 8a=1.0/(1Y-2i);p[0]=f/9H;p[1]=0;p[2]=0;p[3]=0;p[4]=0;p[5]=f;p[6]=0;p[7]=0;p[8]=0;p[9]=0;p[10]=(1Y+2i)*8a;p[11]=-1;p[12]=0;p[13]=0;p[14]=1Y*2i*8a*2;p[15]=0;A p}u 7U(1C,3F,2L,O,1Y,2i,p){p=p||Q U(16);p[0]=2/(3F-1C);p[1]=0;p[2]=0;p[3]=0;p[4]=0;p[5]=2/(O-2L);p[6]=0;p[7]=0;p[8]=0;p[9]=0;p[10]=2/(1Y-2i);p[11]=0;p[12]=(1C+3F)/(1C-3F);p[13]=(2L+O)/(2L-O);p[14]=(1Y+2i)/(1Y-2i);p[15]=1;A p}u 7T(1C,3F,2L,O,1Y,2i,p){p=p||Q U(16);q dx=3F-1C;q dy=O-2L;q dz=2i-1Y;p[0]=2*1Y/dx;p[1]=0;p[2]=0;p[3]=0;p[4]=0;p[5]=2*1Y/dy;p[6]=0;p[7]=0;p[8]=(1C+3F)/dx;p[9]=(O+2L)/dy;p[10]=-(2i+1Y)/dz;p[11]=-1;p[12]=0;p[13]=0;p[14]=-2*1Y*2i/dz;p[15]=0;A p}u 2q(3E,3D,3C,p){p=p||Q U(16);p[0]=1;p[1]=0;p[2]=0;p[3]=0;p[4]=0;p[5]=1;p[6]=0;p[7]=0;p[8]=0;p[9]=0;p[10]=1;p[11]=0;p[12]=3E;p[13]=3D;p[14]=3C;p[15]=1;A p}u 7R(m,3E,3D,3C,p){p=p||Q U(16);q 1a=m[0];q T=m[1];q 1f=m[2];q 1g=m[3];q 19=m[1*4+0];q N=m[1*4+1];q V=m[1*4+2];q X=m[1*4+3];q 18=m[2*4+0];q P=m[2*4+1];q R=m[2*4+2];q W=m[2*4+3];q 1B=m[3*4+0];q 1h=m[3*4+1];q 1u=m[3*4+2];q 1p=m[3*4+3];C(m!==p){p[0]=1a;p[1]=T;p[2]=1f;p[3]=1g;p[4]=19;p[5]=N;p[6]=V;p[7]=X;p[8]=18;p[9]=P;p[10]=R;p[11]=W}p[12]=1a*3E+19*3D+18*3C+1B;p[13]=T*3E+N*3D+P*3C+1h;p[14]=1f*3E+V*3D+R*3C+1u;p[15]=1g*3E+X*3D+W*3C+1p;A p}u 7Q(1n,p){p=p||Q U(16);q c=L.3j(1n);q s=L.3i(1n);p[0]=1;p[1]=0;p[2]=0;p[3]=0;p[4]=0;p[5]=c;p[6]=s;p[7]=0;p[8]=0;p[9]=-s;p[10]=c;p[11]=0;p[12]=0;p[13]=0;p[14]=0;p[15]=1;A p}u 7N(m,1n,p){p=p||Q U(16);q 19=m[4];q N=m[5];q V=m[6];q X=m[7];q 18=m[8];q P=m[9];q R=m[10];q W=m[11];q c=L.3j(1n);q s=L.3i(1n);p[4]=c*19+s*18;p[5]=c*N+s*P;p[6]=c*V+s*R;p[7]=c*X+s*W;p[8]=c*18-s*19;p[9]=c*P-s*N;p[10]=c*R-s*V;p[11]=c*W-s*X;C(m!==p){p[0]=m[0];p[1]=m[1];p[2]=m[2];p[3]=m[3];p[12]=m[12];p[13]=m[13];p[14]=m[14];p[15]=m[15]}A p}u 7P(1n,p){p=p||Q U(16);q c=L.3j(1n);q s=L.3i(1n);p[0]=c;p[1]=0;p[2]=-s;p[3]=0;p[4]=0;p[5]=1;p[6]=0;p[7]=0;p[8]=s;p[9]=0;p[10]=c;p[11]=0;p[12]=0;p[13]=0;p[14]=0;p[15]=1;A p}u 7M(m,1n,p){p=p||Q U(16);q 1a=m[0*4+0];q T=m[0*4+1];q 1f=m[0*4+2];q 1g=m[0*4+3];q 18=m[2*4+0];q P=m[2*4+1];q R=m[2*4+2];q W=m[2*4+3];q c=L.3j(1n);q s=L.3i(1n);p[0]=c*1a-s*18;p[1]=c*T-s*P;p[2]=c*1f-s*R;p[3]=c*1g-s*W;p[8]=c*18+s*1a;p[9]=c*P+s*T;p[10]=c*R+s*1f;p[11]=c*W+s*1g;C(m!==p){p[4]=m[4];p[5]=m[5];p[6]=m[6];p[7]=m[7];p[12]=m[12];p[13]=m[13];p[14]=m[14];p[15]=m[15]}A p}u 7O(1n,p){p=p||Q U(16);q c=L.3j(1n);q s=L.3i(1n);p[0]=c;p[1]=s;p[2]=0;p[3]=0;p[4]=-s;p[5]=c;p[6]=0;p[7]=0;p[8]=0;p[9]=0;p[10]=1;p[11]=0;p[12]=0;p[13]=0;p[14]=0;p[15]=1;A p}u 7L(m,1n,p){p=p||Q U(16);q 1a=m[0*4+0];q T=m[0*4+1];q 1f=m[0*4+2];q 1g=m[0*4+3];q 19=m[1*4+0];q N=m[1*4+1];q V=m[1*4+2];q X=m[1*4+3];q c=L.3j(1n);q s=L.3i(1n);p[0]=c*1a+s*19;p[1]=c*T+s*N;p[2]=c*1f+s*V;p[3]=c*1g+s*X;p[4]=c*19-s*1a;p[5]=c*N-s*T;p[6]=c*V-s*1f;p[7]=c*X-s*1g;C(m!==p){p[8]=m[8];p[9]=m[9];p[10]=m[10];p[11]=m[11];p[12]=m[12];p[13]=m[13];p[14]=m[14];p[15]=m[15]}A p}u 7K(2K,1n,p){p=p||Q U(16);q x=2K[0];q y=2K[1];q z=2K[2];q n=L.2v(x*x+y*y+z*z);x/=n;y/=n;z/=n;q 2I=x*x;q 2H=y*y;q 2J=z*z;q c=L.3j(1n);q s=L.3i(1n);q 1X=1-c;p[0]=2I+(1-2I)*c;p[1]=x*y*1X+z*s;p[2]=x*z*1X-y*s;p[3]=0;p[4]=x*y*1X-z*s;p[5]=2H+(1-2H)*c;p[6]=y*z*1X+x*s;p[7]=0;p[8]=x*z*1X+y*s;p[9]=y*z*1X-x*s;p[10]=2J+(1-2J)*c;p[11]=0;p[12]=0;p[13]=0;p[14]=0;p[15]=1;A p}u 7J(m,2K,1n,p){p=p||Q U(16);q x=2K[0];q y=2K[1];q z=2K[2];q n=L.2v(x*x+y*y+z*z);x/=n;y/=n;z/=n;q 2I=x*x;q 2H=y*y;q 2J=z*z;q c=L.3j(1n);q s=L.3i(1n);q 1X=1-c;q 4V=2I+(1-2I)*c;q 4U=x*y*1X+z*s;q 4T=x*z*1X-y*s;q 4S=x*y*1X-z*s;q 4R=2H+(1-2H)*c;q 4Q=y*z*1X+x*s;q 4P=x*z*1X+y*s;q 4O=y*z*1X-x*s;q 4N=2J+(1-2J)*c;q 1a=m[0];q T=m[1];q 1f=m[2];q 1g=m[3];q 19=m[4];q N=m[5];q V=m[6];q X=m[7];q 18=m[8];q P=m[9];q R=m[10];q W=m[11];p[0]=4V*1a+4U*19+4T*18;p[1]=4V*T+4U*N+4T*P;p[2]=4V*1f+4U*V+4T*R;p[3]=4V*1g+4U*X+4T*W;p[4]=4S*1a+4R*19+4Q*18;p[5]=4S*T+4R*N+4Q*P;p[6]=4S*1f+4R*V+4Q*R;p[7]=4S*1g+4R*X+4Q*W;p[8]=4P*1a+4O*19+4N*18;p[9]=4P*T+4O*N+4N*P;p[10]=4P*1f+4O*V+4N*R;p[11]=4P*1g+4O*X+4N*W;C(m!==p){p[12]=m[12];p[13]=m[13];p[14]=m[14];p[15]=m[15]}A p}u 7I(1O,1W,1V,p){p=p||Q U(16);p[0]=1O;p[1]=0;p[2]=0;p[3]=0;p[4]=0;p[5]=1W;p[6]=0;p[7]=0;p[8]=0;p[9]=0;p[10]=1V;p[11]=0;p[12]=0;p[13]=0;p[14]=0;p[15]=1;A p}u 2p(m,1O,1W,1V,p){p=p||Q U(16);p[0]=1O*m[0*4+0];p[1]=1O*m[0*4+1];p[2]=1O*m[0*4+2];p[3]=1O*m[0*4+3];p[4]=1W*m[1*4+0];p[5]=1W*m[1*4+1];p[6]=1W*m[1*4+2];p[7]=1W*m[1*4+3];p[8]=1V*m[2*4+0];p[9]=1V*m[2*4+1];p[10]=1V*m[2*4+2];p[11]=1V*m[2*4+3];C(m!==p){p[12]=m[12];p[13]=m[13];p[14]=m[14];p[15]=m[15]}A p}u 7Z(2q,3B,2p,p){p=p||Q U(16);D x=3B[0];D y=3B[1];D z=3B[2];D w=3B[3];D 89=x+x;D 6y=y+y;D 4M=z+z;D 2I=x*89;D 88=x*6y;D 86=x*4M;D 2H=y*6y;D 84=y*4M;D 2J=z*4M;D 83=w*89;D 85=w*6y;D 87=w*4M;D 1O=2p[0];D 1W=2p[1];D 1V=2p[2];p[0]=(1-(2H+2J))*1O;p[1]=(88+87)*1O;p[2]=(86-85)*1O;p[3]=0;p[4]=(88-87)*1W;p[5]=(1-(2I+2J))*1W;p[6]=(84+83)*1W;p[7]=0;p[8]=(86+85)*1V;p[9]=(84-83)*1V;p[10]=(1-(2I+2H))*1V;p[11]=0;p[12]=2q[0];p[13]=2q[1];p[14]=2q[2];p[15]=1;A p}u 9F(m,p){D N=m[0];D V=m[4];D X=m[8];D P=m[1];D R=m[5];D W=m[9];D 1h=m[2];D 1u=m[6];D 1p=m[10];D 82=N+R+1p;C(82>0){D s=0.5/L.2v(82+1);p[3]=0.25/s;p[0]=(1u-W)*s;p[1]=(X-1h)*s;p[2]=(P-V)*s}Z C(N>R&&N>1p){D s=2*L.2v(1+N-R-1p);p[3]=(1u-W)/s;p[0]=0.25*s;p[1]=(V+P)/s;p[2]=(X+1h)/s}Z C(R>1p){D s=2*L.2v(1+R-N-1p);p[3]=(X-1h)/s;p[0]=(V+P)/s;p[1]=0.25*s;p[2]=(W+1u)/s}Z{D s=2*L.2v(1+1p-N-R);p[3]=(P-V)/s;p[0]=(X+1h)/s;p[1]=(W+1u)/s;p[2]=0.25*s}}u 7Y(2G,2q,3B,2p){D 1O=4L.M(2G.4c(0,3));D 1W=4L.M(2G.4c(4,7));D 1V=4L.M(2G.4c(8,11));D 9G=9E(2G);C(9G<0){1O=-1O}2q[0]=2G[12];2q[1]=2G[13];2q[2]=2G[14];D 2r=4L.6u(2G);D 6x=1/1O;D 6w=1/1W;D 6v=1/1V;2r[0]*=6x;2r[1]*=6x;2r[2]*=6x;2r[4]*=6w;2r[5]*=6w;2r[6]*=6w;2r[8]*=6v;2r[9]*=6v;2r[10]*=6v;9F(2r,3B);2p[0]=1O;2p[1]=1W;2p[2]=1V}u 9E(m){q 1a=m[0*4+0];q T=m[0*4+1];q 1f=m[0*4+2];q 1g=m[0*4+3];q 19=m[1*4+0];q N=m[1*4+1];q V=m[1*4+2];q X=m[1*4+3];q 18=m[2*4+0];q P=m[2*4+1];q R=m[2*4+2];q W=m[2*4+3];q 1B=m[3*4+0];q 1h=m[3*4+1];q 1u=m[3*4+2];q 1p=m[3*4+3];q 3h=R*1p;q 3g=1u*W;q 3d=V*1p;q 3f=1u*X;q 3b=V*W;q 38=R*X;q 3e=1f*1p;q 3c=1u*1g;q 37=1f*W;q 3a=R*1g;q 39=1f*X;q 36=V*1g;q 4b=18*1h;q 4a=1B*P;q 47=19*1h;q 48=1B*N;q 44=19*P;q 3Z=18*N;q 49=1a*1h;q 46=1B*T;q 42=1a*P;q 43=18*T;q 45=1a*N;q 41=19*T;q 4K=(3h*N+3f*P+3b*1h)-(3g*N+3d*P+38*1h);q 4J=(3g*T+3e*P+3a*1h)-(3h*T+3c*P+37*1h);q 4I=(3d*T+3c*N+39*1h)-(3f*T+3e*N+36*1h);q 4H=(38*T+37*N+36*P)-(3b*T+3a*N+39*P);A 1.0/(1a*4K+19*4J+18*4I+1B*4H)}u 6q(m,p){p=p||Q U(16);q 1a=m[0*4+0];q T=m[0*4+1];q 1f=m[0*4+2];q 1g=m[0*4+3];q 19=m[1*4+0];q N=m[1*4+1];q V=m[1*4+2];q X=m[1*4+3];q 18=m[2*4+0];q P=m[2*4+1];q R=m[2*4+2];q W=m[2*4+3];q 1B=m[3*4+0];q 1h=m[3*4+1];q 1u=m[3*4+2];q 1p=m[3*4+3];q 3h=R*1p;q 3g=1u*W;q 3d=V*1p;q 3f=1u*X;q 3b=V*W;q 38=R*X;q 3e=1f*1p;q 3c=1u*1g;q 37=1f*W;q 3a=R*1g;q 39=1f*X;q 36=V*1g;q 4b=18*1h;q 4a=1B*P;q 47=19*1h;q 48=1B*N;q 44=19*P;q 3Z=18*N;q 49=1a*1h;q 46=1B*T;q 42=1a*P;q 43=18*T;q 45=1a*N;q 41=19*T;q 4K=(3h*N+3f*P+3b*1h)-(3g*N+3d*P+38*1h);q 4J=(3g*T+3e*P+3a*1h)-(3h*T+3c*P+37*1h);q 4I=(3d*T+3c*N+39*1h)-(3f*T+3e*N+36*1h);q 4H=(38*T+37*N+36*P)-(3b*T+3a*N+39*P);q d=1.0/(1a*4K+19*4J+18*4I+1B*4H);p[0]=d*4K;p[1]=d*4J;p[2]=d*4I;p[3]=d*4H;p[4]=d*((3g*19+3d*18+38*1B)-(3h*19+3f*18+3b*1B));p[5]=d*((3h*1a+3c*18+37*1B)-(3g*1a+3e*18+3a*1B));p[6]=d*((3f*1a+3e*19+36*1B)-(3d*1a+3c*19+39*1B));p[7]=d*((3b*1a+3a*19+39*18)-(38*1a+37*19+36*18));p[8]=d*((4b*X+48*W+44*1p)-(4a*X+47*W+3Z*1p));p[9]=d*((4a*1g+49*W+43*1p)-(4b*1g+46*W+42*1p));p[10]=d*((47*1g+46*X+45*1p)-(48*1g+49*X+41*1p));p[11]=d*((3Z*1g+42*X+41*W)-(44*1g+43*X+45*W));p[12]=d*((47*R+3Z*1u+4a*V)-(44*1u+4b*V+48*R));p[13]=d*((42*1u+4b*1f+46*R)-(49*R+43*1u+4a*1f));p[14]=d*((49*V+41*1u+48*1f)-(45*1u+47*1f+46*V));p[15]=d*((45*R+44*1f+43*V)-(42*V+41*R+3Z*1f));A p}u 7G(m,v,p){p=p||Q U(4);1j(q i=0;i<4;++i){p[i]=0.0;1j(q j=0;j<4;++j){p[i]+=v[j]*m[j*4+i]}}A p}u 7F(m,v,p){p=p||Q U(3);q 2c=v[0];q 2b=v[1];q 2a=v[2];q d=2c*m[0*4+3]+2b*m[1*4+3]+2a*m[2*4+3]+m[3*4+3];p[0]=(2c*m[0*4+0]+2b*m[1*4+0]+2a*m[2*4+0]+m[3*4+0])/d;p[1]=(2c*m[0*4+1]+2b*m[1*4+1]+2a*m[2*4+1]+m[3*4+1])/d;p[2]=(2c*m[0*4+2]+2b*m[1*4+2]+2a*m[2*4+2]+m[3*4+2])/d;A p}u 7E(m,v,p){p=p||Q U(3);q 2c=v[0];q 2b=v[1];q 2a=v[2];p[0]=2c*m[0*4+0]+2b*m[1*4+0]+2a*m[2*4+0];p[1]=2c*m[0*4+1]+2b*m[1*4+1]+2a*m[2*4+1];p[2]=2c*m[0*4+2]+2b*m[1*4+2]+2a*m[2*4+2];A p}u 7D(m,v,p){p=p||Q U(3);q 2u=6q(m);q 2c=v[0];q 2b=v[1];q 2a=v[2];p[0]=2c*2u[0*4+0]+2b*2u[0*4+1]+2a*2u[0*4+2];p[1]=2c*2u[1*4+0]+2b*2u[1*4+1]+2a*2u[1*4+2];p[2]=2c*2u[2*4+0]+2b*2u[2*4+1]+2a*2u[2*4+2];A p}u 6u(1F,p){p=p||Q U(16);p[0]=1F[0];p[1]=1F[1];p[2]=1F[2];p[3]=1F[3];p[4]=1F[4];p[5]=1F[5];p[6]=1F[6];p[7]=1F[7];p[8]=1F[8];p[9]=1F[9];p[10]=1F[10];p[11]=1F[11];p[12]=1F[12];p[13]=1F[13];p[14]=1F[14];p[15]=1F[15];A p}A{6u:6u,81:81,80:80,6t:6t,6s:6s,6r:6r,35:35,7Z:7Z,4G:4G,7Y:7Y,7X:7X,7W:7W,7V:7V,M:M,7U:7U,7T:7T,7S:7S,2q:2q,7R:7R,7Q:7Q,7P:7P,7O:7O,7N:7N,7M:7M,7L:7L,7K:7K,7J:7J,7I:7I,2p:2p,7H:7H,6q:6q,7G:7G,7F:7F,7E:7E,7D:7D,}}));', 62, 976, '|||||||||||||||||||||||||dst|var||||function||||||return|gl|if|const|self|||||this|type|Math|length|m11|top|m21|new|m22||m01|Float32Array|m12|m23|m13|array|else|||||||||m20|m10|m00|object|ii|name|data|m02|m03|m31|px|for|program|css|arguments|angleInRadians|key|m33|indices|numComponents|options|typedArray|m32|AddUnsigned|result|let|location|ul|numberToString|m30|left|window|index|src|bufferInfo|arrays|height|II|HH|GG|FF|format|sx|offset|false|null|String|dateTime|timestamp|sz|sy|oneMinusCosine|near|setters|||||opt_errorCallback||shader|string|scrollBar||v2|v1|v0|args|toString|slider|r2|r1|far|numElements|instanceof|width|addClass|div|time|scale|translation|matrix|attribs|parent|mi|sqrt|push|programInfo|Object|Array|info|lByteCount|windowScrollMax|class|find|limitingParentElement|mat|yy|xx|zz|axis|bottom|typeof|in|attribSetters|true|forEach|buffers|buffer|value|opt_locations|opt_attribs|uniformInfo|console|interval|startPoint|margin|removeClass||outerHeight|attr|normalize|tmp_11|tmp_8|tmp_5|tmp_10|tmp_9|tmp_4|tmp_7|tmp_2|tmp_6|tmp_3|tmp_1|tmp_0|sin|cos|uniformSetters|canvas|setter|break|shaders|shaderType|utftext|lWordArray|event|windowSliderMax|appendTo|selected|visible|seconds|minutes|hours|date|quaternion|tz|ty|tx|right|position|isArray|indexOf|obj|shaderSources|topWindow|lWordCount|lResult|pos|off|scroll|list|groupId|signsAfterComma|year|datetime|month|day|parsed|tmp_17||tmp_23|tmp_20|tmp_21|tmp_16|tmp_22|tmp_19|tmp_14|tmp_15|tmp_18|tmp_13|tmp_12|slice|zAxis|factory|root|define|createProgram|prototype|primitiveType|undefined|keys|mapping|text|units|shaderSource|while|fromCharCode|lY8|lX8|num|framesLeft|parseInt|hasClass|arrangeScrollbarBackground|sliderHeight|bind|handler|li|click|params|secs|cross|t3|t2|t1|t0|m4|z2|r22|r21|r20|r12|r11|r10|r02|r01|r00|cameraPosition|xAxis|a33|b33|a23|b32|a13|b31|a03|b30|a32|a22|a12|a02|a31|a21|a11|a01|a30|a20|a10|a00|b23|b22|b21|b20|b13|b12|b11|b10|b03|b02|b01|b00|setAttributes|throw|multiplier|shaderScript|error|id|callback|vendors|enc4|_keyStr|chr3|chr2|charCodeAt|input|WordToHex|S44|S43|S42|S41|S34|S33|S32|S31|S24|S23|S22|S21|S14|S13|S12|S11|replace||lCount|lValue|||lMessageLength|lBytePosition|RotateLeft|animationCount|animationsLeft|framesCount|background|disabled|scrollable|scrollPane|round|scrollPaneHeight|pane|items|mainTitleText|limitingParentElementAbsHeight|limit|r2Bottom|r1Bottom|r2Right|r1Right|inverse|distanceSq|distance|subtractVectors|copy|invSZ|invSY|invSX|y2|yAxis|setUniforms|setBuffersAndAttributes|drawBufferInfo|createVAOAndSetAttributes|createUniformSetters|createProgramFromSources|createAttributeSetters|createAttribsFromArrays|createAugmentedTypedArray|call|results|createBufferFromTypedArray|makeTypedArray|ELEMENT_ARRAY_BUFFER|opt_mapping|isArrayBuffer|bufferName|FLOAT|bindBuffer|cursor|jj|script|attribInfo|substr|texture|bindPoint|opt_shaderType|Error|element|lastError|errFn|log|timeToCall|currTime|max|Date|requestAnimationFrame|output|charAt|enc3|chr1|128|WordToHexValue|WordToHexValue_temp|lNumberOfWords|0x40000000|lY4|lX4|lY|lX|case|non|selfHeight|scrollBarHeight|dataIsArray|mass|dropDownList|initialUlMarginTop|limitingParentElementOffsetTop|body|100|arr|currentDate|timeCorrection|floor|transformNormal|transformDirection|transformPoint|transformVector|multiply|scaling|axisRotate|axisRotation|zRotate|yRotate|xRotate|zRotation|yRotation|xRotation|translate|perspective|frustum|orthographic|transpose|identity|dot|decompose|compose|addVectors|lookAt|trace|wx|yz|wy|xz|wz|xy|x2|rangeInv|up|resizeCanvasToDisplaySize|getExtensionWithKnownPrefixes|glEnumToString|drawObjectList|createVAOFromBufferInfo|createProgramInfo|createProgramFromScripts|createBufferInfoFromArrays|createBuffersFromArrays|document|lastUsedBufferInfo|bindBuffers|lastUsedProgramInfo|count|ARRAY_BUFFER|guessNumComponentsFromName|origArray|attribName|INT|ext|browserPrefixes|source|vao|getProgramParameter|size|values|unknown|textureUnit|getBindPointForSamplerType|unit|SAMPLER_CUBE|SAMPLER_2D|uniform1iv|defaultShaderType|loadShader|shaderScriptIds|FRAGMENT_SHADER|VERTEX_SHADER|scriptId|ndx|msg|cancelAnimationFrame|lastTime|enc2|enc1|DD|CC|BB|AA|lByte|lNumberOfWords_temp1|0x80000000|iShiftBits|replaceWith|expr|duration|tick|callbackTotal|onStop|callbackEach|horizontal|backgroundPosition|imageSrc|scrollTo|delta|ui|scrollerRopeDown|scrollerRopeUp|middleHeight|arrowsHeight|getHeight|match|animationDuration|append|each|checked|group|mainTitleTextContainer|marginTop|title|main|children|listHeight|listOffsetTop|p2|p1|timestampToDate|1000|from|total|determinate|quatFromRotationMatrix|det|aspect|fieldOfViewInRadians|target|strict|use|amd|getContext|HTMLCanvasElement|origFn|webgl|isEdge|isIE|0x|join|objectsToDraw|UNSIGNED_SHORT|getNumElementsFromNonIndexedArrays|getNormalizationForTypedArray|getGLTypeForTypedArray|createMapping|Uint16Array|ArrayBuffer|Uint8Array|Int8Array|allButIndices|drawType|Type|augmentTypedArray|opt_type|opt_index|auto||ceil|prefixedName|webglUtils|getElementById|bindVertexArray|createAttribSetter|numAttribs|createUniformSetter|numUniforms|bindTexture|TEXTURE0|activeTexture|uniform1i|textures|uniform4iv|uniform3iv|uniform2iv|createShaderFromScript|linked|attrib|compiled|isNaN|temp|ConvertToWordArray|Utf8Encode|lNumberOfWords_temp2|0x3FFFFFFF|trim|toArray|constructor|switch|setInterval|dontStart|frameSize|onPause|clearInterval|repeat|no|url|transparent|hide|rearrange|mouseWheelDelta|containment|draggable|scrollToTop|show|padding|min|scrollMiddleArrow|scrollMiddle|ropeEndsHeight|scrollerDown|scrollerUp|animate|animatable|rope|middle|down|boolean|pressed|radioButtonList|applyTemplate|uiUtils|removeData|listMarginTop|listAbsHeight|newIndex|extend|number|cents|regex|glue|datetimeToString|timeFormat|currentTime|timestampToDateTime|timestampToTime|getUTCSeconds|getUTCMinutes|getUTCHours|getUTCFullYear|getUTCMonth|getUTCDate|sqlTime|secsToTime|3600|digits|keyCode|to|random|intVal|PI|tan|00001|apply|experimental|StyleMedia|documentMode|uniforms|useProgram|drawArrays|drawElements|TRIANGLES|it|specify|should|You|guess|not|can|color|coord|typed|unsupported|UNSIGNED_INT|Uint32Array|Int32Array|SHORT|Int16Array|UNSIGNED_BYTE|BYTE|a_|filter|STATIC_DRAW|bufferData|createBuffer|get|defineProperty|reset|clientHeight|clientWidth|getExtension|WEBKIT_|OP_|MOZ_|map|createVertexArray|getAttribLocation|getActiveAttrib|ACTIVE_ATTRIBUTES|stride|vertexAttribPointer|enableVertexAttribArray|getActiveUniform|ACTIVE_UNIFORMS|uniformMatrix4fv|FLOAT_MAT4|uniformMatrix3fv|FLOAT_MAT3|uniformMatrix2fv|FLOAT_MAT2|BOOL_VEC4|BOOL_VEC3|BOOL_VEC2|BOOL|INT_VEC4|INT_VEC3|INT_VEC2|uniform4fv|FLOAT_VEC4|uniform3fv|FLOAT_VEC3|uniform2fv|FLOAT_VEC2|uniform1f|uniform1fv|getUniformLocation|TEXTURE_CUBE_MAP|TEXTURE_2D|fragment|vertex|deleteProgram|linking|getProgramInfoLog|LINK_STATUS|linkProgram|bindAttribLocation|attachShader|deleteShader|compiling|getShaderInfoLog|COMPILE_STATUS|getShaderParameter|compileShader|createShader|isInIFrame|clearTimeout|setTimeout|getTime|CancelRequestAnimationFrame|CancelAnimationFrame|RequestAnimationFrame|webkit|moz|ms|encode||ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789|Base64|toLowerCase|0xEB86D391|0x2AD7D2BB|0xBD3AF235|0xF7537E82|0x4E0811A1||||0xA3014314|0xFE2CE6E0|0x6FA87E4F|0x85845DD1|0xFFEFF47D|0x8F0CCC92|0x655B59C3|0xFC93A039|0xAB9423A7|0x432AFF97|0xF4292244|0xC4AC5665|0x1FA27CF8|0xE6DB99E5|0xD9D4D039|0x4881D05|0xD4EF3085|0xEAA127FA|0x289B7EC6|0xBEBFBC70|0xF6BB4B60|0x4BDECFA9|0xA4BEEA44|0xFDE5380C|0x6D9D6122|0x8771F681|0xFFFA3942|0x8D2A4C8A|0x676F02D9|0xFCEFA3F8|0xA9E3E905|0x455A14ED|0xF4D50D87|0xC33707D6|0x21E1CDE6|0xE7D3FBC8|0xD8A1E681|0x2441453|0xD62F105D|0xE9B6C7AA|0x265E5A51|0xC040B340|0xF61E2562|0x49B40821|0xA679438E|0xFD987193|0x6B901122||0x895CD7BE|0xFFFF5BB1|0x8B44F7AF|0x698098D8|0xFD469501|0xA8304613|0x4787C62A|0xF57C0FAF|0xC1BDCEEE|0x242070DB|0xE8C7B756|0xD76AA478|0x10325476|0x98BADCFE|0xEFCDAB89|0x67452301|224|192|2048|127|255|0x80|0xC0000000|MD5|abs|sign|default|pauseAnimation|stopAnimation|animation|mousewheel|drag|center|scrollToBottom|wrap|content|arrow|selectstart|bar|400|scrollerPadding|html|outerHTML|mouseout|mouseup|mousedown|clickable|first|inArray|button|radio|next|item|drop|contTop|innerHeight|hidden|overflow|unbind|stopPropagation|mainTitleContainer|mainTitle|jQuery||numberWithFractional|centsToDecimal|catch|try|parseId|objectKeys|showDateForAnotherDay|timestampToDateTimeString|timestampToDateString|timestampToTimeString|sqlTimeToDateTime|secsToString|rectsAreIntersected|eval|pow|ctrlKey|shiftKey|altKey|isCtrlEnterEvent|rect|pc|10800'.split('|')))

eval(function(p, a, c, k, e, d) {
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + c.toString(a) + '\\b','g'), k[c])
        }
    }
    return p
}('7 c={b:9(4,2,0){7 1=$(\'<1></1>\').2(2);6(0){1.0(0)}6(!4){5 1}4.8(1);5 1},a:9(4,2,0){7 3=$(\'<3 />\').2(2);6(0){3.0(0)}4.8(3);5 3}};', 13, 13, 'css|div|attr|img|container|return|if|var|append|function|createPreloadImage|createUIElement|domFactory'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('8 7={g:{},1N:5(D){3.p=9;3.e=9;3.j=9;3.o=9;3.c=[];3.t=0;3.s=0;3.B=$.1M;3.16=1L;3.q=9;3.I=17;b($.H.14&&$.H.1K==\'6.0\'){F 17}3.I=1J;3.X(D)},1I:5(){b(!3.I){F}3.13(3.B);3.Y();3.q=1H("7.15()",3.16)},15:5(){b($.H.14){1G((A/7.t)*7.s<A){7.E()}}},E:5(){3.s++;3.R()},13:5(12){8 1F=$(12).k(\'*:1E(1D)\').1C(5(){8 4=\'\',11=$(3),G=11.C(\'m-S\');b(G!=\'1B\'){4=G}Q b(1A(3.u)!=\'1z\'&&3.1y.1x()==\'T\'){4=3.u}4=4.v(\'4("\',\'\');4=4.v(\'4(\',\'\');4=4.v(\'")\',\'\');4=4.v(\')\',\'\');b(4.a>0&&!7.g[4]&&4.10(\'1w?1v:1u\')==-1){7.g[4]=1;7.c.Z(4)}});8 h=[];x(8 i=0;i<h.a;i++){8 4=h[i].1t(0)==\'/\'||h[i].10(\'1s://\')==0?h[i]:\'./C/\'+h[i];b(4.a>0&&!7.g[4]){7.g[4]=1;7.c.Z(4)}}},Y:5(){8 a=3.c.a;3.t=a;b(!a){3.y();F}x(8 i=0;i<a;i++){1r.1q(3.e,{\'u\':7.c[i]}).1p(5(){7.g[$(3).1o(\'u\')]++;7.E()})}},X:5(D){8 d=$(1n.1m(\'e\'));3.p=d;d.1l(\'.1k\').C({1j:($.W.1i()/2-V)+"U",1h:($.W.z()/2-V)+"U"});3.1g=d.k(\'.T\');3.j=d.k(\'.1f-1e\');3.e=d.k(\'.e\');3.o=d.k(\'.S-m\');3.B.1d(d);3.w(3.o)},R:5(){8 r=(A/3.t)*3.s;b(r>1c){3.j.P().n({z:r+\'%\'},O,\'N\',5(){7.y()})}Q{3.j.P().n({z:r+\'%\'},O,\'N\',5(){})}},y:5(){1b(3.q);3.q=9;3.p.M();3.p=9;3.j=9;3.o=9;x(8 i=0;i<3.c.a;i++){3.c[i]=9}3.c=[];3.e.M();3.e=9;1a.19()},w:5(f){8 l=3;f.n({\'m-K\':-18},J,5(){l.L(f)})},L:5(f){8 l=3;f.n({\'m-K\':0},J,5(){l.w(f)})}};', 62, 112, '|||this|url|function||queryLoader|var|null|length|if|items|content|preloader|backgrd|preloadedItems|forcedImages||loadBar|find|self|background|animate|imageBackground|overlay|ieTimeout|perc|doneNow|doneStatus|src|replace|animateRight|for|doneLoad|width|100|selectorPreload|css|firstTime|imgCallback|return|bgndImage|browser|inited|9000|position|animateLeft|remove|linear|500|stop|else|animateLoader|image|img|px|224|window|spawnLoader|createPreloading|push|indexOf|element|selector|getImages|msie|ieLoadFix|ieLoadFixTime|false|335|onDoneWithPreloader|uiManager|clearTimeout|99|append|bar|progress|logo|left|height|top|wrapper|children|applyTemplate|uiUtils|attr|load|createPreloadImage|domFactory|http|charAt|getMini|map|get|toLowerCase|tagName|undefined|typeof|none|each|script|not|everything|while|setTimeout|run|true|version|2000|body|init'.split('|')))

class additionalAristocratModel {
    static getAristocratPrice(aristocratNumber) {
        let aristocratPrice = staticDataModel.config.aristocratPrice
            , price = 0;
        if (aristocratNumber <= 0)
            return price;
        for (let index in aristocratPrice) {
            if (aristocratNumber < parseInt(index)) {
                break;
            }
            price = aristocratPrice[index];
        }
        price += additionalAristocratModel.getAristocratPrice(aristocratNumber - 1);
        return price;
    }
    static buyCoins(coinsAmount, success, error, ajaxError) {
        let req = new request();
        req.addGetting('aristocrat:buyAristocratCoins', ['all'], {
            townId: townModel.getData().Id,
            amount: coinsAmount
        });
        req.addGetting('town:getInfo', ['Resources'], {
            townId: townModel.getData().Id
        });
        req.addGetting(playerItemsModel.getting.getItems, ['all'], {
            id: playerModel.getData().Id
        });
        req.getResponse(function(data) {
            playerItemsModel.loadData(data['return'][playerItemsModel.getting.getItems]);
            $.extend(townModel.getData(), data['return']['town:getInfo']);
            success && success();
        }, {
            timeout: 20000,
            callback: ajaxError
        });
    }
    static getAristocratNumber() {
        let aristocratTrained = playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_TRAINED]
            , aristocratGifted = playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_GIFTED]
            , aristocratDied = playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_DIED];
        aristocratTrained = aristocratTrained === undefined ? 0 : aristocratTrained;
        aristocratGifted = aristocratGifted === undefined ? 0 : aristocratGifted;
        aristocratDied = aristocratDied === undefined ? 0 : aristocratDied;
        return aristocratTrained + aristocratGifted + playerModel.getData().TownCount - 1 - aristocratDied;
    }
    static getAristocratCoins() {
        return playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_COINS] === undefined ? 0 : playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_COINS];
    }
    static isEnabled() {
        if (staticDataModel.config.useNewAristocrat !== undefined) {
            return staticDataModel.config.useNewAristocrat;
        }
        return false;
    }
}
eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('e P={1F:{14:\'8:14\',13:\'8:13\',12:\'8:12\',11:\'8:11\',10:\'8:10\',Z:\'8:Z\'},1E:a(u,5,E,x){e r=n m(),F=Y,t={5:5},9=\'8:1D\',D=a(4){F.v(4[\'6\'][7.d.c]);x(4[\'6\'][9])};$.W(t,E);r.g(9,[\'C\'],t);r.g(7.d.c,[\'B\',\'b\',\'i\'],{5:5});r.U({1C:u});r.l(D,{T:S})},1B:a(w,u,5,E,x){e r=n m(),F=Y,t={5:5,w:w},V=\'8:y\',8=7.o().b[w],D=a(4){F.v(4[\'6\'][7.d.c]);f(4[\'6\'][h.s.q]){h.O(4[\'6\'][h.s.q])}f((4[\'p\'][\'8:y\']===1A)||(/X/.1z(4[\'p\'][\'8:y\']))){x(4[\'p\'][\'8:y\']);6}f(4[\'p\'][\'8:y\']===1y){x(1x.1w);6}1v.1u(H.o().X.1t.1s)};$.W(t,E);r.Q(V,t);r.U({1r:u});r.g(7.d.c,[\'B\',\'b\',\'i\'],{5:5});r.l(D,{T:S})},1q:a(5){e r=n m(),9=\'N:1p\';r.g(9,[\'C\'],{5:5});6 r.l()[\'6\'][9]},1o:a(5){e r=n m(),9=\'8:1n\';r.g(9,[\'C\'],{5:5});6 r.l()[\'6\'][9]},1m:a(j,5,k){e r=n m(),9=\'8:1l\',8=7.o().b[j];f(K.1k()){K.1j.1i(j)}r.Q(9,{5:5,w:j});r.g(7.d.c,[\'b\',\'i\'],{5:5});r.l(a(4){P.v(4[\'6\'][7.d.c]);f(4[\'6\'][h.s.q]){h.O(4[\'6\'][h.s.q])}k(4[\'p\'][9])})},1h:a(j,5,k){e r=n m(),9=\'N:1g\',8=7.o().b[j];r.Q(9,{5:5,j:j});r.g(7.d.c,[\'b\',\'i\',\'A\',\'1f\'],{5:5});r.l(a(4){P.v(4[\'6\'][7.d.c]);f(4[\'6\'][h.s.q]){h.O(4[\'6\'][h.s.q])}k(4[\'p\'][9])})},1e:a(k){e r=n m(),M=\'N:1d\';r.g(M,[\'C\'],{5:7.o().B});r.g(7.d.c,[\'i\',\'1c\'],{5:7.o().B});r.l(a(R){k&&k(R[\'6\'],7.d.c,M)})},v:a(4){f(4.i)7.L.i=4.i;f(4.b)7.L.b=4.b;f(4.A){7.L.A=4.A;K.1b.1a()}},19:a(J){e z=J.u;18(J.17){I 1:G;I 2:z=H.16();G;I 3:z=H.15(0);G}6 z}};', 62, 104, '||||data|townId|return|townModel|army|method|function|Armies|info|gettings|var|if|addGetting|playerItemsModel|Troops|armyId|callback|getResponse|request|new|getData|action|getItems||getting|troopsData|name|refreshMilitaryInfo|id|sendNewArmyCallback|edit|aimName|FreePeople|Id|all|success|troops|self|break|i18nModel|case|aim|gameController|townData|armiesGetting|town|loadData|armyModel|addAction|result|15000|timeout|addPostData|armyMethod|extend|error|this|delSpeedBonus|delDefenceBonus|delAttackBonus|addSpeedBonus|addDefenceBonus|addAttackBonus|getDungeonTitleByType|getBarbariansName|type|switch|getAimName|updateResources|resourcesPanel|Resources|getTownArmies|doAfterDef|ResourcesPerHour|armyDismissToFreePeople|dismissArmy|routeConstructorHide|worldMap|isMap|dismiss|disbandArmy|getList|getArmyList|getTownReinforcement|getReinforcementList|editArmyName|createError|squareArmyManagement|showSystemMessage|messageController|armyIdInEditing|armyController|true|test|false|editArmy|newArmyName|createNew|createArmy|actions'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('4l h={4k:1,4j:2,34:3,4i:4,4h:5,4g:6,4f:7,4e:8,4d:9,4c:13,2o:16,33:17,4b:20,2T:[14,20,19,15],4a:10,49:12,1e:1q,1t:1q,1f:\'2m:48\',1W:{47:6,46:7,45:5,2D:1,36:9},1M:{2t:6,11:4,12:3,13:5,15:5,19:3,20:5},44:j(c){b q.Z(c)<1||(q.Z(c)===l.B[c].2q&&q.Z(c)===l.B[c].1h)?1s.38(c):43.42(1s.g().2m.41,1s.38(c),q.Z(c))},Z:j(c){b a.g().y[c].G},1K:j(c){f n=h.Z(c);u(f k=0;k<a.g().v.1b;k++){e(a.g().v[k].S===c){n=(a.g().v[k].1j===1)?(n+1):(n-1)}}b n},32:j(c){b l.B[c].1h},1A:j(o,n=-1){n=n>=0?n+1:a.g().y[o].G+1;f 1O=l.B[o].1y[n],2u={};e(l.B[o]&&l.B[o].2v&&l.B[o].2v[n]){2u=l.B[o].2v[n]}f K=$.37(1i,{\'1J\':2u},1O);u(f D E K.R){e([\'2n\'].2h(D)!==-1)1a;f H=p.35(D),L=0;u(f J E H){f m=H[J];e(!p.z[m]||p.z[m].G===0)1a;L+=p.z[m].1o/F}e(L>1N){L=1N}K.R[D]=1c.1p(K.R[D]*(F-L)/F)}b K},2Y:j(o,n=-1){n=n>=0?n-1:a.g().y[o].G-1;f 1O=l.B[o].1y[n]||{},K=$.37(1i,{},1O);u(f D E K.R){e([\'2n\',\'36\'].2h(D)!==-1)1a;f H=p.35(D),L=0;u(f J E H){f m=H[J];e(!p.z[m]||p.z[m].G===0)1a;L+=p.z[m].1o/F}e(L>1N){L=1N}K.R[D]=1c.1p(K.R[D]*(F-L)/F)}b K},2d:j(c){c=W(c);e(c===0){b 0}e(c===h.34){b a.g().40?2:1}f U=q.Z(c);e(U===0){b 0}e(c===h.33){3Z(a.g().2p){1u 1:b 1;1u 3Y:b 2;1u 3X:b 3;1u 3W:b 4;1u 3V:b 5;2t:b 1}}f 1h=q.32(c),31=q.1M[c]?q.1M[c]:q.1M[\'2t\'];b 1c.1p((31-1)/(1h-1)*U)},3U:j(c){c=W(c);b a.g().y[c].2f},2O:j(c,30){c=W(c);a.g().y[c].2f=30},1V:j(){e(!q.1t){q.2e()}b q.1t},2e:j(){e(2Z.1b>0){q.1t=2Z[0];b}f C=2a 29();C.1H(q.1f,[\'2S\'],{1F:a.g().1E});q.1t=C.24()[\'b\'][q.1f]},Q:j(1g){b 1s.g().1g.3T[1g]},3S:j(c){e(a.g().2p===4&&c===h.2o){b\'\'}f 22=h,2W=l.B[c],n=h.1K(c),2r=h.2Y(c,n);f 1L=a.g().v.1b;f 2s=(A.1d()[A.1B.2X])?A.1d()[A.1B.2X].1T:l.3R.2s;e(1L>=2s){b h.Q(\'2V\')}u(f D E 2r.R){e(1m.g().2U[D]<2r.R[D]){b h.Q(\'2i\')}}e(2W.2q>=22.1K(c)){b h.Q(\'2q\')}b\'\'},3Q:j(c){e(a.g().2p===4&&c===h.2o){b\'\'}f 2l=\'\',1L=a.g().v.1b;e(1L>=l.N.3P){b h.Q(\'2V\')}f n=h.1K(c),I=h.1A(c,n),2k=I.2n;f C=1P;u(f 1r E I.1J){e(I.1J[1r]>h.Z(1r)){2l+=1s.g().2m.B[1r].3O+\'(\'+I.1J[1r]+\')\'+\'</3N>\';C=1i}}e(C)b h.Q(\'3M\')+2l;e(n>=l.B[c].1h){b h.Q(\'1h\')}e(2k>a.g().1G&&2k>0){b h.Q(\'3L\')}u(f 2j E l.N.2i.3K){e(W(I.R[2j])>W(1m.g().2U[2j])){b h.Q(\'2i\')}}b\'\'},1Z:j(2M,27,1g,23){f C=2a 29(),2g=[\'v\',\'y\',\'28\'],c=W(a.g().v[0].S);e(q.2T.2h(W(c))>=0){2g.2z(\'1I\')}C.1H(a.t.s,2g,{\'1F\':a.g().1E});e(c===1){C.1H(h.1f,[\'2S\'],{1F:a.g().1E})}C.24(j(r,2Q){a.g().y=r[\'b\'][a.t.s].y;u(f o E a.2R.y){a.2R.y[o].2f=h.2d(o)}e(r[\'b\'][a.t.s].v[0]&&r[\'b\'][a.t.s].v[0]===2Q&&r[\'b\'][a.t.s].v[0].1C-r[\'b\'][a.t.s].v[0].1D>0){1g&&1g(a.w(0),r[\'b\'][a.t.s].v[0]);b}e(c===1&&r[\'b\'][h.1f]){h.2e(r[\'b\'][h.1f])}e(c===11){2P.3J();2P.3I()}h.2O(c,h.2d(c));2c.2b&&2c.2b[c]&&2c.2b[c].3H.3G.3F(\'3E\');e(r[\'b\'][a.t.s].1I){a.g().1I=r[\'b\'][a.t.s].1I}a.g().v=r[\'b\'][a.t.s].v;a.g().2N=r[\'b\'][a.t.s].2N;f C=2a 29(),2L=j(r){a.g().1G=r[\'b\'][a.t.s].1G;a.g().25=r[\'b\'][a.t.s].25;a.g().26=r[\'b\'][a.t.s].26;a.g().28=r[\'b\'][a.t.s].28;1x.2y(\'3D\');27&&27(2M,c)};C.1H(a.t.s,[\'1G\',\'26\',\'25\'],{\'1F\':a.g().1E});C.24(2L,{2K:2J,2I:23||1q})},{2K:2J,2I:23||1q})},3C:j(1Z){f 22=h;1x.3B(\'18\'+a.w(0).3A,{21:0.3z+a.w(0).1C-a.w(0).1D,3y:j(21){a.w(0).1D=a.w(0).1C-21;h.1e&&h.1e(a.w(0).S)},3x:j(){a.w(0).1D=a.w(0).1C;e(1m.3w().3v){3u.3t(a.g().3s,a.g().X,a.g().Y,a.w(0).S,a.w(0).1j===1?a.g().y[a.w(0).S].G+1:a.g().y[a.w(0).S].G-1)}h.1e&&h.1e(a.w(0).S);1Z(W(a.w(0).1j))}})},3r:j(){q.1e=1q},3q:j(o){f P=0;f I=h.1A(o);e(I.1z){P=I.1z}b 1c.1p(P)},3p:j(o){f P=0,H=p.3o(),V=0;u(f J E H){f m=H[J];e(!p.z[m]||p.z[m].G===0)1a;V+=p.z[m].1o/F}e(A.1d()[A.1B.2H]){V+=A.1d()[A.1B.2H].1T}e(l.N.M&&l.N.M.3n>=1m.g().G){V+=l.N.M.3m}e(V>2G){V=2G}f I=h.1A(o);e(I.1z){P=I.1z;e(V>0){P*=(F-V)/F}f 1Y=l.B[2F.2E],1X=a.g().y[2F.2E].G;e(1Y.1y[1X]!==2x){P=P*1Y.1y[1X].3l/F}}b 1c.1p(P)},3k:j(O,U){e(!h.1W[O]){b 1P}f x={T:0,1k:0,1S:0,M:0,1n:[]},o=h.1W[O],1k=0,1l=0;e(!(U>0)){U=a.g().y[o].G}f T=h.1V()[o][U]?h.1V()[o][U].3j:0;e(O===\'2D\'){x.3i=T[1];x.T=T[0]}2w{x.T=T}e(A.1U[O]&&A.1d()[A.1U[O]]){x.1S=A.1d()[A.1U[O]].1T;1l+=x.1S}f 2C=p.3h(),2B=p.3g(),H=2C[O],1R=2B[O];u(f J E 1R){f m=1R[J];e(!p.z[m])1a;x.1n[m]=p.z[m].1o/F;1l+=x.1n[m]}u(f J E H){f m=H[J];e(!p.z[m])1a;x.1n[m]=p.z[m].1o;1k+=x.1n[m]}e(l.N.M&&l.N.M.3f>=1m.g().G){x.M=l.N.M.2A;1l+=l.N.M.2A}x.1k=1c.3e(x.T*1l/F)+1k;b x},3d:j(){f 1w=[];u(f 1Q E 1x.3c){e(1Q.3b(/^18\\d+/)){1w.2z(1Q)}}u(f i=0;i<1w.1b;i++){1x.2y(1w[i])}},3a:j(c,1v){f 18=a.g().v;u(f i=0;i<18.1b;i++){e(18[i].S===c){e(39(1v)===\'2x\'){b 1i}2w e((18[i].1j===1&&1v)||(18[i].1j===2&&!1v)){b 1i}}}b 1P}};', 62, 270, '||||||||||townModel|return|id||if|let|getData|buildingsModel||function||staticDataModel|skillId|buildingLevel|buildingId|rpgModel|this|response|info|gettings|for|BuildingConstruction|getBuildingConstructionByQueue|result|Buildings|playerSkills|premiumModel|buildings|req|res|in|100|Level|skillArr|upgradeInfo|index|retArr|koef|newbie|config|resource|timeToBuild|errorHandlerForBuilding|Cost|BuildingId|baseMining|level|speedKoef|parseInt|||getLevel|||||||||buildingConstruction||continue|length|Math|getPlayerPremiums|constructionOnTick|helpDataGettingName|error|maxLevel|true|Type|increment|incrementPercent|playerModel|RPGPercent|Parameter|ceil|null|requirement|i18nModel|helpData|case|upgrade|keysToRemove|timingModel|levels|Time|getUpgradeInfo|ministerTasks|BuildTime|CompleteTime|Id|townId|FreePeople|addGetting|RecruitingList|Requirement|getLevelConsideringQueue|buildingConstructionCount|buildingImagesLevelsCount|90|buildingCost|false|cId|skillArrPer|ministerPercent|Percent|ministerTasksByResource|getHelpData|buildingIdByResource|townHallLevel|townHall|completeConstruction||count|self|timeoutError|getResponse|Workers|TotalPeople|success|Points|request|new|buildingLayers|townController|calculateImageIndex|loadHelpData|ImageIndex|townGetInfo|indexOf|resources|upResource|buildersPerLevel|requirementNameAndLevel|town|PionsToStay|wallsId|CreatedType|minLevel|downgradeInfo|buildingQueryLimit|default|buildingRequirement|requirements|else|undefined|removeCountdown|push|miningSpeedCoefficient|bonusArrPercent|bonusArr|gold|TOWN_HALL_ID|Building|85|buildingFaster|callback|15000|timeout|complete|type|ResourcesPerHour|setImageIndex|TownResearch|lastStartTime|townData|all|millitaryBuildings|Resources|slotBusy|building|buildingQueueBigger|getDowngradeInfo|arguments|value|imagesCount|getMaxLevel|specialBuildingId|squareId|getSkillsAffectingBuildingCost|food|extend|getBuildingName|typeof|isBuildingQueued|match|countdown|clearBuildingConstructionCountdowns|floor|miningSpeedMaxLvl|getSkillsAffectingResourcePerHourPercent|getSkillsAffectingResourcePerHour|buildingIncrease|Additional|getMiningForResourceAtLevel|Spec2|buildSpeedCoefficient|buildSpeedMaxLvl|getSkillsAffectingBuildingSpeedIncrease|getActualUpgradeTimeForBuilding|getBaseUpgradeTimeForBuilding|clear|Name|onBuildingCompleteCurrentTown|nativeNotificationController|ntfBldngCmptCurTown|getSettings|onFinish|onTick|000000001|StartTime|addCountdown|addTimer|finishBuilding|visible|removeClass|content|progressBar|updateLevel|updateResearches|nameToId|freePeople|buildRequire|br|name|defaultBuildingConstructionQueueSize|checkForBuildingUpgrade|premiumParams|checkForBuildingDowngrade|townBuildingUpgrade|getImageIndex|104|103|102|101|switch|ReadyToDie|buildingTooltipFormat|format|String|getTooltipForBuilding|stone|iron|wood|getHelp|repositoryId|treasuryId|castleId|marketId|farmId|millId|mineId|sawmillId|quarryId|barnId|homesId|townHallId|var'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('6 M={n:-1,r:[],D:0,f:G,O:7(){6 4=A z(),5=\'B:N\';4.w(5,[\'v\'],{});4.u(t);2.9=4.s()[\'3\'][5];3 2.9},14:7(){g(!2.9){3 2.O()}3 2.9},N:7(){g(!2.f){g(2.9){2.f={};o(6 p 13 2.9){o(6 q=0;q<2.9[p].j;q++){2.f[2.9[p][q]]=p}}}F{2.f={}}}3 2.f},12:7(C){6 5=\'B:11\',4=A z(),l={10:M.J()};4.u(t);4.w(5,[\'v\'],l);4.s(7(d){6 L=d[\'3\'][5]?d[\'3\'][5]:[];C&&C(L)})},Z:7(e){6 d=[],c=$.Y(e);o(6 i=0;i<c.j;i++){c[i]=K(c[i])}c.X(7(a,b){3 a-b});o(i=0;i<c.j;i++){6 8=c[i];g(8>0&&8<=2.n&&!e[8].W){V}e[8].m=K(8);2.n=e[8].m;d.E(e[8])}3 d},J:7(){3 2.n},U:7(k,I){6 5=\'B:T\',4=A z(),l={S:y.x().m,R:I&&y.x().H?y.x().H.m:G};4.w(5,[\'v\'],l);4.Q({k:k});4.u(t);6 h=4.s();g(!h||!h[\'3\'][5]){3 P}F{2.r.E(k);2.D=2.r.j;3 h[\'3\'][5]}}};', 62, 67, '||this|return|req|method|var|function|id|smilesData|||ids|data|preData|smileDefinitions|if|response||length|text|params|Id|lastMessageId|for|smileNumber|smileSubNumber|history|getResponse|chatBackend|setBaseURL|all|addGetting|getData|playerModel|request|new|chat|successCallback|historyPosition|push|else|null|Union|intoUnion|getLastMessageId|parseInt|messagesData|chatModel|getSmileDefinitions|loadSmiles|false|addPostData|unionId|PlayerId|post|postMessage|continue|IsCommandResult|sort|objectKeys|prepareMessages|lastId|update|getMessages|in|getSmiles'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('5 14={p:[],1Z:11,C:[],L:[],T:0,K:0,1l:0,9:{A:\'s:A\',1n:\'s:1n\',I:\'s:I\',q:\'s:q\',\'M\':\'s:M\',S:\'s:1Y\',r:\'s:r\'},1X:d(1W){7(1m.e){8.K=1m[0]}H{5 3=8,b=y x();b.w(8.9.S,[\'v\'],{});b.u(d(m){7(m&&m[\'4\']&&m[\'4\'][3.9.S]!=1k){3.K=m[\'4\'][3.9.S]}})}},1V:d(){4 8.K>1U?1T:8.K},r:d(R,t,12){5 3=8,b=y x();8.1l=R;b.w(8.9.r,[\'v\'],{R:R});b.u(d(m){7(m&&m[\'4\']&&m[\'4\'][3.9.r]!==1k){5 J=3.p,B=m[\'4\'][3.9.r].p;h(5 i=0;i<B.e;i++){3.X(B[i]);h(5 j=0;j<J.e;j++){7(J[j].6&&J[j].c==B[i].c){B[i].6=J[j].6}}}3.p=B;t&&t(m[\'4\'][3.9.r])}H{12&&12()}})},1S:d(){4 8.p},1R:d(1j,10,n,f,l){5 3=8,b=y x();b.w(8.9.A,[\'v\']);b.W({1Q:1j,10:10,n:n});b.u(d(a){7(!a||!a[\'4\'][3.9.A]||a[\'4\'][3.9.A].1i==1h){l&&l(a[\'4\'][3.9.A]);4}f&&f()})},1P:d(Q,n,f,l){5 3=8,b=y x(),o={c:Q},2=8.P(Q);7(2&&2.6&&2.6.e){h(5 i=0;i<2.6.e;i++){o.z=!o.z?2.6[i].c:1d.1c(o.z,2.6[i].c)}}b.w(8.9.q,[\'v\'],o);b.W({n:n});b.u(d(a){7(!a||!a[\'4\'][3.9.q]||a[\'4\'][3.9.q].1i==1h){5 1g=(a&&a[\'4\']&&a[\'4\'][3.9.q])?a[\'4\'][3.9.q]:G;l&&l(1g);4}5 2=3.P(Q),1f=a[\'4\'][3.9.q].2,g=a[\'4\'][3.9.q].6;7(!2.6){2.6=[]}h(5 i=0;i<g.e;i++){g[i].n=1b.1a(g[i].n);2.6.Y(g[i])}$.1O(2,1f);3.X(2);f&&f(2)})},P:d(c){7(8.p){h(5 i=0;i<8.p.e;i++){7(8.p[i]&&8.p[i].c==c){4 8.p[i]}}}4 G},1N:d(c,f,l,1e){5 3=8,o={c:c},2=3.P(c),O=G;7(2){8.T=c;7(1e||!2.6||!2.6.e||(2.6.e&&2.15)){7(2&&2.6&&2.6.e){O=V;h(5 i=0;i<2.6.e;i++){o.z=!o.z?2.6[i].c:1d.1c(o.z,2.6[i].c)}}5 b=y x();b.w(8.9.I,[\'v\'],o);b.u(d(a){7((!a||!a[\'4\'][3.9.I])){l&&l()}H{5 g=a[\'4\'][3.9.I].6,N=[];7(!2.6){2.6=[]}h(5 i=0;i<g.e;i++){5 Z=V;7(O){h(5 j=2.6.e-1;j>=0;j--){7(2.6[j].c==g[i].c){Z=G;1M}}}7(Z){g[i].n=1b.1a(g[i].n);2.6.Y(g[i]);7(O){N.Y(g[i].c)}}}7(N.e){f&&f(2,N)}H{f&&f(2)}}});4}f&&f(2);4}l&&l()},X:d(2){5 E=\'\',F=\'\';7(2.1L==1K.1J().1I){E=\'18\';F=\'19\'}H{E=\'19\';F=\'18\'}2.1H=2[E+\'17\'];2.1G=2[F+\'17\'];2.1F=1E.1D(2.1C,16.1B(),{1A:G,1z:1y.1x(),1w:16.1v()});2.1u=2[F+\'1t\'];2.15=2[E+\'1s\']},1r:d(D,t){5 3=14,b=y x();7(!D){4}b.w(8.9[\'M\'],[\'v\']);b.W({1q:D.1p(\'.\')});b.u(d(a){7(a&&a[\'4\'][3.9[\'M\']]===V){h(5 i=0;i<D.e;i++){5 U=D[i];h(5 j=0;j<3.C.e;j++){7(3.C[j]&&3.C[j].c==U){3.C.13(j,1);j--}}h(5 k=0;k<3.L.e;k++){7(3.L[k]==U){3.L.13(k,1);k--}}}t&&t()}})},1o:d(){8.T=0}};', 62, 124, '||conversation|self|return|var|messages|if|this|gettings|response|req|id|function|length|success|newMessages|for||||error|data|body|gettingParams|list|reply|getPage|conversations|successCallback|getResponse|all|addGetting|request|new|lastMessageId|start|newList|conversationsList|conversationIds|currentPlayerKey|interlocutorPlayerKey|false|else|read|oldList|unreadConversations|openConversationsList|delete|newMessagesIds|loadedConversation|getConversationById|conversationId|page|unreadCount|currentConversationId|idToDelete|true|addPostData|prepareConversation|push|notInConversation|subject||failCallback|splice|conversationModel|unreadMessagesCount|i18nModel|Status|p1|p2|bb2html|uiUtils|max|Math|forceReload|newConversationData|errorCode|String|constructor|receiverName|undefined|currentPage|arguments|update|unsetCurrentConversationId|join|ids|removeConversations|UnreadCount|Name|interlocutorName|getTimeFormat|timeFormat|getCurrentTime|timingModel|currentTime|showDateForAnotherDay|getDateTimeFormat|updatedAt|timestampToDateTimeString|Util|lastMessageFormattedDateTime|statusForInterlocutorPlayer|statusForCurrentPlayer|Id|getData|playerModel|p1Id|break|openConversation|extend|sendMessage|to|createConversation|getList|99|100|getUnreadConversationsCount|count|loadUnreadConversationsCount|getUnreadCount|conversationsOnPage'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('7 a={1I:2H,4:l,N:l,o:l,t:0,K:0,T:0,2G:12,1H:0,F:0,2F:b(U){7 18=C 2E();18.2D(1Q.1P.1O,[\'1A\'],{});7 1N=18.2C()[\'1B\'][1Q.1P.1O];a.1M(1N);(U&&2B(U)===\'b\')&&U()},1M:b(4){7 3=a,1L=3.t;3.4=4;3.N=4;8.2A=p.J();3.R();5(!8.n){3.y(\'s\')}5(3.o){Y p.1u[a.o];a.o=l}3.o=p.2z({2y:1,13:3.13});1w.1v();5(1L<3.t){5(1K.1J().2x){2w.2v()}5(1K.1J().2u){2t.2s(3.t,3.K)}}},R:b(){7 3=a,q=[],2r=3.F;3.t=0;3.K=0;3.T=0;k(7 i 11 3.4){7 6=3.4[i];5(6.g<=p.J()){q.M(i);2q}5(3.F<6.D){3.F=6.D}5(6.2p*2o+3.1I>=p.J()){6.C=1;3.t++}r{5(6.C===1){6.10=P}6.C=0}3.K++;5(6.e==1||6.e==9){3.T++}}k(i=q.w-1;i>=0;i--){3.4.1x(q[i],1)}5(3.F>0&&3.1H<3.F){5(8.n){8.2n=12}}},1l:b(){7 m=a,c=8;5(!c.n){m.W();5(m.4!=l&&m.4.w>0){c.h.f(\'.1E\').O(\'1D-1C\');k(7 i 11 m.4){7 6=m.4[i];6.2m={\'I\':$.2l(6.g,\'{0}:{1}:{2}\'),\'2k\':$.2j(6.g,\'{0}.{1}.{2}\')};6.2i=1g.1f().1e.1G[6.1G],6.E=$.1z(6.g-p.J(),\'{0}:{1}:{2}\');7 1F=c.2h(6);c.2g(1F,6.D)}c.17.f(\'.Q\').16(m.1t);c.17.f(\'.1d\').16(m.1s);c.17.f(\'.2f\').16(m.1m)}r{c.h.f(\'.1E\').V(\'1D-1C\')}m.Z();m.1i()}},Z:b(){5(8.n)1B;7 m=a,c=8;c.h.f(\'.15 .C .14\').B(m.t);c.h.f(\'.15 .2e .14\').B(m.K);c.h.f(\'.15 .1A .14\').B(m.T)},13:b(){7 3=a,S=12,q=[];3.R();5(3.4!=l){k(7 i 11 3.4){7 6=3.4[i],E=2d.2c(6.g-p.J());5(E<=0){q.M(i);5(!8.n){8.2b(6.D)}S=P}r{6.E=$.1z(E,\'{0}:{1}:{2}\');5(!8.n){8.1y(6.D).f(\'.2a-I .I\').B(6.E)}5(6.10){Y 6.10;5(!8.n){8.1y(6.D).O(\'C\')}S=P}}}}k(7 i=q.w-1;i>=0;i--){3.4.1x(q[i],1)}5(S){3.R();3.Z();1w.1v()}5(3.4.w<1&&a.o){Y p.1u[a.o];a.o=l}},1t:b(4){7 z=$(4.X),A=/(\\d+) x (\\d+)/.1r(z.B());1q.1p({1o:A[1],1n:A[2]})},1s:b(4){7 z=$(4.X),Q=z.29().28(\'.Q\'),A=/(\\d+) x (\\d+)/.1r(Q.B());1q.1p({1o:A[1],1n:A[2]})},1m:b(4){7 z=$(4.X);27.26(z.25())},24:b(){a.W();8.n=P;8.h=l},23:b(){5(8.h.f(\'.1k .1j-I .y\').22(\'s\')){a.y(\'v\')}r{a.y(\'s\')}a.1l()},W:b(){8.21()},y:b(e){7 3=a,G,H=8.h.f(\'.1k .1j-I .y\');5(e==\'v\'){H.O(\'s\');H.V(\'v\')}r{H.O(\'v\');H.V(\'s\')}k(7 i=0;i<3.4.w;i++){k(7 j=0;j<3.4.w;j++){5((e==\'s\'&&3.4[i].g<3.4[j].g)||(e==\'v\'&&3.4[i].g>3.4[j].g)){G=3.4[i];3.4[i]=3.4[j];3.4[j]=G}r 5(3.4[i].g===3.4[j].g){5((e==\'s\'&&3.4[i].e>3.4[j].e)||(e==\'v\'&&3.4[i].e<3.4[j].e)){G=3.4[i];3.4[i]=3.4[j];3.4[j]=G}}}}},1i:b(){},20:b(){7 3=a,1h=8.h.f(\'.1Z-1 1Y.1X 1W\'),e=1h.1V(\'1U\'),u=[1g.1f().1e.1T];k(7 i=0;i<3.N;i++){7 4=3.N[i];5(e==\'1d\'){5(1b.1a(4.L.1c,u)<0){u.M(4.L.1c)}}r 5(e==\'1S\'){5(1b.1a(4.L.19,u)<0){u.M(4.L.19)}}}8.1R(u)}};', 62, 168, '|||self|data|if|routeData|var|defenceWindowController||defenceWindowModel|function|||type|find|finishTimestamp|dom|||for|null||closed|intervalId|timingModel|needDelete|else|up|counterNewRoutes|filterList|down|length||sort|obj|matches|html|new|id|elapsedTime|maxRouteId|buf|sortDom|time|getCurrentTime|counterAllRoutes|attackTown|push|notFilteredData|removeClass|true|coord|calculateRoutes|needRefreshCounters|counterAllAttacks|callback|addClass|clear|target|delete|refreshCounters|needCleanNew|in|false|onTick|value|counters|click|tableDom|req|playerName|inArray|jQuery|name|town|defenceWindow|getData|i18nModel|selectedFilter|configureFilters|finish|header|fillData|onPlayerClick|top|left|goToMapPosition|gameController|exec|onTownClick|onCoordClick|intervaled|updateIncomingAttackIcon|gadgetsController|splice|getRow|secsToString|all|return|attack|no|table|newRow|armySize|lastRouteViewedRouteId|newDelay|getSettings|playerModel|lastCounterNewRoutes|updateData|result|attackInfo|gettings|townModel|initFilter1List|owner|noFilters|class|attr|div|checked|li|filter|updateFilter1|clearTable|hasClass|onHeaderFinishTimeSort|onClose|text|displayProfile|playerController|children|parent|elapsed|delRowFromTable|round|Math|other|player|addRowToTable|createTableRow|size|timestampToDateString|date|timestampToTimeString|finishTime|newViewed|60|newTimestamp|continue|lastMaxRouteId|onNewAttack|nativeNotificationController|ntfAttack|playAttackSound|audioController|soundAttack|interval|addIntervaled|lastUpdateTime|typeof|getResponse|addGetting|request|loadData|needAlert|300'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('f j={w:H,h:\'1d\',2n:H,o:{1d:{I:\'<K /><a 1c="2m://\'+2l+\'" 2k="2j" 1b="1a-19 3-18">Вернуться на сайт игры</a><K />\'+\'<a 1c="2i:2h.2g();" 1b="1a-19 3-18">Обновить</a>\',J:{17:\'Ошибка сервера\',\'0\':\'Соединение с сервером отсутствует\',\'2f\':\'Ошибка соединения с сервером\',\'2e\':\'Авторизация истекла\'}},2d:{}},2c:8(){3 2.o[2.h].I},2b:8(z,y){f x=\'\';l(10(z)==\'Z\'&&z.T(\'17\')>=0){x=2.o[2.h].J[z]+\'<K />\'+y.2a}29{x=2.o[2.h].J[y.16]||(\'Ошибка: \'+y.16)}3 x+2.o[2.h].I},4:8(i){l(2.w==H||i!=E){f F=\'28:27\',G=26 25(),15={24:i!=E?i:2.h};G.23(F,[\'22\'],15);2.w=G.21()[\'3\'][F];2.h=i!=E?i:2.h}3 2.w},20:8(9){3 2.4().e.d[9]?(9==14.13?(2.4().e.d[9][v.4().u]?2.4().e.d[9][v.4().u].D:\'\'):2.4().e.d[9].D):\'\'},1Z:8(9){3 2.4().e.d[9]?2.4().e.d[9].1Y:\'\'},1X:8(9){3 2.4().C[9].D},1W:8(9){3 2.4().C[9].1V},1U:8(9){3 2.4().C[9].q},1T:8(9){3 2.4().e.d[9]?(9==14.13?(2.4().e.d[9][v.4().u]?2.4().e.d[9][v.4().u].q:\'\'):2.4().e.d[9].q):\'\'},11:8(9){3 2.4().1S[9]},1R:8(12){1Q(12){t\'1P\':3 7;t\'1O\':3 6;t\'1N\':3 5;t\'1M\':3 1;1L:3 0}},1K:8(){3 2.4().1J},1I:8(){3 2.4().1H},1G:8(){3 2.4().1F},1E:8(9){3 2.11(9)},1D:8(B){f Y=j;l(10(B)!=\'Z\'){3 P}3 1C(\'Y.4().\'+B.1B(/:/g,\'.\'))},1A:8(b){3 2.4().X.W[b].1z},1y:8(b){3 j.4().X.W[b].1x},U:8(b){3 2.4().n.m.s.V.1w[b]},1v:8(){3 2.4().n.m.s.1u},1t:8(){3 2.4().n.m.s.1s},1r:8(b,k){3 1q.1p(2.4().n.m.s.V.1o,2.U(b),k)},1n:8(i){3 2.4().1m},1l:8(S){f r=2.4().n.m.r;1k(f A 1j r){l(r[A].T(S)>-1){3 A}}3\'\'},p:8(b){l(2.4().R.Q[b]){3 2.4().R.Q[b]}3 P},1i:8(b){f c=2.p(b);3 c?c.1h:\'\'},1g:8(b){f c=2.p(b);3 c?c.q:\'\'},1f:8(b,k){f c=2.p(b);3(c&&c.O[k])?c.O[k]:\'\'},1e:8(b){3 j.4().N.M.L[b]?j.4().N.M.L[b]:\'\'}};', 62, 148, '||this|return|getData||||function|id||type|chievement|buildings|town|var||language|langCode|i18nModel|level|if|sidebar|map|errorData|getAchievement|description|lands|cellInfo|case|CreatedType|townModel|data|desc|xhr|errorCode|landName|code|troops|name|undefined|method|req|null|links|errorsDesc|br|relations|diplomacyTitles|union|levels|false|types|achievements|landId|indexOf|getDungeonTitleByType|dungeon|messageTypes|reports|self|string|typeof|getResourceName|resourceId|specialBuildingId|buildingsModel|params|status|parsererror|link|over|cursor|class|href|ru|getUnionDiplomacyTitleByType|getAchievementLevelDescription|getAchievementDescription|title|getAchievementTitle|in|for|getLandName|glossary|getGlossaryData|titleWithLevelFormat|format|String|getDungeonTitleWithLevel|superCastleName|getSuperCastleName|barbarianTownName|getBarbariansName|titles|subjects|getReportSubjectsByType|subject|getMessageSubjectByType|replace|eval|getTextByCode|getTooltipForResource|dateTimeFormat|getDateTimeFormat|dateFormat|getDateFormat|timeFormat|getTimeFormat|default|gold|stone|wood|iron|switch|getResourceBuildingId|resources|getBuildingDescription|getTroopsDesc|nameInGenitivePlural|getTroopsNameInGenitivePlural|getTroopsName|genitive|getBuildingNameInGenitive|getBuildingName|getResponse|all|addGetting|lang|request|new|getLocal|i18n|else|responseText|getErrorDesc|getErrorLinks|en|403|404|reload|location|javascript|_top|target|siteDomain|http|locales'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('5 c={h:\'C:B\',3:A,e:9(){6(i.z===1){2.3=$.y(2.3,i[0]);4 2.3}5 a=x w(),g={v:u.f().t};a.s(2.h,[\'r\'],g);4 a.q()},f:9(){6(!2.3){2.3=2.e();6(2.3&&2.3[2.d]){2.3=2.3[2.d];6(2.3.p==o){2.3={}}}n{2.3={}}}4 2.3},m:9(){5 8=c,7=0;l(5 b k 8.3){7+=8.3[b].j}4 7}};', 39, 39, '||this|data|return|var|if|amount|self|function|req|ingrId|ingredientsModel|currentQuestsGetting|loadData|getData|params|getting|arguments|Amount|in|for|getSummaryAmount|else|Array|constructor|getResponse|all|addGetting|Id|playerModel|PlayerId|request|new|extend|length|null|getIngredients|player'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('4 F={2:{},E:a(d,e,y,7){8(!5.2[d]){5.2[d]={}}5.2[d][e]={v:y};8(t 7==\'s\'){5.2[d].7=7}},D:a(n){c(4 i=0;i<n.g;i++){c(4 x q 5.2){8(x==n[i]){b l}}}b w},7:a(3){8(5.2[3]){o 5.2[3]}},C:a(3){4 9=5;b a(u){8(!9.2[3]){b w}4 m=9.r(9.2[3]);c(4 i=0;i<m.g;i++){m[i].v(u)}8(9.2[3]&&!9.2[3].7){8(t 9.2[3].7==\'s\'){b l}}9.p(3);b l}},r:a(k){4 6=[];c(4 h q k){8(h==\'7\'){B}6.A(k[h]);4 j;c(4 i=0;i<6.g;i++){j=i;4 f=6[i];z(j>0&&f.e<6[j-1].e){6[j]=6[j-1];j--}6[j]=f}}b 6},p:a(3){o 5.2[3]}};', 42, 42, '||data|name|var|this|mass|remove|if|self|function|return|for|methodName|index|tmp|length|el|||obj|true|masOfMethods|names|delete|clear|in|sort|boolean|typeof|object|callback|false|nameInData|func|while|push|continue|getHandler|exist|add|methodModel'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('g j={k:{q:\'n:q\',p:\'n:p\',e:\'n:e\'},1r:{1q:2,1p:3,1o:4},1n:{1m:5,1l:6,1k:7,1j:8,1i:9,1h:10,1g:11,1f:12,1e:13,1d:14,1c:15,1b:16,1a:17},Z:{Y:X,W:V,U:T,S:R,Q:P},O:{N:18,M:19,L:K,J:I,H:G},a:F,E:c(0){l(0){b.a=0}},D:c(){h b.a},e:c(d,i){l(!b.o(d)){g m=C B();m.A(b.k.e,[\'z\'],{y:x.w.v,f:d});m.u(c(0){l(0[\'h\'][j.k.e]){j.a[d]=1;i&&i()}})}},o:c(d){h b.a&&b.a[d]},t:c(0){s(g f r 0){b.a[f]=0[f]}}};', 62, 90, 'data||||||||||playerItemsData|this|function|flagId|setFlagItem|itemId|var|return|callback|playerItemsModel|getting|if|req|playerItems|isFlagSet|getCurrentItem|getItems|in|for|updateItems|getResponse|Id|playerData|playerModel|id|all|addGetting|request|new|getData|loadData|null|22|PLAYER_ITEM_ARISTOCRAT_COINS|21|PLAYER_ITEM_ARISTOCRAT_CAPTURED|20|PLAYER_ITEM_ARISTOCRAT_GIFTED|PLAYER_ITEM_ARISTOCRAT_DIED|PLAYER_ITEM_ARISTOCRAT_TRAINED|aristocratItems|104|PLAYER_ITEM_RPG_POINTS_BRANCH_4|103|PLAYER_ITEM_RPG_POINTS_BRANCH_3|102|PLAYER_ITEM_RPG_POINTS_BRANCH_2|101|PLAYER_ITEM_RPG_POINTS_BRANCH_1|100|PLAYER_ITEM_RPG_POINTS_FREE|skillItems|||||||||||PLAYER_ITEM_QUEST_22_READ|PLAYER_ITEM_PURCHASED_MINISTER_CABINET|PLAYER_ITEM_RETURNED_TO_TOWN_AFTER_MAP_DRAGGING|PLAYER_ITEM_DRAGGED_MAP|PLAYER_ITEM_CONVERSATION_CREATED|PLAYER_ITEM_FIRST_SQUARE_OPEN|PLAYER_ITEM_QUEST_21_READ|PLAYER_ITEM_FIRST_DUNGEON_CLICK|PLAYER_ITEM_FIRST_FOREIGN_TOWN_CLICK|PLAYER_ITEM_CREATED_ARMY|PLAYER_ITEM_RENAMED_TOWN|PLAYER_ITEM_OPENED_PREMIUM_WINDOW|PLAYER_ITEM_OPENED_MAP|flagItems|shoes|shields|swords|items'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('4i p={1H:\'B:4h\',2e:0,L:{},k:1k,A:1k,1t:1k,4g:{4f:{1:2,2:3,3:4,4:5,5:6,6:7,7:8,8:9,9:10,10:11,11:12,12:13,13:14,14:15}},e:{m:\'B:4e\',1J:\'B:20\',1n:\'B:1n\',1s:\'B:1s\',1i:\'4d:4c\',1d:\'B:1d\',1x:\'B:1x\',1w:\'B:1w\'},Z:{1g:\'B:4b\',1D:\'B:1D\'},1T:[],l:g(){h(q.Q>0&&1e(q[0])===\'1S\'){a.k=q[0];a.1Y()}D h(q.Q>0&&a.k==1k){p.2Z(q[0])}f a.k},2Z(E){E=E||a.k.s;j c=x w();c.r(a.e.m,[\'z\'],{K:E});a.k=c.u()[\'f\'][a.e.m];4a.49(a.k[\'2Y\']);2c a.k[\'2Y\'];a.1Y();h(1L.2X!==M){1L.2X.48()}h(1L.2W!==M){1L.2W.2t()}},47:g(){f 1p.29[1p.28.27]||0},46:g(1m,2V=1M){1p.29[1p.28.27]=2V?1p.29[1p.28.27]+1m:1m},45:g(n){j 1K=44.43(),v=a.l().17,24=1M;P(j t V 2o.2n.v.2m){v[t+\'1u\']=v[t+\'1u\']||a.l().17[\'42\'];j 1o=v[t+\'41\'],26=v[t+\'40\'],2P=v[t+\'2l\'],2U=v[t+\'1u\'],1v=v[t],2T=1K-2U,2S=1v[t+\'25\']||0,O=(1o-26)/3Z*2T+2S;h(1o===26){v[t+\'1u\']=1K;2R}h(O<1){2R}24=1N;h(1o>0){1v[t+\'25\']=O-1h.2Q(1o);O=1h.2Q(O)}D{1v[t+\'25\']=O-1h.1R(1o);O=1h.1R(O)}v[t]=1v+O;v[t]=1h.3Y(v[t],0);v[t]=1h.3X(v[t],2P);v[t+\'1u\']=1K}h(24){p.2b(\'O\')}},3W:g(){j c=x w();c.r(a.e.1J,[\'z\'],{K:p.l().s});c.r(a.e.m,[\'23\'],{K:p.l().s});j G=c.u();h(G&&G[\'f\']){h(G[\'f\'][a.e.m]){a.k.23=G[\'f\'][a.e.m].23}h(G[\'f\'][a.e.1J]){a.k.1r=G[\'f\'][a.e.1J]}}},1n:g(){h(q.Q>0){a.1t=q[0]}D h(a.1t==1k){j c=x w();c.r(a.e.1n,[\'z\'],{K:a.l().s});a.1t=c.u()[\'f\'][a.e.1n]}f a.1t},1s:g(1I,I){j c=x w(),22=1I,d=a;22.K=d.l().s;c.r(d.e.1s,[\'z\'],22);c.u(g(b){h(b[\'f\'][d.e.1s]===1N){d.1n()[1I.3V]=1I.1m;I&&I()}})},3U:g(){h(q.Q===1&&1e(q[0])===\'1S\'){a.A=q[0];f a.A}D h(!q.Q||1e(q[0])===\'g\'){j c=x w(),d=a;c.r(a.1H,[\'z\'],{K:a.l().s});c.1z({1f:\'\'});h(!q.Q){a.A=c.u()[\'f\'][a.1H];f a.A}D{j 2O=q[0];c.u(g(b){d.A=b[\'f\'][d.1H];2O()})}}},3T:g(U,1G){h(q.Q<2){1G=1}h(!a.A[U]){a.A[U]=1G}D{a.A[U]+=1G}},3S:g(2N,1m){h(!a.A){a.A={}}a.A[2N]=1m},3R:g(21){f a.A&&a.A[21]?a.A[21]:0},3Q:g(W,1Z,n){j 2M=\'B:20\',3P=\'3O:3N\',c=x w();c.r(2M,[\'z\'],{K:p.l().s});c.u(g(b){p.l().1r=1c.l().3M.1r=b[\'f\'][\'B:20\'];n&&n(W);j 2K={3L:p.l().1r[W].2L.X,3K:p.l().1r[W].2L.Y};1Z&&1Z(2K)})},1Y:g(b){h(!b||!b[C.e.m]||!b[C.e.m].19||!a.k.o){f}a.k.o.19=b[C.e.m].19;a.k.o.1F=b[C.e.m].1F;a.k.o.2J=b[C.e.m].2J;a.k.o.2I=b[C.e.m].2I;a.k.o.2H=b[C.e.m].2H;a.k.o.2G=b[C.e.m].2G;a.k.o.2F=b[C.e.m].2F;a.k.o.2E=b[C.e.m].2E;h(b[C.e.m].1a){a.k.o.1a=b[C.e.m].1a;P(j 2D V a.k.o.1a){j T=a.k.o.1a[2D];T.2C=T.1Q===9?1l.l().1X.2B.3J[T.1a.3I]:T.2C=1l.l().1X.2B[T.1Q];T.3H=$.3G(T.2A,1l.3F())+\' \'+$.3E(T.2A,1l.3D())}}D h(!a.k.o.1a){a.k.o.1a={}}h(b[C.e.m].1q){a.k.o.1q=b[C.e.m].1q}D h(!a.k.o.1q){a.k.o.1q={}}P(j i V a.k.o.19){a.k.o.19[i].3C=a.2z(a.k.o.19[i].1F);a.k.o.19[i].3B=1l.l().1X.3A[a.k.o.19[i].3z]}},2z:g(1E){f 1l.l().3y[1E]},3x:g(1E){a.k.1F=1E},3w:g(2y,2x){a.k.3v=2y;a.k.3u=2x},3t:g(2w){a.k.3s=2w},3r:g(2v){a.k.2k=2v},3q:g(2u){a.k.3p=2u},2t:g(2s){a.k.17=2s},2r:g(m,n,2q){j c=x w();h(m.18){a.1W(m.18,m.S,c)}c.1A(\'B:2r\',{E:p.l().s});c.1z(m);c.u(g(b){n(b,m.S)},{n:2q})},1W:g(18,S,c){j 1C={E:p.l().s,S:S,18:18};c.1A(\'B:1W\',1C);h(!3o&&S===3n.3m){c.r(p.e.2j,[\'z\'],{})}},1D:g(18,S,n){j c=x w(),1C={E:p.l().s,S:S,18:18},F=a.Z.1D;c.1A(F,1C);c.u(g(b){j 1V=\'y:3l:3k\';h(b&&b[\'R\']!==M&&b[\'R\'][F]!==M&&n){1V=b[\'R\'][F]}n&&n(1V)})},3j:g(1U,n,y){j d=a,c=x w();c.r(a.e.m,[\'z\'],{});h(1U!==a.l().3i){c.r(a.e.1i,[\'z\'],{})}c.1z({3h:1U});f c.u(g(b){h(b[\'f\'][d.e.1i]){d.1T=b[\'f\'][d.e.1i]}h(b[\'f\']&&b[\'f\'][d.e.m]){n&&n(b[\'f\'][d.e.m])}D{y&&y()}})},3g:g(E,n,y){j d=a,c=x w();c.r(a.e.m,[\'z\'],{K:E});h(E!==a.l().s){c.r(a.e.1i,[\'z\'],{})}f c.u(g(b){h(b[\'f\'][d.e.1i]){d.1T=b[\'f\'][d.e.1i]}h(b[\'f\']&&b[\'f\'][d.e.m]){n&&n(b[\'f\'][d.e.m],b[\'f\'][\'2p:3f\'])}D{y&&y()}})},3e:g(E,I){j c=x w();c.r(\'2p:3d\',[\'3c\'],{K:E});c.u(g(b){I()})},3b:g(){j d=a;h(q[0]&&(1e q[0]===\'1S\'||1e q[0]===\'3a\')){a.l().1B=q[0]}D{j c=x w(),n=1e(q[0])===\'g\'?q[0]:1k;c.r(d.e.m,[\'1B\'],{K:p.l().s});c.u(g(b){d.l().1B=b[\'f\'][d.e.m].1B;n&&n()})}},39:g(I,y){j d=a,c=x w(),16={};P(j J V 2o.2n.v.2m){16[J]={};16[J].1O=(1h.1R(a.l().17[J+\'2l\']-a.l().17[J+\'38\']-a.l().17[J]))}c.1A(d.Z.1g,{E:d.l().s,W:1c.l().s});c.r(d.e.m,[\'2k\',\'2i\'],{K:p.l().s});c.r(d.e.2j,[\'z\'],{});c.r(1c.e.m,[\'17\'],{W:1c.l().s});c.u(g(b){h(b&&b[\'R\']&&b[\'R\'][d.Z.1g]){h(b[\'R\'][d.Z.1g].1Q===1){P(j J V 1c.l().17){j 1P=b[\'R\'][d.Z.1g].37[J];h(1P>16[J].1O){16[J].36=1P-16[J].1O}}b[\'R\'][d.Z.1g].16=16}I&&I(b[\'R\'][d.Z.1g],b[\'f\'][d.e.m].2i)}D{y&&y()}})},1d:g(1f,I,y){j d=a,c=x w(),1y=\'\';h(1f.Q!==M){P(j i=0;i<1f.Q;i++){1y+=1f[i]+\'.\'}}D{P(j U V 1f){1y+=U+\'.\'}}c.r(a.e.1d,[\'z\'],{});c.1z({1f:1y});c.u(g(G){h(!G[\'f\']||(G[\'f\'][d.e.1d]&&1e(G[\'f\'][d.e.1d])===\'35\')){y&&y(G[\'f\'][d.e.1d]);f}I&&I()})},1x:g(n){j c=x w(),F=a.e.1x;c.r(F,[\'z\'],{34:p.l().1b,W:1c.l().s});c.u(g(b){j N=b&&b[\'f\']&&b[\'f\'][F]?b[\'f\'][F]:\'y:2h:33\';h(N.2g!==2f&&N.1b!==M){p.l().1b=N.1b}n&&n(N)})},1w:g(n){j c=x w(),F=a.e.1w;c.r(F,[\'z\'],{W:1c.l().s});c.u(g(b){j N=b&&b[\'f\']&&b[\'f\'][F]?b[\'f\'][F]:\'y:2h:32\';h(N.2g!==2f&&N.1b!==M){p.l().1b=N.1b}n&&n(N)})},31(H,2d){j d=p;h(d.L[H]===M){d.L[H]={}}j 1j=d.2e++;d.L[H][1j]=2d;f 1j},30(1j){j d=p;P(j H V d.L){h(d.L[H][1j]!==M){2c d.L[H][1j];f 1N}}f 1M},2b(H,2a={}){j d=p;h(d.L[H]!==M){P(j U V d.L[H]){d.L[H][U](2a)}}}};', 62, 267, '||||||||||this|data|req|self|gettings|return|function|if||let|playerData|getData|info|callback|Union|playerModel|arguments|addGetting|Id|resourceName|getResponse|resources|request|new|error|all|statData|player|unionModel|else|playerId|method|response|eventName|success|resourceId|PlayerId|__subscribeList|undefined|callbackArgument|resourceIncrease|for|length|action|cyType|log|id|in|townId|||actions|||||||resourcesInfo|Resources|avatarId|Members|Log|TutorialPart|townModel|markNotificationsAsRead|typeof|ids|openChestActionName|Math|getAvailablePresents|subscribeId|null|i18nModel|value|getSettings|resourceIncrement|playerItemsModel|UnacceptedInvites|TownList|setSetting|gameSettings|UpdateTime|resource|cancelTutorial|finishTutorialPart|postData|addPostData|addAction|Training|actParams|buyAvatar|level|Level|inc|statGetting|setting|townList|now|gameController|false|true|maxCapacity|resourcePrizeCount|Type|ceil|object|availablePresentList|playerName|callbackParam|changeAvatar|union|updateUnionData|checkCell|getTownList|statType|reqParams|HomeTownId|change|IncRes|resourceDecrement|PLAYER_ITEM_ARISTOCRAT_COINS|aristocratItems|playerItemsData|eventObject|__fireEvent|delete|func|__subscribeCnt|String|constructor|tutorial|DailyPrizeCounter|dukatBalance|ChestTryCount|Max|nameToId|config|staticDataModel|referral|ajaxError|saveProfile|resourceData|updateResources|banTime|chestTryCount|percent|nextExp|exp|getTitle|Date|logTypes|TypeName|key|WelcomeMessage|SelfRequestsAllowed|AvatarUrl|AvatarId|Position|TownCount|townPos|Location|townListGetting|statisticId|successCallback|resourceMax|floor|continue|resourceIncreaseReserve|diffTime|lastUpdateTime|sum|resourcesPanel|townControl|PlayerSkills|loadData|unsubscribe|subscribe|cancelGeneralError|finishPartGeneralError|part|string|surplus|ResourcePack|Trade|getPrizeFromChest|boolean|updateTraining|All|loot|getAwardForReferral|getReferredPlayerList|getProfileById|PlayerName|Name|getProfileByName|generalError|premium|currencyTypeDucat|premiumModel|eventsEnabled|BanChatUntil|updateChatBanTime|updateChestCount|PercentIncrease|updatePercentIncrease|ExperienceForNextLevel|Experience|updateExperience|updateLevel|playerTitles|Rank|ranks|RankTitle|Title|getTimeFormat|timestampToTimeString|getDateFormat|timestampToDateString|DateString|relation|diplomacy|top|left|Owner|getTowns|map|townGetting|updateTownList|getStatData|setStatData|incrementStatData|loadStatData|name|reloadTownList|min|max|3600|Dec|Inc|updateTime|getCurrentTimestamp|Util|increaseResourcesByTime|setCoins|getCoins|onTownDataUpdated|init|rpgModel|openChest|getPresents|presentModel|getInfo|trainTroops|statTypes|getStat|var'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('4e A={1q:{2Q:\'32:4d\',1B:\'32:4c\'},e:{1H:\'q:1H\',L:\'q:2Z\',1b:\'q:2Y\',1i:\'q:1i\',1a:\'q:1a\',1T:\'q:4b\',S:\'q:S\',31:\'q:31\',1X:\'q:1X\',O:\'q:2t\',W:\'q:W\',16:\'q:16\',14:\'q:14\',13:\'q:13\'},1y:{},4a:{49:2,48:1,47:3,46:4,45:5,44:6,43:8,42:7,41:15},40:{3Z:1,3Y:2,3X:3,3W:15,3V:4},L:30,1b:30,3U:1,18:2,3T:3,2Z:g(){h(!f.L){f.1w()}c f.L},2Y:g(){c f.1b},1w:g(){h(1I.P>0){f.L=1I[0];c}j d=z t();d.m(f.1f.L,[\'r\'],{});f.L=d.x()[\'c\'][f.1f.L]},1K:g(){h(1I.P>0){f.1b=1I[0];c}j d=z t();d.m(f.1f.1b,[\'r\'],{});f.1b=d.x()[\'c\'][f.1f.1b]},3S:g(N,E,w){j d=z t();d.m(\'q:1j\',[\'r\'],{H:N});d.x(g(9){h(9[\'c\']&&9[\'c\'][\'q:1j\']){E&&E(9[\'c\'][\'q:1j\'])}F{w&&w()}})},3R:g(N,2X,2W,E,w){j d=z t();d.m(\'q:1g\',[\'r\'],{H:N,3Q:2X,B:l.o().H,3P:2W});d.m(l.e.C,[\'2h\',\'2K\',\'1h\'],{B:l.o().H});d.m(\'2a:1j\',[\'29\'],{1A:D.o().H});h(!19){d.m(D.e.17,[\'r\'],{})}d.x(g(9){h(9[\'c\']&&9[\'c\'][\'q:1g\']&&9[\'c\'][\'q:1g\']===2R){l.o().2h=9[\'c\'][l.e.C].2h;l.o().1h=9[\'c\'][l.e.C].1h;D.3O(9[\'c\'][\'2a:1j\'].29);E&&E(9[\'c\'][\'q:1g\'])}F{w&&w(9[\'c\'][\'q:1g\'])}})},S:g(2g,2f){j n=f,d=z t();d.m(f.e.S,[\'r\'],{});d.x(g(9){h(9&&9[\'c\']&&9[\'c\'][n.e.S]){n.1N(9[\'c\'][n.e.S]);2g&&2g()}F{2f&&2f()}})},1N:g(9){f.1y.3N=f.2e(9)},3M:g(9){f.1y.2u=f.2e(9)},2e:g(9){j 1r=$.3L(9),2d=[];1r.3K(g(a,b){c b-a});G(j i=0;i<1r.P;i++){2d.1m({1l:3J(1r[i],10),1F:9[1r[i]]})}c 2d},3I:g(E,w){j d=z t();d.m(\'2c:2b\',[\'r\'],{1A:D.o().H});d.x(g(9){h(9[\'c\']&&9[\'c\'][\'2c:2b\']){E&&E(9[\'c\'][\'2c:2b\'])}F{w&&w()}})},1H:g(K,p){j d=z t(),y={v:K.I};G(j 1k 1o K.1E){y[\'2T\'+1k]=K.1E[1k]}G(j i=0;i<K.1D.P;i++){y[\'2S\'+K.1D[i]]=1}d.m(f.e.1H,[\'r\'],y);d.x(p)},2w:g(1l,1G){G(j i=0;i<1G.P;i++){h(1l>=1G[i].1l){c 1G[i].1F}}c 0},2D:g(1l,1F){c 1P.1O(1l*(2V-1F)/2V)},1i:g(K,p){j d=z t(),y={v:K.I,2U:K.2U};G(j 1k 1o K.1E){y[\'2T\'+1k]=K.1E[1k]}G(j i=0;i<K.1D.P;i++){y[\'2S\'+K.1D[i]]=1}d.m(f.e.1i,[\'r\'],y);d.m(f.e.L,[\'r\'],y);d.m(l.e.C,[\'1h\'],{B:l.o().H});d.m(\'2a:1j\',[\'29\'],{1A:D.o().H});h(!19&&y.v==A.18){d.m(D.e.17,[\'r\'],{})}d.x(g(9){h(9[\'c\']&&9[\'c\'][A.e.1i]){h(9[\'c\'][A.e.1i]===2R){l.o().1h=9[\'c\'][l.e.C].1h}p&&p(9)}F{3H.3G(Y.3F(9[\'c\'][\'q:1g\']))}})},3E:g(N){h(f.L&&f.L[N]){3D f.L[N]}},3C:g(B,I,p){j d=z t(),1C={B:B,v:I},Q={B:B};d.2P(f.1q.2Q,1C);d.m(l.e.C,[\'T\'],Q);h(!19&&I===A.18){d.m(D.e.17,[\'r\'],{})}d.x(g(9){p&&p(9)})},3B:g(B,I,22,E,w){j d=z t(),1C={B:B,v:I};d.2P(f.1q.1B,1C);h(!19&&I===A.18){d.m(D.e.17,[\'r\'],{})}d.m(l.e.C,[\'28\',\'T\',\'27\',\'25\',\'26\',\'24\',\'23\'],{B:B});h(22){d.m(12.21,[\'r\'],{B:l.o().H})}d.x(g(J){h(/w/.1Y(J[\'2O\'][A.1q.1B])){w&&w(J[\'2O\'][A.1q.1B])}F{G(j i=0;i<l.o().T.P;i++){j 1p=l.o().T[i].3A;l.o().28[1p]=J[\'c\'][l.e.C].28[1p];12.3z(1p,12.3y(1p))}l.o().T=J[\'c\'][l.e.C].T;l.o().27=J[\'c\'][l.e.C].27;l.o().26=J[\'c\'][l.e.C].26;l.o().25=J[\'c\'][l.e.C].25;l.o().24=J[\'c\'][l.e.C].24;l.o().23=J[\'c\'][l.e.C].23;h(22&&J[\'c\'][12.21]){12.3x(J[\'c\'][12.21])}20.2N(\'3w\');G(j 1Z 1o 20.3v){h(/3u/.1Y(1Z)){20.2N(1Z)}}E&&E(J)}})},1a:g(2M,I,2L,E,w){j n=f,d=z t(),Q=2M;Q.B=2L;Q.v=I;d.m(f.e.1a,[\'r\'],Q);d.m(l.e.C,[\'2K\'],{B:l.o().H});h(!19&&I==A.18){d.m(D.e.17,[\'r\'],{})}d.x(g(9){h(9&&9[\'c\']&&9[\'c\'][n.e.1a]){h(/w/.1Y(9[\'c\'][n.e.1a])){w&&w(9[\'c\'][n.e.1a])}F{E&&E(9[\'c\'])}}})},3t:g(v,2I,p){j n=f,d=z t(),2J=f.e.1X,Q={N:D.o().H,v:v};d.m(2J,[\'r\'],Q);d.m(1W.1f.2H,[\'r\'],{N:D.o().H});h(!19&&v==A.18){d.m(D.e.17,[\'r\'],{})}d.2G(2I);d.x(g(9){1W.3s(9[\'c\'][1W.1f.2H]);p&&p(9)})},3r:g(1U,v,1V,2F,p){j n=f,d=z t(),Q={3q:1U,1V:1V,v:v};d.m(f.e.1T,[\'r\'],Q);d.m(D.e.C,[\'2E\'],{1A:1U});h(!19&&v==A.18){d.m(D.e.17,[\'r\'],{})}d.2G({3p:2F});d.x(g(9){p(9[\'c\'][n.e.1T],9[\'c\'][D.e.C].2E)})},3o:g(){j 1e=0,1S=0;h(1d.1c.3n){1S=A.2x()}G(j k=0;k<l.o().T.P;k++){h(l.o().T[k].3m===0){j 1z=1P.1O((((l.1R(k).2C-l.1R(k).2B)/1d.1c.2z)*1d.1c.2y));1z=A.2D(1z,1S);1e+=1z}}c 1e},2v:g(){j 1e=0;G(j k=0;k<l.o().T.P;k++){j 1Q=l.1R(k),2A=1Q.2C-1Q.2B;1e+=1P.1O((2A/1d.1c.2z)*1d.1c.2y)}c 1e},2x:g(){c f.2w(f.2v(),f.1y.2u)},2t:g(p){j n=f,d=z t();d.m(f.e.O,t.r,{});d.m(f.e.S,[\'r\'],{});d.x(g(9){h(9&&9[\'c\']&&9[\'c\'][n.e.S]){n.1N(9[\'c\'][n.e.S])}h(9&&9[\'c\']&&9[\'c\'][n.e.O]!=1u){n.O=9[\'c\'][n.e.O]}h(!n.O){n.O={}}G(j R 1o n.O){j M=n.O[R];M.3l=Y.o().X.2s[R].3k;M.3j=Y.o().X.2s[R].3i}p&&p()})},W:g(R,I,p){j n=f,d=z t(),y={R:R,v:I,B:l.o().H};d.m(f.e.W,t.r,y);d.x(g(9){j s=1v;h(9&&9[\'c\']&&!9[\'c\'][n.e.W]){s=\'w:q:X:2r\'}F h(9&&9[\'c\']&&9[\'c\'][n.e.W].1L!=Z){s=9[\'c\'][n.e.W]}F{s=9[\'c\'][n.e.W]}p&&p(s)})},16:g(1x,v,1M,p){j n=f,d=z t(),y={2q:1x,v:v,1M:1M};d.m(f.e.16,t.r,y);d.x(g(9){j s=1v;h(9&&9[\'c\']&&!9[\'c\'][n.e.16]){s=\'w:q:q:2r\'}F h(9&&9[\'c\']&&9[\'c\'][n.e.16]!=1u){s=9[\'c\'][n.e.16];h(s.1L!=Z){A.1K(s[\'2p\']);A.1w(s[\'2o\'])}}p&&p(s)})},14:g(1x,v,p){j n=f,d=z t(),y={2q:1x,v:v};d.m(f.e.14,t.r,y);d.x(g(9){j s=1v;h(9&&9[\'c\']&&!9[\'c\'][n.e.14]){s=\'w:q:q:3h\'}F h(9&&9[\'c\']&&9[\'c\'][n.e.14]!=1u){s=9[\'c\'][n.e.14];h(s.1L!=Z){A.1K(s[\'2p\']);A.1w(s[\'2o\'])}}p&&p(s)})},2n:g(){c 1d.1c.3g},3f:g(){c f.2n().3e},13:g(1J,p){j d=z t(),y={1J:1J};d.m(f.e.13,t.r,y);d.x($.3d(g(9){j s=1v;h(9&&9[\'c\']&&!9[\'c\'][f.e.13]){s=\'3c\'}F h(9&&9[\'c\']&&9[\'c\'][f.e.13]!=1u){s=9[\'c\'][f.e.13]}p&&p(s)},f))},3b:g(3a){G(j R 1o f.O){j M=f.O[R],11=D.o().2l;M.1n=[];G(j i=0;i<M.2m.P;i++){j u=M.2m[i];39(u.38){2j 1:h(12.37(u.N)<u.2k){M.1n.1m(Z.1t(Y.o().X.1s[\'36\'+u.N+\'2l\'],u.2k))}2i;2j 2:h((u.V&&11<u.V)||(u.U&&11>u.U)){h((u.V&&11<u.V)&&(u.U&&11>u.U)){M.1n.1m(Z.1t(Y.o().X.1s.35,u.V,u.U))}F h(u.V&&11<u.V){M.1n.1m(Z.1t(Y.o().X.1s.34,u.V))}F h(u.U&&11>u.U){M.1n.1m(Z.1t(Y.o().X.1s.33,u.U))}}2i}}}}};', 62, 263, '|||||||||data|||return|req|gettings|this|function|if||let||townModel|addGetting|self|getData|callback|premium|all|callbackArgument|request|condition|cyType|error|getResponse|params|new|premiumModel|townId|info|playerModel|success|else|for|Id|currencyToUse|response|buyData|playerPremiums|pack|id|resourceShopPacks|length|getParams|packId|getResourcesDiscounts|BuildingConstruction|tillLevel|fromLevel|buyResourceShopPack|resourceShop|i18nModel|String||playerLevel|buildingsModel|exchangeSilverForGold|upgradeMinisterCabinet||buyMinisterCabinet|dukatBalance|currencyTypeDucat|eventsEnabled|purchaseResourcesForReal|playerMinisterCabinet|premiumParams|staticDataModel|price|getting|buyPremium|ResourcesPerHour|buyPremiums|getInfo|ministerId|sum|push|restrictions|in|currentBuildingId|actions|sums|packRestrictions|format|undefined|false|loadPlayerPremiums|cabinetId|discounts|thisItemPrice|PlayerId|totalSpeedupBuilding|actParams|taskIds|periods|discount|discountConfiguration|calculateMoneyPreview|arguments|goldValue|loadPlayerMinisterCabinet|constructor|durationId|loadResourcesDiscounts|ceil|Math|construction|getBuildingConstructionByQueue|totalQueueDiscount|givePresent|playerId|presentId|playerItemsModel|buyBonuses|test|currentCountdownKey|timingModel|helpDataGettingName|isUpdateBuildingTime|Points|RecruitingList|TotalPeople|Workers|FreePeople|Buildings|PercentIncrease|player|getLog|premiumLog|result|convertDiscountConfigurationFromObjectToArray|errorCallback|successCallback|Premium|break|case|level|Level|Conditions|getGoldToSilverCourse|premiums|cabinet|ministerCabinetId|generalBuyError|packs|getResourceShopPacks|totalBuildingsSpeedUp|calculateTotalBuildingSpeedupPriceWithoutDiscount|calculateDiscount|calculateTotalBuildingSpeedupDiscount|speedUpConstructionPrice|speedUpConstructionTime|timeEstimated|CompleteTime|BuildTime|applyDiscount|PresentList|presentDescription|addPostData|getItems|items|getRequest|Resources|targetTownId|purchasedResourcesList|removeCountdown|action|addAction|speedupBuilding|true|task_|minister_|useAdditionalPercents|100|additionalPercents|count|getPlayerMinisterCabinet|getPlayerPremiums|null|getTotalBuildingSpeedUpDiscounts|town|tooBigLevel|tooSmallLevel|levelIsNotInRange|building|getLevel|type|switch|townData|prepareResourcePacksForTown|fuck|proxy|current|getCurrentGoldToSilverCourse|goldToSilverCourse|generalUpgradeError|description|Description|name|Name|SpeedUp|buildingTotalSpeedUpForQueueLengthEnabled|calculateTotalBuildingSpeedupPrice|desc|toId|givePresentFor|loadData|buyBonusItems|buildingConstruction|countdown|finishBuilding|loadHelpData|calculateImageIndex|setImageIndex|BuildingId|totalSpeedUpBuilding|speedUpBuilding|delete|erasePlayerPremium|getTextByCode|showSystemMessage|messageController|getPremiumLog|parseInt|sort|objectKeys|loadTotalBuildingSpeedUpDiscounts|buyResources|updatePercentIncrease|useAdditional|Count|getPremium|getPremiumInfo|currencyTypeGold|currencyTypeGXP|food|gold|stone|iron|wood|ministerTasksByResource|fasterGoldGathering|trainingFaster|trainingQueueBigger|buildingQueueBigger|buildingFaster|fasterFoodMining|fasterStoneMining|fasterWoodMining|fasterIronMining|ministerTasks|buyPresent|speedUpAllConstruction|speedUpConstruction|var'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('d 27={9:26,H:\'25:24\',M:\'G:1l\',r:\'G:23\',22:\'21:20\',1f:1,1e:2,1b:3,1a:4,18:5,17:6,16:7,1Z:{},j:h,k:h,l:g(){b(!8.9){8.9=8.1s();b(8.9&&8.9[8.H]){8.9=8.9[8.H];b(8.9.x==11){8.9={}}}B{8.9={}}}c 8.9},1s:g(){b(A.t==1){1g(A[0].x){p R:8.9=A[0];c 8.9;p 11:8.9={};c 8.9}}d m=X W(),1r={1Y:n.l().P};m.1q(8.H,[\'1p\'],1r);b(A.t&&A[0].x==1X){d Q=A[0],f=8;m.O(g(9){Q(9[\'c\'][f.H])})}B{c m.O()}},1W:g(G){8.9[G.P]=G},1V:g(a){b(8.9&&8.9[a]){1m 8.9[a]}},1U:g(a,Q){d f=8,m=X W();m.1j(8.r,{1i:K.l().P,a:a});b(!1T){m.1q(n.12.1S,[\'1p\'],{})}m.O(g(9){b(9&&9[\'c\']&&9[\'c\'][n.12.1o]!=L){n.l().1R=9[\'c\'][n.12.1o]}d Y=h;b(9&&9[\'w\']&&(9[\'w\'][f.r].x==R||9[\'w\'][f.r].x==11)){d Z=[];b(9[\'w\'][f.r].x==R){s(d 1n E 9[\'w\'][f.r]){Z.C(1Q(1n,10))}}Y=Z;1m f.9[a];b(9[\'w\'][f.r].x==R){$.1P(o,f.9,9[\'w\'][f.r])}}Q(Y)})},1l:g(a,N,V,U){d f=8,m=X W();d 1k=N?1:0;b(!a||!8.9[a]){c h}b(8.9[a][\'y\']==1k){c o}m.1j(8.M,{1i:K.l().P,a:a,1O:N});m.O(g(9){b(9){f.9[a][\'y\']=N;V&&V(9[f.M])}B{U&&U(9[f.M])}});c o},1N:g(a,T){b(!a||!8.9[a]||S T===\'L\'){c h}8.9[a].D=T?o:h;c o},1M:g(v){d z=0;s(d a E 8.9){b((S v===\'L\'||v==8.9[a].1h)&&8.9[a].D){z++}}c z},1L:g(v){d z=0;s(d a E 8.9){b((S v===\'L\'||v==8.9[a].1h)&&8.9[a].y==1){z++}}c z},1K:g(e){d q=h;1g(e.v){p 8.1f:q=1J.1I(e.1H)>=e.1G;u;p 8.1e:q=n.1d(e.1c)>=e.F?o:n.1d(e.1c)+\'/\'+e.F;u;p 8.1b:q=$.1F(n.l().1E).t>=e.1D;u;p 8.1a:q=n.l().19&&1C.1B(n.l().19.1A)>=e.1z;u;p 8.18:d 1y=e.1x.1w(/:([^:]+)$/)[1];u;p 8.17:q=1v.l()[e.1u]>=e.F;u;p 8.16:q=K.l().15>=e.F?o:K.l().15+\'/\'+e.F;u}c q},1t:g(){b(!(8.j&&8.k)){8.j=[];8.k=[];s(d a E 8.9){b(8.9[a].y){8.k.C(a)}b(8.9[a].D){8.j.C(a)}}c h}b(8.k.t){s(d i=8.k.t-1;i>=0;i--){b(!(8.9[8.k[i]]&&8.9[8.k[i]].y)){8.k.14(i,1)}}}b(8.j.t){s(d i=8.j.t-1;i>=0;i--){b(!(8.9[8.j[i]]&&8.9[8.j[i]].D)){8.j.14(i,1)}}}d I=h,J=h;s(d a E 8.9){b(!I&&8.9[a].y&&$.13(a,8.k)==-1){8.k.C(a);I=o}b(!J&&8.9[a].D&&$.13(a,8.j)==-1){8.j.C(a);J=o}}b(J){c 1}B b(I){c 2}B{c h}}};', 62, 132, '||||||||this|data|questId|if|return|var|condition|self|function|false||shownCompleteQuests|shownUnreadQuests|getData|req|playerModel|true|case|checkResult|finishQuestAction|for|length|break|type|action|constructor|Unread|unreadQuests|arguments|else|push|Completed|in|value|quest|currentQuestsGetting|newUnreadQuests|newCompletedQuests|townModel|undefined|questUnreadFlagSetAction|unread|getResponse|Id|successCallback|Object|typeof|completed|error|success|request|new|callbackData|newIds||Array|gettings|inArray|splice|Points|townPointsCondition|playerItemCondition|specialMessageCondition|Union|unionMembersCondition|townCountCondition|statisticId|getStatData|playerStatisticCondition|buildingLevelCondition|switch|Type|townId|addAction|unreadFlag|setQuestUnreadFlag|delete|newQuestId|info|all|addGetting|params|loadData|checkForNotShownQuests|itemId|playerItemsModel|match|message|specialCondition|membersCount|Members|sizeOfObject|Util|townCount|TownList|objectKeys|level|buildingId|getLevel|buildingsModel|checkQuestCondition|getUnreadQuestsCount|getCompleteQuestsCount|setQuestCompleteFlag|questUnreadFlag|extend|parseInt|TutorialPart|dukatBalance|eventsEnabled|finishQuest|deleteQuest|addQuest|Function|PlayerId|socialQuestsNetworks|getQuestLocal|i18n|i18nGetting|finish|getQuests|player|null|questModel'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('o 1g={4:{r:\'b:1f\',l:\'b:1e\',v:\'b:1d\',k:\'b:1c\',u:\'b:1b\',t:\'b:1a\'},c:h(a,9){o 5=8,6=H G();6.g(8.4.r,[\'f\'],{});6.g(8.4.l,[\'f\'],{});7(w.19){6.g(8.4.v,[\'f\'],{})}7(w.I.18){6.g(8.4.k,[\'f\'],{})}7(w.I.17){6.g(8.4.u,[\'f\'],{})}6.g(8.4.t,[\'f\'],{});6.E(h(2){7(2[\'3\']&&2[\'3\'][5.4.r]&&2[\'3\'][5.4.l]){5.q(2[\'3\'][5.4.l]);7(2[\'3\'][5.4.k]!==16){5.q(2[\'3\'][5.4.k])}a&&a(2[\'3\'][5.4.r],2[\'3\'][5.4.l],2[\'3\'][5.4.v],2[\'3\'][5.4.k],2[\'3\'][5.4.u],2[\'3\'][5.4.t])}D{9&&9()}})},y:h(d,F,a,9){o 5=8,6=H G(),e=15.14(\'b:13{0}12\',d.11(0).10()+d.Z(1));6.g(e,[\'f\'],{});6.Y(F);6.E(h(2){7(2[\'3\']&&2[\'3\'][e]){2[\'3\'][e].X=d;7([\'l\',\'k\'].W(d)!==-1){2[\'3\'][e].V=j.c().n;5.q(2[\'3\'][e])}a&&a(2[\'3\'][e])}D{9&&9()}})},q:h(2){7(j.c().n){o p=j.c().n.U[j.c().s];7(p&&(p.C!==B.T&&p.C!==B.S)){2.R=Q}7(2&&2.m){P(o i=0;i<2.m.O;i++){7(j.c().n.A[2.m[i].s]){2.m[i].z=j.c().n.A[2.m[i].s].z}}}2.N=M.c().b.L}},K:h(d,x,a,9){8.y(d,{J:x},a,9)}};', 62, 79, '||data|return|gettings|self|req|if|this|error|success|rating|getData|set|method|all|addGetting|function||playerModel|worldGoal|unions|List|Union|var|membership|prepareUnionsRatingData|players|Id|ingredients|needles|gameEvent|staticDataModel|pagen|getSearchData|Relation|Diplomacy|unionModel|Rank|else|getResponse|param|request|new|config|Pagen|getPagedData|relations|i18nModel|relationsTitles|length|for|true|isRelationsViewOnly|RANK_ADVISOR|RANK_LEADER|Members|union|indexOf|Type|addPostData|slice|toUpperCase|charAt|Rating|get|format|String|undefined|needlesEnabled|worldGoalEnabled|gameEventStaticData|getIngredientsRating|getNeedlesRating|getWorldGoalRating|getGameEventRating|getUnionsRating|getPlayersRating|ratingModel'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('(9(){r=9(){4.8=g;4.a=g;4.m=g;4.h=g;4.t=g;4.y=g;4.O=9(n,l){c 1a=[1J],D=\'\',A=Y;7(n==\'1I\'){A=N;D=Q.P(n,l)}q 7(1a.1H(l.n)>=0){D=Q.P(n,l);A=N}A&&4.1G(D);7(A){}x A}};9 M(){c w=g;7(6.p==1&&u(6[0])==\'T\'){w=6[0]}q 7(6.p>=2&&u(6[0])==\'19\'){w={s:6[0],S:6[1],b:6[2]?6[2]:{},h:6[3]?6[3]:g}}q{x}7(!4.8){4.8={}}7(!4.8[w.s]){4.8[w.s]=[]}4.8[w.s].18(w)}9 L(){c C=g;7(6.p==1&&u(6[0])==\'T\'){C=6[0]}q 7(6.p>1&&u(6[0])==\'19\'){C={s:6[0],b:6[1]?6[1]:{},h:6[2]?6[2]:g}}q{x}7(!4.a){4.a=[]}4.a.18(C)}9 K(e){7(!4.m){4.m={}}$.17(4.m,e)}9 J(E){4.E=E}9 F(){7(!4.8&&!4.a){x g}c f=4;o(c i=0;i<6.p;i++){7(u(6[i])==\'9\'){4.h=6[i]}q 7(u(6[i])==\'T\'){4.t=6[i]}}c d=\'\',I=$.1F(1E).1D(5,10);7(4.a){4.m=$.17(4.m,{16:1C.16});o(c i=0;i<4.a.p;++i){d+=\'/14\'+I+\'?\'+4.a[i].s+\'{\';o(c z G 4.a[i].b){d+=z+\':\'+4.a[i].b[z]+\',\'}d+=\'}\'}}o(c k G 4.8){o(c v=0;v<4.8[k].p;v++){7(k==\'1B:1A\'){d+=\'/15?\'+k+\'[\'}q{d+=\'/15\'+I+\'?\'+k+\'[\'}o(c j=0;j<4.8[k][v].S.p;++j){d+=4.8[k][v].S[j]+\',\'}d+=\']{\';o(z G 4.8[k][v].b){d+=z+\':\'+4.8[k][v].b[z]+\',\'}d+=\'}\'}}d+=\'/14\'+I+\'?1z{1y:\'+13.1x((13.1w()*1v)+1u)+\'}\';c e=g;7(u(4.E)!=\'1t\'){d=4.E+d.1s(1)}c b={d:d,1r:4.m?\'1q\':\'1p\',1o:\'1n\',e:4.m||g};7(4.t){b.H=9(l,n,R){f.O(n,l);7(!f.y){c 12=f.t.y||1m,H={l:l,R:R,D:Q.P(n,l)};f.y=11(9(){f.t.h&&f.t.h(H);1l f.t},12)}11(9(){f.F()},1k)}}q{b.H=9(l,n){f.O(n,l)}}7(4.h){b.Z=N;b.1j=9(e,1i,l){f.y&&1h(f.y);f.h(e)};$.X(b)}q{b.Z=Y;7(4.m){b.e=4.m}c W=$.X(b);e=$.1g(W.1f);7(4.a){o(i=0;i<4.a.p;++i){7(!4.a[i].h){V}4.a[i].h(e.C[4.a[i].s])}}o(k G 4.8){7(!4.8[k].h){V}4.8[k].h(e[\'x\'][1e])}}x e}r.B.M=M;r.B.L=L;r.B.K=K;r.B.F=F;r.B.J=J})();r.U=[\'U\'];r.1d=9(e){1c.1b(e)};', 62, 108, '||||this||arguments|if|gettings|function|actions|params|var|url|data|self|null|callback|||gettingName|xhr|postData|status|for|length|else|request|name|requestError|typeof|gettingIndex|getting|return|timeout|paramName|stopStatus|prototype|action|description|baseURL|getResponse|in|error|rnd|setBaseURL|addPostData|addAction|addGetting|true|checkStop|getErrorDesc|i18nModel|err|fields|object|all|continue|ajaxResponse|ajax|false|async||setTimeout|globalTimeout|Math|act|get|rndVal|extend|push|string|errorStatusList|log|console|dataDumpCallback|actionName|responseText|evalJSON|clearTimeout|textStatus|success|500|delete|15000|json|dataType|GET|POST|type|substring|undefined|390000|40000|random|round|val|rand|getFresh|events|gameController|substr|fsid|cookie|displayError|indexOf|parsererror|403'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('h x={f:{k:\'q:k\',K:\'q:K\',N:\'q:1u\',P:\'q:12\',v:\'q:v\'},d:{},1t:2,1s:3,1r:4,1q:7,1p:8,1o:10,p:0,13:0,1n:g(q){l(!q){c.d={};6}c.d=c.Q(q);c.y()},1m:g(){6 c.d},y:g(){c.p=0;r(h u F c.d){l(c.d[u]&&!c.d[u].X){c.p++}}6 c.p},1l:g(1k){l(14.s){c.p=14[0]}L{h 5=c,j=E D();j.B(c.f.P,[\'A\'],{});j.z(g(9){l(9&&9[\'6\']&&9[\'6\'][5.f.P]!=C){5.p=9[\'6\'][5.f.P]}})}},v:g(O,I,S,R){h 5=c,T={O:O},j=E D();c.13=O;l(I&&I.s){T.I=I}j.B(c.f.v,[\'A\'],T);j.z(g(9){l(9&&9[\'6\']&&9[\'6\'][5.f.v]!==C){5.d=9[\'6\'][5.f.v].d;5.Q(5.d);S&&S(9[\'6\'][5.f.v])}L{R&&R()}})},12:g(){6 c.p>1j?1i:c.p},1h:g(9,11){h H=[];r(h u F 9){H.1g(9[u])}H.s>1&&H.1f(g(a,b){6 11?a.e-b.e:b.e-a.e});6 H},1e:g(e){6 c.d[e]?c.d[e]:1d},Q:g(9){r(h u F 9){h t=9[u];t.1c=t.e;t.1b=t.Z;k t.Z;t.1a=19.18().17}6 9},16:g(e,G){h 5=x,j=E D();l(5.d[e]&&5.d[e].Y){G&&G();6}j.B(5.f.N,[\'A\'],{e:e});j.z(g(9){l(!9[\'6\'][5.f.N]){6}5.d[e].15=5.d[e].Y=9[\'6\'][5.f.N];5.d[e].X=1;5.y();G&&G()})},\'k\':g(n,w,o){h 5=x,j=E D(),M=\'\';l(n.s!=C){r(h i=0;i<n.s;i++){M+=n[i]+\'.\'}}L{r(h e F n){M+=e+\'.\'}}j.B(5.f[\'k\'],[\'A\'],{});j.W({n:M});j.z(g(m){h 5=x;l(!m[\'6\']||(m[\'6\'][5.f[\'k\']]&&V(m[\'6\'][5.f[\'k\']])==\'U\')){o&&o(m[\'6\'][5.f[\'k\']]);6}l(n.s!=C){r(h i=0;i<n.s;i++){k 5.d[n[i]]}}L{r(h e F n){k 5.d[e]}}5.y();w&&w()})},K:g(J,w,o){h 5=x,j=E D();l(J==C){o&&o()}j.B(5.f[\'K\'],[\'A\'],{});j.W({J:J});j.z(g(m){h 5=x;l(!m[\'6\']||(m[\'6\'][5.f[\'k\']]&&V(m[\'6\'][5.f[\'k\']])==\'U\')){o&&o(m[\'6\'][5.f[\'k\']]);6}5.d=[];5.y();w&&w()})}};', 62, 93, '|||||self|return|||data|||this|list|id|gettings|function|var||req|delete|if|response|ids|error|unreadMessages|reports|for|length|item|key|getPage|success|reportModel|updateUnreadCount|getResponse|all|addGetting|undefined|request|new|in|callback|arr|filter|filters|deleteAll|else|postData|reportBody|page|unreadCount|prepareMessages|failCallback|successCallback|requestParams|string|typeof|addPostData|status|Body|subject||ascending|getUnreadCount|currentPage|arguments|body|getReportBody|Name|getData|playerModel|Nick|OriginalSubject|Id|null|getMessage|sort|push|getSortedArray|99|100|count|loadUnreadCount|getList|init|MESSAGE_TYPE_TRAINING|MESSAGE_TYPE_SPYING|MESSAGE_TYPE_REINFORCEMENT|MESSAGE_TYPE_TRADE|MESSAGE_TYPE_MARTIAL|MESSAGE_TYPE_STARVATION|getBody'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('m b={q:\'2L:2K\',i:\'z:2J\',p:\'z:P\',2I:{2H:1,2G:2,2F:3,2E:4},2D:{1:d.h.14,2:d.h.13,3:d.h.12,4:d.h.11},j:{},S:6(c){e(c){b.j=c}},2C:[3,4,8],2B:6(){5 d.o()[d.h.2A]||0},2z:6(I,g){e(2y.2x(2w(g),[24,2v,2u,2t,2s,2r,2q,2p,2o,2n,2m,2l,2k,2j,2i,2h,2g])>=0){5 I}2f{5 I/2e}},2d:6(r){m 10=r===1?0:d.o()[d.h.14]||0,Z=r===2?0:d.o()[d.h.13]||0,Y=r===3?0:d.o()[d.h.12]||0,X=r===4?0:d.o()[d.h.11]||0;5 10+Z+Y+X},2c:6(){5 a.9.7.2b},2a:6(){5 a.9.7.29},28:6(){5 a.9.7.27},26:6(){5 a.9.7.25},23:6(){5 a.9.7.22},21:6(){5 a.9.7.20},1Z:6(){5 a.9.7.1Y},1X:6(W){m l=$.u([],a.9.7.t[\'1W\']);1V(W){H\'V\':l=$.u(l,a.9.7.t[\'V\']);G;H\'U\':l=$.u(l,a.9.7.t[\'U\']);G;H\'T\':l=$.u(l,a.9.7.t[\'T\']);G}5 l},1U:6(){5 a.9.7.1T},1S:6(){5 a.9.7.1R},1Q:6(){5 a.9.7.1P},1O:6(){5 a.9.7.1N},1M:6(){5 a.9.7.1L},1K:6(){5 a.9.7.1J},1I:6(){5 a.9.7.1H},1G:6(){5 a.9.7.1F},1E:6(){5 a.9.7.1D},1C:6(){5 a.9.7.1B},1A:6(){5 a.9.7.1z},1y:6(){5 a.9.7.1x},1w:6(){5 a.9.7.1v},1u:6(){5 a.9.7.1t},1s:6(){5 a.9.7.1r},1q:6(s){F D=0;R(F E Q s){e(s.1p(E)){F g=s[E];e(!b.j[g]||b.j[g].1o===0)1n;D+=b.j[g].1m}}5 D},1l:6(C){m f=B A();f.y(b.q,[\'x\']);f.v(6(c){e(/N/.1k(c[\'5\'][b.q])){1j.1i(1h.1g(c[\'5\'][b.q]));5}b.S(c[\'5\'][b.q]);C&&C()})},K:6(c){R(m g Q c){b.j[g]=c[g]}},P:6(O,n,k){m f=B A();f.y(b.p,[\'x\'],{1f:O});f.v(6(c){e(M c[\'5\'][b.p]==\'L\'||!c[\'5\'][b.p]){k&&k(c[\'5\'][b.p]);5}n&&n(c[\'5\'][b.p])})},1e:6(w,n,k){m f=B A();e(!1d.1c(w)){k&&k(\'N:z:1b\');5}f.y(b.i,[\'x\'],{1a:19.o().18});f.17({16:w});f.v(6(c){e(M c[\'5\'][b.i]==\'L\'){k&&k(c[\'5\'][b.i]);5}e(c[\'5\'][b.i][\'j\']){b.K(c[\'5\'][b.i][\'j\'])}e(c[\'5\'][b.i][\'J\']){d.15(c[\'5\'][b.i][\'J\'])}n&&n()})}};', 62, 172, '|||||return|function|affectiveArrays||skillStaticData|staticDataModel|rpgModel|data|playerItemsModel|if|req|skillId|skillItems|saveSkillsGettingName|playerSkills|errorCallback|retArr|var|successCallback|getData|fullResetSkillsGettingName|skillGettingName|excludeBranch|skillArr|buildingCost|merge|getResponse|newSkillsArray|all|addGetting|rpg|request|new|callback|skillBonus|index|let|break|case|param|playerItems|updateSkills|string|typeof|error|currency|fullResetSkills|in|for|init|wood|stone|iron|res|branch4|branch3|branch2|branch1|PLAYER_ITEM_RPG_POINTS_BRANCH_4|PLAYER_ITEM_RPG_POINTS_BRANCH_3|PLAYER_ITEM_RPG_POINTS_BRANCH_2|PLAYER_ITEM_RPG_POINTS_BRANCH_1|updateItems|newSkills|addPostData|Id|playerModel|PlayerId|noSkillsToSave|isArray|Array|saveSkills|cyType|getTextByCode|i18nModel|showSystemMessage|messageController|test|loadSkills|Parameter|continue|Level|hasOwnProperty|getSkillBonus|loyaltyIncrease|getSkillsAffectingLoyaltyIncrease|unitDefencePercent|getSkillsAffectingUnitDefencePercent|unitDefence|getSkillsAffectingUnitDefence|unitAttackRanged|getSkillsAffectingUnitAttackRanged|unitAttackMelee|getSkillsAffectingUnitAttackMelee|unitAttackPercent|getSkillsAffectingUnitAttackPercent|otherTownsSupply|getSkillsAffectingOtherTownsSupply|resourcePerHourPercent|getSkillsAffectingResourcePerHourPercent|resourcePerHour|getSkillsAffectingResourcePerHour|repositoryLimit|getSkillsAffectingRepositoryLimit|buildingSpeedIncrease|getSkillsAffectingBuildingSpeedIncrease|unitsTrophies|getSkillsAffectingUnitsTrophies|scoutSpeed|getSkillsAffectingScoutSpeed|unitsSpeed|getSkillsAffectingUnitsSpeed|unitsSpeedToDungeon|getSkillsAffectingUnitsSpeedToDungeon|switch|main|getSkillsAffectingBuildingCost|unitConsumption|getSkillsAffectingUnitConsumption|scoutingUnitTrainingTime|getSkillAffectingScoutingUnitTrainingTime|unitTrainingTime|getSkillsAffectingUnitTrainingTime||aristocratUnitCost|getSkillsAffectingAristocratUnitCost|scoutingUnitCost|getSkillsAffectingScoutingUnitCost|unitCost|getSkillsAffectingUnitCost|unitsSpeedAroundSelfTown|getSkillsAffectingUnitsSpeedAroundSelfTown|getSummaryPoints|100|else|143|140|138|116|104|103|144|141|136|125|107|118|112|30|31|36|parseInt|inArray|jQuery|paramToString|PLAYER_ITEM_RPG_POINTS_FREE|freeSkillPoints|troopIdConsumptionDecrease|branchPointsItems|SKILL_DEPENDENCY_TYPE_ALL_POINTS|SKILL_DEPENDENCY_TYPE_EXCLUSIVE|SKILL_DEPENDENCY_TYPE_BRANCH_POINTS|SKILL_DEPENDENCY_TYPE_LEVEL|skillsDependencies|savePlayerSkills|getSkills|player'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('1e 1d={1c:l(w,v){c 8=p F();8.g(\'a:N\',[\'o\'],{h:4.7().k,w:w,v:v});8.g(5.6.j,[\'o\'],{h:4.7().k});8.g(4.6.e,[\'u\',\'d\'],{h:4.7().k});8.g(n.6.e,[\'m\'],{R:n.7().k});8.E(l(2){f(/D/.C(2[\'3\'][\'a:N\'])){B.A(r.z(2[\'3\'][\'a:N\']));3}f(2[\'3\'][4.6.e]){4.7().u=2[\'3\'][4.6.e].u}5.i={};t(c b s 2[\'3\'][5.6.j]){5.i[b]=p 5(2[\'3\'][5.6.j][b])}t(c 9 s 2[\'3\'][4.6.e][\'d\']){f(!4.7().d[9]){4.7().d[9]=2[\'3\'][4.6.e][\'d\'][9]}}I.H.L();n.7().m=2[\'3\'][\'Q:P\'][\'m\']})},1b:l(w,v){c 8=p F();8.g(\'a:M\',[\'o\'],{h:4.7().k,w:w,v:v});8.g(5.6.j,[\'o\'],{h:4.7().k});8.g(4.6.e,[\'u\',\'d\'],{h:4.7().k});8.E(l(2){f(/D/.C(2[\'3\'][\'a:M\'])){B.A(r.z(2[\'3\'][\'a:M\']));3}f(2[\'3\'][4.6.e]){4.7().u=2[\'3\'][4.6.e].u}5.i={};t(c b s 2[\'3\'][5.6.j]){5.i[b]=p 5(2[\'3\'][5.6.j][b])}t(c 9 s 2[\'3\'][4.6.e][\'d\']){f(!4.7().d[9]){4.7().d[9]=2[\'3\'][4.6.e][\'d\'][9];S.1a(9);S.19(9)}}I.H.L()})},18:l(9,K){c 8=p F();8.g(\'a:G\',[\'o\'],{9:9});8.g(5.6.j,[\'o\'],{h:4.7().k});8.g(n.6.e,[\'m\'],{R:n.7().k});8.E(l(2){f(/D/.C(2[\'3\'][\'a:G\'])){B.A(r.z(2[\'3\'][\'a:G\']));3}5.i={};t(c b s 2[\'3\'][5.6.j]){5.i[b]=p 5(2[\'3\'][5.6.j][b])}n.7().m=2[\'3\'][\'Q:P\'][\'m\'];f(!17.16&&4.7().d[9]){c O=4.7().d[9].15;t(c b s 5.i){f(14(b)===O){I.H.13(5.i[b].x,5.i[b].y);12}}}I.H.L();K&&K(2[\'3\'][\'a:G\'])})},q:l(h){c 8=p F();8.g(\'a:q\',[\'o\'],{9:n.7().m[h][\'11\']});8.E(l(2){f(/D/.C(2[\'3\'][\'a:q\'])){f(/D:10:Z/.C(2[\'3\'][\'a:q\'])){c J=2[\'3\'][\'a:q\'].Y(\' \');B.A(X.W(r.z(J[0]),$.V(J[1],r.U())))}T{B.A(r.z(2[\'3\'][\'a:q\']))}}})}};', 62, 77, '||data|return|townModel|Route|gettings|getData|req|armyId|Scouting|routeId|let|Armies|info|if|addGetting|townId|routesList|townRoutes|Id|function|SpyInTown|playerModel|all|new|getSpyReport|i18nModel|in|for|Troops|distY|distX|||getTextByCode|showSystemMessage|messageController|test|error|getResponse|request|cancelSpying|worldMap|gameController|str|callback|updateMap|sendScoutOnTown|sendSpyOnTown|spyRouteId|getInfo|player|PlayerId|armyController|else|getTimeFormat|secsToString|format|String|split|tooLateToSpy|scouting|ArmyId|break|updateCell|parseInt|RouteId|townBacking|townController|returnSpy|updateArmyInfo|createArmyQueue|sendScout|sendSpy|spyModel|var'.split('|')))

var staticDataModel = {
    townViewPoints: [5000, 15000, 30000, 50000, 80000, 250000],
    buildingGettingName: 'building:getStaticData',
    troopGettingName: 'troop:getStaticData',
    townFoundReqGettingName: 'data:foundationRequirements',
    resourcesInfoGettingName: 'data:resourcesInfo',
    levelGettingName: 'level:getStaticData',
    configGettingName: 'data:getConfigParams',
    gettings: {
        premiumParams: 'premium:getStaticData',
        mapParams: 'map:getStaticData',
        playerStaticDataParams: 'player:getStaticData',
        gameEventStaticData: 'gameEvent:getCurrentGameEvent',
        skills: 'skill:getStaticData',
        tutorialStepsRewards: 'player:getTutorialStepsRewards',
        avatarUploadData: 'data:avatarUploadData',
        unionParams: 'union:getStaticData',
        dreamsStaticData: 'dream:getStaticData',
        needleStaticData: 'needle:getStaticData',
        townResearchStaticData: 'townResearch:getStaticData',
        dungeonResearchStaticData: 'dungeonResearch:getStaticData',
    },
    buildings: null,
    troops: null,
    townFoundRequirements: null,
    resourcesInfo: null,
    config: null,
    gameEventStaticData: null,
    tutorialStepsRewards: null,
    init: function(data, onlyUpdate) {
        if (typeof (data[staticDataModel.buildingGettingName]) !== 'undefined') {
            if (!onlyUpdate) {
                staticDataModel.buildings = {};
            }
            for (let buildingId in data[staticDataModel.buildingGettingName]) {
                if (data[staticDataModel.buildingGettingName].hasOwnProperty(buildingId)) {
                    staticDataModel.buildings[buildingId] = new Building(data[staticDataModel.buildingGettingName][buildingId]);
                }
            }
        }
        if (typeof (data[staticDataModel.troopGettingName]) !== 'undefined') {
            if (!onlyUpdate) {
                staticDataModel.troops = {};
            }
            for (let troopId in data[staticDataModel.troopGettingName]) {
                staticDataModel.troops[troopId] = new Troop(data[staticDataModel.troopGettingName][troopId]);
            }
        }
        if (typeof (data[staticDataModel.townFoundReqGettingName]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.townFoundRequirements, data[staticDataModel.townFoundReqGettingName]);
            } else {
                staticDataModel.townFoundRequirements = data[staticDataModel.townFoundReqGettingName];
            }
        }
        if (typeof (data[staticDataModel.resourcesInfoGettingName]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.resourcesInfo, data[staticDataModel.resourcesInfoGettingName]);
            } else {
                staticDataModel.resourcesInfo = data[staticDataModel.resourcesInfoGettingName];
            }
        }
        if (typeof (data[staticDataModel.gettings.avatarUploadData]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.avatarUploadData, data[staticDataModel.gettings.avatarUploadData]);
            } else {
                staticDataModel.avatarUploadData = data[staticDataModel.gettings.avatarUploadData];
            }
        }
        if (typeof (data[staticDataModel.configGettingName]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.config, data[staticDataModel.configGettingName]);
            } else {
                staticDataModel.config = data[staticDataModel.configGettingName];
            }
        }
        if (typeof (data[staticDataModel.gettings.premiumParams]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.premiumParams, data[staticDataModel.gettings.premiumParams]);
            } else {
                staticDataModel.premiumParams = data[staticDataModel.gettings.premiumParams];
            }
        }
        if (typeof (data[staticDataModel.gettings.mapParams]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.mapParams, data[staticDataModel.gettings.mapParams]);
            } else {
                staticDataModel.mapParams = data[staticDataModel.gettings.mapParams];
            }
        }
        if (typeof (data[staticDataModel.gettings.playerStaticDataParams]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.playerStaticData, data[staticDataModel.gettings.playerStaticDataParams]);
            } else {
                staticDataModel.playerStaticData = data[staticDataModel.gettings.playerStaticDataParams];
            }
        }
        if (typeof (data[staticDataModel.gettings.gameEventStaticData]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.gameEventStaticData, data[staticDataModel.gettings.gameEventStaticData]);
            } else {
                staticDataModel.gameEventStaticData = data[staticDataModel.gettings.gameEventStaticData];
            }
        }
        if (typeof (data[staticDataModel.gettings.skills]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.skillStaticData, data[staticDataModel.gettings.skills]);
            } else {
                staticDataModel.skillStaticData = data[staticDataModel.gettings.skills];
            }
        }
        if (typeof (data[staticDataModel.gettings.tutorialStepsRewards]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.tutorialStepsRewards, data[staticDataModel.gettings.tutorialStepsRewards]);
            } else {
                staticDataModel.tutorialStepsRewards = data[staticDataModel.gettings.tutorialStepsRewards];
            }
        }
        if (typeof (data[staticDataModel.gettings.unionParams]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.unionParams, data[staticDataModel.gettings.unionParams]);
            } else {
                staticDataModel.unionParams = data[staticDataModel.gettings.unionParams];
            }
        }
        if (typeof (data[staticDataModel.gettings.dreamsStaticData]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.dreamsStaticData, data[staticDataModel.gettings.dreamsStaticData]);
            } else {
                staticDataModel.dreamsStaticData = data[staticDataModel.gettings.dreamsStaticData];
            }
        }
        if (typeof (data[staticDataModel.gettings.needleStaticData]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.needleStaticData, data[staticDataModel.gettings.needleStaticData]);
            } else {
                staticDataModel.needleStaticData = data[staticDataModel.gettings.needleStaticData];
            }
        }
        if (typeof (data[staticDataModel.gettings.townResearchStaticData]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.townResearchStaticData, data[staticDataModel.gettings.townResearchStaticData]);
            } else {
                staticDataModel.townResearchStaticData = data[staticDataModel.gettings.townResearchStaticData];
            }
        }
        if (typeof (data[staticDataModel.gettings.dungeonResearchStaticData]) !== 'undefined') {
            if (onlyUpdate) {
                $.extend(staticDataModel.dungeonResearchStaticData, data[staticDataModel.gettings.dungeonResearchStaticData]);
            } else {
                staticDataModel.dungeonResearchStaticData = data[staticDataModel.gettings.dungeonResearchStaticData];
            }
        }
    },
    updateConfig: function(callback) {
        let req = new request();
        req.addGetting(staticDataModel.configGettingName, ['all'], {});
        req.getResponse(function(data) {
            staticDataModel.init(data.return);
            callback && callback();
        });
    }
};
eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('1B 2={e:{},7:{},8:{},o:{},F:1A,H:[],z:0,y:0,A:0,G:0,1z:-1,Y:6(){f E.T(D X().V()/t+5.G)},1y:6(4){f 5.H[4]=5.Y()},1x:6(4){f 5.H[4]},1w:6(s){5.A=E.1v(s);9 W=D X();5.G=5.A-(W.V()/t); },1u:6(){f 5.A},r:6(U){5.z++;2.7[5.z]=U;f 5.z},1t:6(4,s){2.8[4]=s;2.8[4].O=s.w+(2.n||0)},I:6(4){2.8[4]&&p 2.8[4]},1s:6(4){2.7[4]&&p 2.7[4]},1r:6(){c(5.F){f}5.F=1q;9 a=5;2.r({m:1,b:1p.1o});2.r({m:E.T(1n*S*S/1m),b:1l.1k});2.r({m:3,b:()=>{1j.1i.1h()}});2.r({m:1g,b:6(){1f.1e()}});$.1d.1c(t,5.R)},1b(l,x){l=l<1?1:l;5.y++;2.e[5.y]={x:x,1a:l};f 5.y},R:6(n){9 v=D 19();c(!$.18(2.e)){h(9 i g 2.e){c(!2.e[i]){u}2.e[i].l--;c(2.e[i].l===0){2.e[i].x();p 2.e[i]}}}h(9 i g 2.7){c(!2.7[i]){u}c(n%2.7[i].m<=0){2.7[i].b&&2.7[i].b(n);c(!2.7[i]||!2.7[i].C){u}h(9 j g 2.7[i].C){9 k=2.7[i].C[j];c(k.Q){k.17=k.Q()}v.16(k);c(k.P){v.15(k.P())}}}}h(9 4 g 2.8){2.8[4].w=2.8[4].O-2.n;c(2.8[4].w<=0){2.8[4].N&&2.8[4].N(4);p 2.8[4]}14{2.8[4].b&&2.8[4].b(2.8[4].w,4)}}v.13(6(B){h(9 i g 2.7){c(n%2.7[i].m!=0||!2.7[i].M){u}B&&2.7[i].M(B[\'f\'])}})},12:6(d,K,L,b){9 a=2,q=0;a.o[d]=11(6(){b&&b(q);++q;q==L&&(q=0)},t/K)},J:6(d){9 a=2;10(a.o[d]);p a.o[d]},Z:6(){9 a=2;h(9 d g a.o){a.J(d)}h(d g a.8){a.I(d)}}};', 62, 100, '||timingModel||key|this|function|intervaled|countdown|let|self|onTick|if|id|delayed|return|in|for|||getting|delay|interval|counter|animations|delete|frameIndex|addIntervaled|value|1000|continue|req|count|func|delayedIndex|intervalIndex|serverTime|data|gettings|new|Math|alreadyStarted|diffTime|lastTime|removeCountdown|removeAnimation|fps|framesCount|callback|onFinish|endingCount|postDataFunc|paramsFunc|exec|60|round|object|getTime|now|Date|getCurrentTime|clear|clearInterval|setInterval|addAnimation|getResponse|else|addPostData|addGetting|params|isEmptyObject|request|time|runOnce|everyTime|document|loadData|defenceWindowModel|300|updateResources|resourcesPanel|gameController|incrementLoyalty|uiManager|50|24|updateTimeTheClientClock|gadgetsController|true|start|removeIntervaled|addCountdown|getServerTime|floor|setServerTime|getLastTime|setLastTime|summerTime|false|var'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('32 q={d:18,1v:0,31:30,2Z:0,2Y:0,c:{g:\'j:2X\',2W:\'j:2V\',2U:\'j:2T\',W:\'j:W\',},2S(Z){2.d.v[0].1O=Z},2R(Z){2.d.1N[1].1O=Z},2Q:6(){8 3=l i();3.p(2.c.W,i.K,{\'a\':2.d.e});8 B=3.h(I,{11:2P});4 B?B[\'4\'][2.c.W]:I},5:6(){7(!o.1K){7(2.d==18){2.M(2O(D.5().2N,10))}}4 2.d},M:6(){2.1w();o[1]=o[1]||I;7(1n(o[0])===\'2M\'){2.d=o[0]}19 7(1n(o[0])===\'2L\'){8 3=l i(),m=2.c.g,1e={a:o[0]};3.p(m,o[1]===1a?[\'v\',\'e\',\'2K\',\'1d\',\'2J\',\'V\',\'1N\',\'1q\',\'2I\',\'2H\',\'2G\',\'2F\',\'2E\',\'1r\',\'C\',\'2D\',\'X\',\'Y\',\'2C\',\'2B\',\'2A\']:[\'K\'],1e);3.p(1o.c.1M,[\'K\'],{a:o[0]});8 B=3.h();1o.M(B[\'4\'][1o.c.1M]);2.d=B[\'4\'][m]}U(8 b T 2.d.V){2.d.V[b].2z=k.2y(b)}},2x:6(12,O,f){8 3=l i(),1L=6(N){2w.2v(N.2u)};3.E(\'j:2t\'+O,{a:2.5().e,b:12});3.h(f,{11:1p,f:1L})},2s:6(n){7(2.5().v[n]){4 q.5().v[n]}4 I},2r:6(){4 2.5().v.1K},2q:6(n){7(2.5().v[n]){q.5().v.2p(n,1);4 1a}4 I},2o:6(1J){8 3=l i();3.p(2.c.g,1J,{a:2.5().e});2.d=$.1s(2.d,3.h()[\'4\'][2.c.g])},2n:6(n,f){8 3=l i();3.E(\'j:2m\',{a:2.5().e,n:n});3.p(q.c.g,[\'v\',\'V\'],{\'a\':q.5().e});7(1n(f)===\'6\'){3.h(f)}19{4 3.h()}},2l:6(1I){8 b;1H(1I){u\'1G\':b=k.2k;A;u\'1F\':u\'1E\':u\'1D\':b=k.2j;A;1C:4 0}8 F=k.1B(b);4 y.2i[b][F]},2h:6(){8 1f={},1m=y.R.2g.2f,G=z.2e(),H=z.2d(),1j=1i.2c(),F,b,Q,x;U(8 s T 1m){7(!1m.1l(s))1k;1H(s){u\'1G\':b=k.1x;A;u\'1F\':b=k.2b;A;u\'1E\':b=k.2a;A;u\'1D\':b=k.29;A;1C:4 0}F=k.1B(b);Q=0;x=1g;U(8 t T H[s]){7(!H[s].1l(t))1k;7(z.S[H[t]]){Q+=z.S[H[t]].1A}}U(8 t T G[s]){7(!G[s].1l(t))1k;7(z.S[G[t]]){x+=z.S[G[t]].1A/1g}}7(1j[1i.1z.1y]){x+=1j[1i.1z.1y].28}7(y.R.1h&&y.R.1h.27>=D.5().26){x+=y.R.1h.25}1f[s]=24.23(y.22[k.1x].21[F].20*x/1g)+Q}4 1f},1Z:6(P,f){8 3=l i(),w=2,m=\'j:1Y\',1e={a:2.5().e};3.E(m,{a:q.5().e});3.1X({P:P});3.h(6(9){8 1c=9[\'O\'][m];7(1c){D.5().1W[w.5().e].1d=w.5().1d=P}f(1c)})},1b:6(J,N){8 3=l i();3.E(\'j:1b\',{a:2.5().e,1V:1});3.h(6(9){9=9[\'O\'][\'j:1b\'];7(9===1a){J()}19{N(9)}})},1w:6(){2.1v=0;2.d=18},1u:6(a,16,1t){8 r=l i(),17={a:a},m=\'j:1u\',J=6(9){1U.1T(9[\'4\'][q.c.g]);7(9[\'4\'][L.15.13]!==1S){L.M(9[\'4\'][L.15.13])}1t(9[\'4\'][m])};$.1s(17,16);r.E(m,17);r.p(q.c.g,[\'1r\',\'1q\'],{a:a});7(16[14]>0&&1R.1Q()){r.p(L.15.13,[\'K\'],{12:D.5().e})}r.h(J,{11:1p})},1P:6(f){8 w=2,3=l i();3.p(2.c.g,[\'C\'],{a:2.5().e});3.h(6(9){7(9&&9[\'4\']&&9[\'4\'][w.c.g]){D.5().C=w.5().C=9[\'4\'][w.c.g].C;f()}})}};', 62, 189, '||this|req|return|getData|function|if|let|data|townId|buildingId|gettings|townData|Id|callback|info|getResponse|request|town|buildingsModel|new|method|queue|arguments|addGetting|townModel||resourceName|index|case|BuildingConstruction|self|incrementPercent|staticDataModel|rpgModel|break|result|ReadyToDie|playerModel|addAction|buildingLevel|affectingSkillsPercent|affectingSkills|false|success|all|playerItemsModel|loadData|error|action|newName|increment|config|playerSkills|in|for|Buildings|updateData|||completeTime||timeout|id|getItems||getting|troops|troopsData|null|else|true|setReadyToDie|res|Name|params|miningPerHour|100|newbie|premiumModel|prem|continue|hasOwnProperty|resourcesList|typeof|Route|15000|FreePeople|Troops|extend|troopsDismissCallback|troopsDismiss|lastResourceUpdate|clear|townHallId|fasterGoldGathering|ministerTasks|Parameter|getLevel|default|iron|stone|wood|gold|switch|resName|fields|length|ajaxError|townRoutes|RecruitingList|CompleteTime|checkFlagIsRaised|isEnabled|additionalAristocratModel|undefined|refreshMilitaryInfo|armyModel|flag|TownList|addPostData|rename|renameCurrentTown|Spec1|levels|buildings|floor|Math|miningSpeedCoefficient|Level|miningSpeedMaxLvl|Percent|mineId|quarryId|sawmillId|getPlayerPremiums|getSkillsAffectingResourcePerHour|getSkillsAffectingResourcePerHourPercent|nameToid|resources|getResourcesPerHour|resourcesInfo|barnId|treasuryId|getMaxResourceCapacity|buildingCancelBuilding|sendRequestForCancelBuilding|loadFields|splice|removeBuildingConstructionByQueue|getBuildingConstructionCount|getBuildingConstructionByQueue|building|description|errorBlock|uiWindow|sendRequestForBuildingAction|calculateImageIndex|ImageIndex|TownResearch|Loyalty|CreatedType|Location|Reinforcement|Premium|Armies|TotalPeople|Workers|Points|PlayerId|number|object|HomeTownId|parseInt|5000|sendUpdateData|setRecruitingCompleteTime|setConstructionCompleteTime|getAllIncomingAttack|attackInfo|getRoutings|routings|getInfo|lastUpdateTime|allBuildTime|1000|townCenterResourceBase|var'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('38 o={14:1,1s:2,37:9,11:{1q:\'n:36\'},G:{1p:\'n:1p\',1i:\'n:1i\',1h:\'n:1h\',1n:\'n:1n\',1k:\'n:1k\',1e:\'n:1e\',18:\'n:18\',16:\'n:16\',1d:\'n:1d\'},35:e(1r,b,a){l 26=H,8=t s(),1N={};f(T 1r==\'12\'){8.M({1m:1r})}p{1N.5=1r}8.E(o.11.1q,[\'J\'],1N);8.r(e(6){f(6[\'d\']&&6[\'d\'][o.11.1q]){l n=6[\'d\'][o.11.1q];z(l i 1a n.h.C){26.25(n.h[i])}b&&b(n)}p{a&&a()}})},25:e(13){13.34=4.33(13.1L);13.32=31.3().n.30[13.v]},2Z:e(1o,b,a){l 8=t s();8.E(\'n:1M\',[\'J\'],{2Y:4.3().5,2X:2W.3().5});8.E(\'y:F\',[\'J\'],{5:4.3().5});8.E(\'y:W\',[\'J\'],{5:4.3().5});8.M({2V:1o});8.r(e(6){f(!6[\'d\']){d}f(6[\'d\'][\'n:1M\'].2U===2T){6[\'d\'][\'y:F\']&&(4.3().7=6[\'d\'][\'y:F\']);6[\'d\'][\'y:W\']&&(4.3().7.h[4.3().5]=6[\'d\'][\'y:W\']);b&&b()}p{a&&a(6[\'d\'][\'n:1M\'])}})},1p:e(1o,b,a){l 8=t s(),g=H.G.1p;8.x(g,{5:4.3().7.5,w:4.3().5});8.M({1j:1o,2S:\'\'});8.r(e(6){f(!6.c){d}f(T(6.c[g])===\'24\'){4.3().7.L.1F(6.c[g][0]);b&&b()}p{l X=T(6.c[g])==\'12\'?6.c[g]:\'a:n:1j:2R\';a&&a(X)}})},1n:e(B,1l,b,a){l 8=t s(),g=H.G.1n;8.x(g,{5:B,w:4.3().5});8.M({1l:1l});8.r(e(6){f(!6.c){d}f(6.c[g]===u){4.3().Y.1F({1g:{5:4.3().5,1L:4.3().1L,1m:4.3().1m},23:B,2Q:{5:0,1m:2P},2O:2N.2M(),2L:1l});b&&b(1P);d}f(T(6.c[g])===\'24\'&&6.c[g].5){4.3().7=6.c[g];b&&b(u)}p{l X=T(6.c[g])===\'12\'?6.c[g]:\'a:n:1j:2K\';a&&a(X)}})},1k:e(B,b,a){l 8=t s(),g=H.G.1k;8.x(g,{5:B,w:4.3().5});8.r(e(6){f(!6.c){d}f(6.c[g]===u){f(4.3().Y&&4.3().Y.C){z(l i=0;i<4.3().Y.C;i++){f(4.3().Y[i].23==B){4.3().Y.1f(i,1);19}}}b&&b()}p{l X=T(6.c[g])==\'12\'?6.c[g]:\'a:n:1j:2J\';a&&a(X)}})},2I:e(B,b,a){l 8=t s();8.x(\'n:1K\',{5:B,w:4.3().5});8.E(\'y:W\',[\'J\'],{5:4.3().5});8.E(\'y:F\',[\'J\'],{5:4.3().5});8.r(e(6){f(!6.c){d}f(6.c[\'n:1K\']==u){6[\'d\']&&6[\'d\'][\'y:F\']&&(4.3().7=6[\'d\'][\'y:F\']);6[\'d\']&&6[\'d\'][\'y:W\']&&(4.3().7.h[4.3().5]=6[\'d\'][\'y:W\']);b&&b()}p{a&&a(6.c[\'n:1K\'])}})},2H:e(B,b,a){l 8=t s();8.x(\'n:1J\',{5:B,w:4.3().5});8.r(e(6){f(!6.c){d}f(6.c[\'n:1J\']==u){b&&b()}p{a&&a(6.c[\'n:1J\'])}})},2G:e(b,a){l 8=t s();8.x(\'n:1I\',{5:4.3().7.5,w:4.3().5});8.r(e(6){f(!6.c){d}f(6.c[\'n:1I\']==u){f(4.3().7){22 4.3().7;22 4.3().7.h[4.3().5]}b&&b()}p{a&&a(6.c[\'n:1I\'])}})},2F:e(q,b,a){l 8=t s();z(l i=0;i<q.C;++i){8.x(\'n:1H\',{5:4.3().7.5,w:4.3().5,I:q[i]})}8.E(\'y:F\',[\'h\'],{5:4.3().5});8.r(e(6){f(!6.c||!6[\'d\']){d}f(6.c[\'n:1H\']==u){f(6[\'d\'][\'y:F\']&&4.3().7){4.3().7.h[4.3().5]=6[\'d\'][\'y:F\'].h}b&&b()}p{a&&a(6.c[\'n:1H\'])}})},1i:e(q,b,a){l 8=t s(),g=H.G.1i,Q;f($.1G(q)){Q=q.21(\'.\')}p{Q=q}8.M({\'q\':Q});8.x(g,{5:4.3().7.5,w:4.3().5});8.r(e(6){f(!6.c){d}f(6.c[g]==u){f($.1G(q)){z(l k=0;k<q.C;k++){z(l i=0;i<4.3().7.L.C;i++){f(4.3().7.L[i].1g.5==q[k]){4.3().7.L.1f(i,1);19}}}}p{z(l i=0;i<4.3().7.L.C;i++){f(4.3().7.L[i].1g.5==q){4.3().7.L.1f(i,1);19}}}b&&b()}p{a&&a(6.c[g])}})},1h:e(q,b,a){l 8=t s(),g=H.G.1h,Q;f($.1G(q)){Q=q.21(\'.\')}p{Q=q}8.M({q:Q});8.x(g,{5:4.3().7.5,w:4.3().5});8.r(e(6){f(!6.c){d}l K=6.c[g];f(K&&T(K)!=\'12\'){f(K.1E){z(l i 1a K.1E){4.3().7.h[4.3().5].1F(K.1E[i])}}f(K.1D){z(l i=0;i<K.1D.C;i++){l 20=K.1D[i];z(l j=0;j<4.3().7.L.C;j++){f(20==4.3().7.L[j].1g.5){4.3().7.L.1f(j,1);j--}}}}b&&b()}p{a&&a(K)}})},1Z:e(I,1Y,b,a){l 8=t s(),g=\'n:1Z\';8.x(g,{2E:I,v:1Y,w:4.3().5,5:4.3().7.5});8.r(e(6){f(6.c[g]==u){b&&b()}p{a&&a(6.c[g])}})},1e:e(U,b,a){l 8=t s(),g=H.G.1e,1C={};z(l I 1a U){l P=U[I];1C[\'m\'+I]=P.v==o.14?\'2D\':(P.v==o.1s?\'2C\':(P.1b?\'1\':\'0\')+(P.N?\'1\':\'0\')+(P.Z?\'1\':\'0\')+(P.1w?\'1\':\'0\')+(P.1v?\'1\':\'0\'))}8.M(1C);8.x(g,{5:4.3().7.5,w:4.3().5});8.r(e(6){f(6.c[g]==u){b&&b()}p{a&&a(6.c[g])}})},2B:e(1X,10,b,a){l 8=t s(),1B=\'n:2A\';8.x(1B,{w:4.3().5,5:4.3().7.5});8.M({1A:1X});8.E(\'y:F\',[\'J\'],{5:4.3().5});f(!2z&&10==2y.2x){8.E(4.11.2w,[\'J\'],{})}8.r(e(6){f(6.c[1B]!==u){a&&a(6.c);d}4.3().7.1A=6[\'d\'][\'y:F\'].1A;b&&b()})},1d:e(1z,10,1c){l 8=t s(),1W={5:4.3().7.5,w:4.3().5,10:10,1z:1z},g=H.G.1d;8.x(g,1W);8.r(e(6){l 1y=\'a:2v:2u\';f(6&&6[\'c\']!==1V&&6[\'c\'][g]!==1V&&1c){1y=6[\'c\'][g]}1c&&1c(1y)})},2t:e(B,1x,b,a){l 8=t s(),O=1x?\'n:2s\':\'n:1U\',V=\'n:1T\';8.x(O,{w:4.3().5,5:4.3().7.5,1S:B,1R:1x});8.E(V,[\'J\'],{5:4.3().7.5});8.r(e(6){f(!6.c||!6[\'d\']){d}f(6.c[O]===u){4.3().7.1Q=6[\'d\'][V];b&&b()}p{a&&a(6.c[O])}2r.2q.2p()})},2o:e(q,b,a){l 8=t s(),O=\'n:1U\',V=\'n:1T\';z(l i=0;i<q.C;++i){8.x(O,{w:4.3().5,5:4.3().7.5,1S:q[i],1R:0})}8.E(V,[\'J\'],{5:4.3().7.5});8.r(e(6){f(!6.c||!6[\'d\']){d}f(6.c[O]===u){4.3().7.1Q=6[\'d\'][V];b&&b()}p{a&&a(6.c[O])}})},2n:e(S,R){d S.v!=R.v||S.1b!=R.1b||S.N!=R.N||S.Z!=R.Z||S.1w!=R.1w||S.1v!=R.1v},2m:{2l:e(){d 4.3().7&&4.3().7.h[4.3().5]&&(o.A.D(4.3().7.h[4.3().5].v)!=-1||4.3().7.h[4.3().5].1b)},2k:e(){d 4.3().7&&4.3().7.h[4.3().5]&&(o.A.D(4.3().7.h[4.3().5].v)!=-1||4.3().7.h[4.3().5].N)},2j:e(){d 4.3().7&&4.3().7.h[4.3().5]&&(o.A.D(4.3().7.h[4.3().5].v)!=-1||4.3().7.h[4.3().5].N)},2i:e(){d 4.3().7&&4.3().7.h[4.3().5]&&(o.A.D(4.3().7.h[4.3().5].v)!=-1||4.3().7.h[4.3().5].N)},2h:e(){d 4.3().7&&4.3().7.h[4.3().5]&&(o.A.D(4.3().7.h[4.3().5].v)!=-1||4.3().7.h[4.3().5].N)},2g:e(){d 4.3().7&&4.3().7.h[4.3().5]&&o.A.D(4.3().7.h[4.3().5].v)!=-1},2f:e(){d 4.3().7&&4.3().7.h[4.3().5]&&o.A.D(4.3().7.h[4.3().5].v)!=-1},2e:e(){d 4.3().7&&4.3().7.h[4.3().5]&&4.3().7.h[4.3().5].v==o.14},2d:e(){d 4.3().7&&4.3().7.h[4.3().5]&&(o.A.D(4.3().7.h[4.3().5].v)!=-1||4.3().7.h[4.3().5].N)},2c:e(){d 4.3().7&&4.3().7.h[4.3().5]&&(o.A.D(4.3().7.h[4.3().5].v)!=-1||4.3().7.h[4.3().5].N)},2b:e(){d 4.3().7&&4.3().7.h[4.3().5]&&(o.A.D(4.3().7.h[4.3().5].v)!=-1||4.3().7.h[4.3().5].Z)},2a:e(){d 4.3().7&&4.3().7.h[4.3().5]&&(o.A.D(4.3().7.h[4.3().5].v)!=-1||4.3().7.h[4.3().5].Z)}},29:e(1u){l 1t=1P;f(4.3().7){z(l I 1a 1u){l U=1u[I];z(l i=0;i<4.3().7.h[4.3().5].C;i++){f(4.3().7.h[4.3().5][i].5==I){$.1O(u,4.3().7.h[4.3().5][i],U);19}}f(I==4.3().5){$.1O(u,4.3().7.h[4.3().5],U);1t=u}}}d 1t},18:e(17,b,a){l 8=t s(),g=H.G.18;8.x(g,{5:4.3().7.5,w:4.3().5,17:17});8.r(e(6){f(!6.c){d}f(6.c[g]==u){4.3().7.28=17;b&&b()}p{a&&a(6.c[g])}})},16:e(15,b,a){l 8=t s(),g=H.G.16;8.x(g,{5:4.3().7.5,w:4.3().5});8.M({15:15});8.r(e(6){f(!6.c){d}f(6.c[g]==u){4.3().7.27=15;b&&b()}p{a&&a(6.c[g])}})}};o.A=[o.14,o.1s];', 62, 195, '|||getData|playerModel|Id|data|Union|req||error|success|action|return|function|if|method|Members||||let||union|unionModel|else|ids|getResponse|request|new|true|Rank|playerId|addAction|player|for|SPECIAL_RANKS|unionId|length|indexOf|addGetting|getUnion|actions|this|memberId|all|acceptData|UnacceptedInvites|addPostData|RightInvitations|actionName|newUserRights|idsList|r2|r1|typeof|newRights|diplomacyGettingName|getUnionMembership|errorMessage|UnionInvitations|RightForumModer|cyType|gettings|string|member|RANK_LEADER|message|changeWelcomeMessage|on|changeRequestsAllowed|break|in|RightDiplomacy|callback|buyBlazon|changeMembersRights|splice|Player|acceptRequests|cancelInvitations|invitePlayer|cancelMembershipRequest|requestMessage|Name|requestForMembership|name|sendInvitation|info|idOrName|RANK_ADVISOR|myRightsUpdated|newMembersRights|RightTrustedForums|RightHiddenForums|value|callbackParam|blazonId|Description|descMethod|postData|deletedRequests|newMembers|push|isArray|outMember|out|declineInvite|acceptInvite|Level|createNew|params|extend|false|Diplomacy|RelationId|RelatedUnionId|getDiplomacy|unsetRelation|undefined|actParams|description|rankCode|changeMemberMembership|deletedMemberId|join|delete|UnionId|object|prepareMemberWithTitles|self|WelcomeMessage|SelfRequestsAllowed|applyNewRights|canIModerateForums|canIChangeSectionOrder|canIChangeWelcomeMessage|canIChangeSelfRequestsAllowedSetting|canIEditUnionBlazon|canIEditUnionDescription|canIEditRights|canIAcceptMembershipRequest|canICancelInvite|canIInvite|canIKick|canIChangeDiplomacy|rights|areRightsDifferent|deleteDiplomacy|updateMap|worldMap|gameController|setRelation|saveDiplomacy|generalError|premium|dukatBalance|currencyTypeDucat|premiumModel|eventsEnabled|setDescription|editUnion|advisor|leader|MemberId|kick|leaveUnion|declineInvitation|acceptInvitation|unableToCancelRequestForMembership|unableToRequestForMembership|Message|getServerTime|timingModel|Date|null|Inviter|unableToInvite|inviteMessage|Number|constructor|unionName|townModel|tid|pid|createUnion|ranks|i18nModel|RankTitle|getTitle|Title|getUnionInfo|getInfo|RANK_MEMBER|var'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('a 1A={1z:0,1y:1,1x:2,b:{Y:\'o:Y\',R:\'o:R\',K:\'o:K\',X:\'o:X\',W:\'o:W\',V:\'o:V\',T:\'o:T\',Q:\'o:Q\',P:\'o:P\',O:\'o:O\',N:\'o:N\',M:\'o:M\',J:\'o:J\',I:\'o:I\',H:\'o:H\',G:\'o:G\'},Y:8(3){a 6=n 9(),1w=c,5=c.b.Y;6.m(5,9.l,{});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:s:15\')}})},X:8(U,B,3){a 6=n 9(),5=c.b.X;6.m(5,9.l,{B:B});6.q({t:U});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:S:14\')}})},W:8(p,19,18,3){a 6=n 9(),5=c.b.W;6.m(5,9.l,{p:p,19:19,18:18});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:S:1v\')}})},V:8(p,U,B,3){a 6=n 9(),5=c.b.V;6.m(5,9.l,{p:p,B:B});6.q({t:U});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:S:1u\')}})},T:8(1c,3){a 6=n 9(),5=c.b.T;6.m(5,9.l,{});6.q({F:1c.E(\'.\')});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:S:C\')}})},R:8(p,A,3){a 6=n 9(),5=c.b.R;6.m(5,9.l,{p:p,A:A});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:s:15\')}})},Q:8(t,1b,x,y,p,3){a 6=n 9(),5=c.b.Q;6.m(5,9.l,{p:p,x:x,y:y});6.q({t:t,w:1b});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:s:14\')}})},P:8(r,t,x,y,3){a 6=n 9(),5=c.b.P;6.m(5,9.l,{r:r,x:x,y:y});6.q({t:t});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:s:13\')}})},O:8(17,3){a 6=n 9(),5=c.b.O,16={};1t(a i=0;i<17.1s;i++){a v=17[i];16[\'1r-\'+v.1q]=(v.y?\'1\':\'0\')+(v.x?\'1\':\'0\')}6.m(5,9.l,{});6.q(16);6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:s:13\')}})},N:8(L,3){a 6=n 9(),5=c.b.N;6.m(5,9.l,{});6.q({F:L.E(\'.\')});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:s:C\')}})},M:8(L,p,3){a 6=n 9(),5=c.b.M;6.m(5,9.l,{p:p});6.q({F:L.E(\'.\')});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:s:1p\')}})},K:8(r,A,3){a 6=n 9(),5=c.b.K;6.m(5,9.l,{r:r,A:A});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:s:15\')}})},J:8(r,w,3){a 6=n 9(),5=c.b.J;6.m(5,9.l,{r:r});6.q({w:w});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:D:14\')}})},I:8(z,w,3){a 6=n 9(),5=c.b.I;6.m(5,9.l,{z:z});6.q({w:w});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:D:13\')}})},H:8(z,3){a 6=n 9(),5=c.b.H;6.m(5,9.l,{z:z});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:D:C\')}})},G:8(1a,3){a 6=n 9(),5=c.b.G;6.m(5,9.l,{});6.q({F:1a.E(\'.\')});6.k(8(4){j(4&&4[\'7\']&&4[\'7\'][5]!=h){3&&3(4[\'7\'][5])}g{3&&3(\'f:e:d:D:C\')}})},1o:8(v){v.1n=12.11(v.1m,10.Z())},1l:8(u){u.1k=12.11(u.1j,10.Z());u.1i=12.11(u.1h,10.Z());u.1g=1f.1e(u.1d)}};', 62, 99, '|||callback|data|method|req|return|function|request|var|gettings|this|forum|union|error|else|undefined||if|getResponse|all|addGetting|new|unionForum|sectionId|addPostData|topicId|topicManagement|name|postData|topicData|body|important|closed|postId|page|privacyType|generalDeleteError|postManagement|join|ids|deletePosts|deletePost|editPost|createPost|getTopicPosts|topicIds|moveTopics|deleteTopics|changeTopicsAttributes|editTopic|createTopic|getSectionTopics|sectionManagement|deleteSections|sectionName|editSection|changeSectionPosition|createSection|getSections|getDateTimeFormat|i18nModel|timestampToDateTimeString|Util|generalEditError|generalCreateError|generalLoadlListError|preparedTopicsData|topicsData|placeAbove|relatedSectionId|postIds|firstPostBody|sectionIds|Body|bb2html|uiUtils|PreparedBody|Time|PreparedTime|EditTime|PreparedEditTime|preparePostForTemplate|LastPostTime|PreparedLastPostTime|prepareTopicForTemplate|generalMoveError|id|topic|length|for|generalEditPropertiesError|generalChangePositionError|self|FORUM_PRIVACY_TRUSTED|FORUM_PRIVACY_HIDDEN|FORUM_PRIVACY_NORMAL|unionForumModel'.split('|')))

var uiWindow = {
    fadeIn: 100,
    fadeOut: 100,
    mouseWheelDelta: 20,
    pagerKeyNumbers: [-10, -2, -1, 0, 1, 2, 10],
    params: {
        onClose: null,
        onShow: null,
        onShowHelp: null,
        helpContent: null,
        disableScrolling: false,
        addToStack: null
    },
    hWindow: null,
    closeButton: null,
    helpButton: null,
    waitMessage: null,
    isBlocked: false,
    confirmWindow: null,
    WINDOW_LAYOUT_LONG: 'layout-long',
    WINDOW_LAYOUT_PREMIUM: 'layout-premium',
    WINDOW_TUTORIAL_REWARD: 'layout-tutorial-reward',
    traceBackStack: [],
    block: function(waitingMessageText) {
        if (waitingMessageText !== false) {
            this.blockContainer = $('<div/>').attr({
                id: 'window-container'
            });
            this.waitMessage = $('<div/>').attr({
                'class': 'wait-message'
            }).html(waitingMessageText || i18nModel.getData().waitMessage).appendTo(this.blockContainer);
        }
        var css = {
            border: 'none',
            padding: '0',
            margin: '0',
            background: '',
            zIndex: '1001',
            marginTop: $.px(uiManager.viewportTopOffset)
        }
            , overlayCSS = {
            border: 'none',
            padding: '0',
            margin: '0',
            zIndex: '1000',
            marginTop: $.px(uiManager.viewportTopOffset)
        };
        if (!$.browser.msie) {
            overlayCSS.cursor = css.cursor = 'url(' + staticDataUrl + 'resource/cursor.cur), default';
        }
        $.blockUI({
            message: this.blockContainer || null,
            css: css,
            overlayCSS: overlayCSS,
            fadeIn: uiWindow.fadeIn,
            fadeOut: uiWindow.fadeOut,
            focusInput: false,
            bindEvents: false
        });
        this.isBlocked = true;
    },
    unblock: function() {
        $.unblockUI();
        uiWindow.isBlocked = false;
    },
    blockWindow: function(blockMessage) {
        var css = {
            border: 'none',
            padding: '0',
            margin: '0',
            background: '',
            zIndex: '2001'
        }
            , overlayCSS = {
            border: 'none',
            padding: '0',
            opacity: '0.52',
            zIndex: '2000'
        };
        if (!$.browser.msie) {
            overlayCSS.cursor = css.cursor = 'url(' + staticDataUrl + 'resource/cursor.cur), default';
        }
        $.pageContainer.block({
            css: css,
            overlayCSS: overlayCSS,
            message: blockMessage
        });
    },
    unblockWindow: function() {
        $('#pageContainer').unblock();
    },
    create: function(title, content, help, customParams) {
        var self = this;
        help = help || customParams.helpContent || null;
        this.params = $.extend({
            onClose: null,
            onShow: null,
            onShowHelp: null,
            helpContent: null,
            disableScrolling: false,
            addToStack: null,
            windowLayout: null
        }, customParams);
        var windowHtml = uiUtils.applyTemplate('window', {
            'title': title,
            'content': typeof (content) === 'object' ? '' : content,
            'help': help && typeof (help) === 'object' ? '' : help,
            'windowLayout': self.params.windowLayout
        });
        self.hWindow = $(windowHtml);
        typeof (content) === 'object' && self.hWindow.find('div.scroll-content > .content').empty().append(content);
        typeof (help) === 'object' && self.hWindow.find('div.scroll-content > .help-content').empty().append(help);
        self.hWindow.hide().appendTo('#pageContainer');
    },
    show: function(title, content, help, customParams) {
        var self = this;
        !self.isBlocked && self.block();
        !self.hWindow && self.create(title, content, help, customParams);
        self.blockContainer.parent().css({
            width: $.px(self.hWindow.outerWidth()),
            top: $.px(Math.max(0, ($.body.height() - self.hWindow.outerHeight()) / 2)),
            left: $.px(Math.max(0, ($.window.width() - self.hWindow.outerWidth()) / 2))
        });
        self.blockContainer.empty().append(self.hWindow.show());
        self.closeButton = self.hWindow.children('.close-button').attr('title', i18nModel.getData().window.closeButton).addClass('cursor-over').tooltip({
            track: true,
            showURL: false,
            delay: 0,
            top: -40,
            left: 0
        }).clickable().click(function() {
            self.close(true);
        });
        self.helpButton = self.hWindow.children('.help-button').clickable().click(self.onHelp).attr('title', i18nModel.getData().window.helpButton).tooltip({
            track: true,
            showURL: false,
            delay: 0,
            top: -40,
            left: 0
        });
        self.params.helpButton && self.helpButton.show();
        self.backButton = self.hWindow.children('.back-button').clickable().click(self.onBack).attr('title', i18nModel.getData().window.backButton).tooltip({
            track: true,
            showURL: false,
            delay: 0,
            top: -40,
            left: 0
        });
        (self.params.backButton || self.traceBackStack.length) && self.backButton.show();
        var backObject = self.params.addToStack;
        if (backObject && backObject.controller && backObject.method) {
            self.traceBackStack.push(backObject);
        }
        self.hWindow.show();
        if (typeof (self.params.onShow) === 'function') {
            self.params.onShow(content);
        }
        $('.blockMsg').draggable({
            handle: 'h1',
            stop: function(event, ui) {
                if (ui.position.top < 0) {
                    $(this).css({
                        top: 0
                    });
                } else if (ui.position.top > $.body.height() - 50) {
                    $(this).css({
                        top: $.px($.body.height() - 50)
                    });
                }
                if (ui.position.left < 0) {
                    $(this).css({
                        left: 0
                    });
                } else if (ui.position.left > $.body.width() - 100) {
                    $(this).css({
                        left: $.px($.body.width() - 100)
                    });
                }
            }
        }).bind('selectstart', function(e) {
            return $(e.target).is('.selectable,textarea,input[type=text],a');
        });
    },
    addToStack: function(backObject) {
        if (!(backObject && ((backObject.controller && backObject.method) || backObject.customHandler))) {
            return;
        }
        this.traceBackStack.push(backObject);
    },
    close: function(clearBackStack) {
        var self = uiWindow;
        if (!self.hWindow || self.hWindowOverlay) {
            return;
        }
        if (clearBackStack) {
            self.traceBackStack = [];
        }
        self.hWindow.remove();
        self.isBlocked && self.unblock();
        delete self.hWindow;
        methodModel.getHandler('onWindowClose')();
        if (typeof (self.params.onClose) === 'function') {
            self.params.onClose();
        }
        self.params.onShow = null;
        self.params.onClose = null;
    },
    scrollByVal: function(event, ui) {
        var off = ui.value - uiWindow.windowScrollMax;
        $('#window>.scroll-pane>.scroll-content').css({
            marginTop: $.px(off)
        });
        $('#window>.scroll-bar>.slider').css({
            marginTop: $.px(-uiWindow.windowSliderMax * off / uiWindow.windowScrollMax)
        });
    },
    createPager: function(paginationInfo, pagerContainer, loadPageMethod, contentAccessoryId) {
        var self = uiWindow
            , pageButtonsContent = {
            separatorValue: i18nModel.getData().windowPager.pageSeparatorValue,
            firstPageButtonValue: i18nModel.getData().windowPager.firstPageButton,
            lastPageButtonValue: i18nModel.getData().windowPager.lastPageButton,
            pages: [],
            currentPage: paginationInfo.Pagen !== undefined ? paginationInfo.Pagen : paginationInfo.page,
            totalPages: paginationInfo.Paget !== undefined ? paginationInfo.Paget : paginationInfo.totalPages
        }
            , isFirstKey = false
            , isLastKey = false
            , currentPageNumber = 0
            , extremeButtonsShowIndentation = 3;
        if (pageButtonsContent.currentPage > extremeButtonsShowIndentation) {
            pageButtonsContent.pages[0] = pageButtonsContent.firstPageButtonValue;
            isFirstKey = true;
        }
        if (pageButtonsContent.currentPage <= pageButtonsContent.totalPages - extremeButtonsShowIndentation) {
            isLastKey = true;
        }
        for (var i = 0; i < self.pagerKeyNumbers.length; i++) {
            currentPageNumber = pageButtonsContent.currentPage + self.pagerKeyNumbers[i];
            if (currentPageNumber < 1) {
                continue;
            }
            if (currentPageNumber > pageButtonsContent.totalPages) {
                break;
            }
            if ((currentPageNumber > 1 || !isFirstKey) && (currentPageNumber < pageButtonsContent.totalPages || !isLastKey)) {
                pageButtonsContent.pages[pageButtonsContent.pages.length] = currentPageNumber;
                if ((i < self.pagerKeyNumbers.length - 1) && (Math.abs(self.pagerKeyNumbers[i + 1] - self.pagerKeyNumbers[i]) > 1) && currentPageNumber < pageButtonsContent.totalPages) {
                    pageButtonsContent.pages[pageButtonsContent.pages.length] = pageButtonsContent.separatorValue;
                }
            }
        }
        if (isLastKey) {
            pageButtonsContent.pages[pageButtonsContent.pages.length] = pageButtonsContent.lastPageButtonValue;
        }
        pagerContainer.empty();
        $(uiUtils.applyTemplate('windowPager', pageButtonsContent)).appendTo(pagerContainer);
        self.initPager(paginationInfo, pagerContainer, loadPageMethod, contentAccessoryId);
    },
    initPager: function(paginationInfo, pagerContainer, loadPageMethod, contentAccessoryId) {
        var firstPageButtonValue = i18nModel.getData().windowPager.firstPageButton;
        pagerContainer.find('.buttons div.number').clickable().click(function() {
            if ($(this).hasClass('current')) {
                return;
            }
            var newPageKey = $(this).html()
                , newPageNumber = 0;
            if (newPageKey.trim() === '&nbsp;') {
                if ($(this).hasClass(firstPageButtonValue)) {
                    newPageNumber = 1;
                } else {
                    newPageNumber = paginationInfo.Paget !== undefined ? paginationInfo.Paget : paginationInfo.totalPages;
                }
            } else {
                newPageNumber = parseInt(newPageKey, 10);
            }
            loadPageMethod && loadPageMethod(newPageNumber, contentAccessoryId);
        });
    },
    onHelp: function() {
        var self = uiWindow
            , content = self.hWindow.find('>.scroll-content>.content')
            , help = self.hWindow.find('>.scroll-content>.help-content')
            , helpButton = self.hWindow.children('.help-button')
            , backButton = self.hWindow.children('.back-button');
        var showHelp = function(helpContent) {
            if (helpContent.length && !help.is(':visible')) {
                if (!help.children().length) {
                    help.append(helpContent);
                }
                content.hide();
                helpButton.hide();
                help.find('*[title^=\'\']').each(function() {
                    $(this).tooltip({
                        showURL: false,
                        delay: 0
                    });
                });
                help.show();
                backButton.show();
            }
            self.params.onHelp && self.params.onHelp(helpContent);
        };
        if (help.children().length) {
            showHelp(help);
        } else {
            self.params.getHelp && self.params.getHelp(showHelp);
        }
    },
    addCustomBackButtonWithHandler: function(callback) {
        this.addToStack({
            customHandler: callback
        });
        this.backButton.show();
    },
    removeCustomHandler: function() {
        this.traceBackStack.pop();
        this.backButton.hide();
        if (!(this.traceBackStack.length && this.traceBackStack[0].customHandler)) {
            this.backButton.hide();
        }
    },
    onBack: function() {
        var self = uiWindow
            , content = self.hWindow.find('>.scroll-content>.content')
            , help = self.hWindow.find('>.scroll-content>.help-content')
            , helpButton = self.hWindow.children('.help-button')
            , backButton = self.hWindow.children('.back-button');
        if (help.is(':visible')) {
            content.show();
            helpButton.show();
            help.hide();
            backButton.hide();
        } else if (self.traceBackStack.length) {
            var backObject = self.traceBackStack.pop();
            if (backObject.customHandler) {
                backObject.customHandler();
                if (!(self.traceBackStack.length && self.traceBackStack[0].customHandler)) {
                    backButton.hide();
                }
            } else {
                uiWindow.close();
                if (window[backObject.controller] && window[backObject.controller][backObject.method]) {
                    if (backObject.params) {
                        window[backObject.controller][backObject.method].apply(window[backObject.controller], backObject.params);
                    } else {
                        window[backObject.controller][backObject.method]();
                    }
                }
            }
        }
        uiWindow.params.onBack && uiWindow.params.onBack(content);
    },
    showConfirm: function(info) {
        var self = uiWindow
            , template = $.extend({}, i18nModel.getData().confirmWindow);
        if (info.okTitle) {
            template.submitAccept = info.okTitle;
        }
        if (info.noTitle) {
            template.submitCancel = info.noTitle;
        }
        if (info.yesTitle) {
            template.submitOk = info.yesTitle;
        }
        info.title && (template.title = info.title);
        if (info.paymentMode) {
            template.paymentMode = true;
            template.costPayment = info.cost;
        } else {
            template.paymentMode = false;
        }
        template.alertMode = (info.alertMode);
        self.confirmWindow = $(uiUtils.applyTemplate('confirmWindow', template));
        self.blockWindow(self.confirmWindow);
        var textHeight = self.confirmWindow.find('.desc-pane .desc').height();
        if (!info.paymentMode && textHeight < 40) {
            if (textHeight < 20) {
                self.confirmWindow.find('.desc-pane').addClass('one-line');
            } else {
                self.confirmWindow.find('.desc-pane').addClass('two-lines');
            }
        }
        self.confirmWindow.parent().css({
            top: $.px(Math.max(0, ($.body.height() - self.confirmWindow.outerHeight()) / 2)),
            left: $.px(Math.max(0, ($.body.width() - self.confirmWindow.outerWidth()) / 2))
        });
        self.confirmWindow.children('div.cancel').click(function() {
            self.closeConfirm(info);
        });
        self.confirmWindow.children('div.ok,div.accept,div.confirm').click(function() {
            if (info.ok) {
                if (info.ok() === false) {
                    return;
                }
            }
            self.unblockWindow();
            self.confirmWindow.remove();
            delete self.confirmWindow;
        });
        self.confirmWindow.children('div.close').attr('title', i18nModel.getData().window.closeButton).addClass('cursor-over').tooltip({
            track: true,
            showURL: false,
            delay: 0,
            top: -40,
            left: 0
        }).clickable().click(function() {
            self.closeConfirm(info);
        });
        self.confirmWindow.find('.button-big').clickable();
        info.onShow && info.onShow();
    },
    showAlert: function(info) {
        info = $.extend(true, info, {
            alertMode: true
        });
        this.showConfirm(info);
    },
    showWindowOverlay: function(title, content, customParams) {
        if (!this.hWindow || this.hWindowOverlay) {
            return;
        }
        this.overlayParams = customParams || {};
        var self = this
            , windowHtml = uiUtils.applyTemplate('windowOverlay', {
            'title': title,
            'content': typeof (content) === 'object' ? '' : content
        });
        this.hWindowOverlay = $(windowHtml);
        typeof (content) === 'object' && this.hWindowOverlay.find('> .content').empty().append(content);
        var blockContainerPosition = this.blockContainer.offset();
        this.hWindowOverlay.appendTo($.body);
        this.hWindowOverlay.css({
            left: $.px(Math.round(blockContainerPosition.left + this.blockContainer.outerWidth() / 2 - this.hWindowOverlay.outerWidth() / 2)),
            top: $.px(Math.round(blockContainerPosition.top + this.blockContainer.outerHeight() / 2 - this.hWindowOverlay.outerHeight() / 2))
        }).draggable({
            handle: 'h1',
            stop: function(event, ui) {
                if (ui.position.top < 0) {
                    $(this).css({
                        top: 0
                    });
                } else if (ui.position.top > $.body.height() - 50) {
                    $(this).css({
                        top: $.px($.body.height() - 50)
                    });
                }
                if (ui.position.left < 0) {
                    $(this).css({
                        left: 0
                    });
                } else if (ui.position.left > $.body.width() - 100) {
                    $(this).css({
                        left: $.px($.body.width() - 100)
                    });
                }
            }
        });
        var closeButton = this.hWindowOverlay.children('.close-button').attr('title', i18nModel.getData().windowOverlay.closeButton).addClass('cursor-over').tooltip({
            track: true,
            showURL: false,
            delay: 0,
            top: -40,
            left: 0
        }).clickable().click(function() {
            self.closeOverlay();
        });
        this.hWindow.hide();
        if (typeof (this.overlayParams.onShow) === 'function') {
            this.overlayParams.onShow(content);
        }
    },
    closeOverlay: function() {
        if (!this.hWindowOverlay) {
            return;
        }
        this.hWindowOverlay.remove();
        delete this.hWindowOverlay;
        if (typeof (this.overlayParams.onClose) === 'function') {
            this.overlayParams.onClose();
        }
        this.hWindow.show();
    },
    showPaymentConfirm: function(info) {
        info = $.extend(true, info, {
            paymentMode: true
        });
        this.showConfirm(info);
    },
    closeConfirm: function(info) {
        var self = this;
        info.no && info.no();
        self.unblockWindow();
        self.confirmWindow.remove();
        delete self.confirmWindow;
    },
    changeWaitingText: function(text) {
        this.waitMessage.html(text);
    },
    errorBlock: function(text) {
        var fullBlock = $('#error-block');
        if (!fullBlock.length) {
            fullBlock = $('<div class="error-block" id="error-block"><div class="text"></div></div>').appendTo('#pageContainer');
        }
        var textContainer = fullBlock.children('div.text').eq(0);
        textContainer.html(text).css({
            'margin-top': $.body.height() / 2 - textContainer.height() / 2,
            'margin-left': $.body.width() / 2 - textContainer.width() / 2
        });
    },
    ajaxError: function(error) {
        uiWindow.errorBlock(error.description);
    }
};
class WindowYesNo {
    static init() {
        let self = WindowYesNo;
        self.__div = $(uiUtils.applyTemplate('WOFWindowYesNo'));
        self.__div.find('.close, .block-ui, .wof-buttons .wof-button.no').click(self.__onNoButtonClick);
        self.agreeButton = self.__div.find('.wof-buttons .wof-button.yes').click(self.__onYesButtonClick);
        self.textValue = self.__div.find('.text .value');
        $('body').append(self.__div);
    }
    static __onNoButtonClick() {
        let self = WindowYesNo;
        self.noCallback && self.noCallback();
        self.closeWindow();
    }
    static closeWindow() {
        let self = WindowYesNo;
        self.__div.removeClass('show');
        self.yesCallback = undefined;
        self.noCallback = undefined;
    }
    static __onYesButtonClick() {
        let self = WindowYesNo;
        self.yesCallback && self.yesCallback();
        self.closeWindow();
    }
    static showWindow(text, onYesButtonCallback, onNoButtonCallback) {
        let self = WindowYesNo;
        if (text === '') {
            return false;
        }
        self.yesCallback = onYesButtonCallback;
        self.noCallback = onNoButtonCallback;
        self.textValue.html(text);
        self.__div.addClass('show');
    }
}
class WOFWindow {
    static init() {
        let self = WOFWindow;
        self.__div = $(uiUtils.applyTemplate('WOFWindow'));
        self.__div.find('.close, .block-ui').click(self.__onCloseButtonClick);
        self.__content = self.__div.find('.content');
        self.__titleValue = self.__div.find('.title');
        self.__body = self.__div.children('#wof-window-body');
        self.__open = false;
        $('body').append(self.__div);
    }
    static __onCloseButtonClick() {
        let self = WOFWindow;
        self.closeWindow();
    }
    static isOpen() {
        return WOFWindow.__open;
    }
    static setTitle(title) {
        WOFWindow.__titleValue.html(title);
    }
    static setWindowClass(extraClass) {
        let self = WOFWindow;
        if (!self.isOpen()) {
            self.__body.addClass(extraClass);
        }
    }
    static closeWindow(moment=false) {
        let self = WOFWindow
            , callback = ()=>{
                self.__div.removeClass();
                self.__body.removeClass();
                self.__content.empty();
                self.__div.css('visibility', 'hidden');
                $.tooltip.close();
                self.__cancelCallback && self.__cancelCallback();
                self.__cancelCallback = undefined;
            }
        ;
        self.__open = false;
        if (moment) {
            callback();
        } else {
            self.__div.animate({
                opacity: 0
            }, 400, callback);
        }
    }
    static updateContent(newContent) {
        WOFWindow.__content.empty().append(newContent);
    }
    static showWindow(title, content, onCancelButtonCallback) {
        let self = WOFWindow;
        if (!content || title === '' || uiWindow.isBlocked || self.isOpen()) {
            return false;
        }
        self.__div.stop(true, true);
        self.__content.append(content);
        self.__titleValue.html(title);
        self.__div.css('visibility', 'visible').animate({
                opacity: 1
            }, 400, ()=>{
                self.__cancelCallback = onCancelButtonCallback;
                self.__div.find('.button.cancel').click(self.__cancelCallback);
            }
        );
        self.__open = true;
        return self.__div;
    }
}
eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('c 1l={2c:1K,1r:{2g:{5o:1,3P:2,3R:3,5n:4,5m:5,5l:6,3T:7,5k:8,5j:9,5i:10,5h:11,5g:12,5f:14,5e:15,\'3S-3T\':16,\'3S-2W\':17,\'3Q-3R\':18,\'3Q-2W\':19,\'3O-3P\':20,\'3O-2W\':21},2f:{\'5d-5c\':1,5b:2,5a:3,59:4,\'58-57\':5,56:6,\'55-54\':7,53:8,52:9,51:10,50:11,4Z:12,4Y:13,4X:14,4W:15,4V:16,4U:19,4T:20}},4S:f(1i,2z,L){2z.X(\'C\',1i);2z.E(\'D:3N([1i="2y-\'+1i+\'"])\').1E(\'2x\');2z.E(\'#2y-\'+1i).2n(\'2x\');L.E(\'D:3N([1i="2y-L-\'+1i+\'"])\').1E(\'2x\');L.E(\'D[1i="2y-L-\'+1i+\'"]\').2n(\'2x\')},2R:f(1Y,3M){J $.4R(h.2c[1Y],3M,{4Q:1Y})},4P:f(){1j(c 1Y 4O h.2c){h.2c[1Y]=$.4N(h.2c[1Y],[],{4M:1s})}},4L:f(2w){2w.v&&4K(2w.v)==\'f\'&&2w.v(f(){c $h=$(h);p(!$h.2Q(\'4J\')){$h.2X(\'4I\')}})},4H:f(4G){1j(c i=0;i<2v.2u.l;i++){c 4F=2v.2u[i]}},2r:f(1X,2b){c O=[],1H=2b?2b:(2v.2u.l>0?2v.2u.2T(0):1K);p(!1H){J O}c 1M=1H.3L?1H.3L:1H.1M;1j(c 2t=0;2t<1M.l;2t++){c 1N=1M.2T(2t);p(1N.3J&&1N.3K&&1N.3K.4E(1X)!=-1){O.B(1N)}A p(1N.2b){c 2V=h.2r(1X,1N.2b);1j(c i=0;i<2V.l;i++){O.B(2V[i])}}}p(1H.2U){1j(c 2s=0;2s<1H.2U.l;2s++){c 2S=h.2r(1X,1H.2U.2T(2s));1j(c j=0;j<2S.l;j++){O.B(2S[j])}}}J O},4D:f(1X){c 1M=h.2r(1X),O=[];1j(c i=0;i<1M.l;i++){c 2q=1M[i].3J.2q;2q.l>0&&O.B(2q.1J(/1A\\([\'"]?(.+?)[\'"]?\\)/)[1])}J O},4C:f(1L,o){c K=h;f Q(3I){c 1q=$(\'<D C="\'+3I+\' 1q-2P"><D></D></D>\');1L.2o(1q);J 1q}f 2p(){1L.2o($(\'<D C="4B"><D></D></D>\'))}1L.4A();c 3G=Q(\'b\'),3F=Q(\'i\'),3E=Q(\'u\'),3D=Q(\'s\');2p();c 3C=Q(\'2i\'),3B=Q(\'1u\'),3A=Q(\'1A\');2p();c 3z=Q(\'2H\'),3y=Q(\'26\'),3x=Q(\'4z\');2p();c 3w=Q(\'1n\'),3v=Q(\'1z\'),3u=Q(\'1y\'),3t=Q(\'1w\'),3s=Q(\'1v\');c 1G=$(h.2R(\'4y\',$.3H(h.1r.2g)));1L.2o(1G);1G.E().v(f(){c 1Q=$(h).X(\'C\');K.2O(\'1w\',1Q,o)}).24({23:1s,22:0,1Z:f(){c 1Q=$(h).X(\'C\');J 1P.31(K.1r.2g[1Q])}});c 1F=$(h.2R(\'4x\',$.3H(h.1r.2f)));1L.2o(1F);1F.E().v(f(){c 1O=$(h).X(\'C\');K.2O(\'1v\',1O,o)}).24({23:1s,22:0,1Z:f(){c 1O=$(h).X(\'C\');J 1P.30(K.1r.2f[1O])}});3G.V().v(f(){K.1p(\'b\',o)});3F.V().v(f(){K.1p(\'i\',o)});3E.V().v(f(){K.1p(\'u\',o)});3D.V().v(f(){K.1p(\'s\',o)});3C.V().v(f(){K.3o(\'2i\',\'НикИгрока\',o)});3B.V().v(f(){K.1p(\'1u\',o)});3A.V().v(f(){K.1p(\'1A\',o)});3z.V().v(f(){K.2m(\'\',o)});3y.V().v(f(){K.2m(\'1\',o)});3x.V().v(f(){K.2m(\'a\',o)});3w.V().v(f(){K.1p(\'1n\',o)});3v.V().v(f(){K.1p(\'1z\',o)});3u.V().v(f(){K.1p(\'1y\',o)});3t.V().v(f(e){e.3r();p(1G.2Q(\'1h\')){1G.1E(\'1h\');J}1G.2n(\'1h\');1F.1E(\'1h\');$.1T.3q(\'v\',f(){1G.1E(\'1h\')})});3s.V().v(f(e){e.3r();p(1F.2Q(\'1h\')){1F.1E(\'1h\');J}1F.2n(\'1h\');1G.1E(\'1h\');$.1T.3q(\'v\',f(){1F.1E(\'1h\')})});1L.1I(\'>.1q-2P\').24({23:1s,22:0,1Z:f(){c 3p=$(h).X(\'C\').W(/1q-2P/,\'\').2C();J 1P.3h().1r.4w[3p]}})},1p:f(F,o){c G=o.1d(),t=o[0];p(t.1f!=1D&&t.1e!=1D){c U=t.1f,T=t.1e,1o=G.1g(0,U),1k=G.1g(U,T),1B=G.1g(T),Z=\'[\'+F+\']\',1C=\'[/\'+F+\']\';o.1d(1o+Z+1k+1C+1B);t.1f=U+Z.l;t.1e=T+Z.l}A{o.1d(G+\'[\'+F+\'][/\'+F+\']\')}},2O:f(F,1T,o){c G=o.1d(),t=o[0];p(t.1f!=1D&&t.1e!=1D){c U=t.1f,T=t.1e,1o=G.1g(0,U),1k=G.1g(U,T),1B=G.1g(T),Z=\'[\'+F+\']\',1C=\'[/\'+F+\']\';o.1d(1o+1k+Z+1T+1C+1B);t.1f=U;t.1e=T}A{o.1d(G+\'[\'+F+\']\'+1T+\'[/\'+F+\']\')}},3o:f(F,2N,o){c G=o.1d(),t=o[0];p(t.1f!=1D&&t.1e!=1D){c U=t.1f,T=t.1e,1o=G.1g(0,U),1k=G.1g(U,T),1B=G.1g(T),Z=\'[\'+F+\'=\'+2N+\']\',1C=\'[/\'+F+\']\';o.1d(1o+Z+1k+1C+1B);t.1f=U+Z.l;t.1e=T+Z.l}A{o.1d(G+\'[\'+F+\'=\'+2N+\'][/\'+F+\']\')}},2m:f(2M,o){c G=o.1d(),t=o[0];p(t.1f!=1D&&t.1e!=1D){c U=t.1f,T=t.1e,1o=G.1g(0,U),1k=G.1g(U,T),1B=G.1g(T),Z=\'[1S="\'+2M+\'"]\',1C=\'[/1S]\';c 2a=1k.4v("\\n");1j(c i=0;i<2a.l;i++){2a[i]=\'[*]\'+2a[i]}1k=2a.4u("\\n");o.1d(1o+Z+1k+1C+1B);t.1f=1o.l+Z.l;t.1e=1o.l+Z.l+1k.l}A{o.1d(G+\'[1S="\'+2M+\'"][/1S]\')}},4t:f(3n){c 1U=[],1V=3n,w=[],1b=[],O=\'\',q=1K;3m(1V.l>0){c 1W=1V.1J(/^([\\s\\S]*?)(\\[.+?\\])([\\s\\S]*)$/m);p(1W){p(1W[1].l){1U.B(1W[1])}1U.B(1W[2]);1V=1W[3]}A{1U.B(1V);1V=\'\'}}c 29=1s;1j(c i=0;i<1U.l;i++){c 1t=1U[i],2l=1t.1J(/^\\[(?!\\/)([^=]+?)(=["\']?.*?["\']?)?\\]$/),2J=1t.1J(/^\\[\\/(.+)\\]$/);p(2l){c F=2l[1],1a=2l[2];p(29){p(q){q.E.B(1t)}A{1b.B(1t)}}A{p(F.2k()==\'2j\'){29=3d}p(1a){c 2L=1a.1J(/^=["\']?([^\'"]*?)["\']?$/);p(2L){1a=2L[1]}A{1a=\'\'}}A{1a=\'\'}q={Y:F,1a:1a,E:[]};q.2I=$.4s(1l.3l,q);p(q.Y==\'*\'&&w.l&&w[w.l-1].Y==\'*\'){c 2K=w.28();p(w.l){w[w.l-1].E.B(2K)}A{1b.B(2K)}}w.B(q)}}A p(2J){c F=2J[1];p(29&&F.2k()!=\'2j\'){p(q){q.E.B(1t)}A{1b.B(1t)}}A{p(q&&q.Y==F){w.28();c P=w.l?w[w.l-1]:1K;p(P){P.E.B(q)}A{1b.B(q)}q=P}A p(q&&q.Y==\'*\'&&F==\'1S\'){w.28();c P=w.l?w[w.l-1]:1K;p(P){P.E.B(q)}A{1b.B(q)}q=P;w.28();P=w.l?w[w.l-1]:1K;p(P){P.E.B(q)}A{1b.B(q)}q=P}29=1s}}A{p(q){q.E.B(1t)}A{1b.B(1t)}}}3m(w.l){w.28();c P=w.l?w[w.l-1]:1K;p(P){P.E.B(q)}A{1b.B(q)}q=P}1j(c j=0;j<1b.l;j++){O+=1b[j].3k==3j?1l.1R(1b[j]).W(/\\n/g,\'<3i/>\'):1b[j].2I()}J O},3l:f(27){c I=\'\',H=\'\',M=\'\';27=27||h.Y.2k()==\'2j\';1j(c k=0;k<h.E.l;k++){M+=h.E[k].3k==3j?(27?h.E[k]:1l.1R(h.E[k]).W(/\\n/g,\'<3i/>\')):h.E[k].2I(27)}3g(h.Y.2k()){N\'b\':N\'s\':N\'u\':N\'i\':I=\'<\'+h.Y+\'>\',H=\'</\'+h.Y+\'>\';R;N\'1A\':p(1l.3e(M)){I=\'<a 3a="\'+1l.1R(M)+\'" 38="37">\';H=\'</a>\';M=\'ссылка\'}A{I=\'[1A]\';H=\'[/1A]\';M=\'***\'}R;N\'2j\':I=\'\';H=\'\';R;N\'2i\':I=\'<D C="2i">\'+(h.1a&&h.1a.l?\'<D C="1n-1x" 1n-Y="\'+1l.1R(h.1a)+\'">\'+1l.1R(h.1a)+\'</D>\':\'\')+\'<D C="1T">\';H=\'</D></D>\';R;N\'1u\':I=\'<D C="1u"><D C="4r 1q-4q 2Z-1q">\'+1P.3h().1r.4p+\'</D><D C="2e">\';H=\'</D></D>\';R;N\'1n\':I=\'<1c C="1n-1x" 1n-Y="\'+M+\'">\';H=\'</1c>\';R;N\'1z\':I=\'<1c C="1z-1x" 1z-Y="\'+M+\'">\';H=\'</1c>\';R;N\'1y\':c m=M.1J(/^\\s*(\\d+)\\s*[\\|x]\\s*(\\d+)\\s*$/i);p(m){I=\'<1c C="1y-1x" x="\'+m[1]+\'" y="\'+m[2]+\'">\';H=\'</1c>\';M=m[1]+\'x\'+m[2]}A{m=M.1J(/^\\s*x:\\s*(\\d+)\\s*y:\\s*(\\d+)\\s*$/i);p(m){I=\'<1c C="1y-1x" x="\'+m[1]+\'" y="\'+m[2]+\'">\';H=\'</1c>\';M=m[1]+\'x\'+m[2]}A{I=\'[1y]\';H=\'[/1y]\'}}R;N\'1w\':I=\'<1c C="1w-1m 1w-1m-\'+M+\'">\';H=\'</1c>\';M=\'\';R;N\'1v\':I=\'<1c C="1v-1m 1v-1m-\'+M+\'">\';H=\'</1c>\';M=\'\';R;N\'1S\':3g(h.1a){N\'1\':I=\'<26>\';H=\'</26>\';R;N\'a\':I=\'<26 C="a">\';H=\'</26>\';R;4o:I=\'<2H>\';H=\'</2H>\';R}R;N\'*\':I=\'<3f>\';H=\'</3f>\';R}J I+M+H},3e:f(1A){J 3d;c O=1A.W(/(3c.{0,5}2G|4n.{0,5}3c.{0,5}2G)/3b,4m);O=O.W(/39:\\/\\/(4l\\.2F\\/[a-z\\d]{5,7}|4k\\.4j\\/[a-z\\d]{5,7}|4i\\.2F\\/[a-z\\d\\/]+|[a-z\\d]+\\.4h.4g\\/\\S+|(?:[a-z\\d]+\\.)?4f\\.2G\\/\\S+|[a-z\\d]+\\.4e.2F\\/\\S+)/3b,\'<a 3a="39://$1" 38="37">изображение</a>\');J O},1R:f(36){J 36.W(/&/g,"&4d;").W(/</g,"&4c;").W(/>/g,"&4b;").W(/"/g,"&4a;").W(/\'/g,"&#49;")},48:f(L,25){L.1I(\'.1n-1x\').v(f(){c $h=$(h),2E=2h($(h).X(\'1n-1i\'),10),35=$(h).X(\'1n-Y\');47.46(2E?2E:35,1s,25)})},45:f(L,25){L.1I(\'.1z-1x\').v(f(){c $h=$(h),2D=2h($(h).X(\'1z-1i\'),10),32=$(h).X(\'1z-Y\');p(2D){34.33(2D,25)}A{34.33(32,25)}})},44:f(L){L.1I(\'.1y-1x\').v(f(){c $h=$(h),x=2h($h.X(\'x\'),10),y=2h($h.X(\'y\'),10);43.42({41:x,40:y})})},3Z:f(L){L.1I(\'.1w-1m\').24({23:1s,22:0,1Z:f(){c 1Q=$(h).X(\'C\').W(\'1w-1m\',\'\').W(\'1w-1m-\',\'\').2C();J 1P.31(1l.1r.2g[1Q])}})},3Y:f(L){L.1I(\'.1v-1m\').24({23:1s,22:0,1Z:f(){c 1O=$(h).X(\'C\').W(\'1v-1m\',\'\').W(\'1v-1m-\',\'\').2C();J 1P.30(1l.1r.2f[1O])}})},3X:f(L,2B){L.1I(\'.1u\').3W(f(){c 1u=$(h),2Y=1u.E(\'.2Z-1q\'),2e=1u.E(\'.2e\');2Y.v(f(e){2e.2X(\'1h\');2B&&2B();e.3V()})})},3U:f(2d){J{r:(2d>>16)&2A,g:(2d>>8)&2A,b:2d&2A}}};', 62, 335, '||||||||||||var|||function||this||||length|||textarea|if|currentObject|||textareaEl||click|walkStack||||else|push|class|div|children|tag|oldValue|closeTag|openTag|return|self|content|inner|case|result|previousObject|addButton|break||end|start|clickable|replace|attr|name|leftEnvelop|||||||||||param|preResult|span|val|selectionEnd|selectionStart|substring|visible|id|for|part2|uiUtils|icon|player|part1|applyNonParametrizedBBCode|button|bbCodes|false|part|spoiler|building|unit|link|coords|union|url|part3|rightEnvelop|undefined|removeClass|buildingPanel|unitPanel|cssTable|find|match|null|bbPane|rules|rule|buildingCode|i18nModel|unitCode|escapeHtml|list|body|parts|bbText|probe|selector|templateId|bodyHandler|||delay|showURL|tooltip|backObject|ol|noEscaping|pop|notagCapturing|lines|styleSheet|templateData|hexColor|expandable|availableBuildings|availableUnits|parseInt|quote|html|toLowerCase|bbOpenTest|applyListBBCode|addClass|append|addSplitter|backgroundImage|grabCSSRulesBySelector|importIndex|ruleIndex|styleSheets|document|obj|open|tab|tabs|0xff|expandCallback|trim|unionId|playerId|com|ru|ul|serialize|bbCloseTest|prevCurObject|paramTest|type|initialValue|applyNonParametrizedWithBodyBBCode|micro|hasClass|applyTemplate|importIEResult|item|imports|importResult|spearman|toggleClass|expandButton|expand|getBuildingName|getTroopsName|unionName|displayUnionInfo|unionController|playerName|text|_blank|target|http|href|ig|feogames|true|linkIsAllowed|li|switch|getData|br|String|constructor|onBBCodeSerialize|while|bbOriginalText|applyEqualParametrizedBBCode|bbCode|one|stopPropagation|buildingButton|unitButton|coordsButton|unionButton|playerButton|llButton|olButton|ulButton|urlButton|spoilerButton|quoteButton|strikethroughButton|underscoreButton|italicButton|boldButton|objectKeys|cssClass|style|selectorText|cssRules|theData|not|rr|swordsman|hr|cavalry|fr|archer|hexColorToRGB|stopImmediatePropagation|each|prepareSpoilersInContent|prepareBuildingIconsInContent|prepareUnitIconsInContent|top|left|goToMapPosition|gameController|prepareCoordsLinksInContent|prepareUnionLinksInContent|displayProfile|playerController|preparePlayerLinksInContent|039|quot|gt|lt|amp|dropbox|radikal|us|imageshack|clip2net|sc|prnt|prntscr|siteDomain|feodal|default|spoilerExpandButtonLabel|medium|brown|proxy|bb2html|join|split|buttonTooltips|bbBuildingSelectPanel|bbUnitSelectPanel|ll|empty|splitter|initBBEditor|grabCSSRulesWithBackgroundBySelector|indexOf|cssFile|cssArray|turnOnStyleSheets|checked|disabled|typeof|initCheckbox|filter_data|createTemplate|in|prepareTemplateData|templateName|processTemplateToText|switchTab|palace|workshop|walls|stables|barracks|market|hoard|smithy|treasury|farm|windmill|mine|ore|sawmill|quarry|stone|storehouse|square|houses|hall|town|barbarians|aristocrat|catapult|ram|spy|scout|crossbowman|pike|spear|knight|mercenary'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('H 1={g:G+\'F/E/D/\',6:{},5:0,7:0,C:d(b){k 4=1;1.7=B(a.9.A);1.5=0;8(1.7===0){b()}z{y(k 3 x a.9.f){4.6[3]=w v();4.6[3].u=d(e){8(e.s===2){1.5++;8(1.5===1.7){r}}};4.6[3].q=d(c){j.i(c);j.i("p, o\'t n "+c.m.h);1.5++;8(1.5===1.7){b()}};4.6[3].h=4.g+a.9.f[3].l}}}};', 44, 44, '|imageLibrary||objectId|self|cnt|loadedImg|imgCnt|if|mapParams|staticDataModel|callback|data|function||mapObjectsArray|baseUrl|src|log|console|let|url|currentTarget|load|can|Sorry|onerror|return|eventPhase||onload|Image|new|in|for|else|mapObjectsCount|parseInt|loadImages|normal|map_objects|resource|staticDataUrl|var'.split('|')))

var additionalAristocratController = {
    content: null,
    buyButton: null,
    coinsCount: null,
    resourceBar: null,
    init: function(recruitWindowContent) {
        if (staticDataModel.config.useNewAristocrat) {
            this.createAdditionalAristocratWindow();
            this.coinsCount = this.content.find('.coins-count');
            this.resourceBar = null;
            this.updateCoinsTable();
            recruitWindowContent.append(this.content);
            recruitWindowContent.find('#recruit-building-content').css({
                'margin-top': '-32px'
            });
        }
    },
    updateCoinsTable: function() {
        let self = additionalAristocratController;
        if (!self.content) {
            return;
        }
        let coinsSummary = playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_COINS];
        coinsSummary = coinsSummary === undefined ? 0 : coinsSummary;
        let nextAristocratPrice = additionalAristocratModel.getAristocratPrice(additionalAristocratModel.getAristocratNumber() + 1)
            , affectingSkillsArray = rpgModel.getSkillsAffectingAristocratUnitCost()
            , discount = 1;
        for (let index in affectingSkillsArray) {
            if (rpgModel.playerSkills[affectingSkillsArray[index]]) {
                discount -= rpgModel.playerSkills[affectingSkillsArray[index]].Parameter / 10000;
            }
        }
        nextAristocratPrice = Math.max(Math.floor(nextAristocratPrice * discount), 1);
        self.content.find('.coins-summary .value').text(coinsSummary);
        self.content.find('.next-aristocrat-price .value').text(nextAristocratPrice);
        self.content.find('.need-to-recruit .value').text(nextAristocratPrice - coinsSummary > 0 ? nextAristocratPrice - coinsSummary : 0);
        self.content.find('.coins-can-buy  .value').text(self.calculateMaxAristocratCoins());
    },
    onBuyClick: function() {
        let self = additionalAristocratController
            , coinsCount = self.content.find('input.coins-count').val();
        if (self.buyButton.hasClass('disabled'))
            return;
        additionalAristocratModel.buyCoins(coinsCount, function(data) {
            self.coinsCount.val(0);
            self.coinsAmountChange();
            self.updateCoinsTable();
        }, function(data, errorCode) {
            errorCode && messageController.showSystemMessage(i18nModel.getTextByCode(errorCode));
        }, uiWindow.ajaxError);
    },
    getCoinsPrice: function() {
        return staticDataModel.config.coinPrices;
    },
    createAdditionalAristocratWindow: function() {
        let templateData = {}
            , self = additionalAristocratController;
        templateData.table = i18nModel.getData().aristocrat.window.table;
        templateData.coinsMarket = i18nModel.getData().aristocrat.window.coinsMarket;
        templateData.cost = self.getCoinsPrice();
        self.content = $(uiUtils.applyTemplate('additionalAristocratWindow', templateData));
        self.buyButton = self.content.find('.buy-coins').clickable().click(this.onBuyClick);
        self.content.find('input.coins-count').keyup(this.coinsAmountChange);
        self.content.find('div.coins-max').clickable().click(function() {
            let maxCount = self.calculateMaxAristocratCoins();
            self.coinsCount.val(maxCount);
            self.updateAdditionalAristocratResourceBar();
        });
        self.content.find('div.aristocrat-coins-left').clickable().click(function() {
            let value = parseInt(self.coinsCount.val(), 10);
            if (value <= 0) {
                return;
            }
            self.coinsCount.val(value - 1);
            self.updateAdditionalAristocratResourceBar();
        });
        self.content.find('div.aristocrat-coins-right').clickable().click(function() {
            let value = parseInt(self.coinsCount.val(), 10);
            if (value >= self.calculateMaxAristocratCoins()) {
                return;
            }
            self.coinsCount.val(value + 1);
            self.updateAdditionalAristocratResourceBar();
        });
    },
    coinsAmountChange: function() {
        let self = additionalAristocratController
            , max = self.calculateMaxAristocratCoins()
            , value = parseInt(self.coinsCount.val(), 10) || 0
            , count = Math.max(0, Math.min(max, value));
        self.coinsCount.val(count);
        self.updateAdditionalAristocratResourceBar();
    },
    updateAdditionalAristocratResourceBar: function() {
        let self = additionalAristocratController;
        if (!self.content) {
            return;
        }
        let resourcesToBuy = {
            gold: 0,
            iron: 0,
            wood: 0,
            stone: 0
        }
            , coinsCount = self.coinsCount.val()
            , coinsPrice = self.getCoinsPrice();
        if (!isFinite(coinsCount))
            coinsCount = 0;
        if (self.resourceBar == null) {
            self.resourceBar = {};
            for (let resource in resourcesToBuy) {
                self.resourceBar[resource] = $('#full-coins-resource-' + resource).children('.cost');
            }
        }
        for (let res in resourcesToBuy) {
            resourcesToBuy[res] = coinsPrice[res] * coinsCount;
        }
        if (parseInt(coinsCount, 10) <= 0) {
            self.buyButton.addClass('disabled');
        } else {
            self.buyButton.removeClass('disabled');
        }
        for (let res in resourcesToBuy) {
            let val = resourcesToBuy[res];
            self.resourceBar[res].text(val);
        }
    },
    calculateMaxAristocratCoins: function() {
        let self = additionalAristocratController
            , coinsPrice = self.getCoinsPrice()
            , resourcesToRecruit = {}
            , maxCount = Number.MAX_VALUE;
        $.extend(resourcesToRecruit, playerModel.getData().Resources);
        for (let res in staticDataModel.config.resources.nameToId) {
            if (coinsPrice[res] === undefined)
                continue;
            maxCount = Math.min(maxCount, Math.floor(resourcesToRecruit[res] / coinsPrice[res]));
            9
        }
        return maxCount;
    }
};
eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('c n={7v:0,4c:1,49:2,3o:3,47:4,48:5,Q:J,1N:J,K:J,U:[],7u:g(1O){c a=b,5m=g(5o){1P.7t(g(){a.5l();a.7s={7r:a.5i,7q:5n.7p,3I:a.3I,7o:5o,7n:1A,7m:1A};1O&&1O()})};5n.7l(3,5m)},5l:g(){c W={},5k=[12,13,15,16,17,18,19,20,21],3S=[5,6,1,2,8,7,3,4,9,10,14,11];1c(c h 1a R.W){f(5k.7k(1i(h))>=0){2y}W[h]=R.W[h];W[h].o=j.e().A[h]}c 5j=j.e().D;b.Q=$(4C.4B(\'7j\',{4A:q.e().C.F,2X:R.2E.2X,2r:5j,7i:j.e().1y,W:W,3S:3S}))},5i:g(){c a=n,Q=a.Q;a.1v={F:Q.p(\'#3a-Q-1\'),3R:Q.p(\'#3a-Q-2\')};a.1E=a.1v.F.m(\'.F-2r\');a.G=a.1E.m(\'.32-Q\').5g();a.5h=a.1v.3R.m(\'.3R-2r\');a.1u=a.5h.m(\'.32-Q\').5g();a.1n=a.1v.F.m(\'.W-2G-5f\');a.5a=a.1n.m(\'.2Z\');a.5c=a.1n.m(\'.23\');a.1d=a.1v.F.m(\'.1Z-k-5f\');a.2c=a.1d.m(\'.2Z\');a.5b=a.1d.m(\'.23\');a.3G=a.1d.m(\'.7h\');a.2Y=a.1d.m(\'O.2U\');a.N=a.1v.F.m(\'.7g-5e\');a.1D=a.1v.F.m(\'.7f-5e\');a.1q=a.1v.F.m(\'.W-2G\');a.1M=a.1v.F.m(\'.1Z-k\');a.1l=a.1v.F.m(\'.3t-W\');a.1g=a.1v.F.m(\'.2r-7e-2s\');a.4O=a.1g.m(\'.3N-2r\');a.2h=a.1g.p(\'O.5d-x\');a.2g=a.1g.p(\'O.5d-y\');a.3c=a.1g.p(\'.7d-7c\');a.3d=a.1g.p(\'.7b-7a\');a.3L=a.1g.p(\'.2S-79\');a.53=a.1g.p(\'.78-2S\');a.Q.p(\'3O.77 > 39:2a(.76)\').M(a.52);a.1M.22().M(a.4V);a.1q.22().M(a.3T);a.5c.22().M(a.4T);a.5b.22().M(a.3q);a.2c.22().M(a.4U);a.5a.22().M(a.2H);1c(c l 1a j.e().D){a.2p(l,1A)}1c(c l 1a j.e().1y){a.2p(l,1A)}a.1d.p(\'L.1K\').M(g(){c h=$(b).2f().I(\'B\').P(/w-(\\d+)/)[1],3g=$(b).2f().m(\'O.o\'),1p=0;3g.v(g(){1p=j.e().A[h];f(n.K!=J){1p+=(j.e().D[n.K].A[h]||0)}u 1p});a.2F($(b),1p,h)});a.1n.p(\'L.1K\').M(g(){c h=$(b).2f().I(\'B\').P(/w-(\\d+)/)[1],3g=$(b).2f().m(\'O.o\'),1p=0;3g.v(g(){1p=j.e().A[h];f(n.K!=J){1p+=(j.e().D[n.K].A[h]||0)}u 1p});a.2F($(b),1p,h)});a.1d.p(\'O.o\').3f(g(){c h=$(b).2f().I(\'B\').P(/w-(\\d+)/)[1],2v=j.e().A[h],E=!1i($(b).v(),10)?0:1i($(b).v(),10);f(n.K!=J){2v+=j.e().D[n.K].A[h]||0}E=1m.2t(2v,1m.1K(E,0));$(b).v(E);a.2F($(b),E,h)});a.1n.p(\'O.o\').3f(g(){c h=$(b).2f().I(\'B\').P(/w-(\\d+)/)[1],2v=j.e().A[h],E=!1i($(b).v(),10)?0:1i($(b).v(),10);f(n.K!=J){2v+=j.e().D[n.K].A[h]||0}E=1m.2t(2v,1m.1K(E,0));$(b).v(E);a.2F($(b),E,h)});f(a.N.V){a.N.1L({1Y:0,1X:T}).22().M(g(){a.43()})}1b{a.1D.t(\'H\')}a.1l.p(\'.3r .w\').1L({1Y:0,1X:T,2e:g(){c h=$(b).Z(\'.w-o\').I(\'B\').P(/3t-w-(\\d+)/)[1];u q.e().W[h].2U}});a.2h.3f(g(){c $b=$(b),E=1i($b.v(),10);f(!E||38(E)){E=0}E=1m.2t(R.1C.50,1m.1K(E,R.1C.3K));$b.v(E.59())});a.2g.3f(g(){c $b=$(b),E=1i($b.v(),10);f(!E||38(E)){E=0}E=1m.2t(R.1C.4Z,1m.1K(E,R.1C.3J));$b.v(E.59())});a.3L.75({s:q.e().C.F.74.73});c 3Q={\'\':\'\'};1c(c i=0;i<1P.58.V;i++){c 2u=1P.58[i],57=2m.72(2u);3Q[2u.x+\'-\'+2u.y]=1R.28(\'{0} ({1} x {2})\',57,2u.x,2u.y)}a.3c.2z({s:3Q,54:{M:g(){c $b=$(b);a.3d.p(\'>3O>39\').r(\'3N\');a.3d.p(\'>.3b-1H>.3b-1H-2d\').2d(\'\');f($b.I(\'2o\').3E()==\'\'){a.2h.v(0);a.2g.v(0);u}c 2b=$b.I(\'2o\').P(/(\\d+)\\-(\\d+)/);a.2h.v(2b[1]);a.2g.v(2b[2])}}});c 3P={\'\':\'\'};1c(c 55 1a 3i.e().56){c C=3i.e().56[55];f(C.1o==j.e().1o){2y}3P[C.3e.X+\'-\'+C.3e.Y]=1R.28(\'{0} ({1} x {2})\',C.1J,C.3e.X,C.3e.Y)}a.3d.2z({s:3P,54:{M:g(){c $b=$(b);a.3c.p(\'3O>39\').r(\'3N\');a.3c.p(\'>.3b-1H>.3b-1H-2d\').2d(\'\');f($b.I(\'2o\').3E()==\'\'){a.2h.v(0);a.2g.v(0);u}c 2b=$b.I(\'2o\').P(/(\\d+)\\-(\\d+)/);a.2h.v(2b[1]);a.2g.v(2b[2])}}});a.53.22().M(g(){a.51()});a.G.1j();2P.2O(\'71\')();a.2l();70.6Z()},52:g(){c a=n,3M=$(b).I(\'B\');a.Q.I(\'6Y\',3M);4a(3M){2n\'3a-1\':a.G.1j();27;2n\'3a-2\':a.1u.1j();27}},51:g(){f(!b.U.V){u}c x=1i(b.2h.v(),10),y=1i(b.2g.v(),10),37=1i(b.3L.p(\'39.33\').I(\'6X\'),10),k=b.U[0];f(!x||38(x)){x=R.1C.3K}x=1m.1K(R.1C.3K,1m.2t(R.1C.50,x));f(!y||38(y)){y=R.1C.3J}y=1m.1K(R.1C.3J,1m.2t(R.1C.4Z,y));f(37!==1P.6W&&37!==1P.6V){u}c 4Y=[{X:j.e().X,Y:j.e().Y}].6U(1P.6T(x,y));1P.6S(37,6R.6Q(),4Y,k.1o,g(){$(\'#k-\'+k.1o).26();n.G.1j();n.U=[];n.29()})},2F:g(4X,1p,h){c 4W=4X.2f().m(\'L.o-1a-C\'),E=j.e().A[h]-1p;f(b.K!=J){c k=j.e().D[n.K];!k.A[h]&&(k.A[h]=0);E+=k.A[h]}4W.1F(E)},3I:g(){c a=n;a.Q={};a.1N=J;a.K=J;a.G=J;a.1E=J;a.U=[];2P.2O(\'6P\')()},4V:g(){c a=n,1w=a.1d.1G(\'H\');f(!1w){a.1M.t(\'z\');a.1q.t(\'z\');a.N&&a.N.t(\'z\');a.1d.m(\'L.w\').24(g(){c $b=$(b),h=$b.I(\'B\').P(/w-(\\d+)/)[1];f(j.e().A[h]==0){$b.2j(\'2i\',\'0.5\');$b.m(\'O.o\').I(\'1e\',\'1e\')}1b{$b.2j(\'2i\',\'1\');$b.m(\'O.o\').3h(\'1e\')}$b.m(\'O.o\').v(\'0\');$b.m(\'L.o-1a-C\').1F(j.e().A[h])});a.1d.t(\'H\');a.1g.r(\'H\');a.1E.t(\'z\');a.1D.r(\'H\');a.1l.t(\'z\');a.Q.m(\'L.23-1Z\').6O();f(a.1N!=J){a.G.p(\'#k-\'+a.1N).p(\'L.23\').M()}a.2c.2d(q.e().C.F.1Z.2Z);a.2Y.v(q.e().C.F.1Z.6N).6M();a.3G.1F(q.e().C.F.1Z.6L)}},4U:g(){c a=n,1w=a.1d.1G(\'H\');f(1w&&!a.2c.1G(\'1e\')){a.4q()}},4T:g(){c a=n,1w=a.1n.1G(\'H\');f(1w){a.1n.r(\'H\');a.1E.r(\'z\');f(!a.N.V){a.1D.t(\'H\')}a.1l.r(\'z\');a.29();a.G.1j();a.Q.m(\'L.4S\').36();a.Q.m(\'L.23-1Z\').36();a.K=J;a.1q.r(\'z\');a.1M.r(\'z\')}a.N&&a.N.r(\'z\')},3q:g(){c a=n,1w=a.1d.1G(\'H\');f(1w){a.1d.r(\'H\');a.1E.r(\'z\');f(!a.N.V){a.1D.t(\'H\')}a.29();a.1l.r(\'z\');a.G.1j();a.Q.m(\'L.4S\').36();a.Q.m(\'L.23-1Z\').36();a.K=J}a.1M.r(\'z\');a.1q.r(\'z\');a.N&&a.N.r(\'z\')},4v:g(1k){c a=n;1k.p(\'.2s>.30\').1L({1Y:0,1X:T,2e:g(){u q.e().C.F.30.1H}}).M(g(){c l=$(b).Z(\'L.k\').I(\'B\').P(/^k-(.+)$/)[1];a.4K(l)});1k.p(\'.2s>.2G\').1L({1Y:0,1X:T,2e:g(){u q.e().C.F.2H}}).M(g(){c l=$(b).Z(\'L.k\').I(\'B\').P(/^k-(.+)$/)[1],1z=$(b).Z(\'L.k\'),2k=q.e().2k.4l;2w.2J({1H:2k,2I:g(){a.4m(l,1z)}})});1k.p(\'.2s>.4R\').1L({1Y:0,1X:T,2e:g(){u q.e().C.F.4R}}).M(g(){c $b=$(b),l=$.2Q($b.Z(\'L.k\'),/^k-(.+)$/),1z=$b.Z(\'L.k\');a.4k(l,1z)});1k.p(\'.2s>.6K\').1L({1Y:0,1X:T,2e:g(){u q.e().C.F.6J}}).M(a.4P);1k.p(\'.2s>.u\').1L({1Y:0,1X:T,2e:g(){u q.e().C.F[\'u\']}}).M(g(){a.4d($(b).Z(\'.k\'))});1k.p(\'.w-o>.w\').24(g(){c a=$(b),h,35=a.Z(\'.w-o\').I(\'B\');f(/^w-.+?-(.+)$/.3B(35)){h=35.P(/^w-.+?-(.+)$/)[1]}1b{h=35.P(/^w-(.+)$/)[1]}a.1L({1Y:2V,1X:T,6I:1A,4y:40,4x:0,2e:g(){u R.W[h].6H()},6G:\'w-1L\'})});1k.p(\'.4Q\').M(g(){c $b=$(b),34=$b.1G(\'33\'),l=$.2Q($b.Z(\'.k\'),/k-(\\d+)/);f(!34&&j.e().D[l]){a.U=[j.e().D[l]]}1b f(!34&&j.e().1y[l]){a.U=[j.e().1y[l]]}1b{a.U=[]}$b.Z(\'.2r\').p(\'.4Q\').r(\'33\');$b[34?\'r\':\'t\'](\'33\');a.29()})},4P:g(){c a=n,C=j.e(),1z=$(b).Z(\'L.k\'),l=$.2Q(1z,/^k-(.+)$/);1f.4h();1f.1x.6F();1f.1x.4e(l);2w.6E()},29:g(){c 3H=b.1g.1G(\'H\');f(b.U.V){c 4N=b.U[0];b.4O.2d(4N.1J)}f(b.U.V&&!3H){b.1g.t(\'H\');b.G.Z(\'.32-4M\').t(\'4L\');b.G.1j()}1b f(!b.U.V&&3H){b.1g.r(\'H\');b.G.Z(\'.32-4M\').r(\'4L\');b.G.1j()}},4K:g(l){c a=n;a.K=(4b(l)==\'6D\')?$(b).Z(\'.k\').I(\'B\').P(/k-(\\d+)/)[1]:l;1c(c h 1a j.e().D[a.K].A){$(\'O[2U="o-\'+h+\'"]\').v(j.e().D[a.K].A[h])}a.2Y.v(j.e().D[a.K].1J);a.3G.1F(q.e().C.F.30.6C);a.1d.m(\'.w\').24(g(){c h=$(b).I(\'B\').P(/w-(\\d+)/)[1],3F=0,31=0,1W=$(b);3F=j.e().A[h];31=j.e().D[a.K].A[h]||0;f((3F+31)==0){1W.2j(\'2i\',\'0.5\');1W.m(\'O.o\').I(\'1e\',\'1e\');1W.m(\'O.o\').v(0)}1b{1W.m(\'O.o\').3h(\'1e\');1W.2j(\'2i\',\'1\');1W.m(\'O.o\').v(31)}1W.m(\'L.o-1a-C\').1F(j.e().A[h])});a.2c.2d(q.e().C.F.30.2Z);a.1d.t(\'H\');a.1g.r(\'H\');a.1E.t(\'z\');a.1D.r(\'H\');a.1l.t(\'z\');a.1M.t(\'z\');a.1q.t(\'z\');a.N&&a.N.t(\'z\')},4p:g(){c a=n,3D=0;c s={2D:a.2Y.v().3E(),1t:{}};a.1d.p(\'L.w\').24(g(){c h=$(b).I(\'B\').P(/^w-(.+)$/)[1],o=1i($(b).m(\'O.o\').v(),10);f(o&&o>0){s.1t[h]=o;3D+=o}});f(s.2D.V>R.2E.2X){1s.1r(1R.28(q.e().1h.25.6B,R.2E.2X));u T}f(!/\\S/.3B(s.2D)){1s.1r(q.e().1h.25.6A);u T}f($.3V(s.1t).V==0){1s.1r(q.e().1h.25.3U);u T}f(3D<R.2E.4J){1s.1r(1R.28(q.e().1h.25.6z,R.2E.4J));u T}c 3C=T;1c(c h 1a s.1t){f(h>=1&&h<=8&&s.1t[h]){3C=1A;27}}f(!3C){1s.1r(q.e().1h.25.6y);u T}u s},4o:g(s,4H){c a=n,3A=g(l){a.2c.r(\'1e\');f(l.6x==1R&&/^1h:/.3B(l)){f(l==\'1h:6w\'){1s.1r(q.2M(l),6v)}1b{1s.1r(q.2M(l))}u}f(!l){1s.1r(q.e().1h.25.6u);u}f(!a.K){4I.6t(4I.6s.6r,g(){6q.6p()});2P.2O(\'6o\')(l)}4H(l)};a.2c.t(\'1e\');f(a.K==J){2m.6n(s.2D,j.e().1o,s.1t,3A)}1b{c l=a.K;2m.6m(l,s.2D,j.e().1o,s.1t,3A)}},2p:g(l){c a=b,1B=T,2B=T,k=J,2R=\'\',1T;f(j.e().D[l]){k=j.e().D[l];f(k.1Q){2B=1A}}1b f(j.e().1y[l]){k=j.e().1y[l];1B=1A}f(!k||(!1B&&!a.G)||(1B&&!a.1u)){u}f(k.3p===a.3o){u}f(k.44!=J&&!k.1Q){u}1T=1B?k.3v:k.1Q;f(2B&&!1T.4G){1T.4G={1o:J,1J:\'\'}}f(1T&&!1T.1J){1T.1J=q.4F()}f(a.K!=J){$(\'#k-\'+a.K).26()}k.1J=k.1J||q.4F();c 1S=0,2T=0,3w=0,2C=0,3z=1V.6l(),3y=1V.6k();1c(c 2W 1a 3z){c 1U=3z[2W];f(!1V.2q[1U]||1V.2q[1U].4E==0)2y;3w+=1V.2q[1U].4D}1c(2W 1a 3y){c 1U=3y[2W];f(!1V.2q[1U]||1V.2q[1U].4E==0)2y;2C+=1V.2q[1U].4D/2V}c 3x=6j.6i();f(3x[11]){2C+=3x[11].6h}2C+=k.6g;1c(c h 1a k.A){1S=1m.1K(1S,R.W[h].1S*(2V-2C)/2V);2T+=k.A[h]*(R.W[h].6f+3w)}1S=6e.6d(1S);c 1k=$(4C.4B(\'6c\',{B:l,2U:k.1J,4z:1T,6b:2B,4A:q.e().C.F,W:k.A,1S:1S,2T:2T}));f(1B||k.1Q){1k.t(\'4z\');1k.p(\'.2b\').M(g(){c 4w={4y:!1B?k.1Q.X:k.3v.X,4x:!1B?k.1Q.Y:k.3v.Y};1f.6a(4w)});f(1B){2R=q.e().2S.3u[1]}1b{2R=q.e().2S.3u[10]}}1k.p(\'.3u\').1F(2R.69(\' \',\'&68\'));a.4v(1k);1k.67(1B||2B?a.1u:a.G)},66:g(){c a=n;f(a.G){a.G.4u();a.G.4t()}1c(c l 1a j.e().D){a.2p(l,1A)}f(a.G){a.G.1j()}f(a.1u){a.1u.4u();a.1u.4t()}1c(c l 1a j.e().1y){a.2p(l,1A)}f(a.1u){a.1u.1j()}f(1f.65()&&1f.1x.4g){1f.1x.4f(T)}},2l:g(h){c a=n,4s=(h)?1R.28(\'.w-{0}\',h):\'\';a.1l.p(\'.3r .w\'+4s).24(g(){c $b=$(b),3s=h?h:$.2Q($b.Z(\'.w-o\'),/3t-w-(\\d+)/),4r=j.e().A[3s];f(4r>0){$b.64(\'.o\').1F(j.e().A[3s]);$b.Z(\'.w-o\').r(\'2a-2A\')}1b{$b.Z(\'.w-o\').t(\'2a-2A\')}});f(a.1l.p(\'.3r .w:2a(.2a-2A)\').V){a.1l.r(\'2a-2A\')}1b{a.1l.t(\'2a-2A\')}},63:g(h){c a=n;f(a.G){a.2l(h);a.Q.p(1R.28(\'#w-{0} .o-1a-C\',h)).1F(j.e().A[h])}},4q:g(){c a=n,s=a.4p(),l;f(!s){u}c 4n=g(l){a.2l();a.2p(l);a.3q()};a.4o(s,4n)},4m:g(l,1z){c a=n;1c(c i=0;i<a.U.V;i++){f(a.U[i].1o==l){a.U.4j(i,1);27}}a.29();2m.4l(l,j.e().1o,g(s){a.1N=J;1z.26();a.G.1j()})},4k:g(l,1z){c a=n;1c(c i=0;i<a.U.V;i++){f(a.U[i].1o==l){a.U.4j(i,1);27}}a.29();2m.62(l,j.e().1o,g(s){a.1N=J;1z.26();a.G.1j();a.2l()})},61:g(l,4i){1f.1x.60=4i;f(1f.5Z()){5Y.5X.5W();2P.2O(\'5V\')();1f.4h()}1b{f(1f.1x.4g){1f.1x.4f(l);u}}1f.1x.5U();1f.1x.4e(l)},5T:g(2z){f(!b.1u){u}1c(c i=0;i<2z.V;i++){$(\'#k-\'+2z[i]).26()}b.1u.1j()},4d:g(2N,1O){c a=b,B=1i(2N.I(\'B\').P(/(\\d+)/)[1],10),k=j.e().D[B]||j.e().1y[B],3n=g(2o){f(a.G){$(1R.28(\'#k-{0}\',B)).26();a.G.1j()}f(j.e().D[B]&&j.e().D[B].1Q){2K j.e().D[B].1Q;j.e().D[B].5S=J;j.e().D[B].3p=n.4c}f(j.e().1y[B]){2K j.e().1y[B]}f(4b(2o)===\'5R\'){f(2N.Z(\'#5Q\').V){2N.r(\'5P\').t(\'5O\')}1f.1x.5N()}1O&&1O()};4a(k.3p){2n n.3o:5M.5L(B,3n);27;2n n.49:2n n.48:2w.2J({1H:q.e().2k.5K,2I:g(){1P.5J(B,3n)}});27;2n n.47:5I:u}},5H:g(){c a=b,1O=g(s,45,3m){c 1I=[];1c(c 46 1a j.e().D){1I.5G(46)}j.2x.A=s[45].A;1c(c i=0;i<1I.V;i++){f(j.2x.D[1I[i]]&&j.2x.D[1I[i]].44){2y}f(!s[3m][1I[i]]){2K j.2x.D[1I[i]]}1b{j.2x.D[1I[i]]=s[3m][1I[i]]}}};2m.5F(1O)},43:g(){c a=n,42=g(){a.41()},1h=g(s){c 2L=\'\';f(s.P(/^1h:3l:3k:(\\d+)$/)){c 3j=1i(s.P(/1h:3l:3k:(\\d+)/)[1],10);2L=q.2M(\'1h:3l:3k\')+$.5E(3j,q.5D())+\' \'+$.5C(3j,q.5B())}1b{2L=q.2M(s)}1s.1r(2L)};2w.2J({1H:q.e().C.F.2k,2I:g(){j.5A(42,1h)}})},41:g(){1s.1r(q.e().C.F.5z);j.e().3Z=1;3i.e().3Z=1;b.N&&b.N.26();2K b.N;j.e().5y[3].5x=5w.5v(3);b.Q&&b.1D.t(\'H\');5u.5t(3);5s.5r()},5q:g(){c a=n;a.U=[]},2H:g(){f(n.1q.1G(\'1e\')){u T}c a=n,W=a.3X(),3Y=g(s){a.2l();a.1n.r(\'H\');a.1l.r(\'z\');a.1E.r(\'z\');f(!a.N.V){a.1D.t(\'H\')}a.1M.r(\'z\');a.1q.r(\'1e\');a.1q.r(\'z\');a.N&&a.N.r(\'z\')};f(W){2w.2J({1H:q.e().2k.5p,2I:g(){j.2H(j.e().1o,W.1t,3Y);a.1q.t(\'1e\')}})}},3X:g(){c a=n,3W=0;c s={1t:{}};a.1n.p(\'L.w\').24(g(){c h=$(b).I(\'B\').P(/^2G-w-(.+)$/)[1],o=1i($(b).m(\'O.o\').v(),10);f(o&&o>0){s.1t[h]=o;3W+=o}});f($.3V(s.1t).V==0){1s.1r(q.e().1h.25.3U);u T}u s},3T:g(){c a=n,1w=a.1n.1G(\'H\');f(!1w){a.1n.m(\'L.w\').24(g(){c h=$(b).I(\'B\').P(/w-(\\d+)/)[1];f(j.e().A[h]==0){$(b).2j(\'2i\',\'0.5\');$(b).m(\'O.o\').I(\'1e\',\'1e\')}1b{$(b).2j(\'2i\',\'1\');$(b).m(\'O.o\').3h(\'1e\')}$(b).m(\'O.o\').v(\'0\');$(b).m(\'L.o-1a-C\').1F(j.e().A[h])});a.1n.t(\'H\');a.1l.t(\'z\');a.1g.r(\'H\');a.1E.t(\'z\');a.1D.r(\'H\');a.1l.t(\'z\');f(a.1N!=J){a.G.p(\'#k-\'+a.1N).p(\'L.23\').M()}a.1M.t(\'z\');a.1q.t(\'z\');a.N&&a.N.t(\'z\')}}};', 62, 466, '||||||||||self|this|var||getData|if|function|troopId||townModel|army|armyId|children|armyController|count|find|i18nModel|removeClass|data|addClass|return|val|troop|||hidden|Troops|id|town|Armies|value|square|squareArmiesList|visible|attr|null|armyIdInEditing|div|click|raiseFlagButton|input|match|content|staticDataModel||false|selectedArmies|length|troops|||closest|||||||||||in|else|for|createForm|disabled|gameController|sendPanelContent|error|parseInt|rearrange|armyContent|freeTroopsPane|Math|troopsDismissForm|Id|unAvailableTroops|troopsDismissButton|showSystemMessage|messageController|troopsInArmy|reinforcementArmiesList|tabsContent|createPanelVisible|worldMap|Reinforcement|armyElement|true|isForeignReinforcement|mapParams|raisedFlagText|squareArmiesPane|html|hasClass|title|oldArmies|Name|max|tooltip|createArmyButton|editingId|callback|Route|CurrentTown|String|speed|armyTown|skillId|rpgModel|_this|showURL|delay|create|||clickable|cancel|each|squareArmyManagement|remove|break|format|checkSendPanelToBeShown|not|coords|submitCreateButton|text|bodyHandler|parent|sendSelectedArmiesTargetY|sendSelectedArmiesTargetX|opacity|css|confirmText|updateFreeTroopsInFreeTroopsPane|armyModel|case|info|createArmyPanel|playerSkills|armies|actions|min|aim|maxValue|uiWindow|townData|continue|list|display|isOurReinforcement|additionalSpeed|armyName|config|updateFreeTroops|dismiss|troopsDismiss|ok|showConfirm|delete|message|getTextByCode|el|getHandler|methodModel|parseId|armyAction|route|trophies|name|100|index|armyNameMaxLength|createFormArmyNameInput|submit|edit|armyTroop|scroll|checked|isChecked|idAttr|hide|routeType|isNaN|li|tab|main|sendLastAims|sendMyTownsAims|Location|change|inputCount|removeAttr|playerModel|timestamp|tooEarly|readyToDie|armiesGetting|callbackFunction|ARMY_STATUS_SPY|Status|onCancelCreate|troopsM|currentTroopId|free|action|Town|additionalSpace|prem|skillSpeedArr|skillTrophiesArr|sendNewArmyCallback|test|warriorsFound|armySize|trim|townTroop|createFormArmyNameText|panelAlreadyVisible|onClose|minY|minX|sendRouteType|tabId|selected|ul|myTownsAimsListData|lastAimsListData|reinforcement|freeTroopsOrder|onFreeTroopsDismissFormShow|needAtLeastOneTroopType|objectKeys|troopSize|checkForTroopsDismiss|troopsDismissCallback|ReadyToDie||doRaiseFlag|success|raiseFlag|RouteId|townGetting|oldArmyId|ARMY_STATUS_SIEGE|ARMY_STATUS_REINFORCEMENT_WAIT|ARMY_STATUS_REINFORCEMENT|switch|typeof|ARMY_STATUS_MOVE|returnArmy|startRouteConstructor|changeRouteConstructorArmyId|isRouteConstructorShow|loadMap|routeConstruct|splice|onDisbandClick|dismissArmy|onDismissClick|onSaveClickCallback|sendNewArmy|checkForSavingArmy|onSaveClick|freeTroopsCount|currentTroopClass|empty|mouseout|setEvent|townPosition|top|left|defender|titles|applyTemplate|uiUtils|Parameter|Level|getBarbariansName|Owner|onClickCallback|playerItemsModel|minimumArmySize|onEditClick|short|pane|singleArmy|sendSelectedArmiesName|onAttackClick|checkbox|disband|save|onCancelTroopsDismiss|onSubmitCreate|onCreateClick|countContainer|obj|steps|maxY|maxX|onSendRouteFromSquare|onSquareTabClick|sendStartRoute|handler|townId|TownList|aimName|lastAims|toString|submitTroopsDismiss|cancelCreateButton|cancelTroopsDismiss|target|flag|form|scrollable|reinforcementArmiesPane|onWindowShow|townArmies|denyTroopsId|createContent|helpCallback|buildingController|helpTemplate|dismissFreeTroops|clear|updateRaiseFlagIcon|gadgetsController|updateBuildingInfo|townController|calculateImageIndex|buildingsModel|ImageIndex|Buildings|afterRaiseFlag|setReadyToDie|getTimeFormat|timestampToTimeString|getDateFormat|timestampToDateString|doAfterDef|push|onNewMartialReport|default|cancelReinforcement|reinforcementCancel|returnSpy|spyModel|updateMap|routed|defended|sidebarBody|number|CurrentTownId|removeReinforcements|cleanRouteConstructor|onMapTownSwitcherClick|hideTownList|playerInfoPanel|uiManager|isTown|routeConstructorNeed|createRoute|disbandArmy|updateFreeTroopsOnSquare|siblings|isMap|updateAllArmies|appendTo|nbsp|replace|goToMapPosition|isFriendly|squareWindowArmy|getPrintableUnitSpeed|ControlWindowArmies|space|AdditionalSpeedPercent|Percent|getPlayerPremiums|premiumModel|getSkillsAffectingUnitsSpeed|getSkillsAffectingUnitsTrophies|editArmy|createArmy|onArmyCreate|checkQuestsToBeDone|questController|PLAYER_ITEM_CREATED_ARMY|flagItems|setFlagItem|createError|5000|armyNameError|constructor|atLeastOneWarrior|tooLittleArmy|emptyArmyName|toLong|editArmyName|object|close|__pointAtCurrentTown|extraClass|getTooltipTemplate|track|sendManually|attack|newArmyNameText|select|newArmyName|show|onCloseSquareWindow|getCurrentTime|timingModel|saveRoute|createStepsArray|concat|ROUTE_REINFORCEMENT|ROUTE_ATTACK|key|class|onFirstSquareOpen|tutorialController|onOpenSquareWindow|getAimName|routeTypeRadioSelector|multiActions|radioButtonList|decor|tabs|start|type|towns|my|aims|last|multi|raised|raise|armyNameText|reinforcements|squareWindow|indexOf|generateHelpContentForBuilding|helpButton|disableScrolling|helpContent|rearrangeHelpContent|onShowHelp|onShow|params|ensureAimDataIsLoaded|initWindow|ARMY_STATUS_ON_PLACE'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('9 f={R:[v+\'u/t/1Q-1P\',v+\'u/t/1O-1\'],Q:1,e:k,1N:v+\'u/t/1M/{0}\',17:v+\'u/t/18/1L\',S:v+\'u/t/18/1K\',1J:5(){9 3=f;3.P();8(1I.1H().1G){3.s()}},P:5(){9 3=f;3.Q=c.x(c.1F()*(3.R.12-1))},1E:5(){9 3=f,b=n 7(3.S);b.l(5(){b.g(j)},1)},1D:5(){9 3=f,b=n 7(3.S);b.l(5(){b.g(j)},1)},1C:5(){9 3=f,b=n 7(3.17);b.l(5(){b.g(j)},1)},1B:5(16){9 3=f,b=n 7(16);b.l(5(){b.g(j)},1)},1A:5(){9 3=f;8(3.e===k){3.s()}D{8(3.e.11()){3.s()}D{3.15()}}},s:5(){9 3=f;8(3.e===k){3.e=n 7(3.R[3.Q])}3.e.l(5(){3.e.g(j,5(){3.P();3.e=k;3.s()})})},15:5(){9 3=f;8(3.e!==k){3.e.g(h)}}};5 7(14,13){2.B=14;2.F();2.m=13||{6:0};2.y=\'1z\';2.d=$({6:2.4.a});7.A.1y(2)}7.A=[];7.1x=5(){1w(9 i=0;i<7.A.12;i++){9 z=7.A[i];8(z.4){z.m.6=z.4.q}}};7.o.q=5(){r 2.4?2.4.q:0};7.o.11=5(){r 2.4?2.4.1v:j};7.o.l=5(p,a){8(!2.4){2.F()}2.4.10=5(){p&&p(2)};2.4.a=a||2.4.a;9 O=2.4.l(),3=2;8(O!==1u){O.1t(5(6){3.d[0].6=3.4.a;3.d.N().M({6:1},{L:$.w(5(6){2.4.a=c.K(0,c.J(1,6))},3),I:2.y,H:c.x((1-3.d[0].6)*G)})}).1s(5(1r){1q(5(){3.d[0].6=3.4.a;3.d.N().M({6:1},{L:$.w(5(6){2.4.a=c.K(0,c.J(1,6))},3),I:2.y,H:c.x((1-3.d[0].6)*G)})},1p)})}};7.o.g=5(Z,p){8(!2.4){r}2.4.10=k;2.d[0].6=2.4.a;2.d.N().M({6:0},{L:$.w(5(6){2.4.a=c.K(0,c.J(1,6));8(6<=0.1o){2.4.g();2.m.6=2.4.q;Z&&2.Y();p&&p(2)}},2),I:2.y,H:c.x(2.d[0].6*G)})};7.o.Y=5(){8(!2.4){r}2.4.g();2.4=k};7.o.F=5(){8(2.4){r}2.4=n 1n();2.4.1m=h;2.4.1l=h;2.4.1k=\'1j\';2.4.1i=h;2.4.a=0;2.4.1h=h;9 E=j;2.4.1g(\'1f\',$.w(5(){8(E&&2.m&&2.m.6){2.4.q=2.m.6;E=h}},2),h);9 C=[\'1e\',\'1d\'];8(C.X(2.4.W(\'4/1c\').V())!=-1){2.4.U=2.B+\'.1b\'}D 8(C.X(2.4.W(\'4/T;1a="19"\').V())!=-1){2.4.U=2.B+\'.T\'}};', 62, 115, '||this|self|audio|function|value|SoundSample|if|var|volume|reportSound|Math|volumeAnimator|backgroundMusicSample|audioController|pause|false||true|null|play|positionSaver|new|prototype|callback|currentTime|return|unmuteMusic|sounds|resource|staticDataUrl|proxy|round|volumeAnimationEasing|instance|instances|originalURL|successfulMIMESupportValues|else|startingSeekNeeded|recreate|500|duration|easing|min|max|step|animate|stop|promise|randomize|soundSampleId|soundSampleUrl|messagesSoundUrl|ogg|src|toLowerCase|canPlayType|indexOf|destroy|autodestroy|onended|isPaused|length|musicPositionSaver|url|muteMusic|soundUrl|attackSoundUrl|messages|Vorbis|codecs|mp3|mpeg|probably|maybe|playing|addEventListener|muted|loop|auto|preload|autoplay|controls|Audio|00001|3000|setTimeout|reason|catch|then|undefined|paused|for|onWindowUnload|push|linear|switchBackgroundMusic|playCustomSound|playAttackSound|playMessagesSound|playReportSound|random|musicOn|getSettings|playerModel|init|new_message|new_attack|buildings|buildingSoundUrl|theme|times|good'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('2 2T={2S:y(4,1u){2 e=9.G()[4];2 I={2R:4==9.2Q?l.k(1N+\'16/c/f/{0}/{0}-\'+11.a().2P+\'-R-17.1M\',4):l.k(1N+\'16/c/f/{0}/{0}-R-17.1M\',4),2O:6.2N(4),v:{1i:[],1v:[],2M:9.10(4)},t:4,2L:6.a().c.2K};C(2 i=0;i<6.a().c.1L.H;i++){I.v.1i.W(6.a().c.1L[i])}7(6.a().c.f[4].1b){I.v.1i.W(6.a().c.f[4].1b)}7(e){2 p=h.2J(),q=0;C(2 B N p){2 g=p[B];7(!h.o[g]||h.o[g].D==0)1a;q+=h.o[g].19/r}7(Z.1K()[Z.1J.1I]){q+=Z.1K()[Z.1J.1I].2I}7(1h.1g.1f&&1h.1g.1f.2H>=2G.a().D){q+=1h.1g.1f.2F}7(q>1H){q=1H}C(2 8 N e){7(q>0){2 1F=$.U(z.M(e[8].T),6.S()),1G=$.U(z.M(e[8].T*(r-q)/r),6.S()),1e=1G+\'<2E/><E 1E="2D-2C">(\'+1F+\' - \'+\'<E 1E="1D-2B">\'+q+\'%) </E></E>\'}2A{2 1e=$.U(z.M(e[8].T),6.S())}2 n={\'8\':8,Y:[],1D:1e,2z:[{4:\'1d\',1B:6.a().Y.1d,1A:e[8].2y,1z:1y.1x(\'1d\')}]};C(2 x N e[8].1c){7(e[8].1c[x]>0){p=h.2x(x);2 P=0;C(2 B N p){2 g=p[B];7(!h.o[g]||h.o[g].D==0)1a;P+=h.o[g].19/r}7(P>1C){P=1C}n.Y.W({4:x,1B:6.a().Y[x],1A:z.M(e[8].1c[x]*(r-P)/r),1z:1y.1x(x)})}}7(6.a().c.f[4].1b&&6.a().c.f[4].1w&&e[8].A!==15&&e[8].A!==2w){2v(4){O 9.2u:2 5=9.X(\'2t\',8);7(5.b){n.w=l.k(6.a().c.f[4].L,[5.s+5.b,5.2s,5.s,5.b])}J;O 9.2r:2 5=9.X(\'2q\',8);7(5.b){n.w=l.k(6.a().c.f[4].L,[5.s+5.b,5.s,5.b])}J;O 9.2p:2 5=9.X(\'2o\',8);7(5.b){n.w=l.k(6.a().c.f[4].L,[5.s+5.b,5.s,5.b])}J;O 9.2n:2 5=9.X(\'2m\',8);7(5.b){n.w=l.k(6.a().c.f[4].L,[5.s+5.b,5.s,5.b])}J;O 9.K:2 p=h.2l(),b=0;C(2 B N p){2 g=p[B];7(!h.o[g]||h.o[g].D==0)1a;b+=h.o[g].19/r}7(b>0){b=z.M(9.G()[9.K][8].A*b/r);n.w=l.k(6.a().c.f[9.K].L,[9.G()[9.K][8].A+b,9.G()[9.K][8].A,b])}J}7(!n.w){n.w=l.k(6.a().c.f[4].1w,e[8].A)}}I.v.1v.W(n)}}1u($(2k.2j(\'2i\',I)).2h(\'t\',4))},2g:y(V){7(V.j(\'.2f-2e\').H){Q}2 m=V.j(\'v.14\').H&&V.j(\'v.14\').m();7(m){2 18=m.j(\'F.12\');m.j(\'F:2d(0)>2c\').2b({\'2a-1t\':\'29\'});7(!18.H){Q}m.28(z.27(m.26()-m.25().24(),18.23().1t+1));m.j(\'.17, .16\').1s({1r:15,1q:0});m.j(\'.b\').1s({1r:15,1q:0,22:y(){Q 6.a().21.20}})}},1Z:y(4,1o){2 u=$(\'#R .1p v.14\');7(u.H){2 13=u.1m(\'4\').1Y(/1X-1p-(\\d+)/)[1];7(1o){u.j(\'F\').1W(y(){$(1n).1V(\'.1U-3\').1l($.U(9.G()[13][$(1n).1m(\'8\')].T,6.S()))})}7(4==13){u.j(\'F.12\').1T();u.j(l.k(\'F[8="{0}"]\',11.a().1k[4])).1S(\'12\');2 1R=u.1Q(\'#R\').j(\'.8 E\').1l(11.a().1k[4].D)}}},1P:y(t){Q 9.10(t)<1?6.1j(t):l.k(6.a().c.1O,6.1j(t),9.10(t))}};', 62, 180, '||var||id|resourceMining|i18nModel|if|level|buildingsModel|getData|increment|town||helpData|buildings|skillId|rpgModel||find|format|String|scrollable|row|playerSkills|skillArr|speedKoef|100|baseMining|buildingId|openBuildingHelpContent|table|additional|resId|function|Math|Additional|index|for|Level|span|tr|getHelpData|length|templateData|break|repositoryId|additionalHelpColumnFormatWithPremium|ceil|in|case|costKoef|return|window|getTimeFormat|Time|secsToString|helpContent|push|getMiningForResourceAtLevel|resources|premiumModel|getLevel|townModel|current|openBuildingId|body|false|resource|thumbnail|currentRow|Parameter|continue|additionalHelpColumn|Cost|workers|timeStr|newbie|config|staticDataModel|columns|getBuildingName|Buildings|text|attr|this|isUpdateBuildingTime|help|delay|showURL|tooltip|top|callback|rows|additionalHelpColumnFormat|getSmallResourceImageURL|townController|url|cost|name|90|time|class|baseTimeStr|premiumTimeStr|85|buildingFaster|ministerTasks|getPlayerPremiums|buildingHelpColumns|png|staticDataUrl|buildingHeaderFormat|getBuildingTitleForWindow|closest|buildingLevelElement|addClass|removeClass|col|children|each|building|match|updateOpenBuildingWindowInfo|premiumIncreaseValueTooltip|premium2|bodyHandler|position|height|parent|outerHeight|min|scrollTo|none|border|css|td|eq|pane|scroll|rearrangeHelpContent|data|buildingHelpContent|applyTemplate|uiUtils|getSkillsAffectingRepositoryLimit|iron|mineId|wood|sawmillId|stone|quarryId|buildingIncrease|gold|townHallId|switch|undefined|getSkillsAffectingBuildingCost|Workers|peopleResources|else|change|value|base|br|buildSpeedCoefficient|playerModel|buildSpeedMaxLvl|Percent|getSkillsAffectingBuildingSpeedIncrease|buildingHelp|locale|currentLevel|getBuildingDescription|description|CreatedType|specialBuildingId|image|generateHelpContentForBuilding|buildingController'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('f n={3t:2X,1v:6q,49:13,48:38,47:40,4a:32,6p:{},k:1j,I:1,3m:0,6o:1j,2l:1j,1D:0,2n:[],6n:c(){u{6m:w.41()}},2h:c(){u 6.k.M(\'1Q\')},6l:c(1m){f 8=6;6.2f=8.k.U(\'.1E .Q\');6.k=$(\'#o\');6.27=6.k.14();6.H=$(\'#6k\');6.H.6j(6.4b);6.2L=$(\'.6i-1q\');6.4C=6.k.y(\'.3n.1q\');6.1S=6.k.y(\'.6h.1q\');6.1T=6.k.y(\'.6g.1q\');6.4B=6.k.y(\'.1C.1q\');6.4A=6.k.y(\'.1a.1q\');6.2H=6.k.y(\'.6f.1q\');6.31=8.k.U(\'.1E .D .D-2Q\');6.k.U(\'.1E 6e\').F(c(){8.k.L(\'11 Q D\').x($(6).2M(\'V\'));8.2d()});6.2L.F(6.3i).1F(r.m().o.3r);6.4C.1W({1V:K,1C:40,1U:c(){u r.m().o.1B.3n}}).F(c(){8.4r()});6.1S.1W({1V:K,1C:40,1U:c(){u r.m().o.1B.6d}}).F(c(){8.4q()});6.1T.1W({1V:K,1C:40,1U:c(){u r.m().o.1B.6c}}).F(c(){8.4h()});6.4B.1W({1V:K,1C:40,1U:c(){u r.m().o.1B.6b}}).F(c(){8.4p()});6.4A.1W({1V:K,1C:40,1U:c(){u r.m().o.1B.6a}}).F(c(){8.4o()});6.2H.1W({1V:K,1C:40,69:c(){u 8.2h()?\'68-67\':\'\'},1U:c(){u r.m().o.1B.66}});6.2H.F(c(){8.4g()});6.2H.y(\'.28\').65(r.m().o.1B.64);6.k.U(\'J.2F-1q\').F(c(e){f 29=$(6).3T();9(29.M(\'2G\')){29.L(\'2G\')}q{29.x(\'2G\');e.63();$.4z.62(\'F.2F\',c(e){29.L(\'2G\');$.4z.61(\'F.2F\')})}});6.k.U(\'J.2F-4y>J[V^=1N]\').F(6.4x);6.4t();6.h=$(\'.o-b-4y\').1I();6.h.3s().x(\'1I\');6.h.Y.60=0;6.2r(1m,C);9(2P.2O(s.m().N)){6.2f.x(\'2e\')}6.v();6.1d(C)},4x:c(){f 8=n,4w=$(6),4v=4w.2M(\'V\').2v(/(\\d+)/)[1],4u=w.5Z()[4v][0];8.H.t(8.H.t()+4u);8.H.3N()},5Y:c(){u 6.I},4t:c(){9(s.1w().1A>-1){9(s.1w().1A%10){6.I=s.1w().1A%10}q{6.k.x(\'1Q\')}6.k.Z({\'14\':$.12(s.1w().1A%10?6.27*6.I:6.3m),\'2g\':6.k.2g()});9(6.I>1){6.1S.L(\'1p\')}9(6.I>=3){6.1T.x(\'1p\')}9(s.1w().1A>=10){6.k.x(\'1a-19\')}q{6.k.L(\'1a-19\')}}},1z:c(4s){9(s.1w().1A>-1){s.5X({5W:\'1A\',5V:(4s?0:6.I)+(6.k.M(\'1a-19\')?10:0)})}},4r:c(){f 28=$(2p.2o(\'5U\',r.m().o.5T));5S.5R(r.m().o.5Q,28,1j,{5P:c(){28.U(\'.3n-28\').1I()}})},4q:c(){9(6.1S.M(\'1p\')){u}6.I-=1;f T=K;9(6.I==1){6.1S.x(\'1p\')}6.1T.L(\'1p\');9(/\\d+/.1M(6.h.Z(\'1f-P\'))[0]==6.h.Y.1e){T=C}6.k.1G({14:$.12(6.27*6.I)},{2E:\'2D\',2C:\'2B\',2A:c(){n.v();1o.v()},2z:c(){n.v();1o.v();n.1z();9(T)n.1d()}})},4p:c(){9(6.k.M(\'1a-19\')){u}f T=K;9(/\\d+/.1M(6.h.Z(\'1f-P\'))[0]==6.h.Y.1e){T=C}6.k.2Y("4n 4m 4l 4k 4j",c(4i){n.v();n.1z();9(T)n.1d()}).x(\'1a-19\')},4o:c(){9(!6.k.M(\'1a-19\')){u}f T=K;9(/\\d+/.1M(6.h.Z(\'1f-P\'))[0]==6.h.Y.1e){T=C}6.k.2Y("4n 4m 4l 4k 4j",c(4i){n.v();n.1z();9(T)n.1d()}).L(\'1a-19\')},4h:c(){9(6.1T.M(\'1p\')){u}6.I+=1;9(6.I==3){6.1T.x(\'1p\')}6.1S.L(\'1p\');f T=K;9(/\\d+/.1M(6.h.Z(\'1f-P\'))[0]==6.h.Y.1e){T=C}6.k.1H().1G({14:$.12(6.27*6.I)},{2E:\'2D\',2C:\'2B\',2A:c(){n.v();1o.v()},2z:c(){n.v();1o.v();n.1z();9(T)n.1d()}})},4g:c(){f 8=n;9(8.2h()){9(8.I>0){9(4f.4e.4d){4f.4e.4d=K}8.k.4c(\'1Q\');8.k.1H().1G({14:$.12(6.27*6.I)},{2E:\'2D\',2C:\'2B\',2A:c(){n.v();1o.v()},2z:c(){n.v();1o.v();n.1z();9(n.18()==\'D\'){8.1D=0;8.31.1F(8.1D);8.k.U(\'.1E\').L(\'D\')}}})}}q{8.k.1H().1G({14:$.12(6.3m)},{2E:\'2D\',2C:\'2B\',2A:c(){n.v();1o.v()},2z:c(){n.k.4c(\'1Q\');n.v();1o.v();n.1z(C)}})}},4b:c(e){f 8=n;3y(e.5O){W 8.4a:9(e.3k&&!e.3l&&!e.3j){8.3Z()}15;W 8.49:8.3i();15;W 8.48:9(!e.3l&&!e.3k&&!e.3j){9(w.1y>0){w.1y--;8.H.t(w.2y[w.1y])}}15;W 8.47:9(!e.3l&&!e.3k&&!e.3j){9(w.1y<w.2y.G){w.1y++;8.H.t(w.1y==w.2y.G?\'\':w.2y[w.1y])}}15}},3i:c(){f 8=n;9(8.18()==\'D\'){u}f t=8.H.t();9(/\\S/.3h(t)){f 46=8.18()==\'Q\',p=w.5N(t,46);9(p===C){8.H.t(\'\')}q 9(p.3b==O){9(p==\'2x\'){3g.3f(r.m().o.2x)}q 9(/^2x:(\\d+)/.3h(p)){f 45=$.5M(2b(p.2v(/^2x:(\\d+)$/)[1],10),r.m().5L);3g.3f(O.R(r.m().o.5K,45))}q 9(/^3e:(\\d+)/.3h(p)){f 44=2b(p.2v(/^3e:(\\d+)$/)[1],10);3g.3f(O.R(r.m().o.3e,44))}}q 9(p.3b==43){f b=\'Справка по командам:<1x/>\'+$.3a(\'<1x/>\',p);8.25(b);8.H.t(\'\')}q{9(p.3d&&p.1R){f 2w=[];1b(f 3c 3C p.3d){2w.2q(O.R(\'{0}: {1}\',r.m().2w[3c],p.3d[3c]))}8.25(p.1R+\'<1x/>\'+$.3a(\'<1x/>\',2w))}q 9(p.26&&p.26.3b==43&&p.1R){f P=[];1b(f i=0;i<p.26.G;i++){P.2q(O.R(\'{0}. {1} ({2})\',i+1,p.26[i].3V,p.26[i].5J))}8.25(p.1R+\'<1x/>\'+$.3a(\'<1x/>\',P))}q 9(p.42&&p.1R){8.25(O.R(\'{0}<1x/>{1}\',p.1R,p.42))}8.H.t(\'\')}}},25:c(b){f 39={\'o:22\':{}};39[\'o:22\'][w.41()]={l:b,3U:1j,2V:5I.5H(5G.5F()),16:3,5E:C};6.2r(39)},3Z:c(){f 1P=\'ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ,йцукенгшщзхъфывапролджэ\\\\ячсмитьбю.\',37=\'5D{}5C:"5B<>?5A[]5z;\\\'\\\\5y,./\',t=6.H.t(),1n=\'\',1c=0,2u=t.2v(/(@[^,]+,?)/g)||[],24=[];1b(f i=0;i<2u.G;i++){1c=t.1O(2u[i],1c);24.2q({3Y:1c,3X:1c+2u[i].G-1})}1b(f i=0;i<t.G;i++){f 2t=K;1b(f j=0;j<24.G;j++){9(i>=24[j].3Y&&i<=24[j].3X){2t=C;15}}9(!2t&&(1c=37.1O(t.23(i)))!=-1){1n=1n+1P.23(1c)}q 9(!2t&&(1c=1P.1O(t.23(i)))!=-1){1n=1n+37.23(1c)}q{1n=1n+t.23(i)}}6.H.t(1n)},2r:c(1m,2s){9(!1m||1m[\'o:22\']===K){u}f 8=n,36=1m[\'o:22\']?1m[\'o:22\']:1m;9(36){f 1l=w.5x(36);9(1l.G){f 2a=2b(8.h.Z(\'1f-P\'),10)==-8.h.Y.1e,3Q=8.h.M(\'2N-1I\');f 35=K;1b(f i=0;i<1l.G;i++){f 3W=1l[i];8.3K(3W);9(1l[i].3x&&!2s){35=C}}9(35&&8.18().1O(\'Q\')<0&&!2s){8.2K(\'Q\')}f X=8.h.y(\'J\').G;f 1k=$(2p.2o(\'3M\',1l));1k.3S(c(5w,21){9(21.5v!=\'5u\'){u}f 21=$(6),34=21.5t(\'J\').G;9(1l[34].l.1O(O.R(\'>{0}</E>\',s.m().3V))!=-1){21.x(\'1b-5s\');9(8.k.M(\'1Q\')){f 20=1l[34];20.l=20.3U+\' \'+20.l;8.2m(20)}}});1k.2Z(8.h);1k.U(\'.3z-2Q\').F(c(){5r.5q($(6).3T().1F())});8.h.y().3S(c(i,5p){9(i>=X){$(6).y(\'.1K\').F(c(){8.3O($(6).1F())})}});1k.x(\'3R\');1k.y().x(\'3R\');X=8.h.y(\'J.11\').G;9(X>8.1v){8.h.y(O.R(\'J.11:30({0})\',X-8.1v)).1X()}X=8.h.y(\'J.Q\').G;9(X>8.1v){8.h.y(O.R(\'J.Q:30({0})\',X-8.1v)).1X()}8.h.2J();!2s&&(2a||(3Q&&!8.h.M(\'2N-1I\')))&&8.1d()}}},5o:c(){w.5n(c(3P){n.2r(3P)})},3O:c(1K){6.H.t(O.R(\'{0}@{1}, \',6.H.t(),1K)).3N()},5m:c(B){f 8=6,33={};B.3J=$.3I(B.2V,r.3H());B.5l=C;B.1g=B.16;B.16=-1;B.1s=\'D\';B.1r=\'\';33[0]=B;f 1k=$(2p.2o(\'3M\',33));1k.2Z(8.h);9(8.18()!=\'D\'){8.1D++;8.31.1F(8.1D)}9(s.1w().5k==1){8.k.L(\'11 Q\').x(\'D\')}9(8.k.M(\'1Q\')){8.2m(B)}8.2K(\'D\');X=8.h.y(\'J.D\').G;9(X>8.1v){8.h.y(O.R(\'J.D:30({0})\',X-8.1v)).1X()}9(8.18()==\'D\'){8.2d()}},2m:c(B){f 8=n;9(B){B.1g=B.16;8.2n.2q(B)}9(8.2n.G==0||8.1u!=1j){u}8.1u=$(2p.2o(\'5j\',8.2n.19())).2Z(8.k);f 1t=8.1u.U(\'.5i-b \'),3L=1t.14();f 2W=c(){8.1u&&8.1u.5h(2X,c(){8.1u.1X();8.1u=1j;8.2m()})};1t.Z(\'14\',0);1t.2Y(\'F\',c(){9(1t.5g(\':5f\')){1t.1H(C)}5e(8.2l);2W()});1t.1H().1G({14:$.12(3L)},2X,c(){8.2l=5d(c(){2W();8.2l=1j},5c)})},3K:c(b){b.3J=$.3I(b.2V,r.3H());f 2j=[],2k=0;b.l=b.l.A(/\\$\\$(.+?)!\\$/17,c(5b,3G){2j[2k]=3G;u\'$$\'+(2k++)+\'!$\'});b.l=b.l.A(/5a?:\\/\\/(59\\.58\\.1P\\/[\\d\\-a-z]+\\/|57\\.1P\\/\\d+\\.56|55\\.2U\\/[a-z\\d]{5,7}|54\\.53\\/[a-z\\d]{5,7}|52\\.2U\\/[a-z\\d\\/]+|[a-z\\d]+\\.51.50\\/\\S+|(?:[a-z\\d]+\\.)?4Z\\.1P\\/\\S+|[a-z\\d]+\\.4Y.2U\\/\\S+)/17,r.m().o.2R);9(b.16!=1){b.l=b.l.A(/3F([a-zа-яё\\d]+)3F/17,\'<E V="o-4X">$1</E>\');b.l=b.l.A(/~([a-zа-яё\\d]+)~/17,\'<E V="o-4W-4V">$1</E>\');b.l=b.l.A(/\\*([a-zа-яё\\d]+)\\*/17,\'<E V="o-4U">$1</E>\');b.l=b.l.A(/!([a-zа-яё\\d]+)!/17,\'<E V="o-4T">$1</E>\');b.l=b.l.A(/#([a-zа-яё\\d]+)#/17,\'<E V="o-2e">$1</E>\')}b.l=b.l.A(/\\{2T\\}/i,r.m().o.2T);b.l=b.l.A(/\\{2T\\}/17,\'\');b.l=b.l.A(/\\{2S\\}/i,O.R(r.m().o.2S,3E));b.l=b.l.A(/\\{2S\\}/17,\'\');b.l=b.l.A(/\\{3D\\}/i,O.R(r.m().o.4S,3E));b.l=b.l.A(/\\{3D\\}/17,\'\');1b(f 1N 3C w.3A()){f 3B=-1;4R((3B=b.l.1O(1N))!=-1){f 2R=$(\'<J></J>\').x(\'1N\'+w.3A()[1N]);b.l=b.l.A(1N,2R.4Q())}}9(b.16==0||b.16==2){b.l=\': \'+b.l}1b(f i=0;i<2k;i++){f 1i="",1L=/:(\\d+)/.1M(2j[i])[1]||0,1K=/(.+):/.1M(2j[i])[1];9(s.m().N){9(2P.2O(s.m().N.1h[1L])){9(s.m().N.3w==1L){1i=\' 2i\'}q{1i=\' 1Y\'}}q{9(s.m().N.1h[1L].1J==1){1i=\' 3v\'}q 9(s.m().N.1h[1L].1J==2){1i=\' 2i\'}q 9(s.m().N.1h[1L].1J==3){1i=\' 1Y\'}}}b.l=b.l.A(\'$$\'+i+\'!$\',\'<E V="3z-2Q\'+1i+\'"></E><E V="o-1K\'+1i+\'">\'+1K+\'</E>\')}b.1s=\'11\';b.1r=\'\';3y(b.16){W-1:b.1s=\'D\';15;W 0:W 4:W 2:b.1s=b.3x?\'Q\':\'11\';b.1g=\'1Y\';9(b.16==2){b.1r=\'4P\'}9(b.16==4){b.1r=\'4O\'}9(s.m().N){9(2P.2O(s.m().N.1h[b.1Z])){9(s.m().N.3w==b.1Z){b.1g=\'2i\'}q{b.1g=\'1Y\'}}q{9(s.m().N.1h[b.1Z].1J==1){b.1g=\'3v\'}q 9(s.m().N.1h[b.1Z].1J==2){b.1g=\'2i\'}q 9(s.m().N.1h[b.1Z].1J==3){b.1g=\'1Y\'}}}15;W 1:b.1s=\'11\';b.1r=\'4N\';15;W 3:b.1s=\'11\';b.1r=\'4M\';15;W 5:b.1s=\'11\';b.1r=\'4L-b\';15}},1d:c(3u){9(!6.h.M(\'2N-1I\')){9(3u){6.h.Z({\'1f-P\':$.12(-6.h.Y.1e)});6.h.4K.Z({P:$.12(6.h.Y.4J)})}q{6.h.1H().1G({\'1f-P\':$.12(-6.h.Y.1e)},6.3t);n.h.4I(n.h.4H()-n.h.4G.14(),C)}}},v:c(){9(6.2h()){u}9(6.h){6.h.2g($.12(6.h.3s().2g()-10));6.h.2J()}},18:c(){u $(\'#o\').2M(\'V\').A(\'1a-19\',\'\').4F()},4E:c(){6.2L.1F(r.m().o.3r)},2K:c(3q){6.k.U(\'3o.1E\').x(3q)},4D:c(3p){9(3p){6.2f.L(\'2e\')}q{6.2f.x(\'2e\');6.h.y(\'J.Q\').1X();9(6.18()===\'Q\'){6.k.L(\'Q\').x(\'11\');6.2d()}}},2d:c(){6.h.2J();f 2c=6.18(),2I=6.k.U(\'3o.1E\');9(2I.M(2c)){2I.L(2c)}9(2c!=\'D\'){6.1D=0}f 2a=2b(6.h.Z(\'1f-P\'),10)==-6.h.Y.1e;2a||6.1d(C)}};', 62, 399, '||||||this||self|if||message|function|||var||messageContainer|||chatContainer|Message|getData|chatController|chat|postResult|else|i18nModel|playerModel|val|return|onWindowResize|chatModel|addClass|children||replace|messageData|true|log|span|click|length|messageInput|windowSize|div|false|removeClass|hasClass|Union|String|top|union|format||needScrollToLastMessage|find|class|case|messagesAmount|options|css||common|px||height|break|Type|ig|getCurrentChannel|shift|right|for|pos|scrollToLastMessage|windowScrollMax|margin|InfoIcon|Diplomacy|type|null|domMessageData|newData|updateData|newVal|tutorialController|disabled|button|ExtraClass|Tab|currentPopupContent|currentPopup|maximumMessageAmount|getSettings|br|historyPosition|saveChatSize|chatPosition|buttons|left|unreadLogMessagesCount|tabs|text|animate|stop|scrollable|Relation|nick|unionId|exec|smile|indexOf|ru|minimized|Caption|lessButton|moreButton|bodyHandler|showURL|tooltip|remove|neutral|PlayerUnionId|messageBlock|messageEl|update|charAt|nickRanges|directPushSystemMessage|Top|baseHeight|content|smilesContainer|atBottom|parseInt|curChannel|onTabChange|hidden|unionChat|width|isMinimized|friend|nickNameArr|nickNameCnt|hidePopupTimer|showPopupMessage|popupMessageQueue|applyTemplate|uiUtils|push|onDeliverNewMessages|doNotScroll|isNick|nicks|match|resources|banned|history|complete|step|linear|easing|fast|duration|smiles|visible|minimizeButton|tabsContainer|rearrange|createChannelGlow|postButton|attr|non|isEmptyObject|jQuery|icon|img|faq|vk|com|Timestamp|hidePopupMessage|400|one|appendTo|lt|unreadLogMessagesCountLabel||messageObject|index|newUnionMes|messageUpdate|en||deliverData|join|constructor|resId|Resources|lowLevel|showSystemMessage|messageController|test|doPostMessage|shiftKey|ctrlKey|altKey|minimizeHeight|rules|ul|isShow|chatClass|sendButton|parent|scrollDuration|now|enemy|Id|UnionId|switch|info|getSmileDefinitions|smilePos|in|prm|siteDomain|_|p1|getTimeFormat|timestampToTimeString|Time|prepareMessage|messageContainerHeight|chatMessages|focus|onNickClick|messagesData|nonScrollable|selectable|each|next|Player|Name|newMessageData|end|start|doChangeKeylayout||getLastMessageId|Online|Array|levelLimit|bantime|toUnion|KEY_DOWN|KEY_UP|KEY_RETURN|KEY_SPACE|onMessageInputKeydown|toggleClass|routeConstructorNeedReturnChat|worldMap|gameController|onMinimizeClick|onMoreClick|event|transitionend|msTransitionEnd|oTransitionEnd|otransitionend|webkitTransitionEnd|onRightClick|onLeftClick|onLessClick|onRulesClick|isMinimize|initChatSize|smileDefinition|smileId|el|onSmilesButtonClick|container|body|rightButton|leftButton|rulesButton|viewUnionChannel|langReflow|trim|scrollPane|getHeight|scrollTo|windowSliderMax|slider|adm|system|news|entertainer|admin|outerHTML|while|prmPlaypals|upper|italic|through|line|underline|dropbox|radikal|us|imageshack|clip2net|sc|prnt|prntscr|view|rghost|qip|shot|https|str|5000|setTimeout|clearTimeout|animated|is|fadeOut|popup|popupMessage|autoActivateLogInChat|Log|addMessageToLog|getMessages|updateMessages|row|displayProfile|playerController|me|prevAll|DIV|tagName|messageIndex|prepareMessages|zxcvbnm|asdfghjkl|qwertyuiop|ZXCVBNM|ASDFGHJKL|QWERTYUIOP|IsCommandResult|getCurrentTime|timingModel|floor|Math|Points|bannedFor|timeFormat|secsToString|postMessage|keyCode|onShow|rulesWindowTitle|show|uiWindow|rulesWindowContent|chatRules|value|name|setSetting|getWindowSize|getSmiles|marginGap|unbind|bind|stopPropagation|restoreWindow|html|minimizeWindow|display|not|extraClass|shiftRight|shiftLeft|moreSize|lessSize|li|minimize|more|less|send|keydown|chatText|init|lastId|createUpdateParams|previousPopup|channelGlow|500'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('2S 2R={1o:2Q,1n:2P,1C:-2O,w:[\'2N\',\'2M\',\'2L\',\'2K\'],b:[],N:0,k:d,16:1t,q:0,B:d,O:0,L:d,h:d,g:d,j:d,Z:d,2J:6(1J){5 3=a;3.k=1J;3.B=a.k.1v(\'.e-2I\');3.b=3.1I()},1I:6(){5 1H=K.2H.2G,2F=0;v(5 1a 1h 19.18.17){c(1H<2E(1a)){A 19.18.17[1a]}}A 19.18.17[10]},1E:6(1G){5 3=a,C=K.7().2D;c(1G){C--}c((C>0)&&(!3.16)){3.k.o(\'n-m\');c(C>1){3.B.o(\'n-m\');3.B.P(G.F(\'x{0}\',C))}u{3.B.r(\'n-m\')}}u{3.k.r(\'n-m\')}},2C:6(1F){5 3=a;c(3.k){3.16=1F;3.1E()}},2B:6(){5 3=a;3.k.2A(\'1D\',$.2z($(\'#2y\').2x().1D+3.1C))},2w:6(){5 3=a;3.1B(3.b)},1B:6(b){5 3=a,1x={1A:9.7().e.1A,b:b,1z:9.7().e.1z,1y:9.7().e.1y};3.h=$(2v.2u(\'2t\',1x));15.1u();15.2s(9.7().e.2r,3.h,d,{2q:6(){3.1w()},2p:6(){3.1r()}})},1w:6(){5 3=a;3.12=3.h.z(\'.b\');3.X=3.h.z(\'#2o-y\');3.D=3.h.z(\'#y-2n\');3.M=3.h.1v(\'.2m-2l\').2k().2j(6(){c(!$(a).2i(\'U\')){15.1u()}});3.12.z(\'2h\').2g({2f:1t,2e:0,2d:6(){5 13=$(a).Y(\'1m\').1c(/\\s*W\\s*/,\'\');1i(13){H\'1d\':A 9.7().e.b.2c;H\'Q\':5 14=[];v(5 i=0;i<3.w.I;i++){14[i]=9.7().1s[3.w[i]]}A 14.2b(\', \');2a:A 9.7().1s[13]}}});3.1p()},1q:6(){5 3=a;3.D.r(\'n-m\');29.28.27()},1r:6(){5 3=a;3.V();3.1q();3.h=d;3.X=d;3.12=d;3.M=d;3.D=d},1p:6(){5 3=a;3.O=0;3.N=3.1o;3.M.r(\'U\');K.26(6(g,q){3.q=q;3.h.z(\'#25-y-24\').P(G.F(\'x{0}\',3.q));3.g=g;3.11();3.L=23(6(){3.11()},3.N)})},11:6(){5 3=a;3.j=3.j||1;c((3.O>3.1n)&&3.Z===3.g.1j){3.V();3.1k()}u{5 t=$(\'#y-\'+3.j);t.o(\'W\');3.j=3.j<8?3.j+1:1;t=$(\'#y-\'+3.j);3.Z=t.Y(\'22\');5 1l=t.Y(\'1m\');3.X.o().r(1l);t.r(\'W\');3.O+=3.N}},V:6(){5 3=a;3.M.o(\'U\');3.L&&21(3.L)},1k:6(){5 3=a,f=\'\',l=\'\',p=\'\',E=0;v(5 i=0;i<3.b.I;i++){c(3.b[i].20===3.g.1j){p=3.b[i].1Z;E=3.b[i].1Y*3.q;R}}1i(3.g.1X){H 1:c(p!==\'Q\'){f=9.7().S[p]}u{5 T=3.w.I;v(5 i=0;i<T;i++){f+=9.7().S[3.w[i]];c(i<(T-1)){f+=(i!==0)?\', \':\',<1b />\'}}}v(5 J 1h K.7().1W){c(3.g.1g[J].1f){l+=3.g.1g[J].1f+\' \'+9.7().S[J]+\', \'}}c(l.I){5 1e=p===\'1V\'?\'10\':\'4\';l=G.F(9.7().e.1U,l.1T(0,-2),9.7().1S.1R[1e].1Q)}R;H 2:c(E>1){f=9.7().e.b.1P}u{f=9.7().e.b.1d}R}f=G.F(9.7().e.g,(p===\'Q\'?9.7().e.1O:\'\'),E,f);3.D.P(f).o(\'n-m\');1N.1M(f.1c(\'<1b />\',\' \')+l,\'1L-1K\')}};', 62, 179, '|||self||let|function|getData||i18nModel|this|prizes|if|null|chest|prizeInfoText|prizeInfo|windowContent||currentPrizeId|chestButton|prizeSurplusText|display|not|removeClass|prizeResourceType|dailyPrizeCounter|addClass||currentPrize|else|for|prizeTypeAllResourcesList||prize|children|return|chestCountLabel|chestTryCount|prizeInfoElement|resourcesAmount|format|String|case|length|resourceName|playerModel|rouletteIntervalObject|confirmButton|rouletteInterval|rouletteTimeCounter|html|all|break|resourcesGenitive|prizeTypeAllResourcesListLength|disabled|stopRoulette|active|selectedPrizeElement|attr|currentPrizeKey||selectNextPrize|prizesList|prizeType|tooltipValueElements|uiWindow|isDisableChestButton|chestStaticData|config|staticDataModel|maxLvl|br|replace|ducat|storageBuildingId|surplus|resourcesInfo|in|switch|Id|showPrizeInfo|currentResourceType|class|bindingRouletteTime|rouletteBeginInterval|runRoulette|takeDownPrize|onWindowClose|resources|false|close|find|onWindowShow|templateData|dailyPrizeCounterLabel|buttons|prizeText|createChestWindow|chestButtonBottomPositionOnChat|top|updateChestButton|isDisable|isNewChestWindow|lvl|getRewardsByLevel|buttonContent|win|roulette|addMessageToLog|messageController|prefixNumberOfResources|ducatsGenitive|accusative|buildings|town|slice|prizeSurplusInfo|gold|Resources|Type|amount|resource|id|clearInterval|key|setInterval|counter|daily|getPrizeFromChest|updateResources|resourcesPanel|gameController|default|join|ducatTitle|bodyHandler|delay|showURL|tooltip|li|hasClass|click|clickable|button|confirm|info|selected|onClose|onShow|windowTitle|show|chestWindow|applyTemplate|uiUtils|showChestWindow|position|chat|px|css|repositionChestButton|disableChestButton|ChestTryCount|parseInt|curLvl|Level|playerData|count|initChestButton|stone|wood|iron|food|155|2800|60|chestController|var'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('b w={B:{D:1,1T:1},1w:0,1J:K,1u:[],1G:{5L:\'w\',5K:\'49\'},49:7(3a,47,46){b 4=6,48={29:h.o().t.29,1f:h.o().t.1f};Z.5J(h.o().t.5I);6.B.D=1;A.3Z(6.B.D-1,7(1C){4.B.D=1C.D+1;4.B.1T=1C.1T;Z.1i();4.c=$(g.1Z(\'5H\',48));Z.5G(h.o().t.5F,4.c,1z,{5E:7(){4.42()},5D:7(){4.45();a(3a!=5C&&3a){4.c.9(\'#1o-2.T-V\').f();4.c.9(\'#1b-1N\').Q(47);4.c.9(\'.1o-c.T-V .k-E-m 1d\').23(46)}}})},7(){M.L(h.o().t.3X)})},45:7(){b 4=6;6.c.9(\'3G.29 > 5B:R(.5A)\').f(7(){4.2L($(6))});6.5={c:6.c.9("1e.1o-c.t")};6.5.x=6.5.c.y("1e.t-m");6.5.8={c:6.5.c.y("1e.5z-V-m")};6.5.x.Y=6.5.x.9(\'5y.V-2g.2N\');6.5.8.X={c:6.5.8.c.y(\'.V-5x\')};6.5.8.X.q=6.5.8.X.c.9(\'.5w .5v\');6.5.8.z=6.5.8.c.y(\'.G-2g\');6.5.8.1v=6.5.8.c.y(\'.3g-33\');6.5.8.u=6.5.8.c.y(\'.5u-m\');6.5.8.1H=6.5.8.u.9(\'.k-E-m 1d\');6.5.8.1H.5t(7(e){a($.5s(e)){4.5.8.44.f()}});6.5.8.z.2c();6.5.8.X.c.y(\'.I\').1O({2f:0,2e:K,2d:7(){I h.o().t.1f.5r}}).f(6.2o);6.5.8.1v.y(\'.1V\').N().f(7(){a(!$(6).1h(\'C\')){$(6).r(\'C\');4.3i()}});6.5.8.1v.y(\'.3n\').N().f(7(){4.1I(12)});6.5.8.44=6.5.8.u.9(\'.T\').N().f(7(){a(!$(6).1h(\'C\')){4.3F()}});6.5.8.u.9(\'.5q\').N().f(7(){4.1I(K)});g.3O(6.5.8.u.9(\'.k-E-m .k-33\'),6.5.8.u.9(\'.k-E-m 1d\'));b 1D=6.5.8.u.9(\'.k-F-m .k-3N\').2c();6.5.8.u.9(\'.F-1t\').N().f(7(){4.5.8.u.9(\'.k-F-m\').r(\'13\');4.5.8.u.9(\'.k-E-m\').r(\'1K\');1D.O(g.3M(4.5.8.u.9(\'.k-E-m 1d\').Q())).U();g.1Y(1D);g.1X(1D);g.1W(1D,7(){1D.U()})});6.5.8.u.9(\'.k-F-m .1i-F\').N().f(7(){4.5.8.u.9(\'.k-F-m\').n(\'13\');4.5.8.u.9(\'.k-E-m\').n(\'1K\')});6.5.1F=6.5.x.9(\'.1V\');6.5.1m=6.5.x.9(\'#43-2Q-t-3W\');6.5.1F.N().f(7(){4.1U()});g.3U(6.5.1m);6.5.1m.f(6.3t);6.5.x.9(\'#43-2Q-5p\').N().f(7(){4.5.1m.f()});6.2M=6.c.9(\'1e.T-V\');6.3R(6.2M);6.5.8.c.9(\'.I\').N();6.36(6.5.8.X.c.9(\'.S-14\'));6.37(6.5.8.X.q);6.2k=6.c.9(\'.5o\');Z.3Y(6.B,6.2k,w.1g);6.28(A.2K())},42:7(){6.c=1z;6.5=1z;6.2k=1z;6.1w=0},2L:7(1o){b 39=1o.15(\'35\'),41=1o.15(\'3p\');6.c.15(\'35\',39+\' \'+41);a(39==\'t\'&&6.1J){6.20()}},1g:7(40){b 4=w;4.B.D=40;A.3Z(4.B.D-1,7(1C){4.B.D=1C.D+1;4.B.1T=1C.1T;4.28(A.2K());4.24();Z.3Y(4.B,4.2k,w.1g)},7(){M.L(h.o().t.3X)})},28:7(t){b 4=6;6.5.x.Y.5n();6.5.x.Y.O(g.1Z(\'Y\',t));6.5.x.Y.9(\'2I 38\').3u(\'.1b, .3V-14, .S-14\').f(7(){b 1k=$.3w($(6).5m(\'2I\'),/^V-(\\d+)$/);4.2E(1k)});6.5.x.Y.9(\'38.S.5l 2m\').f(7(){b 1x=$(6).23();Z.1i();2w.2v(1x)});6.5.1c=6.5.x.Y.9(\'.5k-3W .3x\');6.36(6.5.x.Y.9(\'1e.3V-14, 1e.S-14\'));g.3U(6.5.1c);6.5.1c.f(6.24);a(!6.5.x.5j()||6.5.x.1h(\'R-W\')){6.1J=12}J{6.20()}},20:7(){b 4=w,2j=0;4.5.x.Y.9(\'38.1b\').5i(7(){b 3T=$(6).y(\'.G-1s\').2D(),2i=0,q=$(6).y(\'1e\');a(!2j){2j=$(6).3r()}2i=2j-3T-3;a(q.2D()>2i){q.15(\'1M\',\'12\');q.2C(\'5h-2B\',$.3q(2i));4.37(q)}})},37:7(q){q.1O({2f:0,2e:K,2d:7(){I(q.15(\'1M\')==\'12\')?$(6).O():\'\'},5g:7(){I(q.15(\'1M\')==\'12\')?\'V-1b-1O\':\'R-W\'}})},36:7(3S){3S.1O({2f:0,2e:K,2d:7(){b 21=$(6).15(\'35\').2J(/14-(\\d+)/)[1];I h.o().t.1f.5f[21]}})},3R:7(l,1r){b 4=w,2h={5e:h.o().t.1f.2X,1q:[]};a((1a.o().34&&1a.o().34.3Q)&&!1r){b 1S=1a.o().34.3Q;a(1S.p>1){l.y(\'.T-2s-c\').r(\'3y-2a\');1j(b i=0;i<1S.p;i++){a(1S[i].3P!=1a.o().3P){2h.1q.25(1S[i].2p)}}($(g.1Z(\'5d\',2h))).5c(l.y(\'.T-2s-c\'));4.3J(l)}}l.9(\'.T\').N().f(7(){4.3L(l,1r?1z:2h.1q,1r)});g.3O(l.9(\'.k-E-m .k-33\'),l.9(\'.k-E-m 1d\'));b 1B=l.9(\'.k-F-m .k-3N\').2c();l.9(\'.F-1t\').N().f(7(){l.9(\'.k-F-m\').r(\'13\');l.9(\'.k-E-m\').r(\'1K\');1B.O(g.3M(l.9(\'.k-E-m 1d\').Q())).U();b 5b={};g.1Y(1B);g.1X(1B);g.1W(1B,7(){1B.U()})});l.9(\'.k-F-m .1i-F\').N().f(7(){l.9(\'.k-F-m\').n(\'13\');l.9(\'.k-E-m\').n(\'1K\')})},3L:7(l,1q,1r){b 4=w,16=l.9(\'.T\');a(!16.1h(\'C\')){b 19=1r?1r:$.1y(l.9(\'1N.1p\').Q()),30=$.1y(l.9(\'1N.1b\').Q()),2Z=$.1y(l.9(\'1d\').Q());a(19.p){b 1R=[],1A=[];a(1q){b 32=2W 2V("(^|,\\\\s*)"+h.o().t.1f.2X+"(\\\\s*,|$)",\'2U\'),3K=(19.2T(32));a(3K>=0){19=19.5a(32,\',\');1j(b i 59 1q){1R.25(1q[i])}}}1A=19.58(\',\');a(1A.p){1j(b i=0;i<1A.p;i++){b 1p=$.1y(1A[i]),31=K;a(1p.p){a(1p!=1a.57.2p){1j(b j=0;j<1A.p;j++){a(1R[j]==1p){31=12;56}}a(!31){1R.25(1p)}}J{M.L(h.1n(\'H:G:55\'));I}}}}19=1R.54(\',\')}a(!19.p){M.L(h.1n(\'H:G:53\'));I}a(!30.p){M.L(h.1n(\'H:G:52\'));I}a(!2Z.p){M.L(h.1n(\'H:G:3E\'));I}16.r(\'C\');4.2O(19,30,2Z,16)}},3J:7(l){b 17={c:l.9(\'.2a-2g\')},2S=l.9(\'1N.1p\'),2R=7(2Y){17.c[2Y?\'n\':\'r\'](\'R-W\');a(2Y){17.2b.U()}},2P=7(1x){b 18=$.1y(2S.Q()),1P=\'\',1Q=1z;1Q=2W 2V("(^|,\\\\s*)"+h.o().t.1f.2X+"(\\\\s*,|$)",\'2U\');a(18.2T(1Q)>=0){I}1Q=2W 2V("(^|,\\\\s*)"+1x+"(\\\\s*,|$)",\'2U\');a(18.2T(1Q)<0){a(18.p){a(18.51(18.p-1)!=\',\'){1P+=\',\'}1P+=\' \'}1P+=1x;18=\'\'+18+1P;2S.Q(18)}};17.2b=17.c.9(\'.50\');l.9(\'.2a-2g-4Z-1t\').n(\'R-W\').f(7(){2R(17.c.1h(\'R-W\'))});l.9(\'.1i-1t\').1O({2f:0,2e:K,2d:7(){I h.o().t.1f.4Y}}).f(7(){2R(K)});17.2b.2c();17.2b.y(\'1e\').f(7(){2P($(6).O())});17.c.9(\'.2Q-2a\').f(7(){2P(\'[4X]\')})},2O:7(3I,1b,2N,16){b 4=w;A.2O(3I,1b,2N,7(){3H.4W(3H.4V.4U,7(){4T.4S()});a(4.5){4.2M.9(\'1N,1d\').Q(\'\');4.1g(4.B.D);4.2L(4.c.9(\'3G.29 > #1o-1\'))}M.L(h.o().G.4R);16&&16.n(\'C\')},7(H){a(/^27:(\\d+)/.3D(H)){b 26=$.3C(3B(H.2J(/^27:(\\d+)$/)[1],10),h.o().2q);M.L(2u.2t(h.o().3A.3z,26))}J{M.L(h.1n(H))}16&&16.n(\'C\')})},3F:7(){b 4=w,P=$.1y(4.5.8.1H.Q());a(!P.p){M.L(h.1n(\'H:G:3E\'));I}4.5.8.u.9(\'.T\').r(\'C\');A.4Q(4.1w,P,7(v){4.2z(v);4.28(A.2K());4.1I(K);4.5.8.u.9(\'.T\').n(\'C\')},7(H){a(/^27:(\\d+)/.3D(H)){b 26=$.3C(3B(H.2J(/^27:(\\d+)$/)[1],10),h.o().2q);M.L(2u.2t(h.o().3A.3z,26))}J{M.L(h.1n(H))}4.5.8.u.9(\'.T\').n(\'C\')})},24:7(){b 4=w,2H=4.5.x.Y.9(\'4P\').y(\'2I:3y(.3x.1l)\');4.1u=[];1j(b i=0;i<2H.p;i++){b 1k=$.3w($(2H[i]),/^V-(\\d+)$/);4.1u.25(1k)}4.3v()},3v:7(){b 4=w,2G=4.5.1c.p,2F=4.5.1c.3u(\'.1l\').p;a(!2G||2F<2G){4.5.1m.n("1l")}J{4.5.1m.r("1l")}a(2F){4.5.1F.n("C")}J{4.5.1F.r("C")}},3t:7(){b 4=w,3s=4.5.1m.1h(\'1l\');a(3s&&4.5.1c.p){4.5.1c.r("1l")}J{4.5.1c.n("1l")}4.24()},2E:7(1k){b 4=6;6.5.8.z.O(\'\');A.2E(1k,7(v){b q=4.5.8.X.q;4.5.8.c[v.2x?\'n\':\'r\'](\'4O\');4.1w=1k;4.5.8.X.q.O(v.1b);4.5.8.X.c.9(\'.S-1L\').O(v.4N);4.5.x.r(\'R-W\');4.2z(v);4.5.8.c.n(\'R-W\');4.5.8.z.U();g.3l(4.5.8.z,4.1G);g.3k(4.5.8.z,4.1G);g.3j(4.5.8.z);g.1Y(4.5.8.z);g.1X(4.5.8.z);g.1W(4.5.8.z,7(){4.5.8.z.U()});a(v.2x){4.5.8.c.9(\'.S-1L\').22(\'f\').f(7(){Z.1i();2w.2v($(6).23())})}J{4.5.8.c.9(\'.S-1L\').22(\'f\')}q.2C(\'2B\',\'4M\');q.15(\'1M\',\'K\');2A=q.4L().3r();a(2A<q.2D()){q.2C(\'2B\',$.3q(2A));q.15(\'1M\',\'12\')}a(v.4K==1){4.1J=12}})},2z:7(v,2y){b 4=6;a(v){A.4J(v);a(2y){1j(b i=0;i<v.G.p;i++){a(2y.4I(v.G[i].3p)!=-1){4.2r(v.G[i])}}}J{4.5.8.z.4H();1j(b i=0;i<v.G.p;i++){4.2r(v.G[i])}}a(v.2x){4.5.8.c.9(\'.S-1L\').22(\'f\').f(7(){Z.1i();2w.2v($(6).23())})}J{4.5.8.c.9(\'.S-1L\').22(\'f\')}4.5.8.z.U();4.3o(v.4G)}},3o:7(21){b 4=w;4.5.8.X.c.9(\'.S-14\').n().r(2u.2t(\'S-14 14-{0}\',21))},2o:7(){b 4=w;A.4F();4.1w=0;4.5.8.c.r(\'R-W\');4.5.x.n(\'R-W\');4.5.8.z.O(\'\');4.5.8.u.9(\'.k-F-m\').n(\'13\');4.5.8.u.9(\'.k-E-m\').n(\'1K\');4.1I(K);a(4.1J){4.20()}},1I:7(13){b 4=w;4.5.8.1v[13?\'r\':\'n\'](\'R-W\');4.5.8.c[13?\'r\':\'n\'](\'4E-3n-2s\');a(!13){4.5.8.1H.Q(\'\')}J{4.5.8.1H.4D()}4.5.8.z.U()},2r:7(11){b 4=w;a(11){a(!11.3m){11.4C=4B.4A(11.4z,h.4y(),{4x:K,4w:4v.4u(),2q:h.4t()});11.4s=11.1x==1a.o().2p;11.3m=12}b P=$(g.1Z(\'V-4r\',11));4.5.8.z.4q(P);g.3l(P,4.1G);g.3k(P,4.1G);g.3j(P);g.1Y(P);g.1X(P);g.1W(P,7(){4.5.8.z.U()})}},3i:7(){b 4=w;Z.4p({4o:h.o().4n.4m,4l:7(){b 3h=[4.1w];A.1U(3h,7(){4.2o();4.1g(4.B.D);4.5.8.1v.y(\'.1V\').n(\'C\')})},4k:7(){4.5.8.1v.y(\'.1V\').n(\'C\')}})},1U:7(){b 4=6;a(!6.5.1F.1h(\'C\')){a(6.1u.p){A.1U(6.1u,7(){4.1u=[];4.1g(4.B.D)})}}},3b:7(){b 2n=A.2l(),1E=$(\'#4j #4i-3g .t\');a(2n){1E.r(\'3f\');1E.9(\'.1t-3e > .3d > 2m\').O(\'\'+2n)}J{1E.n(\'3f\');1E.9(\'.1t-3e > .3d > 2m\').O(\'\')}},4h:7(1s){a(A.2l()!=1s&&6.c){6.1g(6.B.D)}a(A.2l()<1s){a(1a.3c().4g){4f.4e()}a(1a.3c().4d){4c.4b(1s)}}A.4a(1s);6.3b()}};', 62, 358, '||||self|conversationListTab|this|function|currentConversationContainer|find|if|var|content|||click|uiUtils|i18nModel|||bb|sendForm|container|removeClass|getData|length|subjectContainer|addClass||conversations|replyPane|conversationData|conversationController|conversationsContainer|children|messagesList|conversationModel|paginationInfo|disabled|page|edit|preview|messages|error|return|else|false|showSystemMessage|messageController|clickable|html|messageBody|val|not|interlocutor|send|rearrange|conversation|display|conversationInfoPane|conversationsList|uiWindow||messageData|true|visible|status|attr|sendButton|unionList|receiverFieldValue|receiversData|playerModel|subject|listSelectionBoxes|textarea|div|titles|goToConversationsPage|hasClass|close|for|conversationId|checked|SelectAllConversationsBox|getTextByCode|tab|receiver|unionMembers|receiverName|count|button|checkedConversationsList|buttonsPane|currentConversationId|playerName|trim|null|receivers|messagePreview|data|replyPreview|conversationsButton|deleteButton|conversationsBackObject|replyInputField|viewResponseForm|isNeedResizeConversationTableElements|hidden|name|showtooltip|input|tooltip|addedreceiverFieldValue|playerSearchRegExp|receiversList|unionMembersList|totalPages|removeConversations|delete|prepareSpoilersInContent|prepareBuildingIconsInContent|prepareUnitIconsInContent|applyTemplate|resizeConversationTableElements|statusCode|unbind|text|updateCheckedConversationsList|push|bantime|banned|renderConversationsList|tabs|union|membersList|scrollable|bodyHandler|showURL|delay|list|unionListData|maxSubjectContainerWidth|subjectCellWidth|pagerContainer|getUnreadConversationsCount|span|messagesCount|returnToConversationsList|Name|timeFormat|addMessageToConversationList|form|format|String|displayProfile|playerController|p1Id|newMessagesIds|updateCurrentConversation|subjectContainerMaxWidth|width|css|outerWidth|openConversation|checkedConversationElementsLength|allConversationElementsLength|selectedRows|tr|match|getList|onTabOpen|sendTabContent|body|createConversation|insertPlayerNameToReceiverField|all|openUnionList|receiverField|search|igm|RegExp|new|sendToAllUnionLabel|isOpen|bodyData|subjectData|isAlreadyAdded|allUnionLabelSearchRegExp|pane|Union|class|createStatusIconTooltip|createSubjectTooltip|td|tabClass|newMessage|showUnreadMessagesCount|getSettings|counter|img|active|buttons|selectedConversationsList|onDeleteConversationClick|prepareCoordsLinksInContent|prepareUnionLinksInContent|preparePlayerLinksInContent|isFormatted|reply|viewInterlocutorStatus|id|px|innerWidth|isSelect|checkAllConversationElements|filter|updateCheckAllConversationControls|parseId|checkbox|has|bannedInConversationsFor|chat|parseInt|secsToString|test|bodyIsEmpty|onReplyButtonClick|ul|playerItemsModel|to|prepareUnionList|allUnionLabelPosition|onSendConversationButtonClick|bb2html|render|initBBEditor|Id|Members|prepareSendForm|iconElements|messagesCounterContainerWidth|initCheckbox|your|box|loadError|createPager|getPage|pageNumber|tabId|onWindowClose|select|sendReplyButton|onWindowShow|newMessageText|newMessageHeader|conversationWindowTemplateData|showWindow|loadUnreadConversationsCount|onNewConversationMessage|nativeNotificationController|ntfMessage|playMessagesSound|audioController|soundMessage|onUpdateConversationsUnreadCount|system|header|no|ok|deleteConversation|confirmText|title|showConfirm|prepend|message|isMyMessage|getTimeFormat|getCurrentTime|timingModel|currentTime|showDateForAnotherDay|getDateTimeFormat|time|timestampToDateTimeString|Util|formattedDateTime|focus|with|unsetCurrentConversationId|statusForInterlocutorPlayer|empty|indexOf|prepareConversation|statusForCurrentPlayer|parent|auto|interlocutorName|unresponsive|tbody|sendMessage|sent|checkQuestsToBeDone|questController|PLAYER_ITEM_CONVERSATION_CREATED|flagItems|setFlagItem|myunion|closeUnionListButton|open|members|charAt|subjectIsEmpty|unknownReceiver|join|senderEqualsReceiver|break|playerData|split|in|replace|backObject|appendTo|conversationUnionList|sendToAllTitle|conversationStatus|extraClass|max|each|innerHeight|selection|player|closest|mouseout|paging|label|cancel|returnToConversationsListButton|isCtrlEnterEvent|keypress|response|value|theme|info|table|current|decor|li|undefined|onShow|onClose|windowTitle|show|conversationWindow|windowPreload|block|method|controller'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('b 2={6:K,7:K,h:l,f:[],J:0,I:1l,m:d,1k:3(){b 4=2;4.h=d;4.1j=4.1i;e(4.J>1h.1g()-4.I){2.k(d)}E{2.k(l)}e(4.m==d){4.m=l;1f.1e()}},k:3(F){1d.1c(H.G().j.1b,$(t.s(\'j\',{1a:H.G().j})),d,{19:3(){2.6=$(\'.18-17\');2.7=2.6.5(\'.16 .15\');2.7.14();e(F){9.13(9.D)}E{9.x(\'12\');9.D()}2.B()},C:9.C})},B:3(){2.6.5(\'.A .z-y .11, .A .z-y .x\').w(9.10);b a=2.6.5(\'.g-1\');a.5(\'v\').w(3(u){a.5(\'v.i\').Z(\'i\');$(u.Y).X(\'i\');9.W()});b V=2.6.5(\'.g\')},U:3(r){o t.s(\'T\',r)},S:3(c,8){c=$(c);2.f[8]=c;2.7.R(c);2.7.q()},Q:3(8){2.p(8).P();2.7.q();O 2.f[8]},p:3(8){o 2.f[8]},N:3(){e(!2.h){2.7.n()}},M:3(L){b a=2.6.5(\'.g-1\');a.n()}};', 62, 84, '||defenceWindowController|function|self|find|dom|tableDom|id|defenceWindowModel|filter1|var|row|false|if|rowsDom|filter|closed|checked|defenceWindow|createDom|true|newViewed|empty|return|getRow|rearrange|data|applyTemplate|uiUtils|obj|li|click|sort|time|finish|header|init|onClose|fillData|else|load|getData|i18nModel|actualDataTime|lastUpdateTime|null|filterList|initFilter1List|clearTable|delete|remove|delRowFromTable|append|addRowToTable|defenceWindowTableRow|createTableRow|filter2|updateFilter1|addClass|currentTarget|removeClass|onHeaderFinishTimeSort|label|up|loadData|scrollable|body|table|window|defence|onShow|i18n|title|show|uiWindow|updateIncomingAttackIcon|gadgetsController|getCurrentTime|timingModel|maxRouteId|lastRouteViewedRouteId|open|600'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('b 23={19:0,n:1,d:G,K:\'1z\',9:G,u:G,1x:1,P:2,1v:3,T:4,16 6(){c 5.19},22 6(18){5.19=18;b 17=1t 1y();17.21(\'1z:20\',1y.1Z,{9:5.9,6:18});17.1Y(8(){})},16 g(){7(!5.9||!r.q||!r.q.m||!r.q.m[5.9]||!r.q.m[5.9].g){c{}}c r.q.m[5.9].g},16 t(){7(!5.6||!5.g[5.6]){c G}c 5.g[5.6]},O:8(){7(!5.g[5.6]){c}b 6=5.g[5.6],15=6.13;7(5.g[15]){5.s(15)}},s:8(k){7(!k||!5.g[k]){c}5.6=k;b 6=5.g[k];7(5.1r(k)){7(6.14!=V||6.13!=V){5.s(6.14?6.14:6.13)}c}5.u=G;1X(6.j){F-1:z.1w($.a(8(){5.6=-1;5.A&&5.A()},5));E;F 5.1x:z.1w($.a(8(){1W.1V(6.1h,6.x);1g($.a(8(){5.O()},5),6.x)},5));E;F 5.P:b p={11:B+6.10,Z:5.K+\' j-\'+r.q.m[5.9].j,Y:6.l,l:6.l,x:6.x,w:$.a(5.w,5),v:$.a(5.v,5)};z.X(p);E;F 5.1v:b p={11:B+6.10,d:z.1U.1T,12:6.12,Z:5.K+\' j-\'+r.q.m[5.9].j,Y:6.l,l:6.l,w:$.a(5.w,5),v:$.a(5.v,5)};7(6.o){p.12.o=p.o=6.o}z.X(p);E;F 5.T:b W=$(\'<1u></1u>\'),1s={1S:J,1R:J,1Q:$.a(8(){5.L()},5),1P:$.a(8(m){5.N()},5),1O:$.a(8(m){5.M()},5),1N:$.a(8(){b p={11:B+6.10,d:W,Z:5.K+\' j-\'+r.q.m[5.9].j,Y:6.l,l:6.l,w:$.a(5.w,5),v:$.a(5.v,5)};z.X(p)},5)};5.u=1t u(6.1M,W,1s);E}},1r:8(k){b 6=5.t;7(!6){c J}7(6.1p==V){c J}1o{b 1q=f.i().h&&f.i().h[5.9]&&f.i().h[5.9].U&&f.i().h[5.9].U[k]?f.i().h[5.9].U[k]:0;c 1q>=6.1p}},w:8(d){b 6=5.t;7(!6){c}5.d=d;7(6.j==5.T){5.u.1L(5.d)}1o{5.R=d.D(\'.o\');d.D(\'.1m-1n-I,.1l-1n-I\').S($.a(8(){7(5.y){Q(5.y)}5.N()},5));d.D(\'.1m-1k-I,.1l-1k-I\').S($.a(8(){7(5.y){Q(5.y)}5.M()},5));5.R=d.D(\'.o\');d.D(\'.C\').S($.a(8(e){b C=$(e.1K);C.1J(\'1j\');C.1I(\'.C\').1H(\'1j\')},5))}7(6.1i){f.1f().1e&&1d.1c(B+6.1i)}},v:8(){b 6=5.t;7(!6){c}7(6.o){5.H=6.o;5.y=1G($.a(8(){--5.H;5.R.1h(5.H);7(!5.H){Q(5.y);5.L()}},5),1F)}7(6.j==5.P&&6.x){1g($.a(5.O,5),6.x)}7(6.1b){f.1f().1e&&1d.1c(B+6.1b)}7(5.u){5.u.1E()}},N:8(){b 6=5.t;7(!6){c}5.s(6.1D)},M:8(){b 6=5.t;7(!6){c}5.s(6.1C)},L:8(){b 6=5.t;7(!6){c}5.s(6.1B)},1A:8(9,A){b n=f.i().h&&f.i().h[9]&&f.i().h[9].1a?f.i().h[9].1a:5.n;7(n==-1){n=5.n}5.A=A;5.9=9;5.6=n;5.s(n)}};', 62, 128, '|||||this|step|if|function|dreamId|proxy|var|return|content||playerModel|steps|DreamSteps|getData|type|stepNumber|fallInContentDuration|data|initialStep|timer|callData|dreamsStaticData|staticDataModel|gotoStep|currentStep|voting|onFallOut|onReady|showDuration|timerInterval|newWindowController|onComplete|staticDataUrl|answer|find|break|case|null|timerCount|button|false|NEW_WINDOW_EXTRA_CLASS|onTimerExceeded|onNoClick|onYesClick|gotoNextStep|STEP_TYPE_IMAGE|clearInterval|timerElement|click|STEP_TYPE_THREE_RADIO_BUTTONS_CHOICE|repeatCounts|undefined|votingContainer|show|fallOutContentDuration|extraClass|image|contentImage|contentTemplateData|nextStep|onRepeatLimitGoToStep|nextStepNumber|get|req|value|__step|current|onFallOutSound|playCustomSound|audioController|musicOn|getSettings|setTimeout|text|onReadySound|selected|no|std|graphic|yes|else|repeatLimit|repeatCount|ifStepIsToPass|votingParams|new|div|STEP_TYPE_TWO_IMAGE_BUTTONS_CHOICE|hide|STEP_TYPE_TEXT_SCRIPT|request|dream|start|timerNextStep|noNextStep|yesNextStep|timerStart|1000|setInterval|removeClass|siblings|addClass|target|createVotingDOM|votingId|onLoad|onCancel|onVote|onTimerExpired|domAutoCreate|timerAutoStart|TWO_IMAGE_BUTTONS_CHOICE|contentCreators|showSystemMessage|messageController|switch|getResponse|all|markStep|addGetting|set|dreamController'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('5f l={1j:5e,35:1P,34:5d,33:I,1v:\'5c\',2o:5*1H,5b:2(){4.f=$(\'#2j-5a .59-58\');4.36();4.2Y();4.2R();4.2P();4.2M();4.2s();4.2I();4.2F();4.2E();4.2Q();4.39();4.38();4.2T();4.2w();4.2r();4.1u();4.2l();4.2f();4.1r(d);4.23();4.2a();4.2v();4.2x()},39:2(){4.M=$(\'#57-37-e\').9({u:d,n:2(){b r.q(7.6().f.M.D,11.Z?56.1M(11.Z.1I-p.t(),7.6().f.M.55):0)}}).y(2(){54.53(\'52\');$.9.o()})},38:2(){4.Y=$(\'#51-37-e\').9({u:d,n:2(){b r.q(7.6().f.Y.D,v.N(L.1V.1l.2B),v.N(L.1V.1l.2C),v.N(L.1V.1l.2A))}})},36:2(){8 3=l,P=2D;3.x=$(\'#50-1U\');P=3.x.1g(\'.o\');3.x.4Z(2(){P.V(d,H);P.4Y(3.35)}).4X(2(){4W(2(){P.V(d,H);P.4V(3.34)},3.33)});3.x.1g(\'.o, .12\').y(2(){8 13=$(4).32(\'31\')===\'12\';3.x[!13?\'j\':\'k\'](\'2Z\');a.2H({2G:\'13\',1L:13});$.9.o()});3.x.1g(\'.1U-30, .o, .12\').9({z:0,u:d,n:2(){4U($(4).32(\'31\')){1T\'1U-30\':b 7.6().f.1n.4T;1T\'o\':b 7.6().f.1n.4S;1T\'12\':b 7.6().f.1n.4R}}});3.x.17(\'.4Q\').2y(7.6().f.1n.4P);c(a.O()[\'13\']===d){3.x.j(\'2Z\')}3.2z=3.x.17(\'.4O-1L\')},2Y:2(){8 3=l;3.1E=$(\'#1R-4N-e\').9({u:d,n:2(){c(a.6().1i){8 1S=K(a.6().1i),2X=v.4M((1S-p.t()),0),2V=4L.4K(1S,7.4J(),{4I:H,4H:p.t(),2W:7.X()}),2U=$.1M(2X,7.6().2W);b r.q(7.6().1R.4G,2V)+\'<4F />\'+r.q(7.6().1R.4E,2U)}B{b\'\'}}})},2T:2(){4.1F=$(\'#2S-e\').9({u:d,n:2(){b 7.6().2S.9}}).y(2(){4D.o();4C.4B();$.9.o()})},2R:2(){4.1d=$(\'#4A-4z-e\').9({u:d,n:2(){8 w=K(a.6().1c,10),1Q=w+s.S.2q;b r.q(7.6().f.1d.D,$.1G(1Q,7.X()),$.2O(1Q,7.2N()))}})},2Q:2(){4.m=$(\'#4y-4x-e\').9({u:d,n:2(){b r.q(7.6().4w.D,U.4v,U.1B,U.4u)}}).y(2(){2t.12();$.9.o()}).1O(2(){l.m.j(\'1O\');l.m.V().1C({\'1h\':\'-4t\'},1P)},2(){l.m.V().1C({\'1h\':\'-2u\'},1P,2(){l.m.k(\'1O\')})})},2P:2(){4.1b=$(\'#4s-4r-e\').9({u:d,n:2(){8 w=K(a.6().1c,10),1N=w+s.S.1w;b r.q(7.6().f.1b.D,$.1G(1N,7.X()),$.2O(1N,7.2N()))}})},2M:2(){4.1s=$(\'#2i-4q-e\').9({u:d,z:0,n:2(){8 C=\'\';c(s.J){8 F=$.4p(s.J.4o),W=2L.4n(F.4m,F.4l-1,F.4k,F.4j,F.4i,F.4h)/I,1m=W-v.N((T 2L()).4g()/I);C=r.q(s.J.4f,(1m<24*2K)?$.1M(1m,7.X()):r.q(7.6().4e,v.N(1m/24/2K)));C+=r.q(7.6().2J.4d,a.6().1t.4c);C+=r.q(7.6().2J.4b,s.J.4a,a.6().1t.2g)}b C}})},2I:2(){4.1K=$(\'#49-e\').y($.G(2(){a.O().E=!a.O().E;4.1K[a.O().E?\'k\':\'j\'](\'1J\');48.47();a.2H({2G:\'E\',1L:a.O().E});$.9.o()},4)).9({z:0,16:d,n:$.G(2(){b 7.6().46[4.1K.1f(\'1J\')?\'45\':\'E\']},4)})[a.O().E?\'k\':\'j\'](\'1J\')},2F:2(){4.2c=$(\'#44-e\').y($.G(2(){43.42(H);4.1r(d);$.9.o()},4)).9({z:0,16:d,n:2(){b 7.6().f.41.D}})},2E:2(){4.40=$(\'#1q-1p\')},3Z:2(){8 3=l;c(!3.M){b}c(11.Z.3Y==2D&&v.N(11.Z.1I-p.t())>0&&11.Z.1I-p.t()<24*1H*1H){3.M.k(\'h-g\')}B{3.M.j(\'h-g\')}},3X:2(){8 3=l,1k=L.6().1l;c(!3.Y){b}c(1k.2C<=3.1j||1k.2B<=3.1j||1k.2A<=3.1j){3.Y.k(\'h-g\')}B{3.Y.j(\'h-g\')}},3W:2(){8 W=v.3V(p.t());l.2z.2y($.1G(W,7.X()));3U.3T.3S(W)},2x:2(){8 3=l,1D=a.6().1i>=p.t();3.1F&&3.1F[!$.3R(3Q.3P)?\'k\':\'j\'](\'h-g\')},2w:2(){8 3=l,1D=a.6().1i>=p.t();3.1E&&3.1E[1D?\'k\':\'j\'](\'h-g\')},2v:2(){8 3=l;c(U.1B!=0){c(3.m.1f(\'h-g\')){3.m.2k(\'1h\',\'-3O\');3.m.k(\'h-g\');3.m.V().1C({\'1h\':\'-2u\'},I)}3.m.1g(\'3N\').2h(U.1B)}B{3.m.j(\'h-g\')}c(!2t.3M){c(!3.m.1f(\'T-1e\')){3.m.j(\'T-1e\')}}B{c(3.m.1f(\'T-1e\')){3.m.k(\'T-1e\')}}},2s:2(){4.1a=$(\'#3L-e\').y(2(){3K.29();$.9.o()}).9({u:d,z:0,n:2(){8 C=r.q(7.6().f.1a.D,2e.2d());b C}})},2r:2(){8 3=l,w=K(a.6().1c,10),2p=p.t()<s.S.2q+w,1A=!K(a.6().2n,10);3.1d&&3.1d[(1A)?\'k\':\'j\'](\'h-g\');c(!2p&&1A){3.1y=3J(2(){3.1z()},3.2o*I)}},1z:2(){8 3=4;L.1z(2(){c(L.6().2n){3.1y&&3I(3.1y);3H.3G()}})},1u:2(){8 3=l,w=K(a.6().1c,10),1x=p.t()<s.S.1w+w;3.1b&&3.1b[1x?\'k\':\'j\'](\'h-g\');c(1x){8 2m=s.S.1w-(p.t()-w);p.3F(3.1v);p.3E(3.1v,{3D:v.3C(2m),3B:2(){3.1u()}})}},2l:2(){c(s.J){4.1s.k(\'h-g\').2k({\'3A\':\'3z 3y(\'+3x+\'/3w/2j/2i-3v/\'+s.J.3u+\'.3t) 3s-3r 0 0\',\'3q\':\'3p\'}).2h(a.6().1t.2g)}B{4.1s.j(\'h-g\')}},2f:2(){c(2e.2d()>0){4.1a.k(\'h-g\')}B{4.1a.j(\'h-g\')}},1r:2(2b){4.2c[2b?\'k\':\'j\'](\'h-g\')},2a:2(){4.f.17(\'.1q-1p\').22();c(a.6().21){b}1o(8 A 20 19.6()){c(A>=I){3o}($.G(2(A){8 e=$(15.14(\'3n\',19.6()[A])).y($.G(2(){25.29();$.9.o()},4)).9({z:0,16:d,1Y:\'1q-e-9\',n:2(){8 28=19.6()[A],27=7.6().3m.3l[A],18=$.3k(H,{},28,{3j:27});1o(8 i=0;i<18.26.3i;i++){8 R=18.26[i];R.3h=25.3g(R);R.3f=19.3e(R)===H}b $(15.14(\'3d\',18))}});4.f.1W(e)},4))(A)}},23:2(){4.f.17(\'.1X-1p\').22();c(a.6().21){b}1o(8 Q 20 1Z.6()){($.G(2(Q){8 e=$(15.14(\'3c\',1Z.6()[Q])).9({z:0,16:d,1Y:\'1X-e-9\',n:2(){b $(15.14(\'3b\',7.6().3a[Q]))}});4.f.1W(e)},4))(Q)}}};', 62, 326, '||function|self|this||getData|i18nModel|let|tooltip|playerModel|return|if|false|icon|viewportGadgets|display|not||addClass|removeClass|gadgetsController|incomingAttackIcon|bodyHandler|close|timingModel|format|String|staticDataModel|getCurrentTime|showURL|Math|playingFrom|clientClockPanel|click|delay|questId|else|result|iconTooltip|musicOn|datetime|proxy|true|1000|gameEventStaticData|parseInt|townModel|premiumExpiredIcon|floor|getSettings|clockCloseButton|ingredientId|condition|playerStaticData|new|defenceWindowModel|stop|timestamp|getTimeFormat|resourcesExpiredIcon|playerMinisterCabinet||premiumModel|open|clockVisibility|applyTemplate|uiUtils|track|find|comboInfo|questModel|rpgIcon|captureTownIcon|PlayingFrom|raiseFlagIcon|routes|hasClass|children|left|BanChatUntil|resourcesExpiredLimit|resPerHour|ResourcesPerHour|timeLeft|clientClock|for|icons|quest|updateTutorialIcon|gameEventIcon|GameEvent|updateCaptureTownIcon|townCaptureCountdownName|timeBeforeCaptureEnabled|townCantBeCaptured|checkFlagIsRaisedInterval|checkFlagIsRaised|flagIsDown|counterAllRoutes|animate|isBanned|chatBanIcon|siegeIcon|timestampToTimeString|60|untilTime|muted|musicButton|value|secsToString|captureTownDate|hover|500|raiseFlagDate|chat|banFinishTime|case|clock|townData|append|ingredient|extraClass|ingredientsModel|in|TutorialPart|remove|updateIngredientIcons||questController|Conditions|questLocale|questInfo|showWindow|updateQuestIcons|visible|tutorialButton|freeSkillPoints|rpgModel|updateRPGIcon|itemCount|text|game|viewport|css|updateGameEventIcon|timeIntervalBeforeCapture|ReadyToDie|checkFlagIsRaisedIntervalInSeconds|mustBeDown|timeBeforeFlagRaise|updateRaiseFlagIcon|initRPGIcon|defenceWindowController|15px|updateIncomingAttackIcon|updateChatBanIcon|updateSiegeIcon|html|clockValuePanel|stoneReserve|woodReserve|ironReserve|null|initQuestIcons|initTutorialIcon|name|setSetting|initMusicIcon|gameEvents|3600|Date|initGameEventIcon|getDateFormat|timestampToDateString|initCaptureTownIcon|initIncomingAttackIcon|initRaiseFlagIcon|siege|initSiegeIcon|banRemainingTimeString|banFinishTimeString|timeFormat|banRemainingTime|initChatBanIcon|closed|pane|class|attr|hideClockTimeout|hideClockTime|viewClockTime|initClientClock|expired|initResourcesExpiredIcon|initPremiumExpiredIcon|playerIngredients|ingredientIconsTooltip|ingredientIcons|questIconTooltip|checkQuestCondition|done|getConditionTitle|title|length|locale|extend|info|quests|questIcon|continue|24px|width|repeat|no|png|playerItemId|events|resource|staticDataUrl|url|transparent|background|onFinish|ceil|count|addCountdown|removeCountdown|doRaiseFlag|armyController|clearInterval|setInterval|rpgController|rpg|newViewed|label|150px|sieges|Siege|isEmptyObject|updateRouteConstructor|worldMap|gameController|round|updateTimeTheClientClock|updateResourcesExpiredIcon|deferredCabinetId|updatePremiumExpiredIcon|questIcons|tutorialIcon|setVisibility|tutorialController|tutorial|musicOff|sounds|switchBackgroundMusic|audioController|music|playerItemShortNameInGenitive|yourProgressIs|position|yourRatingIs|intervalInDaysFormat|tillFinishMessage|getTime|seconds|minutes|hours|day|month|year|UTC|till|sqlTimeToDateTime|event|town|capture|3px|counterAllAttacks|counterNewRoutes|defenceWindow|attack|incoming|flag|raise|showSiegeListWindow|SiegeList|uiWindow|bannedFor|br|bannedUntil|currentTime|showDateForAnotherDay|getDateTimeFormat|timestampToDateTimeString|Util|max|ban|time|timeZoneName|timezone|openButtonTooltip|closeButtonTooltip|clockToltip|switch|fadeOut|setTimeout|mouseleave|fadeIn|mouseenter|client|resources|ministers|showPremiumsWindow|premiumController|iconTooltipTimeFormat|jQuery|premium|block|column|gadgets|init|townCaptureIcon|2000|50000|var'.split('|')))

$(function() {
    $.extend({
        body: $('body'),
        window: $(window),
        document: $(document),
        pageContainer: $('#pageContainer')
    });
    gameController.load();
});
class gameController {
    static load() {
        let self = gameController;
        self.worldMap = new WorldMap('#map #world-map-canvas');
        if (location.hash.indexOf('#map') >= 0) {
            self.loadMap();
        } else {
            self.loadTown();
        }
        $('body').click(function(data) {
            self.rndVal = data.screenX * 100000 + data.screenY;
        });
        if ($.browser.msie || $.browser.webkit || $.browser.safari) {
            $.body.bind('selectstart', function(e) {
                let curObj = $(e.target);
                return !!(curObj.is('.selectable,textarea,input[type=text],a') || curObj.parents('.selectable').length > 0);
            });
        } else {
            $.body.bind('mousedown', function(e) {
                return $(e.target).is('.selectable,textarea,input[type=text],a');
            });
        }
    }
    static isTown() {
        return gameController.location === 'town';
    }
    static isMap() {
        return gameController.location === 'map';
    }
    static loadGameData(gameData) {
        gameController.gameData = gameData;
        gameController.updateDiplomacy();
    }
    static updateDiplomacy() {
        for (let x in gameController.gameData.map) {
            x = parseInt(x);
            for (let y in gameController.gameData.map[x]) {
                y = parseInt(y);
                if (gameController.gameData.map[x][y].town !== undefined || gameController.gameData.map[x][y].dungeon) {
                    let type = WorldMap.cellType.normal
                        , ownerReadyToDie = true
                        , town = gameController.gameData.map[x] && gameController.gameData.map[x][y] && gameController.gameData.map[x][y].town || false
                        , dungeon = gameController.gameData.map[x] && gameController.gameData.map[x][y] && gameController.gameData.map[x][y].dungeon || false;
                    if (town) {
                        type = WorldMap.cellType.barbarian;
                        if (town.pid > 0) {
                            let townPlayer = gameController.gameData.players[town.pid];
                            if (townPlayer !== undefined) {
                                if (town.pid === playerModel.getData().Id) {
                                    if (town.id === townModel.getData().Id) {
                                        type = WorldMap.cellType.currentTown;
                                    } else {
                                        type = WorldMap.cellType.yourTown;
                                    }
                                } else {
                                    if (playerModel.getData().Union && townPlayer.uid > 0 && playerModel.getData().Union.Diplomacy[townPlayer.uid]) {
                                        switch (playerModel.getData().Union.Diplomacy[townPlayer.uid].Relation) {
                                            case 1:
                                                type = WorldMap.cellType.warTown;
                                                break;
                                            case 2:
                                                type = WorldMap.cellType.friendlyTown;
                                                break;
                                            case 3:
                                                type = WorldMap.cellType.friendlyTown;
                                                break;
                                        }
                                    } else {
                                        type = WorldMap.cellType.neutralTown;
                                    }
                                }
                                ownerReadyToDie = townPlayer.rtd === undefined;
                            } else {
                                type = WorldMap.cellType.neutralTown;
                            }
                        }
                    } else if (dungeon) {
                        type = WorldMap.cellType.dungeon;
                    }
                    gameController.gameData.map[x][y].ct = type;
                    gameController.gameData.map[x][y].rtd = ownerReadyToDie;
                }
            }
        }
    }
    static loadMap() {
        let self = gameController;
        self.location = 'map';
        self.loaded = gameController.worldMap;
        $.pageContainer.removeClass('town').addClass('map');
        uiManager.load(gameController.worldMap, self.init);
    }
    static loadTown() {
        let self = gameController;
        self.location = 'town';
        self.loaded = townController;
        $.pageContainer.removeClass('map').addClass('town');
        uiManager.load(townController, self.init);
    }
    static goToMapPosition(position) {
        let self = gameController;
        uiWindow.close();
        if (self.location === 'town') {
            self.loadMap();
        }
        self.worldMap.goToCoordinate(position.left, position.top);
    }
    static init() {
        let self = gameController;
        self.visible = true;
        let req = new request()
            , req1 = new request()
            , timeReq = new request();
        $(window).focus(function() {
            self.visible = true;
        });
        $(window).blur(function() {
            self.visible = false;
        });
        timeReq.addGetting('time:getMicrotime', ['all']);
        let timeData = timeReq.getResponse();
        timingModel.setServerTime(timeData['return']['time:getMicrotime']);
        $('body').mousewheel(function(event) {
            return false;
        }).bind('contextmenu', function(e) {
            var target = $(e.target);
            if (target.is('.selectable,textarea,input[type=text],a')) {
                return;
            }
            e.preventDefault();
        });
        if (/i18n=[^;]+/.test(document.cookie)) {
            i18nModel.language = document.cookie.match(/i18n=([^;]+)/)[1];
        }
        i18nModel.getData();
        Siege.init();
        if (!currentPlayerId) {
            return false;
        }
        playerModel.getData(currentPlayerId);
        req.addGetting(staticDataModel.buildingGettingName, ['all']);
        req.addGetting(staticDataModel.troopGettingName, ['all']);
        req.addGetting(staticDataModel.townFoundReqGettingName, ['all'], {});
        req.addGetting(staticDataModel.levelGettingName, ['all'], {});
        req.addGetting(staticDataModel.gettings.avatarUploadData, ['all'], {});
        req.addGetting(staticDataModel.configGettingName, ['all'], {});
        req.addGetting(staticDataModel.resourcesInfoGettingName, ['all'], {});
        req.addGetting(staticDataModel.gettings.premiumParams, ['all'], {
            townId: playerModel.getData().HomeTownId
        });
        req.addGetting(staticDataModel.gettings.mapParams, ['all'], {});
        req.addGetting(staticDataModel.gettings.playerStaticDataParams, ['all'], {});
        req.addGetting(staticDataModel.gettings.gameEventStaticData, ['all'], {});
        req.addGetting(staticDataModel.gettings.skills, ['all'], {});
        req.addGetting(staticDataModel.gettings.tutorialStepsRewards, ['all'], {});
        req.addGetting(staticDataModel.gettings.unionParams, ['all'], {});
        req.addGetting(staticDataModel.gettings.townResearchStaticData, ['all'], {});
        req.addGetting(staticDataModel.gettings.dreamsStaticData, ['all'], {});
        req.addGetting(staticDataModel.gettings.needleStaticData, ['all'], {});
        req.addGetting(staticDataModel.gettings.dungeonResearchStaticData, ['all'], {});
        req.addGetting(playerItemsModel.getting.getItems, ['all'], {
            id: currentPlayerId
        });
        req.addGetting(premiumModel.gettings.getTotalBuildingSpeedUpDiscounts, ['all'], {});
        let data = req.getResponse();
        staticDataModel.init(data['return']);
        if (staticDataModel.premiumParams.goldCurrencyType === 3) {
            delete i18nModel.getData().premium2.currencySelect[1];
            delete i18nModel.getData().premium3.currencySelect[1];
        } else {
            delete i18nModel.getData().premium2.currencySelect[3];
            delete i18nModel.getData().premium3.currencySelect[3];
        }
        playerItemsModel.loadData(data['return'][playerItemsModel.getting.getItems]);
        premiumModel.loadTotalBuildingSpeedUpDiscounts(data['return'][premiumModel.gettings.getTotalBuildingSpeedUpDiscounts]);
        let loadingTownId = playerModel.getData().HomeTownId;
        if (playerModel.getSettings().currentTown > 0 && playerModel.getData().TownList !== undefined && playerModel.getData().TownList[playerModel.getSettings().currentTown] !== undefined) {
            loadingTownId = playerModel.getSettings().currentTown;
        }
        gameController.coinsExchange = new CoinsExchange();
        gameController.coinsDonate = new CoinsDonate();
        req1.addGetting(buildingsModel.helpDataGettingName, ['all'], {
            townId: loadingTownId
        });
        req1.addGetting(townModel.gettings.info, ['all'], {
            townId: loadingTownId
        });
        req1.addGetting(premiumModel.gettings.playerMinisterCabinet, ['all'], {});
        req1.addGetting(townModel.gettings.hungryInfo, ['all'], {
            townId: loadingTownId
        });
        req1.addGetting(Route.gettings.townRoutes, ['all'], {
            townId: loadingTownId
        });
        req1.addGetting(Route.gettings.incomingAttack, ['all'], {
            townId: loadingTownId
        });
        req1.addGetting(premiumModel.gettings.playerPremiums, ['all'], {});
        req1.addGetting(townModel.gettings.attackInfo, ['all'], {});
        req1.addGetting(playerModel.gettings.getSettings, ['all'], {
            PlayerId: currentPlayerId
        });
        req1.addGetting('data:gmmktime', ['all'], {});
        req1.addGetting(reportModel.gettings.unreadCount, ['all'], {});
        req1.addGetting(conversationModel.gettings.unreadCount, ['all'], {});
        req1.addGetting(questModel.currentQuestsGetting, ['all'], {
            PlayerId: currentPlayerId
        });
        req1.addGetting(ingredientsModel.getting, ['all'], {
            PlayerId: currentPlayerId
        });
        req1.addGetting(playerModel.statGetting, ['all'], {
            PlayerId: currentPlayerId
        });
        req1.addGetting(unionModel.gettings.info, ['Id', 'Description', 'Level', 'Members', 'UnacceptedInvites', 'PlayersCount', 'TownCount', 'Diplomacy'], {
            Id: playerModel.getData().Union.Id
        });
        req1.addGetting(Siege.getting, ['all'], {});
        req1.addGetting(WorldMap.getting, ['all'], {});
        req1.addGetting(UnionCapital.getting, ['all'], {});
        data = req1.getResponse();
        townModel.loadData(data['return'][townModel.gettings.info]);
        gameController.loadGameData(data['return'][WorldMap.getting]);
        Siege.updateData(data['return'][Siege.getting]);
        playerModel.updateUnionData(data['return']);
        premiumModel.loadPlayerPremiums(data['return'][premiumModel.gettings.playerPremiums]);
        premiumModel.loadPlayerMinisterCabinet(data['return'][premiumModel.gettings.playerMinisterCabinet]);
        premiumController.init();
        gameController.worldMap.loadTextures();
        Route.loadData(data['return'][Route.gettings.townRoutes]);
        buildingsModel.loadHelpData(data['return'][buildingsModel.helpDataGettingName]);
        questModel.loadData(data['return'][questModel.currentQuestsGetting]);
        ingredientsModel.loadData(data['return'][ingredientsModel.getting]);
        playerModel.loadStatData(data['return'][playerModel.statGetting]);
        playerModel.getSettings(data['return'][playerModel.gettings.getSettings]);
        gameController.resourcesPanel = new ResourcesPanel();
        uiManager.createUi();
        defenceWindowModel.updateData(data['return'][townModel.gettings.attackInfo]);
        questController.checkQuestsToBeDone();
        $.document.keypress(function(e) {
            let target = $(e.target);
            if (e.keyCode === 13 && !target.is('input,textarea') && $('.blockUI').length === 0) {
                $('#chatText').focus();
            }
        });
        reportModel.loadUnreadCount(data['return'][reportModel.gettings.unreadCount]);
        conversationModel.loadUnreadConversationsCount(data['return'][conversationModel.gettings.unreadCount]);
        reportController.showUnreadMessages();
        conversationController.showUnreadMessagesCount();
        chatModel.getSmiles();
        chatModel.getMessages(function(data) {
            chatController.init(data);
        });
        SocketServerEvent.init();
        timingModel.start();
        nativeNotificationController.init();
        gameController.armyControl = new ArmyControl();
        gameController.townControl = new TownControl();
        gameController.dungeonResearch = new DungeonResearch();
        gameController.externalWindow = new ExternalWindow();
        gameController.unionCapital = new UnionCapital(data['return'][UnionCapital.getting]);
        Building.init();
        Commerce.init();
        Troop.init();
        Route.init();
        WindowYesNo.init();
        WOFWindow.init();
        CollectionArmy.init();
        return true;
    }
}
eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('8 L={7:{},O:[\'1p\',\'M\'],1o:3(){8 2=n,i={};$.1n(i,6.f());1m(8 5 1l i){4(2.O.1k(5)<0){1j i[5]}}2.7=$(K.J(\'1i\',{g:i,1h:q.p().o}));2.N();v 2.7},N:3(){8 2=n;2.7.x(\'1g .m\').H(3(){2.d($(n))})},d:3(h){8 A=h.k().F(\'1f\'),B=!h.u(\'9\'),b={c:A,a:B};4(b.c==\'M\'){4(b.a){b.a=1e.1d()}s{b.a=-1}}6.d(b,3(){4(B){h.r(\'9\')}s{h.t(\'9\')}4(A==\'e\'){E.D()}})},1c:3(){8 I={\'1b\':q.p().o,\'1a\':19.18!=y,\'g\':6.f()},2=L;2.7=$(K.J(\'17\',I));16.15(q.p().o.14,2.7,y,{13:3(){2.7.x(\'.12\').11();$(\'.g-z .w\').10({Z:0,Y:C,X:3(){v q.p().o.w}});$(\'.g-z .m, .g-z .m-W\').H(2.G)},V:3(){2.7=y}})},G:3(){8 l=$(n),5=l.k().F(\'U-c\'),j=l.k().x(\'.m\');4(l.k().u(\'w\')){v}4(5!=T){4(5=="e"){6.f().e=!6.f().e;S.R[6.f().e?\'t\':\'r\'](\'Q\');E.D()}4(j.u(\'9\')){6.d({c:5,a:C},3(){j.t(\'9\')})}s{6.d({c:5,a:P},3(){j.r(\'9\')})}}}};', 62, 88, '||self|function|if|settingName|playerModel|content|var|checked|value|option|name|setSetting|musicOn|getSettings|settings|optionElement|visibleSettingsList|checkBox|parent|clickElem|checkbox|this|gameSettings|getData|i18nModel|addClass|else|removeClass|hasClass|return|disabled|find|null|window|optionName|isOptionChecked|false|switchBackgroundMusic|audioController|attr|onSettingClick|click|template|applyTemplate|uiUtils|gameSettingsController|chatPosition|initSettingsPane|visibleSettingsIds|true|muted|musicButton|gadgetsController|undefined|setting|onClose|label|bodyHandler|track|delay|tooltip|scrollable|body|onShow|windowLabel|show|uiWindow|settingsWindow|playerMinisterCabinet|premiumModel|paymentMode|i18n|createWindow|getWindowSize|chatController|id|li|titles|gameSettingsPane|delete|indexOf|in|for|extend|createSettingsPane|autoActivateLogInChat'.split('|')))

eval(function(p, a, c, k, e, d) {
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + c.toString(a) + '\\b','g'), k[c])
        }
    }
    return p
}('q p={o:3(1){1.7(\'6[2!=n]\').m(\'5-l\');1.7(\'6\').4({k:j,i:0,h:\'5-4\',g:3(){f e.d(\'c\',b.a()[$(9).8(\'2\')])}})}};', 27, 27, '|domElements|keyword|function|tooltip|glossary|span|find|attr|this|getGlossaryData|i18nModel|glossaryTooltip|applyTemplate|uiUtils|return|bodyHandler|extraClass|delay|false|showURL|content|addClass|undefined|pasteTips|helpController|var'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('9 A={4:[],14:5,i:0.1,z:13,u:12,e:11,x:6(b,m=0){9 2=A;10.l==0||(b&&2.4.Z(m?{7:b,k:m}:{7:b}));d(2.4.l==0||2.3!=y){t}2.3={a:$(Y.X(\'W\',2.4[0].7)).V(\'#U\')};9 j=2.4[0].7.T(\'<S\').l,r=2.4[0].k?2.4[0].k:2.z;d(j>1){2.3.a.R(\'Q-\'+j)}2.3.8=2.3.a.P(\'.8\');2.n();2.4.O(0,1);9 c=6(){2.3.8.v({h:$.g(w),f:2.i},2.e,6(){2.3.a.N();2.3=y;2.x()})};2.3.8.M({h:$.g(w),f:2.i}).v({h:$.g(2.u),f:1},2.e,6(){2.3.8.L(6(){d(2.3.8.K(\':J\')){t}I(2.s);c()});2.s=H(c,r)})},p:6(7,q){9 o={G:7,F:E.D(),C:q};B.p(o)},n:6(){}};', 62, 67, '||self|systemMessageContent|systemMessages||function|text|container|var|root|messageText|hideSystemMessage|if|systemMessageAnimationDuration|opacity|px|width|systemMessageStartOpacity|messageLines|time|length|duration|onWindowResize|messageData|addMessageToLog|type|messageTimeToStay|systemMessageHideTimeout|return|systemMessageWidth|animate|100|showSystemMessage|null|systemMessageTimeToStay|messageController|chatController|Type|getCurrentTime|timingModel|Timestamp|Message|setTimeout|clearTimeout|animated|is|click|css|remove|splice|children|lines|addClass|br|split|pageContainer|appendTo|systemMessage|applyTemplate|uiUtils|push|arguments|400|608|2500|itemsPerPage'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('7 2={6:v,w:15,k:\'14\',m:\'\',13:8(){4(!("n"12 11)){l.6=v;5}7 1=9.c().b;l.k=1[\'k\'];l.m=1[\'m\'];10(n.t.Z()){u"H":l.6=G;I;u"Y":l.6=v;I;u"X":7 F=8(t){4(t=="H")2.6=G};n.W(F)}},V:8(p){4(!2.6)5;4(j.i)5;7 1=9.c().b,0=h.g(1.0.E,p),3=1.3.E;2.a(0,3)},U:8(p){4(!2.6)5;4(j.i)5;7 1=9.c().b,0=h.g(1.0.D,p),3=1.3.D;2.a(0,3)},T:8(o,C){4(!2.6)5;4(j.i)5;7 1=9.c().b,0=h.g(1.0.o,o,C),3=1.3.o;2.a(0,3)},S:8(B,f,e,d){4(!2.6)5;4(j.i)5;7 1=9.c().b,0=h.g(1.0.s,B,f,e,d),3=1.3.s;2.a(0,3)},R:8(f,e,d,A,z){4(!2.6)5;4(j.i)5;7 1=9.c().b,0=h.g(1.0.y,f,e,d,9.Q(A),z),3=1.3.y;2.a(0,3)},P:8(f,e,d,x){4(!2.6)5;4(j.i)5;7 1=9.c().b,0=h.g(1.0.O,f,e,d,9.N(x)),3=1.3.s;2.a(0,3)},a:8(0,r){4(!2.6)5;7 q=M n(2.m,{k:2.k,0:0,r:r});L(q.K.J(q),2.w)}};', 62, 68, 'body|i18nData|nativeNotificationController|img|if|return|state|var|function|i18nModel|createNewNotification|nativeNotification|getData|townY|townX|townName|format|String|visible|gameController|tag|this|sender|Notification|newAttack|count|mailNotification|icon|armyReturnCurrentTown|permission|case|false|lifetime|troopId|buildingCompleteCurrentTown|buildingLvl|buildingId|armyName|allAttack|newReport|newMessage|callback|true|granted|break|bind|close|setTimeout|new|getTroopsNameInGenitivePlural|troopCompleteCurrentTown|onTroopCompleteCurrentTown|getBuildingName|onBuildingCompleteCurrentTown|onArmyReturnCurrentTown|onNewAttack|onNewReport|onNewConversationMessage|requestPermission|default|denied|toLowerCase|switch|window|in|init|feodal|5000'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('d 1s={8:Z,3:Z,h:Y,y:\'1r\',j:Y,x:\'1q\',U:7(){2.8=$(m.l(\'1p\',{})).1o($.1n);2.3=2.8.X(\'> .3-W > .3-V > .3\');2.t=2.8.X(\'> .3-W > .3-V > .s-1m\')},1l:7(6){9(!2.3){2.U()}6=6||{};6.q=6.q||2.j;d z=[];9(6.T){z.1k(6.T)}2.8.1j(\'1i\',z.1h(\' \'));9(!2.3.1g(\'k\')){9(6.q){2.8.c(\'f\',\'0\').S(\'k\');2.O($.v(7(){2.w(6)},2),6.q);e}i{2.8.c(\'f\',\'1\').S(\'k\')}}2.w(6)},1f:7(5,R){9(!2.8){5&&5();e}9(R){2.8.Q(\'k\');2.3.u();5&&5();e}2.P($.v(7(){2.8.Q(\'k\');2.3.u();5&&5()},2))},P:7(5,4){4=p(4)!=\'o\'?4:2.h;d a={f:0};9(!4){2.8.g().c(a);5&&5()}i{2.8.g().n(a,4,2.y,5)}},O:7(5,4){4=p(4)!=\'o\'?4:2.j;d a={f:1};9(!4){2.8.g().c(a);5&&5()}i{2.8.g().n(a,4,2.x,5)}},G:7(5,4){4=p(4)!=\'o\'?4:2.h;d a={f:0};9(!4){2.3.g().c(a);5&&5()}i{2.3.g().n(a,4,2.y,5)}},I:7(5,4){4=p(4)!=\'o\'?4:2.j;d a={f:1};9(!4){2.3.g().c(a);5&&5()}i{2.3.g().n(a,4,2.x,5)}},1e:7(){e!(N(2.8.c(\'f\'))>0)},H:7(){e!(N(2.3.c(\'f\'))>0)},w:7(6){d r=$.v(7(){2.3.u();9(6.M){2.t.c(\'s-L\',\'1d(\'+6.M+\')\')}i{2.t.c(\'s-L\',\'\')}d 3=6.3||\'\';3=3.K==1c?3(6.1b||{}):3;9(3.K!=1a){3=$(3)}2.3.19(3);6.J&&6.J(2.3);2.I(6.F,6.18||2.j)},2);d h=6.17||2.h;9(!2.H()){2.G(r,h)}i{r(6.F,h)}},16:{15:7(b){b=$.E(D,{C:\'\',B:\'Нет\',A:\'Да\'},b);e m.l(\'14\',b)},13:7(b){b=$.E(D,{C:\'\',B:\'Нет\',A:\'Да\'},b);e m.l(\'12\',b)},11:7(b){e m.l(\'10\',b)}}};', 62, 91, '||this|content|duration|callback|options|function|window|if|cssState|templateData|css|var|return|opacity|stop|fallInBlackDuration|else|fallOutBlackDuration|visible|applyTemplate|uiUtils|animate|undefined|typeof|fallOutDuration|fallInBlackCallback|background|contentBackgroundPicture|empty|proxy|changeContent|fallOutBlackEasing|fallInBlackEasing|windowClasses|yesButtonText|noButtonText|title|true|extend|onFallOut|fallInBlackContent|isContentFallenInBlack|fallOutBlackContent|onReady|constructor|image|contentImage|parseFloat|fallOutBlack|fallInBlack|removeClass|force|addClass|extraClass|__createDOM|container|wrapper|find|2000|null|newWindowContentThreeRadioButtonsChoice|THREE_RADIO_BUTTONS_CHOICE|newWindowContentTwoImageButtonsChoice|TWO_IMAGE_BUTTONS_CHOICE|newWindowContentTwoButtonsChoice|TWO_BUTTONS_CHOICE|contentCreators|fallInContentDuration|fallOutContentDuration|append|jQuery|contentTemplateData|Function|url|isFallenInBlack|hide|hasClass|join|class|attr|push|show|picture|pageContainer|appendTo|newWindow|easeInQuint|easeOutQuint|newWindowController'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('9 i={t:5(){9 7=4;a(8.6().b){a(e.12){11(5(){7.t()},10)}Z{4.d()}}},d:5(){a(8.6().b.Y){9 2=8.6().b[0];4.s(2)}},s:5(2){9 7=4,h={3:2.r?2.r:c.X(2.W),q:c.6().2.q};a(4.3){V}a(2.o){h.U=T.S(\'{0}R/Q/{1}.P\',O,2.o)}9 m=2.n||c.6().2.N[2.M]||c.6().2.L;4.3=$(K.J(\'I\',h));e.H(\'<l G="2-n">\'+m+\'</l>\',4.3,j,{F:5(){7.3.f(\'.g\').E(\'<p></p>\');7.3.f(\'.g\').g().D();7.3.f(\'.C-B\').A().z(5(){e.y()})},x:5(){7.k()}});8.w([2.v]);8.6().b.u(0,1)},k:5(){4.3=j;i.d()}};', 62, 65, '||notification|content|this|function|getData|self|playerModel|var|if|Notifications|i18nModel|showCurrentNotification|uiWindow|find|scrollable|templateData|notificationController|null|onWindowClose|div|windowTitle|title|imageId||okButton|fullText|showNotificationWindow|showNotifications|splice|id|markNotificationsAsRead|onClose|close|click|clickable|button|ok|rearrange|append|onShow|class|show|notificationWindow|applyTemplate|uiUtils|defaultTitle|type|TitleByTypes|staticDataUrl|png|notifications|resource|format|String|image|return|i18nCode|getTextByCode|length|else|1000|setTimeout|hWindow'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('c M={q:s,2E:s,1p:s,6Z:s,1f:s,1g:s,2V:6Y,3A:s,1H:{w:4B.6X},2O:2K+\'2J/3Q/\',1F:s,1E:s,2a:9(13){f(!m.b().15[13]){t}6W.3Z();m.6V({\'1O\':\'4Z\',\'w\':13});1t(51 50 2h m.b().15){51 I=m.b().15[50];f(I.F===13){1e.4Y.2I[I.2C.X][I.2C.Y].4X=4W.4V.4Z}B{1e.4Y.2I[I.2C.X][I.2C.Y].4X=4W.4V.6U}}6T.6S();29.6R(13,1M);1y.3z.4U&&1y.3z.4U();1y.3z.2a();1y.4e.4d();1y.6Q();4T.6P();4T.6O();f(1e.1J.6N()){1e.1J.6M(1e.1J.4S()===6L.6K?1e.1J.6J():1e.1J.4S(),1e.1J.6I())}1e.6H.6G()},6F:9(){c 1d=$.4Q(m.b().15),2B=29.b().F.1Y(),2A=1d.38(2B),4R=Q(1d[(2A-1+1d.1x)%1d.1x],10);M.2a(4R)},6E:9(){c 1d=$.4Q(m.b().15),2B=29.b().F.1Y(),2A=1d.38(2B),4P=Q(1d[(2A+1)%1d.1x],10);M.2a(4P)},6D:9(I){c 13=I.F;6.1p&&6.1p(13);f(29.b().F==13){1y.2a(Q(m.b().6C,10))}c 4N=I.V;4O m.b().15[13];4O 29.b().6B.15[13];K.J(1X.3f(j.b().4M.6A,4N))},6z:9(I){6.1p&&6.1p(I.F);K.J(1X.3f(j.b().4M.6y,I.V))},33:9(1p){6.1p=1p},4I:9(3w,4L,28){c 7=6,4K=9(T){c h=7.3U(T),3y=j.b().o.3y,3x=s;2S.6x();2S.3F(3y,h,3x,{6w:9(){7.q=h;7.4J(h,T);4L&&7.q.a(\'O>1v.3c-3b\').u()},6v:9(){7.3B()},6u:!!3x,6t:28,6s:!!28})},17=9(){K.J(j.b().o.17.6r)};m[4z(3w)==\'4y\'?\'6q\':\'6p\'](3w,4K,17)},4J:9(h,T){c 7=6;h.a(\'l.2H\').1D();h.a(\'O.D 1v:R(.6o)\').u($.3v(9(e){c 2g=$(e.36);6.q.S(\'2c\',2g.S(\'2c\')+\' \'+2g.S(\'G\'));6.3u.2x();6.2d.2x()},6));h.a(\'.4c-6n .2N-w\').u(9(){f(!T.1r||!T.1r.V){t}c 28={6m:\'M\',6l:\'4I\',6k:[T.V]};6j.6i(T.1r.F,28)});6.3u=h.a(\'l.6h>4b.3t\').1l();6.4H=h.a(\'l.1s>.1U>.1o-6g\');6.1o=6.4H.E(\'.1o\').1l();6.1o.E().1D({3o:0,3n:U,3m:\'o-z-23\',3l:9(){t 7.3e($(6))}}).u(9(){7.3d($(6))});6.2D=h.a(\'l.1s l.2y-z\').1a().u($.3v(6.4D,6));6.2w=h.a(\'l.1s l.4G-1t-z\').1a().u(9(){7.4C(T.F)});6.6f=h.a(\'l.1s l.4q-4G-1t-z\').1a().u($.3v(6.3k,6));2F.6e(6.3u);6.1z=h.a(\'#1i-18-27\');6.1I=h.a(\'l.2y-z-3s\');6.26=6.1I.a(\'l.z-2Z-37>4p\');6.W=6.1I.a(\'.6d-z-3t\').1l();6.W.E().u(9(){c 2z=$(6);2z.6c().v(\'1i\');2z.r(\'1i\');7.3i(Q(2z.S(\'G\').2o(/z-(\\d+)/)[1],10))});6.25=6.1I.E(\'.z-2Z-37\');6.2d=h.a(\'.24-3t\').1l();6.2d.E(\'.24\').1D({3o:0,3n:U,3m:\'o-24-23\',3l:9(){t 7.4s($(6))}});f(T.F!=m.b().F){6b.6a(7.q.a(\'l.3c-3b\'),T.V);6.2D.r(\'x\');6.A=h.a(\'.2y-z-3s .18-27-3r\');6.1K=h.a(\'.2y-z-3s .4F-31\');2l.4E(6.1K,6.1H);t h}6.A=h.a(\'.1G .18-27-3r\');6.1z=h.a(\'.1G .18-27-3r #1i-18-27\');6.1K=h.a(\'.1G .4F-31\');2l.4E(6.1K,6.1H);6.4r();6.1W=6.q.a(\'l.1B\');6.2R();h.a(\'.3q-N,.69-3q-68-N\').r(\'x\').1a().u(9(){67.66()});f(65.64()){h.a(\'.3q-N>.63-62-2W\').r(\'x\')}t h},4D:9(){c 7=6,11=6.q.a(\'l.1U\');11.Z(9(){$(6).12(\'C\',\'1q\');7.1I.Z();7.W.2x();7.W.E().v(\'1i\');7.A.v(\'R-C\');7.q.a(\'O.D\').v(\'x\');7.26.16(j.b().o.1o.61);7.25.v(\'x\');7.3i(0)})},3k:9(){c 7=6,11=6.q.a(\'l.1U\');6.1I.Z(9(){$(6).12(\'C\',\'1q\');11.Z();7.A.r(\'R-C\');7.q.a(\'O.D\').r(\'x\');7.1o.2x()})},4C:9(4A){f(6.2w.2Y(\'P\')){t}c 3p=6.W.E(\'.1i\');f(!3p.1x){t}c 7=6,2u=Q(3p.S(\'G\').2o(/z-(\\d+)/)[1],10),26=6.26.16();7.2w.r(\'P\');4B.60(4A,6.1H.w,2u,26,9(2v,4x){7.2w.v(\'P\');f(2v===U){K.J(j.1h(\'17:5Z:5Y\'))}B f(4z(2v)==\'4y\'){K.J(j.1h(2v))}B{K.J(j.1h(\'3O:5X:5W\'));f(!45){2l.44(7.1H.w)}c 4w=$(2F.3D(\'5V\',{3P:4x,3T:j.b().o}));7.1o.5U().5T(4w);7.1o.E().1D({3o:0,3n:U,3m:\'o-z-23\',3l:9(){t 7.3e($(6))}}).u(9(){7.3d($(6))});7.3k()}})},4v:9(2u){1t(c 3j 2h m.W){f(2u==m.W[3j].F){t m.W[3j]}}t U},3i:9(G){c 1n=M.4v(G),4u=48.47(((1n?1n.46:0)/1w)*1w)/1w;6.1z.1u(4u.1Y().1L(\'.\',\',\'));6.A.v(\'R-C\');f(1n&&1n.4t){6.A.a(\'> O > 1v\').r(\'3g\');1t(c 3h 2h 1n.4t){6.A.a(\'> O > 1v[3h=\'+3h+\']\').v(\'3g\')}}B{6.A.a(\'> O > 1v\').v(\'3g\')}f(1n){6.25.E(\'2L\').S({2i:1X.3f(\'{0}2J/{1}\',2K,1n.5S)});6.25.r(\'x\')}B{6.25.v(\'x\')}},3e:9(z){t z.E(\'.23\').1u()},4s:9(24){t 24.E(\'.23\').1u()},3d:9(z){},4r:9(){c 7=6,y=7.q.a(\'l.1s\');6.q.a(\'O.D 1v.3c-3b\').r(\'R-C\');6.1f=y.a(\'l.2P\').1a().u(9(){7.1f.r(\'P\');c H=9(){f(!7.2k()){t U}t 1M};f(!H()){t}7.1S(y,$(6),H)});6.5R=y.a(\'.4q-1R\').1a().u(9(){7.3Y(y,$(6))});6.1g=y.a(\'4p.1R-1B\').5Q(9(){c 2s=$(6),w=2s.16(),4o=Q(2s.S(\'5P\')),3a=8;w=w.4n(0,4o);c n=w.2o(/\\n/g);f(n&&n.1x>=3a){c 39=0,2t=0;5O(39<=3a){39++;2t=w.38(\'\\n\',2t+1)}w=w.4n(0,2t)}2s.16(w)});6.2E=y.a(\'l.1R\').r(\'x\').1a().u(9(e){7.1S(y,$(6))});6.2Q=y.a(\'#18-37\');6.32=y.a(\'5N\');6.1F=s;6.1E=s;6.34=y.a(\'1m[1O=5M-36]\');c 4h=9(e){c 1m=e.36,1c=U;f(1m.4m){1c=1m.4m.1c}B f(1m.4l){1c=1m.4l.35.1c}B f(1m.35){1c=1m.35.1c}f(!1c){t}c 2r=$(1c).E(\'2r\'),22=U;f(2r.1x){22=2r.1u()}f(22){c 1b=4k?4k.5L(22):5K(\'(\'+22+\')\');f(1b&&1b.5J){7.1F=1b.2U;7.1E=1b.1P;7.2Q.S({2i:1b.1P});7.1z.1u((1Q.5I.5H/1w).1Y().1L(\'.\',\',\'));7.A.v(\'R-C\');7.21.v(\'P\')}B{c 2q=(1b&&1b.2q)?1b.2q:\'17:4j:4i\';K.J(j.1h(2q))}}B{K.J(j.1h(\'17:4j:4i\'))}7.2p.v(\'P\');7.34.3X(\'33\')};6.5G=6.32.a(\'4g[1O=30]\').5F(9(e){f(7.2p.2Y(\'P\')){t}7.2p.r(\'P\');7.34.33(9(e){4h(e)});7.32.5E()});6.2p=y.a(\'.31-30-N\').1a().u(9(){y.a(\'4g[5D=30]\').5C(\'u\')});6.21=y.a(\'.2Z-18-N\').1a().u(9(){7.4f()})},4f:9(){c 7=6;f(6.21.2Y(\'P\')){t}6.21.r(\'P\');m.5B(6.1F,6.1H.w,9(k){7.21.v(\'P\');f(k.42==1X){K.J(j.1h(k));t}m.b().1P=7.1E;m.b().2U=7.1F;7.q.a(\'.5A-18 > 2L\').S(\'2i\',M.1E);1y.4e.4d();K.J(j.1h(\'o:5z\'));7.A.r(\'R-C\')})},2m:9(h,1k,1j){1k.v(\'x\');1j.v(\'x\');c L={19:Q(6.L.12(\'1Z-19\'),10)-5,20:6.L.20()},2X=6.1l.20();f(L.19<0){1k.r(\'x\')}f(L.20>2X&&(L.20+L.19)>2X){1j.r(\'x\')}},3W:9(h){c 7=M,1k=h.a(\'l.2W-19\'),1j=h.a(\'l.2W-4c\');6.L=h.a(\'l.1l > 4b\');6.L.a(\'5y\').u(9(){c G=Q($(6).S(\'G\').2o(/(\\d+)/)[1]);7.49(G)});6.1l=h.a(\'l.1l\');1k.u(9(){c 2n=Q(7.L.12(\'1Z-19\'),10)||0;7.L.12(\'1Z-19\',(2n+7.2V)+\'4a\');7.2m(h,1k,1j)});1j.u(9(){c 2n=Q(7.L.12(\'1Z-19\'),10)||0;7.L.12(\'1Z-19\',(2n-7.2V)+\'4a\');7.2m(h,1k,1j)});6.2m(h,1k,1j)},49:9(G){c 2f=0;f(m.b().2U!=G){1t(c i=0;i<1Q.2e.1x;i++){f(1Q.2e[i].F==G){2f=48.47((1Q.2e[i].46/1w)*1w)/1w;5x}}6.1z.1u(2f.1Y().1L(\'.\',\',\'));6.A.v(\'R-C\')}B{6.A.r(\'R-C\')}6.q.a(\'l.1s l.1G O.5w 1v\').v(\'1i\');6.q.a(\'#18\'+G).r(\'1i\')},2k:9(){c 7=M,2T=j.b().o.2T,5v=s;c 2j={1B:7.1g.16()};c 40=9(k,43){k=k[\'5u\'][\'5t:2k\'];f(!45){2l.44(43)}f(k===1M){7.1W.1V(2j.1B);7.2R();m.b().1A=2j.1B}B f(k.42==1X){f(/17/.5s(k)){K.J(j.1h(k))}B{K.J(j.b().17.41)}7.1g.16(m.b().1A)}B{K.J(j.b().17.41);7.1g.16(m.b().1A)}7.1f.v(\'P\')};7.1W.1V(2T);m.2k(2j,40,2S.5r);t 1M},2R:9(){c 1V=6.1W.1V().1L(/(\\n)/g,\'<5q />\');6.1W.1u(\'<p>\'+1V+\'</p><l 2c="3Z"></l>\')},3Y:9(y,N){c 7=M,1T=7.q.a(\'l.1G\'),11=7.q.a(\'l.1U\');1T.Z(9(){$(6).12(\'C\',\'1q\');11.Z();7.1f.v(\'x\');7.A.r(\'R-C\');7.1g.16(m.b().1A);7.q.a(\'O.D\').r(\'x\')});7.q.a(\'.3V\').1D()},1S:9(y,N,H){c 7=M,1T=7.q.a(\'l.1G\'),11=7.q.a(\'l.1U\');N.3X(\'u\');f(11.5p(\':x\')){11.Z(9(){$(6).12(\'C\',\'1q\');1T.Z();7.1f.r(\'x\');7.3W(y);7.q.a(\'O.D\').v(\'x\');7.1F=s;7.1E=s;7.2Q.S({2i:m.b().1P});N.u(9(){f(H&&!H()){H&&H()}7.1S(y,N,H)})})}B{1T.Z(9(){$(6).12(\'C\',\'1q\');11.Z();7.1f.v(\'x\');7.A.r(\'R-C\');7.1g.16(m.b().1A);7.q.a(\'O.D\').r(\'x\');N.u(9(){f(H&&!H()){H&&H()}7.1S(y,N,H)})})}7.q.a(\'.3V\').1D()},3U:9(k){c 1N=0,7=M;1t(c I 2h k.15){1N++}c 14={5o:\'1s 2g-1\',3T:j.b().o,G:k.F,1R:j.b().o.1R,3S:j.b().o.3S,2P:j.b().o.2P,3R:j.b().o.3R,5n:j.b().o.2f,3Q:1Q.2e,3H:U,5m:m.b().5l,2O:7.2O,5k:M.3C(k.1P),5j:k.15,3P:k.5i,2d:k.5h,W:m.W,2G:j.b().5g.2G,3N:j.b().3O.5f.3N,1O:{1C:j.b().o.1O,w:k.V},3M:{1C:j.b().o.3M,w:m.5e(Q(k.3K))},2N:{1C:j.b().o.2N,w:k.1r&&k.1r.V||j.b().o.1q,\'2c\':(k.1r&&k.1r.V)?\'\':\'1q\'},3L:{1C:j.b().o.3L,w:k.3K},3J:{1C:j.b().o.3J,w:k.2M>=5d?j.b().o.5c:(k.2M===-1?j.b().o.5b:k.2M)},1N:{1C:j.b().o.1N,w:1N},1B:k.1A,3I:j.b().o.3I};f(k.V===m.b().V){14.3H=1M}14.3G={w:5a.59(),2L:2K+\'/2J/o/3G/o.58\',3F:U};f(k.57){14.2H=j.b().2I.56.55.2H}14.D={};$.54(14.D,j.b().o.D);14.2G.3E=j.b().o.3E;c h=$(2F.3D(\'q\',14));f(14.G!==m.b().F){h.E(\'.D\').r(\'D-4\')}B{h.E(\'.D\').r(\'D-3\')}t h},53:9(2b){t 2b.1L(/^(.+\\/)(\\d+\\.[^\\.]+)$/,\'$52-$2\')},3C:9(2b){t 2b},3B:9(){6.q=s;6.1g=s;6.2E=s;6.1f=s;6.2D=s;6.1K=s;6.1z=s;6.A=s;6.3A=s}};', 62, 434, '||||||this|self||function|find|getData|var|||if||content||i18nModel|data|div|playerModel||profile||profileWindow|addClass|null|return|click|removeClass|value|visible|informationContent|present|selectedAvatarPricePane|else|display|tabs|children|Id|id|buttonCallback|town|showSystemMessage|messageController|avatarsTable|playerController|button|ul|disabled|parseInt|not|attr|profileData|false|Name|availablePresentList|||fadeToggle||detailsContainer|css|townId|template|TownList|val|error|avatar|left|clickable|json|body|townIds|gameController|saveButton|descArea|getTextByCode|selected|buttonRight|buttonLeft|scrollable|iframe|availablePresent|presents|updateTownInfoCallback|none|Union|information|for|html|li|100|length|uiManager|selectedAvatarPriceElement|Description|description|header|tooltip|selectedAvatarUrl|selectedAvatarId|editable|currencyToUse|givePresentPanel|townControl|currencySelect|replace|true|countOfTowns|name|AvatarUrl|staticDataModel|edit|editInfo|editableContainer|details|text|descriptionElement|String|toString|margin|width|buyAvatarButton|jsonUnparsed|hint|achievement|presentBuyPreview|presentDescription|price|backObject|townModel|switchToTown|url|class|achievementList|avatarsList|avatarCost|tab|in|src|info|saveProfile|premiumController|avatarsTableMoved|marginLeft|match|selectFileButton|messageCode|pre|element|pos|presentId|buyPresentResponse|payForPresentButton|rearrange|give|thisPresent|townIdIndex|currentTownId|Location|givePresentsButton|editButton|uiUtils|titles|noob|map|resource|staticDataUrl|img|Position|union|avatarsPath|save|uploadAvatarPreview|formatDescription|uiWindow|statusText|AvatarId|avatarSize|arrow|scrollableWidth|hasClass|buy|file|select|uploadAvatarForm|load|uploadAvatarIFrame|document|target|preview|indexOf|count|maxLines|message|send|onGivenPresentClick|getTooltipForPresent|format|hidden|key|onAvailablePresentClick|index|onCancelPayForPresentButtonPressed|bodyHandler|extraClass|showURL|delay|selectedPresent|rpg|pane|panel|list|townsContent|proxy|playerName|helpContent|windowTitle|contentProvider|avatarsPreview|onProfileClose|getAvatarUrl|applyTemplate|youHave|show|ingredients|addAvatars|townTitles|rating|Level|level|title|coinTitle|premium2|presentList|avatars|addMoney|rpgButton|lang|createProfileTemplate|coin|prepareMovingAvatars|unbind|onCancelEditClick|clear|callback|invalidParams|constructor|cyType|updateCurrencyDependentOnType|eventsEnabled|Cost|ceil|Math|selectAvatar|px|table|right|update|playerInfoPanel|onBuyAvatarButtonClick|input|onAvatarLoadCallback|generalUploadError|avatarUpload|JSON|contentWindow|contentDocument|slice|maxLength|textarea|cancel|prepareEdit|getTooltipForAchievement|Currencies|presentCost|getPresentById|newPresentList|playerGivenPresents|string|typeof|playerId|premiumModel|onPayForPresentButtonPressed|onGivePresentsButtonPressed|initCurrencySelect|currency|pay|presentsContent|displayProfile|updateProfileContent|success|openSendMessageTab|route|townName|delete|nextTownId|objectKeys|prevTownId|getLeftWindowType|gadgetsController|prepareToSwitch|cellType|WorldMap|ct|gameData|currentTown|myTownId|let|160|getMiniAvatarUrl|extend|cellInfo|sidebar|NoobTime|png|getSummaryAmount|ingredientsModel|unbelievableRating|outOfRating|1000000|getTitle|windowTitles|conversations|AchievementList|PresentList|townList|mainAvatar|Silver|cy|avatarCostLabel|defaultTab|is|br|errorBlock|test|player|action|changeAvatar|row|break|td|uploadAvatarSucceeded|main|buyAvatar|trigger|type|submit|change|uploadAvatarFile|uploadableAvatarPrice|avatarUploadData|status|eval|parse|upload|form|while|maxlength|keyup|cancelEditButton|MediumUrl|append|empty|profileGivenPresents|presentgaveSuccessfully|messages|cantGivePresentCommonError|premium|givePresentFor|presentDescriptionWelcome|skillpoints|have|freeSkillPoints|rpgModel|showWindow|rpgController|window|open|prepareSendForm|conversationController|siblings|available|prepareCoordsLinksInContent|cancelPayForPresentButton|container|towns|displayUnionInfo|unionController|params|method|controller|column|decor|getProfileById|getProfileByName|notExist|backButton|addToStack|helpButton|onClose|onShow|close|captureTown|onAddTown|loseTown|Owner|HomeTownId|onLoseTown|switchToNextTown|switchToPreviousTown|updateResources|resourcesPanel|getRightWindowType|getLastLeftWindowType|WINDOW_TYPE_EDIT_ARMY|ControlWindow|switchPanel|isShown|updateCaptureTownIcon|updateRaiseFlagIcon|changePageTitle|loadData|clean|Route|yourTown|setSetting|timingModel|currencyTypeDucat|98|lastClickTime'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('5 1o={2m:{3:\'1x\',2:\'6v\'},6u:{2:0,3:0,4:0},26:[3,2],p:{L:2},1j:1b,6t:6(){A(5 E 1V l.1N()){b.4d(E)}},4d:6(E){5 k=b;1L.6s(\'2n-\'+E,{3X:I.1w(l.1N()[E].48-1L.6r()),6q:6(N){4c.4b();q 6(){k.43(N)}}(1C(E)),6p:6(){4c.4b()}})},6o:6(){A(5 E 1V l.1N()){1L.6n(\'2n-\'+E)}},1T:6(4a){q 3v.3u(4a,h.g().n.3t)},6m:6(1O,1j=1b){5 k=b,r={1O:1O||\'28-27\',3x:h.g().n.2k,6l:6k.g().6j},c=l.1n();b.1j=1j;f(c&&c.a>0){f(c.2l!=c.a){r.M[c.a].2A=b.1T(c.1d)}t{r.M[c.a].2A=b.1T(c.1d+y.x.1Y[c.6i]*24*3j)}}r.1O+=\' 29-\'+k.49(r.1O);b.m=$(1z.1y(\'6h\',r));l.6g(6(){l.6f(O.g());6e.6d(h.g().n.6c,k.m,()=>{k.2L()});k.2N()});1R.34(1R.33.6b,6(){3L.3K()})},49:6(2S){5 2T={6a:1,\'28-27\':2};q 2T[2S]?2T[2S]:0},69:6(){5 2R=b.m.o(\'.T:68(.1M.1q)\'),2Q=[];A(5 i=0;i<2R.D;i++){2Q.2y(1C($(2R[i]).S(\'N\').67(/u-T-(\\d+)/)[1],10))}q 2Q},66:6(){q;f(!b.m){q}5 2P=b.m.o(\'.u .T\');A(5 i=0;i<2P.D;i++){5 T=2P.46(i),s=$.2d(T,/u-T-(\\d+)/);f(l.1N()[s]){5 2O=l.1N()[s].48;T.o(\'>.K-1U>.L\').1S($.65(2O,h.64())+\' \'+$.63(2O,h.62()));T.1E(\'.K-1U\').Y(\'2G\')}t{T.1E(\'.K-1U\').1c(\'2G\')}}},2N:6(){5 k=b,c=l.1n();b.61=b.m.o(\'#C-22\');f(c){$(\'#u-C-\'+c.a).Y(\'K\')}b.m.o(\'#C-22 .35-1a, #C-22 .60-1a\').2x().H(6(){5 a=$.2d($(b).2c(\'.C\'),/^u-C-(\\d+)$/);k.2C(a)});b.m.o(\'.C\').H(6(){5 a=$.2d($(b),/^u-C-(\\d+)$/);k.2C(a)}).3C({3B:1b,3A:0,25:\'5Z\',3z:6(){5 a=$.2d($(b),/^u-C-(\\d+)$/);q k.47(a)},5Y:6(e,5X){}});b.m.o(\'3W.5W > Z:5V(.5U)\').H(b.3H);b.2M={m:b.m.o(\'2D.28-27\')};$(1z.1y(\'5T\',1G.5S())).3y(b.2M.m);1G.2N(b.2M.m);1G.3E();X.W(\'5R\')()},2L:6(){1G.2L();b.m=5Q;X.W(\'5P\')();b.1j&&b.1j();b.1j=1b},47:6(a){5 r={v:h.g().n.v,1g:h.g().n.M[a]},v=y.x.M[a].3w;r.1g.1D=[];A(5 i=0;i<v.D;i++){5 s=v[i].23,17=v[i].3s;f(s==l.1p.2z){5 14=G.R(h.g().n.v[s].16,17,y.x.3r)}t f(s==l.1p.3q){5 14=G.R(h.g().n.v[s].16,17,y.x.3p)}t{5 14=G.R(h.g().n.v[s].16,17)}r.1g.1D.2y({N:s,16:14})}q $(1z.1y(\'5O\',r)).5N()},5M:6(u){5 1s=u.1E(\'.1D\').o(\'.1M\');A(5 i=0;i<1s.D;i++){f(1s.46(i).44(\'1q\')){5 45=1s.2c(\'.u\').o(\'>2K>.1M\');f(!45.44(\'1q\'))1s.2c(\'.u\').o(\'>2K>.1M\').Y(\'1q\');q}}1s.2c(\'.u\').o(\'>2K>.1M\').1c(\'1q\')},43:6(N){l.5L(N);3S(N){B 1:B 2:B 3:B 4:B 15:1i;B l.1p.5K:B l.1p.2z:3N.3M(N,2B);1i;B 7:1i;B 8:B 9:B 10:B 11:B 12:1i}},42:6(p){5 k=1o;f(!O.g().1J.D){q}l.42(O.g().23,p,6(w){5 1K=O.3T(0);f(1K){f(/39/.3F(w[\'41\'][\'2J:40\'])){X.W(\'3P\')(1K.18);U.1l(h.1u(w[\'41\'][\'2J:40\']))}t{1L.3Z[\'1K\'+O.g().1J[0].3Y].5J-=1L.3Z[\'1K\'+O.g().1J[0].3Y].3X-1}$(G.R(\'#2J .5I-5H-{0} .3U-5G\'+\', \'+\'#29-m-5F 3W.3V Z#5E-3V-5D-0 .3U-5C\',O.3T(0).18)).1c(\'5B\')}f(!3J){k.2H(p)}})},2H:6(p){p=1C(p,10);3S(p){B l.5A:5z(2I)!=\'5y\'&&2I.3R&&2I.3R();1i}},3Q:6(p){5 k=1o;f(!O.g().1J.D){q}5 z=O.g().1J,2a=1b,1r=z.D;A(5 i=0;i<1r;i++){f(z[i].18===1){2a=2B;1i}}l.3Q(O.g().23,p,2a,6(w){5 1H=\'\';5x.5w.5v();f(!3O.5u){q}A(5 i=(1r-1);i>=0;i--){A(5 j=(i+1);j<=1r;j++){f(j==1r){z[i].1I=5t.5s(z[i].18)}t{f(z[i].18==z[j].18){z[i].1I=((z[j].5r==1)?z[j].1I-1:z[j].1I+1);1i}}}X.W(\'3P\')(z[i].18)}A(5 i=0;i<1r;i++){5 2b=z[i].18;3O.5q(2b);1H+=h.5p(2b)+\' \';1H+=z[i].1I;f(i<(z.D-1)){1H+=\', \'}3N.3M(2b,2a)}U.38(G.R(h.g().5o.5n.5m,1H),\'5l\');3L.3K();f(!3J){k.2H(p)}},6(3I){U.1l(h.1u(3I))})},5k:6(){q b.m.o(\'.29-m:2G\').5j(\'.29-m\').D},3H:6(){5 k=1o,2F=$(b).S(\'3G\');k.m&&k.m.S(\'3G\',2F+\' \'+$(b).S(\'N\'));f(/28\\-27/.3F(2F))1G.3E();X.W(\'5i\')()},3n:6(1h,p,13){5 k=1o;13=13||{};5 2E=13.H;p.L=l.5h;13.H=6(){p.L=1h.1E(\'Z.1q\').S(\'E\');2E&&2E()};5 1F=[],3D=h.g().n.1h;A(5 i=0;i<k.26.D;i++){f(3D[k.26[i]]){1F[1F.D]={\'E\':k.26[i],\'5g\':\'<5f />\'}}}p.L=1F[0].E;1h.5e({w:1F,13:13},p.L);1h.1E(\'Z\').5d(6(){$(b).Y(k.2m[$(b).S(\'E\')])}).3C({3B:1b,3A:0,3z:6(){q h.g().32[$(b).S(\'E\')]}});f(1h.o(\'>Z.1x\').D){$(\'<2D></2D>\').Y(\'2h-1a 1a-5c 5b\').5a(h.g().n.59).2x().H(6(){1W.58(\'57://56.55.54/53.52\',\'51\')}).3y(1h.o(\'>Z.1x\'))}},2C:6(a){5 k=b,c=l.1n();f(c&&c.a>a&&!(!c.2l&&c.a==a)){q}5 P=c&&c.a<a,r={25:\'\',a:a,c:c,P:P,3x:h.g().n.2k,1g:$.50(2B,{},h.g().n.M[a])};5 v=y.x.M[a].3w;f(c){f(c.a==a){r.1g.2A=3v.3u(c.1d,h.g().n.3t)}t f(c.a>a){r.25=\'4Z-P\'}t f(c.a<a){r.25=\'4Y-P\'}}r.1g.1D=[];A(5 i=0;i<v.D;i++){5 s=v[i].23,17=v[i].3s;f(s==l.1p.2z){5 14=G.R(h.g().n.v[s].16,17,y.x.3r)}t f(s==l.1p.3q){5 14=G.R(h.g().n.v[s].16,17,y.x.3p)}t{5 14=G.R(h.g().n.v[s].16,17)}r.1g.1D.2y({N:s,16:14})}5 3o=$(1z.1y(\'4X\',r));1Q.4W(h.g().n.M[a].4V,3o,{2Z:6(m){m.o(\'.2v > .21\').22({w:h.g().n.4U,13:{H:6(){k.2w(a)}}}).4T(\'4S\',\'\');k.3n(m.o(\'.4R > .4Q-21\'),k.p,{H:6(){}});m.o(\'> .4P-4O > .2h-1a\').2x().H(6(){5 20=$(\'#u-C-1W .2v > .21 Z.3m\'),J=1C(20.S(\'3l\'),10);k.3a(a,k.p.L,J)});k.2w(a);X.W(\'4N\')(m)},4M:6(){X.W(\'4L\')()}})},2w:6(a){5 20=$(\'#u-C-1W .2v > .21 Z.3m\'),J=1C(20.S(\'3l\'),10),c=l.1n(),1f=y.x.M[a],1e=0,P=c&&c.a!=a;f(P){5 2t=y.x.M[c.a],2s=1f;5 1d=c.1d,3k=I.1w((4K 4J()).4I()/4H),2r=I.3i(1,I.1w((1d-3k)/24/3j));5 1Z=0;A(5 2u 1V y.x.1Y){5 1X=y.x.1Y[2u];f(2r>=1X){1Z=I.3i(1Z,2s.2p[2u])}}5 3f=2t.2p[c.J],3g=2t.2o,3h=2s.2o;1e=I.3e(2r*(3h*(1-1Z/V)-3g*(1-3f/V)));1e=I.4G(1e/10)*10}t{f(1f.2q&&1f.2q[J]){1e=1f.2q[J]}t{5 3c=1f.2p[J],1X=y.x.1Y[J],3d=1f.2o;1e=I.3e(3d*(1-3c/V)*1X/10)*10}}5 3b=(1e/V).4F().4E(\'.\',\',\');$(\'#u-C-1W .4D > .L\').1S(G.R(h.g().n.4C,3b))},3a:6(a,2j,J){5 k=b,c=l.1n(),P=c&&c.a!=a,2i=6(w){f(!w){w=\'39:2n:4B\';q}f(w.2U==G){U.1l(h.1u(w));q}U.1l(h.1u(\'n:37\'));1Q.4A();U.38(h.g().n.37,1o.2m[k.p.L]);c=l.1n();A(5 a 1V y.x.M){5 Q=$(\'#u-C-\'+a);f(a==c.a){Q.Y(\'K\').1c(\'1B-1A-K\');f(!c.2l){Q.Y(\'1B-1A-36\')}t{Q.1c(\'1B-1A-36\')}Q.o(\'.K-1U > .L\').1S(k.1T(c.1d))}t{Q.1c(\'K\');f(a>c.a){Q.Y(\'1B-1A-K\')}t{Q.1c(\'1B-1A-K\')}}Q.o(\'.35-1a\').1S(h.g().n.2k.4z)}1R.34(1R.33.4y,6(){X.W(\'4x\')()})};f(P){l.4w(a,2j,2i)}t{l.4v(a,2j,J,2i)}},4u:6(){1Q.4t(h.g().n.2e.4s,$(1z.1y(\'4r\',{4q:h.g().n.2e,4p:h.g().32[y.x.31],4o:y.x.31==3?\'1x-30\':\'4n-30\',4m:l.4l()})),1b,{4k:1Q.4j,2Z:$.1v(6(m){5 19=m.o(\'.1x\'),1k=m.o(\'.4i\'),2W=m.o(\'.2h-1a\');19.2g(\'1P 1t\').2Y(\'1P 1t\',$.1v(6(){5 F=2f(1m(19.F()))?0:1m(19.F());1k.F(I.1w(F*l.2X()/V)/V)},b));1k.2g(\'1P 1t\').2Y(\'1P 1t\',$.1v(6(){5 F=2f(1m(1k.F()))?0:1m(1k.F());19.F(I.1w(F/l.2X()*4h)/V)},b));2W.2g(\'H\').H($.1v(6(){5 2V=2f(1m(19.F()))?0:1m(19.F());l.4g(2V*V,$.1v(6(w){f(w&&w.2U==G){U.1l(h.1u(w));q}U.1l(h.g().n.2e.4f)},b))},b));1k.4e(\'1t\')},b)})}};', 62, 404, '|||||var|function||||cabinetId|this|currentCabinet|||if|getData|i18nModel|||self|premiumModel|content|premium3|find|currencyToUse|return|templateData|taskId|else|minister|cabinetTasks|data|premiumParams|staticDataModel|currentConstructionQueue|for|case|cabinet|length|key|val|String|click|Math|durationId|hired|value|ministerCabinets|id|townModel|upgrade|cabinetElement|format|attr|task|messageController|100|getHandler|methodModel|addClass|li||||handler|taskText||name|taskPercent|BuildingId|goldInput|button|false|removeClass|untilTime|costValue|cabinetData|ministerCabinet|currencySelect|break|onCloseCallback|silverInput|showSystemMessage|parseFloat|getPlayerMinisterCabinet|premiumController|ministerTasks|checked|constructionQueueLength|checkboxes|change|getTextByCode|proxy|floor|gold|applyTemplate|uiUtils|be|can|parseInt|tasks|children|currencyRadioButtons|resourceShopController|buildingsInfoText|NewLevel|BuildingConstruction|buildingConstruction|timingModel|checkbox|getPlayerPremiums|defaultTab|keyup|uiWindow|playerItemsModel|text|getHiredUntilFromTimestamp|until|in|window|days|ministerCabinetsTerms|newOff|durationItem|select|list|Id||extraClass|currencyOrder|shop|resource|tab|isUpdateBuildingTime|currentBuildingId|closest|parseId|addSilverDucatsWindow|isNaN|unbind|buy|callback|cyType|windowTitles|deferredCabinetId|currencyList|premium|Cost|Offs|Costs|daysLeft|newCabinet|oldCabinet|durId|period|calculateMinisterCabinetPricePreview|clickable|push|buildingQueueBigger|hiredUntil|true|openCabinetWindow|div|listItemClickHandler|switchedTab|visible|updateCurrencyDependentOnType|topPanel|town|h2|onWindowClose|resourceShopTab|onWindowShow|untilDate|tasksToUpgrade|taskIds|taskElements|tabName|ratio|constructor|goldValue|buyButton|getCurrentGoldToSilverCourse|bind|onShow|icon|goldCurrencyType|currencyName|flagItems|setFlagItem|hire|prolonged|successfulBoughtMinisterCabinet|addMessageToLog|error|onBuyCabinetClick|costStringValue|off|baseCost|round|oldOff|oldBaseCost|newBaseCost|max|3600|now|info|selected|initCurrencySelect|windowOverlayContent|troopQueryLimit|trainingQueueBigger|buildingQueryLimit|Percent|hiredUntilFormat|timestampToDateTimeString|Util|Tasks|titles|appendTo|bodyHandler|delay|showURL|tooltip|currencyData|onSwitchWhenInTab|test|class|onPremiumTabClick|errorCode|eventsEnabled|checkQuestsToBeDone|questController|updateOpenBuildingWindowInfo|buildingController|townController|onBuildingComplete|totalSpeedUpBuilding|updateBalance|switch|getBuildingConstructionByQueue|speed|queue|ul|count|StartTime|countdown|speedUpConstruction|action|speedUpBuilding|finishPremium|hasClass|ministerCheckbox|eq|createTooltipForCabinet|UntilDate|getTabNumberForName|timestamp|updatePremiumExpiredIcon|gadgetsController|startCountDownForPremium|trigger|buySuccessful|exchangeSilverForGold|1000000|silver|WINDOW_TUTORIAL_REWARD|windowLayout|getGoldToSilverCourse|goldToSilverCourse|GXP|goldIcon|goldName|locale|buySilverDucatsWindow|windowTitle|show|onAddSilverDucatsButtonClick|buyMinisterCabinet|upgradeMinisterCabinet|onPurchaseMinisterCabinet|PLAYER_ITEM_PURCHASED_MINISTER_CABINET|upgradeButton|closeOverlay|generalError|priceWithDucatsTitle|price|replace|toString|ceil|1000|getTime|Date|new|onCloseMinisterCabinetDetails|onClose|onOpenMinisterCabinetDetails|pane|pay|currency|cy|width|css|ministerCabinetTerms|windowOverlayTitle|showWindowOverlay|ministerCabinetWindow|must|cant|extend|_blank|php|bank|ru|feogames|www|https|open|inlineBuyGoldButton|html|green|big|each|radioButtonList|span|body|currencyTypeDucat|onTabClickInPremiumWindow|prevAll|getSelectedTabIndex|build|buildingTotalUpgradeComplete|system|messages|getBuildingName|updateBuildingInfo|Type|getLevel|buildingsModel|townBacking|updateResourcesInSidebar|resourcesPanel|gameController|undefined|typeof|currencyTypeGold|disabled|ap|item|building|buildings|up|bar|progress|endingCount|buildingFaster|erasePlayerPremium|refreshMinistersChecker|outerHTML|ministerCabinetTooltip|onClosePremiumWindow|null|onOpenPremiumWindow|createTemplateData|resourceShop|decor|not|tabs|ui|create|bordered|prolong|cabinetList|getDateFormat|timestampToDateString|getTimeFormat|timestampToTimeString|updateBoughtTasksInPremiumWindow|match|has|getSwitchedOnTasks|ministers|PLAYER_ITEM_OPENED_PREMIUM_WINDOW|headerTitle|showWindow|WOFWindow|prepareResourcePacksForTown|getResourceShopPacks|premiumWindow3|deferredDurationId|Silver|playerModel|balance|showPremiumsWindow|removeCountdown|removePremiumCountdowns|onTick|onFinish|getCurrentTime|addCountdown|init|itemCount|ducat'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('a 1o={R:{},7:H,16:0,1f:5,14:0,A:H,1e:[],5z:b(){a 2s=j.c().f.2s;6.2L();6.2p();5y.5x(2s,6.7,H,{5w:$.3t(6.2n,6),5v:$.3t(6.3e,6)})},2p:b(1n){a r={f:h.c(),2r:j.c().f.2r,1m:{},5u:$.5t({3s:j.c().3s,3r:j.c().3r,3q:j.c().3q.M},j.c().f),1n:1n||H,2q:E,3l:0,3p:j.c().f.3p};17(a 3o 1O r.2r){r.1m[3o]=0}17(a k 1O r.f){a g=r.f[k];8(h.3n[k]){r.f[k].5s=h.3n[k]}8((!r.2q)&&(r.1n==H)){r.1n=\'C-\'+g.3m}r.2q=O;17(a i=0;i<g.1N.V;i++){a m=g.1N[i];m.13=6.3k(m)}r.1m[g.3m]++}17(a D 1O r.1m){8(r.1m[D]>0){r.3l++}}6.7=$(2R.2Q(\'5r\',r));5q.5p(6.7);6.2J();6.2o=6.7.l(\'.3g-7\').3f()},3k:b(m){2D(m.D){y h.5o:q S.11(j.c().f.5n,m.3j,j.5m(m.3j),m.5l);x;y h.5k:q S.11(j.c().f.5j[m.5i],m.3h);x;y h.5h:q S.11(j.c().f.5g,m.5f);x;y h.5e:q m.3i==1?j.c().f.5d:S.11(j.c().f.5c,m.3i-1);x;y h.5b:q j.3a(m.5a);x;y h.59:q j.c().f.58[m.57];x;y h.56:q S.11(j.c().f.55,m.3h);x}q\'\'},2n:b(){8(!6.7){q}a 9=6;6.2e=6.7.n(\'.2e 1z:2Z(.2Y)\').1u(b(){a t=$(6).v(\'1g\');9.7.B().o(t);9.R[t].Q();9.1h(9.7.n(\'15.C-7.\'+t+\' .g-M .g.Z-Y\').v(\'t\'))});6.7.n(\'.g-M .g-13-M 1z\').1u(b(){a 1Q=$(6).v(\'t\');a 1R=$(6).36().v(\'t\');9.7.n(\'.C-\'+1R+\' .g-M .g[t!="\'+1Q+\'"]\').B(\'Z-Y\');9.7.n(\'.C-\'+1R+\' .g-M .g[t="\'+1Q+\'"]\').o(\'Z-Y\');9.R[\'C-\'+1R].Q();9.1h(1Q)});6.7.n(\'.C-7\').1y(b(){a t=$(6).v(\'2h\').2X(\'C-7\',\'\').22();9.R[t]=$(6).n(\'.3g-7\').3f()});6.1T();6.31();6.7.n(\'.g .1L\').24().1u(6.3b);6.7.n(\'.g .54>.53 .52\').51({50:E,1t:40,4Z:0});6.2o.Q();3d.3c(\'4Y\')()},3e:b(){6.7&&6.7.1v();6.7=H;6.16=0;3d.3c(\'4X\')();4W.4V()},3b:b(){a z=$(6);8(z.4U(\'1K\')){q}z.o(\'1K\');a k=z.2i(\'.g\').v(\'1g\').2g(/g-(\\d+)/)[1],g=h.c()[k],9=1o;h.4T(k,b(1P){8(1P.4S==S){4R.4Q(j.3a(1P))}w 8(1P){8(!38){4P.4O(4N.4M)}9.39(g)}})},39:b(g){8(!38){4L.4K([\'4J\',\'4I\']);4H.4G.4F()}6.37()},37:b(){8(6.7){a 35=6.7.36();6.7.1v();6.2p();6.7.4E(35);6.2o.Q();6.2n();6.7.n(\'.1L\').24()}},1T:b(){17(a k 1O h.c()){a g=h.c()[k],2l=O,F=6.7?6.7.n(S.11(\'#g-{0}\',k)):E;17(a 1l=0;1l<g.1N.V;1l++){a m=g.1N[1l],G=F?F.n(S.11(\'.4D>#m-{0}\',1l)):E,1M=h.4C(m);8(1M===O){G&&G.l(\'.34\').o(\'33\');G&&G.l(\'.m-2m\').1i(\'\')}w{2l=E;G&&G.l(\'.34\').B(\'33\');8(1M){G&&G.l(\'.m-2m\').1i(1M)}w{G&&G.l(\'.m-2m\').1i(\'\')}}}8(2l){h.32(k,O);F&&F.v(\'2j\',\'O\');F&&F.n(\'.1L\').B(\'1K\')}w{h.32(k,E);F&&F.2S(\'2j\');F&&F.n(\'.1L\').o(\'1K\')}}6.2b();a 2k=h.4B();8(2k){6.25(2k)}8(6.7){6.2a();6.29()}4A.4z()},4y:b(){6.4x=E},4w:b(){6.4v=E},31:b(){a 9=6,1j=E,1E,1k=E,1F;8(6.16&&h.c()[6.16]){a 1J=9.7.n(\'.g-M .g[t="\'+6.16+\'"]\');8(1J.V){a X=1J.2i(\'.C-7\').v(\'2h\').2g(/C-\\d+/)[0];1J.o(\'Z-Y\');9.7.B().o(X);9.R[X].Q();q}}9.7.n(\'.g-M\').1y(b(4u){a 1I=$(6).l(\'15.g[2j="O"]\'),X=$(6).2i(\'.C-7\').v(\'2h\').2g(/C-\\d+/)[0];8(1I.V){1I.1G(0).o(\'Z-Y\');8(!1k){1F=X;1k=1I.1G(0).v(\'t\')}}w{a 1H=$(6).l(\'15.g[I="O"]\');8(1H.V){1H.1G(0).o(\'Z-Y\');8(!1j){1E=X;1j=1H.1G(0).v(\'t\')}}w 8($(6).l(\'15\').V){$(6).l(\'15:4t-4s\').o(\'Z-Y\');9.R[X].Q()}}});8(1k){9.7.B().o(1F);9.R[1F].Q();9.1h(1k)}w 8(1j){9.7.B().o(1E);9.R[1E].Q();9.1h(1j)}},2b:b(){a W=$(\'#1r #2P-2O .f\'),2f=h.2W();8(2f){W.l(\'.z-1i\').l(\'.1w\').30(\' (\'+2f+\')\');W.l(\'.z-1D\').l(\'.f-1C-1B\').o(\'1A-f\').B(\'I-f\')}w{W.l(\'.z-1i\').l(\'.1w\').30(\'\');W.l(\'.z-1D\').l(\'.f-1C-1B\').B(\'1A-f\');8(h.2V()){W.l(\'.z-1D\').l(\'.f-1C-1B\').o(\'I-f\')}w{W.l(\'.z-1D\').l(\'.f-1C-1B\').B(\'I-f\')}}},2a:b(){6.7.n(\'2U.2e > 1z:2Z(.2Y)\').1y(b(){a 2d=2c($(6).v(\'1g\').2X(\'C-\',\'\').22(),10),P=$(6).n(\'.4r-4q\');P.B(\'I-f 1A-f\');8(h.2W(2d)){P.o(\'1A-f\')}w 8(h.2V(2d)){P.o(\'I-f\')}})},29:b(){a 9=6;6.7.n(\'2U.g-13-M 1z\').1y(b(){a k=2c($(6).v(\'t\'),10),P=$(6);P.B(\'I 28\');8(h.c()[k].4p){P.o(\'28\')}w 8(h.c()[k].2T){P.o(\'I\')}})},1h:b(1g){a 9=1o,k=2c(1g,10);8(!(k&&h.c()[k])){q}9.16=k;8(h.c()[k].2T){h.4o(k,0,b(){9.2b();8(9.7){9.2a();9.29();9.7.n(\'15.g[I="O"][t="\'+k+\'"]\').2S(\'I\')}})}},25:b(D,L){8(6.7||!(D||(6.1e.V&&!6.A))){q E}L=L?L:6.1f;8(D&&6.A){6.1e.4n({27:D,L:6.1f-6.14});q}8(!D){a 1x=6.1e.4m();8(!1x){q}D=1x.27;L=1x.L}a 9=6,26={1:\'28\',2:\'4l\'},r={27:26[D],4k:j.c().f.4j[26[D]]},2M=b(){8(9.A){9.A.1v();9.A=H}};6.A=$(2R.2Q(\'4i\',r));$(\'#2P-2O .z.f\').4h(6.A);6.A.4g(4f,b(){9.14=9.1f;2K.4e(\'4d\',{1w:L?L:9.1f,4c:b(1w,2N){9.14--},4b:b(2N){2M();9.14=0;9.25()}})})},2L:b(){8(6.A){6.A.1v();6.A=H}2K.4a(\'49\');6.14=0;6.1e=[]},2J:b(){8(!6.7){q}6.7.n(\'.18-z\').24().1u(6.2I)},2I:b(){a 2H=$(6),1s=2H.v(\'1s\'),1d=48,1c=47,23=(U.2G.1c-1c)/2,1t=(U.2G.1d-1d)/2,12=["46=2F","45=2F","44=2E","43=2E","1d="+1d,"1c="+1c,"1t="+1t,"23="+23].42(","),J=H,T=0;8(!1s){q}2D(1s.22()){y\'2C\':J=U.1b("K://2C.21/2z.1V?20="+u("K://"+1a)+"&13="+u(j.c().N.1r)+"&2y="+u(j.c().N.1p)+"&41=1&3Z="+u(1Z+"1Y/18/1X.1W"),"19",12);T=1;x;y\'3Y\':J=U.1b("3X://3W.21/3V/2B?2u="+u(j.c().N.2B+"K://"+1a),"19",12);T=2;x;y\'3U\':J=U.1b("K://2x.3T.21/2A/2A.1V?s=2t&p[20]="+u("K://"+1a)+"&p[13]="+u(j.c().N.1r)+"&p[3S]="+u(j.c().N.1p)+"&p[3R][0]="+u(1Z+"1Y/18/1X.1W"),"19",12);T=3;x;y\'3Q\':J=U.1b("K://3P.3O.2w/2z?20="+u("K://"+1a)+"&13="+u(j.c().N.1r)+"&2y="+u(j.c().N.1p)+"&3N="+u(1Z+"1Y/18/1X.1W"),"19",12);T=4;x;y\'3M\':J=U.1b("K://2x.3L.2w/3K?1q.3J=3I&1q.s=0&1q.3H="+u("K://"+1a)+"&1q.3G="+u(j.c().N.1p),"19",12);T=5;x}b 1S(){3F{8(!J||J.3E){J=H;$.3D("/18/3C.1V",{3B:T},b(2v){a 1U=3A.3z(2v);8(1U["2u"]){3y.3x[1U["3w"]]=1;1o.1T()}})}w{3v(1S,2t)}}3u(e){}}1S()}};', 62, 346, '||||||this|content|if|self|var|function|getData|||quests|quest|questModel||i18nModel|questId|children|condition|find|addClass||return|templateData||name|encodeURIComponent|attr|else|break|case|button|notificationPopup|removeClass|tab|type|false|questElement|conditionElement|null|unread|win|http|timeToShow|list|socialSharing|true|iconDiv|rearrange|tabsContents|String|socId|window|length|questsButton|tabKey|display|block||format|config|title|notificationPopupTimeLeft|div|currentQuestId|for|social|_blank|siteDomain|open|height|width|notificationQueue|notificationPopupTimeToShow|id|onQuestView|text|firstUnreadQuest|firstCompletedQuest|conditionNumber|questsCountbyType|defaultTab|questController|promo|st|header|network|left|click|remove|count|params|each|li|complete|notification|state|img|firstUnreadQuestTabKey|firstCompletedQuestTabKey|eq|unreadQuestsElements|completedQuestElements|questDiv|disabled|finish|conditionCheckResult|Conditions|in|actionResult|selectedQuestKey|currentTabId|checkWindow|checkQuestsToBeDone|data|php|jpg|logo2|resource|staticDataUrl|url|com|trim|top|clickable|showQuestsNotification|notificationTypes|notificationType|completed|recalculateQuestListIcons|recalculateTabsIcons|showCompleteOrUnreadQuestsIcon|parseInt|tabId|tabs|completeQuests|match|class|closest|made|showNotification|questPassed|progress|onWindowShow|scrollableArea|createContent|isQuests|types|windowTitle|100|status|json|ru|www|description|share|sharer|tweet|vk|switch|no|yes|screen|clicked|onSocialNetworkShareClick|initSocialNetworkQuests|timingModel|clearQuestNotifications|hideNotificationPopup|timerId|buttons|system|applyTemplate|uiUtils|removeAttr|Unread|ul|getUnreadQuestsCount|getCompleteQuestsCount|replace|decor|not|html|viewFirstCompleteOrNewQuestInList|setQuestCompleteFlag|checked|checkbox|contentParent|parent|rerenderContent|eventsEnabled|questFinished|getTextByCode|onFinishClick|getHandler|methodModel|onWindowClose|scrollable|scroll|value|membersCount|buildingId|getConditionTitle|visibleTabsCount|Type|socialQuestsNetworks|questType|noQuestsTitle|premium|troops|resources|proxy|catch|setTimeout|statId|statData|playerModel|parseJSON|jQuery|soc|index|post|closed|try|comments|_surl|addShare|cmd|dk|odnoklassniki|ok|imageurl|mail|connect|mr|images|summary|facebook|fb|intent|twitter|https|tw|image||noparse|join|location|toolbar|resizable|scrollbars|350|550|questsNotificationPopUp|removeCountdown|onFinish|onTick|questNotificationPopUp|addCountdown|300|fadeIn|append|questNotification|popupNotifications|notificationText|new|shift|push|setQuestUnreadFlag|Completed|icon|info|child|first|tabCounter|shownCompleteQuests|resetCompleteMarks|shownUnreadQuests|resetUnreadMarks|updateQuestIcons|gadgetsController|checkForNotShownQuests|checkQuestCondition|conditions|appendTo|updateResources|resourcesPanel|gameController|Resources|Troops|loadFields|townModel|currencyTypeDucat|premiumModel|updateCurrencyDependentOnType|premiumController|showSystemMessage|messageController|constructor|finishQuest|hasClass|onQuest22Read|tutorialController|onCloseQuestWindow|onOpenQuestWindow|delay|showURL|tooltip|thumbnail|reward|rewards|townPointsFormat|townPointsCondition|itemId|playerItemFormats|playerItemCondition|message|specialMessageCondition|unionMembersFormat|haveUnionFormat|unionMembersCondition|townCount|townCountFormat|townCountCondition|statisticId|playerStatisticFormats|playerStatisticCondition|level|getBuildingName|buildBuildingFormat|buildingLevelCondition|pasteTips|helpController|questWindow|SocialNetwork|extend|lang|onClose|onShow|show|uiWindow|showWindow'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('f D={7:17,c:17,1l:{},o:{l:{},r:{},x:{},z:{},p:{},n:{}},1r:b(2c){f 9=8;Q.3L(A.j().y.3K);1M.j(b(1B,1A,1z,1y,n,x){f 14=2c||\'l\',2f=N.27&&1z,2e=N.1d.2B&&1y,2d=N.1d.2y&&n;1B.2S=E.j().F?E.j().F.1m:\'\';1B.16=\'l\';1A.16=\'r\';x.16=\'x\';1A.P=E.j().F;9.c={l:$.34(1B,{1v:A.j().y.22}),r:1A,x:x};9.c.l[\'15\']=\'a-1\';9.c.r[\'15\']=\'a-2\';9.c.x[\'15\']=\'a-3\';f 1x=4;d(2f){1z.16=\'z\';9.c.z=$.34(1z,{1v:A.j().y.22});9.c.z[\'15\']=\'a-\'+(1x++)}d(2e){1y.16=\'p\';9.c.p=1y;9.c.p[\'15\']=\'a-\'+(1x++)}d(2d){n.16=\'n\';9.c.n=n;9.c.n[\'15\']=\'a-\'+(1x++)}9.o.l.w=9.c.l.v.w;9.o.l.u=9.c.l.v.u;9.o.r.w=9.c.r.v.w;9.o.r.u=9.c.r.v.u;d(2f){9.o.z.w=9.c.z.v.w;9.o.z.u=9.c.z.v.u}d(2e){9.o.p.w=9.c.p.v.w;9.o.p.u=9.c.p.v.u}d(2d){9.o.n.w=9.c.n.v.w;9.o.n.u=9.c.n.v.u}9.o.x.w=9.c.x.v.w;9.o.x.u=9.c.x.v.u;f 2b={3J:9.c,1v:A.j().y,2c:14+\' a-\'+9.28(14)};d(9.c.p){2b.33=N.1d.33}9.7=$(2R.2Q(\'3I\',2b));Q.1q();Q.1c(A.j().y.3H,9.7,17,{3G:b(){9.32(14)},3F:b(){9.2l()},3E:L})},b(){1o.1n(A.j().y.1I)})},28:b(29){f 2a={\'l\':1,\'r\':2,\'x\':3,\'z\':4,\'3D\':5,\'n\':6};q 2a[29]?2a[29]:0},32:b(14){f 9=8;d(N.27&&8.c.z){8.7.g(\'.1h #a-\'+9.28(\'z\')).K(N.27.m)}8.7.g(\'.1h\').Z(\'1h-\'+8.7.g(\'.1h 1e:26(.25)\').M);8.7.g(\'.1h 1e:26(.25)\').I(b(){f a=$(8),m=a.G(\'V\');9.7.G(\'V\',m+\' a-\'+(a.3C(\'1e:26(.25)\').M+1));9.1T();9.18(m)});8.7.g(\'.a-7\').21(b(){f m=$(8).G(\'V\').1k(\'a-7\',\'\').1i();9.1l[m]=$(8).g(\'.3B\')});9.2U=9.7.g(\'.3A\');9.18(14);8.2m=8.7.g(\'.H 24.m\').31(b(e){d(e.30===2Z.2Y){9.1F()}});8.2o=8.7.g(\'.H 24.2X\').31(b(e){d(e.30===2Z.2Y){9.1H()}});8.7.g(\'.H 24\').3z(b(){d($(8).W()===A.j().y.H){$(8).W(\'\')}}).3y(b(){d($(8).W()===\'\'){$(8).W(A.j().y.H)}});8.7.g(\'.H .m-2W\').2V().I(b(){9.1F()});8.7.g(\'.H .2X-2W\').2V().I(b(){9.1H()});8.7.g(\'.a-7.r h k.m B, .a-7.p h k.m B, .a-7.n h k.m B\').I(8.1R);8.7.g(\'.a-7.l h k.m B, .a-7.z h k.m B, .a-7.x h k.m B\').I(8.1S);8.7.g(\'.a-7.l h k.P B, .a-7.z h k.P B, .a-7.x h k.P B\').21(b(){f 12=$(8),13=12.K(),1u=9.20(13);12.K(1u)}).11({2P:T}).I(8.1Q);8.7.g(\'.a-7.l h k.O .2O\').11();8.7.g(\'.a-7.l h k.O .2N-2M-2L\').11();8.1Z(8.7);8.1T()},18:b(a){f 9=D;Q.3x(9.o[a],9.2U,D.2s,a)},2T:b(1w,23){q(1w.M<23)?1w:1w.3w(0,23-1)+\'...\'},20:b(13){q D.2T(13,19)},1J:b(a,t){f 9=D;d(!t.1a.M){q}t.2S=E.j().F?E.j().F.1m:\'\';t.1v=A.j().y.22;8.c[a].3v=E.j().2I;8.1l[a].3u(2R.2Q(\'3t\',t));8.7.g(\'.a-7.l h k.m B\').I(8.1S);8.7.g(\'.a-7.r h k.m B, .a-7.p h k.m B, .a-7.n h k.m B\').I(8.1R);8.7.g(\'.a-7.l h k.P B\').21(b(){f 12=$(8),13=12.K(),1u=9.20(13);12.K(1u)}).11({2P:T}).I(8.1Q);8.7.g(\'.a-7.l h k.O .2O\').11();8.7.g(\'.a-7.l h k.O .2N-2M-2L\').11();8.7=8.1Z(8.7)},1Z:b(7){f 2K=7.g(\'.a-7.r h C k.O .1f.1W, .a-7.p h C k.O .1f.1W\');2K.3s({t:A.j().y.1f,3r:{\'I\':b(){f J=D.1D($(8)),2J=$(8).G(\'2F\')||0;1N.3q(J,2J)}}});q 7},3p:b(){d(!8.7){q}f 1g=E.j().F?E.j().F.2I:T;8.7.g(\'.a-7.r h C[S="L"], .a-7.p h C[S="L"], .a-7.n h C[S="L"]\').3o(\'S\');d(1g){8.7.g(\'.a-7.r h C.\'+1g+\', .a-7.p h C.\'+1g+\', .a-7.n h C.\'+1g).G(\'S\',L)}},3n:b(){d(!8.7||!E.j().F){q}f 1Y=8.7.g(\'.a-7.r h C[S!="L"] k.O .1f, .a-7.p h C[S!="L"] k.O .1f\');1K(f i=0;i<1Y.M;i++){f R=$(1Y[i]),1X=1j(R.2j(\'C\').G(\'V\'),10),1V=E.j().F.2H[1X]?E.j().F.2H[1X].3m:0,1U=A.3l(1V);d(R.3k(\'1W\')){R.g(\'2G>1e\').1b(\'2E\');R.g(\'2G>1e[2F=\'+1V+\']\').Z(\'2E\');R.g(\'.2D-2C>.2D-2C-K\').K(1U)}U{R.K(1U)}}},1T:b(){d(!$(\'#y-2u\').M){q}d(N.1d.2B){8.7.Z(\'1c-2A-2z\')}U{8.7.1b(\'1c-2A-2z\')}d(N.1d.2y){8.7.Z(\'1c-n\')}U{8.7.1b(\'1c-n\')}d(E.j().F){8.7.Z(\'1t-2x-1s\')}U{8.7.1b(\'1t-2x-1s\');q}d(3j.3i.3h()){8.7.Z(\'1t-2w-1s\')}U{8.7.1b(\'1t-2w-1s\')}},1S:b(){f 2v=$(8).K(),Y={1P:\'D\',1O:\'1r\',X:[\'l\']};Q.1q();3g.3f(2v,T,Y)},1R:b(){f J=D.1D($(8)),Y={1P:\'D\',1O:\'1r\',X:[$(\'#y-2u\').3e(\'.p\')?\'p\':\'r\']};Q.1q();1N.2t(J,Y)},1Q:b(){f J=D.2i($(8)),Y={1P:\'D\',1O:\'1r\',X:[\'l\']};d(J){Q.1q();1N.2t(J,Y)}},2s:b(2r,a){f 9=D;1M.3d(a,2r,b(t){d(!t.1a.M){q}9.c[a]=t;9.o[a].w=9.c[a].v.w;9.o[a].u=9.c[a].v.u;9.1J(a,t);9.18(a)},b(){1o.1n(A.j().y.1I)})},H:b(a,X){f 9=8;1M.3c(a,X,b(t){f 1L=T;d(t.1a.M){1K(f 2q 2p t.1a){d(t.1a[2q].3b){1L=L}}}d(!1L){1K(f 1p 2p X){d(1p==\'1m\'||1p==\'2n\'){1o.1n(A.j().y.3a[a][1p])}}q}9.c[a]=t;9.o[a].w=9.c[a].v.w;9.o[a].u=9.c[a].v.u;9.1J(a,t);9.18(a)},b(){1o.1n(A.j().y.1I)})},1H:b(){f a=8.1E(),1G=1j(8.2o.W());d(39(1G)){q}8.H(a,{2n:1G})},1F:b(){f a=8.1E(),m=8.2m.W();d(/^\\s*$/.38(m)){q}8.H(a,{1m:m})},2l:b(){8.7=17;8.c=17;8.1l={};8.o={l:{},r:{},x:{},z:{},p:{},n:{}}},1E:b(){q 8.7.g(\'.a-7:37\').G(\'V\').1k(\'a-7\',\'\').1i()},1D:b(2k){q 1j(2k.2j(\'C\').G(\'V\').1k(\'36\',\'\').1k(\'35\',\'\').1i(),10)},2i:b(1C){f J=1C.2h().G(\'P-2g\');d(J){q 1j(1C.2h().G(\'P-2g\').1i(),10)}U{q T}}};', 62, 234, '|||||||content|this|self|tab|function|ratingData|if||var|find|table||getData|td|players|name|needles|paginationInfo|worldGoal|return|unions||data|Paget|Pagination|Pagen|ingredients|rating|gameEvent|i18nModel|span|tr|ratingController|playerModel|Union|attr|search|click|unionId|text|true|length|staticDataModel|actions|union|uiWindow|diplomacyElement|own|false|else|class|val|params|backObject|addClass||tooltip|el|unionName|defaultRatingTab|tabID|Type|null|createRatingPager||List|removeClass|show|config|li|relations|currentUnionId|tabs|trim|parseInt|replace|tabsContents|Name|showSystemMessage|messageController|param|close|showWindow|diplomacy|can|newUnionName|titles|nameValue|tabCounter|worldGoalRating|gameEventRating|unionsRating|playersRating|playerRow|getClickedUnionId|getSelectedTabIndex|onFindNameClick|rank|onFindPositionClick|loadError|renderDataForTab|for|found|ratingModel|unionController|method|controller|onPlayerUnionClick|onUnionClick|onPlayerClick|rebuildContentClassAttribute|diplomacyTitle|diplomacyType|editable|relatedUnionId|diplomacies|createDiplomacySelection|formatUnionName|each|playersTitles|maxLength|input|decor|not|gameEventStaticData|getTabNumberForName|tabName|ratio|templateData|defaultTab|useNeedlesTab|useWorldGoalTab|useGameEventTab|id|parent|getClickedPlayerUnionId|closest|unionRow|onWindowClose|nameInput|Rank|positionInput|in|item|page|goToPage|displayUnionInfo|window|playerName|change|see|needlesEnabled|goal|world|worldGoalEnabled|title|main|selected|info|ul|Diplomacy|Id|value|relationElements|die|to|ready|padawan|showURL|applyTemplate|uiUtils|playerUnionName|formatName|pagerContainer|clickable|button|position|KEY_RETURN|chatController|keyCode|keypress|onWindowShow|worldGoalType|extend|selectable|highlight|visible|test|isNaN|error|Highlight|getSearchData|getPagedData|is|displayProfile|playerController|canIChangeDiplomacy|rights|unionModel|hasClass|getUnionDiplomacyTitleByType|Relation|updateUnionDiplomacy|removeAttr|resetOwnUnion|saveDiplomacy|handler|list|ratingTable|html|CurrentPlayerId|slice|createPager|blur|focus|paging|body|prevAll|woldGoal|disableScrolling|onClose|onShow|windowTitle|ratingWindow|ratingTables|windowPreload|block'.split('|')))

class recruitBuildingController {
    static initWindow(buildingId, callback) {
        let self = this
            , initWindowCallback = function(helpTemplate) {
            self.buildingId = buildingId;
            self.resourceBar = null;
            self.content = self.createContent();
            self.params = {
                onShow: self.onWindowShow,
                onClose: self.onWindowClose,
                onHelp: buildingController.rearrangeHelpContent,
                helpContent: helpTemplate,
                disableScrolling: true,
                helpButton: true
            };
            self.troopsToRecruit = {};
            callback();
        };
        buildingController.generateHelpContentForBuilding(buildingId, initWindowCallback);
    }
    static onWindowClose() {
        let self = recruitBuildingController;
        self.troopsToRecruit = {};
        methodModel.getHandler('onCloseMilitaryBuildingWindow')();
    }
    static createContent() {
        let content = $(uiUtils.applyTemplate('recruitBuildingWindow', this.createTemplateData()));
        return this.updateContent(content);
    }
    static createTemplateData() {
        let templateData = {
            troops: {}
        }
            , isNewYearTheme = $.body.hasClass('new-year-theme')
            , newYearThemedTroops = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
            , forgeLevel = parseInt(townModel.getData().Buildings[11].Level);
        $.extend(templateData, i18nModel.getData().town.garrison);
        if (this.buildingId === 20) {
            templateData.buildNewTown = i18nModel.getData().town.castle.buildNewTown;
        }
        for (let troopTypeId in staticDataModel.troops) {
            troopTypeId = parseInt(troopTypeId);
            let curTroop = staticDataModel.troops[troopTypeId];
            if (curTroop.buildingId !== this.buildingId) {
                continue;
            }
            if (troopTypeId === 13 || troopTypeId === 12) {
                continue;
            }
            let requirements = [];
            for (let key in curTroop.requirements.Buildings) {
                if (townModel.getData().Buildings[key].Level < curTroop.requirements.Buildings[key]) {
                    requirements.push(String.format(i18nModel.getData().town.garrison.buildingNeed, [i18nModel.getData().town.buildings[key].name, curTroop.requirements.Buildings[key]]));
                }
            }
            for (let key in curTroop.requirements.Researches) {
                if (townModel.getData().TownResearch[key] === undefined || townModel.getData().TownResearch[key] < curTroop.requirements.Researches[key] || forgeLevel < staticDataModel.townResearchStaticData[key].ForgeLevel) {
                    requirements.push(String.format(i18nModel.getData().town.garrison.researchNeed, i18nModel.getData().townResearch.names[key]));
                }
            }
            templateData.troops[troopTypeId] = {
                name: i18nModel.getTroopsName(troopTypeId),
                amount: townModel.getData().Troops[troopTypeId],
                requirements: requirements,
                imageSrc: staticDataUrl + 'resource/troops/' + troopTypeId + ((isNewYearTheme && (newYearThemedTroops.indexOf(parseInt(troopTypeId, 10)) !== -1)) ? '-new-year' : '') + '.jpg'
            };
        }
        templateData.cost = {
            wood: 100,
            iron: 100,
            stone: 100,
            gold: 100,
            food: 100
        };
        if (self.buildingId === 20 && additionalAristocratModel.isEnabled()) {
            templateData.cost.aristocratCoins = 100;
        }
        return templateData;
    }
    static updateContent(content) {
        recruitBuildingController.peopleToRecruit = 0;
        let self = recruitBuildingController;
        self.recruitButton = content.filter('#recruit-this').clickable().click(this.onRecruitClick);
        content.find('input.count').keyup(this.troopAmountChange);
        content.find('div.max').clickable().click(function() {
            let item = $(this).closest('#recruit-building-content li')
                , id = parseInt(item.attr('id').match(/troop-(\d+)/)[1])
                , textBox = item.find('input:text')
                , maxCount = recruitBuildingController.calculateMaxTroopCount(id, parseInt(textBox.val(), 10));
            if ($(this).hasClass('disabled') || item.hasClass('requirement')) {
                return;
            }
            textBox.val(maxCount);
            self.troopsToRecruit[id] = maxCount;
            self.updateResourceBar();
        });
        content.find('div.recruit-left').clickable().click(function() {
            let item = $(this).closest('#recruit-building-content li')
                , id = parseInt(item.attr('id').match(/troop-(\d+)/)[1])
                , textBox = item.find('input:text')
                , value = parseInt(textBox.val(), 10);
            if (item.hasClass('requirement') || value <= 0) {
                return;
            }
            textBox.val(value - 1);
            self.troopsToRecruit[id] = value - 1;
            self.updateResourceBar();
        });
        content.find('div.recruit-right').clickable().click(function() {
            let item = $(this).closest('#recruit-building-content li')
                , id = parseInt(item.attr('id').match(/troop-(\d+)/)[1])
                , textBox = item.find('input:text')
                , value = Math.min(parseInt(textBox.val(), 10) + 1, recruitBuildingController.calculateMaxTroopCount(id));
            if (item.hasClass('requirement')) {
                return;
            }
            textBox.val(value);
            self.troopsToRecruit[id] = value;
            self.updateResourceBar();
        });
        content.find('.resource').each(function(index, value) {
            let $this = $(value)
                , resourceId = $this.attr('id').match(/.+\-([^\-]+)$/)[1];
            $this.tooltip({
                showURL: false,
                delay: 0,
                bodyHandler: function() {
                    return i18nModel.getData().resources[resourceId];
                }
            });
        });
        return content;
    }
    static troopAmountChange() {
        let self = recruitBuildingController
            , control = $(this)
            , value = parseInt(control.val(), 10) || 0
            , id = parseInt(control.closest('li').attr('id').match(/troop-(\d+)/)[1])
            , max = self.calculateMaxTroopCount(id)
            , count = Math.max(0, Math.min(max, value));
        self.troopsToRecruit[id] = count;
        control.val(count);
        self.updateResourceBar();
    }
    static calculateMaxTroopCount(id) {
        let self = recruitBuildingController
            , freePeople = townModel.getData().FreePeople
            , maxCount = 4294967296
            , resourcesToRecruit = {};
        if (freePeople <= 0) {
            return 0;
        }
        $.extend(resourcesToRecruit, playerModel.getData().Resources);
        let skillArr = rpgModel.getSkillsAffectingUnitCost()
            , aristocratSkillArr = rpgModel.getSkillsAffectingAristocratUnitCost()
            , increment = 0
            , aristocratIncrement = 0;
        for (let index in skillArr) {
            let skillId = skillArr[index];
            if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                continue;
            increment += rpgModel.playerSkills[skillId].Parameter / 100;
        }
        for (let index in aristocratSkillArr) {
            let skillId = aristocratSkillArr[index];
            if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                continue;
            aristocratIncrement += rpgModel.playerSkills[skillId].Parameter / 100;
        }
        for (let key in self.troopsToRecruit) {
            key = parseInt(key);
            if (key === id) {
                continue;
            }
            freePeople -= self.troopsToRecruit[key] * staticDataModel.troops[key].peopleRequired;
            if (freePeople <= 0) {
                return 0;
            }
            for (let res in staticDataModel.config.resources.nameToId) {
                if (key === 14) {
                    resourcesToRecruit[res] -= Math.ceil(staticDataModel.troops[key].cost[res] * (100 - increment - aristocratIncrement) / 100) * self.troopsToRecruit[key];
                } else {
                    resourcesToRecruit[res] -= Math.ceil(staticDataModel.troops[key].cost[res] * (100 - increment) / 100) * self.troopsToRecruit[key];
                }
                if (resourcesToRecruit[res] <= 0) {
                    return 0;
                }
            }
        }
        maxCount = Math.min(maxCount, Math.floor(freePeople / staticDataModel.troops[id].peopleRequired));
        for (let res in staticDataModel.config.resources.nameToId) {
            if (res === 'food') {
                continue;
            }
            if (id === 14) {
                maxCount = Math.min(maxCount, Math.floor(resourcesToRecruit[res] / Math.ceil(staticDataModel.troops[id].cost[res] * (100 - increment - aristocratIncrement) / 100)));
            } else {
                maxCount = Math.min(maxCount, Math.floor(resourcesToRecruit[res] / Math.ceil(staticDataModel.troops[id].cost[res] * (100 - increment) / 100)));
            }
        }
        if (id === 14 && additionalAristocratModel.isEnabled()) {
            let coins = additionalAristocratModel.getAristocratCoins()
                , aristocratNumber = additionalAristocratModel.getAristocratNumber()
                , price = Math.max(1, Math.floor(additionalAristocratModel.getAristocratPrice(++aristocratNumber) * (100 - aristocratIncrement) / 100))
                , max = 0;
            while (price <= coins) {
                max++;
                coins -= price;
                price = Math.max(1, Math.floor(additionalAristocratModel.getAristocratPrice(++aristocratNumber) * (100 - aristocratIncrement) / 100));
            }
            maxCount = Math.min(maxCount, max);
        }
        return maxCount;
    }
    static updateResourceBar() {
        let self = recruitBuildingController;
        if ($.isEmptyObject(self.content))
            return;
        let resourcesToRecruit = {
            gold: 0,
            iron: 0,
            wood: 0,
            stone: 0,
            people: 0,
            time: 0,
            food: 0
        }
            , troopsTotal = 0;
        if (self.buildingId === 20 && additionalAristocratModel.isEnabled()) {
            resourcesToRecruit.aristocratCoins = 0;
        }
        if (this.resourceBar == null) {
            this.resourceBar = {};
            if (!this.fullTime) {
                this.resourceBar.people = $('#full-troop-resource-people').children('div');
                this.fullTime = $('#full-time').children('span');
            }
            for (let resource in resourcesToRecruit) {
                this.resourceBar[resource] = $('#full-troop-resource-' + resource).children('.cost');
            }
        }
        for (let key in self.troopsToRecruit) {
            troopsTotal += self.troopsToRecruit[key];
            let skillArr, increment, decrement;
            for (let res in resourcesToRecruit) {
                switch (res) {
                    case 'people':
                        resourcesToRecruit[res] += staticDataModel.troops[key].peopleRequired * self.troopsToRecruit[key];
                        break;
                    case 'time':
                        resourcesToRecruit[res] += staticDataModel.troops[key].getCalculatedTrainingTime() * self.troopsToRecruit[key];
                        break;
                    case 'food':
                        increment = 0;
                        if (jQuery.inArray(parseInt(key), rpgModel.troopIdConsumptionDecrease) >= 0) {
                            skillArr = rpgModel.getSkillsAffectingUnitConsumption();
                            for (let index in skillArr) {
                                let skillId = skillArr[index];
                                if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                                    continue;
                                increment += rpgModel.playerSkills[skillId].Parameter;
                            }
                        }
                        resourcesToRecruit[res] += (staticDataModel.troops[key].consumption - increment) * self.troopsToRecruit[key];
                        break;
                    case 'aristocratCoins':
                        if (key === 14 && additionalAristocratModel.isEnabled()) {
                            let nextAristocratNumber = additionalAristocratModel.getAristocratNumber() + 1
                                , affectingSkillsArray = rpgModel.getSkillsAffectingAristocratUnitCost()
                                , discount = 1;
                            for (let index in affectingSkillsArray) {
                                if (rpgModel.playerSkills[affectingSkillsArray[index]]) {
                                    discount -= rpgModel.playerSkills[affectingSkillsArray[index]].Parameter / 10000;
                                }
                            }
                            for (let i = 0; i < self.troopsToRecruit[key]; i++) {
                                let nextAristocratPrice = additionalAristocratModel.getAristocratPrice(nextAristocratNumber++);
                                nextAristocratPrice = Math.max(Math.floor(nextAristocratPrice * discount), 1);
                                resourcesToRecruit[res] += nextAristocratPrice;
                            }
                        }
                        break;
                    default:
                        skillArr = rpgModel.getSkillsAffectingUnitCost();
                        increment = 0;
                        for (let index in skillArr) {
                            let skillId = skillArr[index];
                            if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                                continue;
                            increment += rpgModel.playerSkills[skillId].Parameter / 100;
                        }
                        if (key === 14) {
                            let affectingSkillsArray = rpgModel.getSkillsAffectingAristocratUnitCost()
                                , discount = 1;
                            for (let index in affectingSkillsArray) {
                                if (rpgModel.playerSkills[affectingSkillsArray[index]]) {
                                    increment += rpgModel.playerSkills[affectingSkillsArray[index]].Parameter / 100;
                                }
                            }
                        }
                        resourcesToRecruit[res] += Math.ceil(staticDataModel.troops[key].cost[res] * (100 - increment) / 100) * self.troopsToRecruit[key];
                        break;
                }
            }
        }
        if (troopsTotal === 0) {
            self.recruitButton.addClass('disabled');
        } else {
            self.recruitButton.removeClass('disabled');
        }
        for (let res in resourcesToRecruit) {
            let val = resourcesToRecruit[res];
            if (res === 'time') {
                val = $.secsToString(val, i18nModel.getTimeFormat());
            }
            this.resourceBar[res].text(val);
        }
    }
    static onRecruitClick() {
        let self = recruitBuildingController
            , button = $(this)
            , troops = {};
        if (button.hasClass('disabled'))
            return;
        button.addClass('disabled');
        self.content.find('#error-message').text('');
        self.content.eq(0).find('li').each(function() {
            let id = parseInt($(this).attr('id').match(/troop-(\d+)/)[1])
                , value = parseInt($(this).find('input:text').val(), 10)
                , self = recruitBuildingController;
            if (!value || value < 0) {
                return;
            }
            troops[id] = value;
        });
        if ($.objectKeys(troops).length === 0) {
            return false;
        }
        let showMessage = true;
        for (let key in townModel.getData().RecruitingList) {
            showMessage = false;
            break;
        }
        Troop.recruit(troops, function(data) {
            methodModel.getHandler('recruitStart')(data);
        }, function(troopId, errorCode) {
            errorCode && messageController.showSystemMessage(i18nModel.getTextByCode(errorCode));
        }, uiWindow.ajaxError);
        troops = null;
        self.clearWindow();
    }
    static clearWindow() {
        this.troopsList.find('input.count').val(0);
        this.troopsToRecruit = {};
        this.updateResourceBar();
    }
    static onWindowShow() {
        let self = recruitBuildingController;
        self.troopsList = $('#recruit-building-content');
        self.troopsList.filter('#recruit-building-content').find('li .troop-img, li.requirement .tooltip').each(function(i, obj) {
            $(this).tooltip({
                delay: 0,
                left: 40,
                top: 0,
                showURL: false,
                track: true,
                bodyHandler: function() {
                    let id = $(this).parent().attr('id').match(/troop-(\d+)/)[1];
                    return staticDataModel.troops[id].getTooltipTemplate();
                },
                extraClass: 'troop-tooltip'
            });
        });
        methodModel.getHandler('onOpenMilitaryBuildingWindow')(self.buildingId);
    }
    static clear() {}
}
eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('l B={M:24,8a:[],89:5,88:0.1,87:86,85:84,83:82,1h:{\'1S\':\'-1B-1\',\'2f\':\'-1B-2\'},1f:{1e:1,2S:1},1N:R,81:80,U:{1B:{1:o,2:o,3:o,4:o,5:o,6:o,7:o,8:o,11:o,14:o},55:{1:o,2:o,3:o,4:o,5:o,6:o,7:o,8:o,9:o,10:o,11:o,14:o},1V:{1:{16:o,17:o},2:{20:o,21:o},3:{18:o,19:o},4:{4:o,6:o}},40:{15:o}},4z:{2:o,5:o,6:o,9:o,10:o,11:o,12:o,13:o,14:o,15:o,16:o,17:o,18:o},3P:f(){l b=g,2T={n:j.h().s.n};1j.7Z(j.h().s.7Y);g.1f.1e=1;g.1N=R;Z.5n(g.1f.1e-1,b.1N,f(a){b.1f.1e=a.1e+1;b.1f.2S=a.2S;2T.s=Z.5m(a.N,R);W(l u 1g 2T.s){b.2x(2T.s[u])}1j.26();b.M=$(27.2y(\'7X\',2T));1j.7W(j.h().s.7V,b.M,24,{7U:f(){b.5r()},7T:f(){b.5s()}});k(42.5k(Z.N)){b.1X.1m(\'1J\')}G{b.1X.1p(\'1J\')}},f(){2i.2h(j.h().s.5j)})},5s:f(){g.M=24;g.N=24},5r:f(){l b=g;g.N=g.M.p(\'.46\').46();g.4b();g.2A=g.M.p(\'#1o-s-5q\');g.2A.1n().I(b.4P);g.1X=g.M.p(\'#1o-4e-s-5q\');g.1X.1n().I(b.4M);g.2e=g.M.p(\'#4d-4e-s-4k\');g.2e.1n().I(b.4m);g.M.p(\'#4d-4e-s-7S\').1n().I(f(){b.2e.I()});g.5o();g.2I=g.M.p(\'.K-7R\');g.2l=g.2I.p(\'.K-M\');g.5p=g.2I.p(\'.A-41-K\');g.5p.1n().1H({2v:R,2u:0,2t:f(){A j.h().s.n.7Q}}).I(f(){b.1Y()});g.31=g.M.p(\'.s-N\');g.3w();g.4a=g.M.p(\'.7P\');1j.5l(g.1f,g.4a,g.1E)},4b:f(){g.M.p(\'O.c .1v\').I(g.3q);g.M.p(\'O.1v .1I-3p\').I(f(){b.M=24;1j.26();2w.3o($(g).H())});g.M.p(\'.1v .2U O\').1H({2v:R,2u:0,2t:f(){A $(g).Q(\'1H\')}});g.M.p(\'.c\').1m(\'7O\')},5o:f(){l b=g;g.M.p(\'#K-1z-2s\').7N({a:j.h().s.7M,7L:{\'I\':f(){l 25=b.M.p(\'#K-1z-2s\').3c(\'.1y\').Q(\'1d\');k(j.h().s.4c[25]!=3a){25=b.M.p(\'#K-1z-2s>.1y .7K\').Q(\'7J\')}G{25=25.3N(/^1z:(.+)$/)[1]}k(b.1N!=25){b.1N=25;b.1E(1)}}}},0);g.M.p(\'#K-1z-2s\').3c(\'7I\').4O(f(){l $g=$(g);$g.1m(\'K-1z-2s-7H\');k(j.h().s.4c[$g.Q(\'1d\')]!=3a){$g.3A(\'<O 4Y="7G-4d"></O>\');$g.1m(\'K-1z-7F-2s\');$g.N({a:j.h().s.4c[$g.Q(\'1d\')]})}})},1E:f(1e){l b=B;Z.5n(1e-1,b.1N,f(a){b.1f.1e=a.1e+1;b.1f.2S=a.2S;b.N.3U();k(!a||!a.N){b.1x=$();A}l s=Z.5m(a.N,R);W(l u 1g s){b.2x(s[u]);l 2l=$(27.2y(\'3r\',s[u]));2l.5c(b.N)}b.3w();b.N.50();b.N.7E();b.4b();1j.5l(b.1f,b.4a,b.1E);k(42.5k(Z.N)){b.1X.1m(\'1J\')}G{b.1X.1p(\'1J\')}},f(){2i.2h(j.h().s.5j)})},3q:f(e){l b=B,3n=$(g).7D(),49=$(e.7C),u=3n.Q(\'u\').3N(/^c-(\\d+)$/)[1];k(49.2z(\'1o\')){b.1W(u);A}k(49.2z(\'7B\')){b.7A(u,3n);A}b.5d(u,3n)},5i:f(1R){1R.p(\'48, 5h\').7z(f(){$(g).3l(\'\');$(g).7y()})},7x:f(1R,3m){l b=B;b.5i(1R,(3m?o:R));1R.p(\'.2r\').I(f(){b.7w((3m?3m:1R.p(\'48.4J\').3l()),1R.p(\'48.3D\').3l(),1R.p(\'5h\').3l())})},58:f(a){l H=j.h().s.1s[a.v],2R=H.n.7v+H.n[a.m.7u].2r,2P=H.n.2Q;a.n={};k(!a.m.7t&&a.47.3H!==P.h().E){2R=H.n.1Q.2r;2P=H.n.1Q.2Q+H.n.1Q.5g}G k(a.47.3H===a.47.7s){2R=H.n.1Q.2r;2P=H.n.1Q.2Q}G k(!a.m.T.1P.2q){2R=H.n.1Q.2r+H.n.1Q.5g;2P=H.n.1Q.2Q}k(!a.m.T.1P.2q){a.7r=o}a.n.2r=z.D(2R,a.m.T.1P.1a.E,a.m.T.1P.1a.1U.X,a.m.T.1P.1a.1U.Y,a.m.T.1P.2O.E);k(!a.m.T.1u.2O||!a.m.T.1u.2O.E){a.m.T.1u.1a.E=j.2H();a.m.T.1u.2O={E:j.2H()}}a.n.2Q=z.D(2P,a.m.T.1u.1a.E,a.m.T.1u.1a.1U.X,a.m.T.1u.1a.1U.Y,a.m.T.1u.2O.E);a.5f=[];W(l 1Z 1g a.m.T.1P.2q){a.5f.3M({3W:a.m.T.1P.2q[1Z],2m:1Z})}a.5e=[];W(l 1Z 1g a.m.T.1u.2q){a.5e.3M({3W:a.m.T.1u.2q[1Z],2m:1Z})}A a},5d:f(u,1w){l b=g;b.2l.3U();1w.p(\'.1v\').1p(\'7q\');1w.p(\'.1v .H .3D\').1p(\'7p\');l S=$(27.2y(\'3r\',b.2x(Z.7o(u),o)));S.7n(\'u\');S.5c(b.2l);S.46();Z.4g(u,f(){l a=Z.7m()[u];a.n=j.h().s.1s[a.v].n;a.3Z=24;2d(a.v){C 3:a.43={7l:a.q.4K,v:a.q.1c};k(([1,3,4].7k(a.q.1c)!=-1)){a.43.7j=o}l 45=R;W(l 5b 1g a.m.t.44){k(a.m.t.44[5b]>0){45=o}}k(!45){1o a.m.t.44;1o a.m.t.7i}k(!a.r.t.J){a.r.t.J={E:24}}a.r.3J.U=b.U.1B;2d(a.43.v){C 3:a.r.t.J.E=j.4L(a.r.t.1V.32,a.r.t.1V.2K);a.r.t.U=a.r.t.1V.32<10?b.U.1V[a.r.t.1V.32]:b.U.1B;F;C 4:a.r.t.1i=j.2H();a.r.t.J.E=j.2H();a.r.t.U=b.U.40;F;1B:a.r.t.U=b.U.1B}k(a.r.2L){W(l 1t 1g a.r.2L){l 2N=a.r.2L[1t],2M="",2p="";k(2N.5a==0){2M=z.D(j.h().J.22[1t].7h,2N.41);k(42.7g(1t,[13,14,15,19,20])>-1){2p=j.h().J.22[1t].7f}G{2p=j.h().J.22[1t].59}}G{2M=z.D(j.h().J.22[1t].7e,2N.41,2N.5a);2p=j.h().J.22[1t].59}a.r.2L[1t].2M=2M;a.r.2L[1t].2p=2p}}F;C 4:a=b.58(a);F;C 6:a.7d=z.D(j.h().s.1s[6].7c[a.m.3G],a.m.7b.1i,a.m.57.7a,a.m.57.1F);F;C 7:k(a.m.1a&&a.m.1a.E){a.n=z.D(a.n.79[a.q.2Z],a.m.29.E,a.m.1a.E,a.m.1a.X,a.m.1a.Y)}G{a.n=z.D(a.n.78[a.q.2Z],a.m.29.E,j.h().37.36.35.3E)}a.r.U=b.U.1B;W(l 2n 1g a.r.U){k(a.r.29.56[2n]==3a){a.r.29.56[2n]=0}}F;C 8:a.n=j.h().s.1s[a.v].77;a.n.22=j.h().J.22;a.n.3k=j.h().3k;a.n.2J=j.h().2J;k(a.q.t.J.E){a.r.U=b.U.55}G{a.r.U=b.U.40}F;C 9:k(a.m.4I==P.h().28){k(a.q.34){a.n=z.D(a.n.76,a.m.1i,P.2o(a.m.1G),a.m.1G)}G{a.n=z.D(a.n.4H,P.2o(a.m.1G),a.m.1G,a.m.75,a.m.74)}}G{k(a.q.34){a.n=z.D(a.n.73,a.m.1i,P.2o(a.m.1G),a.m.1G)}G{a.n=z.D(a.n.4G,a.m.1i,P.2o(a.m.1G),a.m.1G)}}F;C 11:l 1C=a.m.J.E,54=j.h().72.N[a.m.71].2m,2g=(a.m.2g&&a.m.2g==70)?a.n.6Z:a.n.6Y,1r=\'\';k(3C a.m.2F==\'4F\'){1r=a.n.4E[a.m.2F+0]}G{1r=(a.m.2g>0)?a.n.4D:a.n.4C}a.n=z.D(1r,54,1C,2g);a.3Z=9;F;C 12:a.n=z.D(a.n,P.2o(P.h().2K),P.h().2K,P.h().E);F;C 13:a.n=z.D(a.n,P.2o(P.h().2K),P.h().2K,P.h().E);F;C 18:a.n=z.D(a.n,j.6X(a.m.v),a.m.1G);F}a.2J=j.h().2J;a.53=j.h().53;a.52=j.h().52;a.3k=j.h().3k;a.u=u;l 51=$(27.2y(\'6W\'+(a.3Z||a.v),a));b.2I.1p(\'3j-3i\');b.31.1m(\'3j-3i\');S.p(\'.r\').3d();S.6V(51);S.50();2d(a.v){C 5:S.p(\'O.r O.3Y\').1n().I(f(){b.3f(u,$(g).Q(\'1F\'))});S.p(\'O.r O.3X\').1n().I(f(){b.3e(u,$(g).Q(\'1F\'))});F;C 19:S.p(\'O.r O.3Y\').1n().I(f(){b.4R(u,$(g).Q(\'2k\'))});S.p(\'O.r O.3X\').1n().I(f(){b.4Q(u,$(g).Q(\'2k\'))});F;C 20:S.p(\'O.r O.3Y\').1n().I(f(){b.6U(u,$(g).Q(\'1F\'))});S.p(\'O.r O.3X\').1n().I(f(){b.6T(u,$(g).Q(\'1F\'))});F}S.p(\'.2U .1o\').1H({2v:R,2u:0,2t:f(){A j.h().s.n.4y}}).I(f(){b.1W(u);b.1Y()});S.p(\'.r .2J .1Z,.r .2n-N .2n,.6S-2n,.r .4Z .4Z-3W-6R-V\').1H({2v:R,2u:0,2t:f(){A $(g).Q(\'1H\')}});S.p(\'2B.1I-3p\').I(f(){1j.26();2w.3o($(g).H())});S.p(\'2B.4X-2m\').I(f(){l u=1A($(g).Q(\'4Y\').3V(\'4X-2m\',\'\').3V(\'6Q\',\'\').3V(\'6P\',\'\').6O(),10);1j.26();3Q.6N(u,{6M:\'B\',6L:\'3P\'})});S.p(\'2B.J-2m\').I(f(){l x=$(g).Q(\'x\'),y=$(g).Q(\'y\'),4W={4u:1A(y),6K:1A(x)};2W.6J(4W)})})},1Y:f(){l b=B;b.2I.1m(\'3j-3i\');b.31.1p(\'3j-3i\');b.2l.3U()},6I:f(a){W(l i=0;i<a.3T.1k;i++){a.3T[i].4V=$.2E(a.3T[i].4U,j.h().3g)}W(l 1d 1g a.3S){a.3S[1d].4V=$.2E(a.3S[1d].4U,j.h().3g)}W(l 1d 1g a.2a){k(!a.2a[1d].2X){4T}a.2a[1d].2X.4S=$.2E(a.2a[1d].2X.3R,j.h().3g)}W(l 1d 1g a.3h){k(!a.3h[1d].3R){4T}a.3h[1d].4S=$.2E(a.3h[1d].3R,j.h().3g)}A a},3f:f(1O,1F){l b=B;3Q.3f(1A(1F),f(){b.1Y();b.1W(1O);4x.6H(o)})},3e:f(1O,1F){l b=B;3Q.3e(1A(1F),f(){b.1Y();b.1W(1O)})},4R:f(1O,2k){l b=B;3O.3f(1A(2k),f(){b.1Y();b.1W(1O);1j.26();2i.2h(j.3b(\'6G:6F\'));3O.3P()})},4Q:f(1O,2k){l b=B;3O.3e(1A(2k),f(){b.1Y();b.1W(1O)})},4P:f(){l b=B,2j=[];k(b.2A.2z(\'1J\')){A R}b.N.p(\'.c:6E(.4j.1y)\').4O(f(){l 4N=$(g),u=1A(4N.Q(\'u\').3N(/(\\d+)/)[0],10);k(u){2j.3M(u)}});k(!2j.1k){A R}Z[\'1o\'](2j,f(){W(l i=0;i<2j.1k;i++){b.N.p(\'#c-\'+2j[i]).3d();k(!b.N.3c(\'.c\').1k){b.1E(b.1f.1e-1)}G{b.1E(b.1f.1e)}}},f(1D){k(1D.3K==z){2i.2h(j.3b(1D))}})},4M:f(){l b=B,3L=B.1N?B.1N:\'0\';k(b.1X.2z(\'1J\')){A R}1j.6D({39:j.h().s.6C[\'1z:\'+3L],6B:f(){Z.6A(3L,f(){b.N.p(\'.c\').3d();b.1E(1)},f(1D){k(1D.3K==z){2i.2h(j.3b(1D))}})}})},1W:f(u){l b=B;Z[\'1o\']([u],f(){b.M.p(\'#c-\'+u).3d();k(b.N.3c(\'.c\').1k){b.1E(b.1f.1e)}G{b.1E(b.1f.1e-1)}},f(1D){k(1D.3K==z){2i.2h(j.3b(1D))}})},4A:{2:f(c,1q){c.1b=z.D(1q?j.3I(c.v)[11]:j.3I(c.v)[1],c.q.1C,c.q.x,c.q.y);c.V=B.1h.2f;A c},3:f(c){l w=c.q,1T=w.3J.1i,1L=w.3J.1C,L=j.2D(c.v);2d(w.1c){C 1:c.1b=z.D(w.t.1i&&w.t.1C?L[w.1c]:(!w.t.1i&&w.t.1C?L[w.1c+\'-1M-1I\']:(w.t.1i&&!w.t.1C?L[w.1c+\'-1M-J\']:L[w.1c+\'-1M-1I-1M-J\'])),1L,w.t.1C,w.t.1i);F;C 2:c.1b=z.D(1T&&1L?L[w.1c]:(!1T&&1L?L[w.1c+\'-1M-1I\']:(1T&&!1L?L[w.1c+\'-1M-J\']:L[w.1c+\'-1M-1I-1M-J\'])),w.t.1C,1L,1T);F;C 3:l 39=j.4L(w.t.6z,w.t.6y);k(w.t.1U!==3a){39+=z.D(j.h().37.36.35.1V.6x,w.t.1U.X,w.t.1U.Y)}c.1b=z.D(L[w.1c],39,1L,1T);F;C 4:c.1b=z.D(L[w.1c],j.2H(),1L,1T);F}c.V=c.v+\'-\'+w.1c+\'-\'+w.4K;A c},4:f(c,1q){l w=c.q,L=j.3I(c.v),1r=\'\',38;k(w.3H===P.h().E){38=2;k(c.m){}}G{1r=\'4J\';38=1}c.1b=z.D(L,);c.V=c.v+\'-\'+38;A c},6:f(c){c.1b=j.h().s.1s[c.v].2G[c.q.3G];k(c.q.3G==1){c.V=B.1h.2f}G{c.V=B.1h.1S}A c},7:f(c){l L=j.2D(c.v);c.1b=z.D(L[c.q.2Z],c.q.3F&&c.q.3F.E?c.q.3F.E:j.h().37.36.35.3E,c.q.3t?c.q.3t.E:(c.q.1a&&c.q.1a.E?c.q.1a.E:j.h().37.36.35.3E));c.V=B.1h.1S;A c},8:f(c,1q){k(c.q.t.J.E){c.1b=z.D(1q?j.h().s.1s[c.v].2G[21]:j.h().s.1s[c.v].2G[11],c.q.t.J.E,c.q.t.1I.E,c.q.t.J.X,c.q.t.J.Y)}G{c.1b=1q?j.h().s.1s[c.v].2G[23]:j.h().s.1s[c.v].2G[13]}c.V=c.v+\'-1\';A c},9:f(c){l L=j.2D(c.v),33=L,H=\'\';k(c.q.34){H=33.34}G{H=(c.q.4I==P.h().28)?33.4H:33.4G}c.1b=z.D(H,c.q.1i);c.V=B.1h.1S;A c},10:f(c){l L=j.h().s.1s[c.v].3D;c.1b=z.D(L[c.q.6w],c.q.1i);c.V=B.1h.1S;A c},11:f(c){l 1r=\'\',L=j.2D(c.v);k(3C c.q.2F==\'4F\'){1r=L.4E[c.q.2F+0];c.V=(c.q.2F)?B.1h.1S:B.1h.2f}G{1r=(c.q.2g>0)?L.4D:L.4C;c.V=B.1h.2f}c.1b=1r;A c}},2x:f(c,1q){1q=1q||R;c.6v=z.D(\'{0} {1}\',$.6u(c.4B,j.6t()),$.2E(c.4B,j.6s()));k(3C(c.q)==\'6r\'){c=g.4A[c.v](c,1q)}G{2d(c.v){C 2:C 13:c.V=g.1h.2f;F;C 15:C 16:c.V="8-2";F;C 14:C 17:c.V="8-3";F;1B:k(c.v!=1){c.V=g.1h.1S}F}c.1b=z.D(j.2D(c.v),c.q)}k(g.4z[c.v]&&!c.6q){c.6p=o}c.6o=j.h().s.n.6n;c.6m=j.h().s.n.6l;c.6k=j.h().s.n.6j;c.6i=j.h().s.n.6h;c.6g=j.h().s.n.6f;c.6e=j.h().s.n.4y;A c},4w:f(H,v){l 4v={6d:H,6c:6b.6a(),32:v};4x.4w(4v)},69:f(){g.3B&&g.3B.4t.68({4u:$.67(($.r.4s()-g.3B.4t.4s())/2)})},4n:f(){l 2C=$(\'#1v #66-2U .s\'),1K=Z.65();k(1K){2C.1m(\'4r\');2C.p(\'.3z-4q > .4p > 2B\').3A(\'\'+1K)}G{2C.1p(\'4r\');2C.p(\'.3z-4q > .4p > 2B\').3A(\'\')}},64:f(1K){k((1A($(\'.3z.s .1K\').H())||0)<1K){k(P.4o().63){62.61()}k(P.4o().60){5Z.5Y(1K)}}Z.5X(1K);g.4n()},30:f(){l b=B,3y=b.1x.1k,3x=b.1x.1z(\'.1y\').1k;k(!3y||3x<3y){b.2e.1p("1y")}G{b.2e.1m("1y")}k(3x){b.2A.1p("1J")}G{b.2A.1m("1J")}},4m:f(){l b=B,4l=b.2e.2z(\'1y\');k(!b.1x.1k){A}k(4l){b.1x.1p("1y")}G{b.1x.1m("1y")}b.30()},3w:f(){l b=B;b.1x=b.31.p(\'.5W-4k .4j\');27.5V(b.1x);b.1x.I(b.30);b.30()},5U:f(K){2d(K.q.2Z){C 1:l 3u=5T.5S(1l.h().28);W(l 2c 1g 3u){l 3v=R;W(l 4i 1g 1l.h().2b){k(2c==4i){3v=o;F}}k(!3v){k(!1l.h().2b){1l.h().2b={}}1l.h().2b[2c]=3u[2c];2V.5R(2c);2V.5Q(2c)}}F;C 2:l 2Y=K.q.5P;k(!2Y||!1l.h().2b[2Y]){A R}1o 1l.h().2b[2Y];F;C 3:k(!1l.h().2a[K.q.29.28]){A R}l 4h=2X.5O();1o 1l.h().2a[K.q.29.28].3t;k(4h.1k>0&&2W.5N()){2W.5M.5L()}F}},5K:f(K){Z.4g(K.u,f(){2V.5J();2W.5I.5H();k(!K.r.3s.5G){k(1l.h().28===K.r.t.4f){1l.h().5F=5E.5D(K.r.3s.5C-K.r.3s.5B);2V.5A()}A}k(P.h().5z[K.r.t.4f]){2w.5y(K.r.t.J)}G{2w.5x(K.r.t.J)}},o)},5w:f(a){l b=B;k(!a.1k||!b.N){A}W(l i=0;i<a.1k;++i){l 1w=$(27.2y(\'3r\',b.2x(a[i])));1w.p(\'O.1v\').I(b.3q);1w.p(\'O.1v .1I-3p\').I(f(){1j.26();2w.3o($(g).H())});b.N.5v(1w);1w.5u().5t();1w.p(\'.1v .2U O\').1H({2v:R,2u:0,2t:f(){A $(g).Q(\'1H\')}})}},};', 62, 507, '||||||||||data|self|message|||function|this|getData||i18nModel|if|var|Body|titles|true|find|OriginalSubject|body|reports|defender|id|type|subj|||String|return|reportController|case|format|Name|break|else|text|click|town|report|i18nSubject|content|list|div|playerModel|attr|false|reportElement|Trading|troopsToShow|icon|for|||reportModel|||||||||||Town|Subject|battleType|key|page|paginationInfo|in|defaultIcon|playerName|uiWindow|length|townModel|addClass|clickable|delete|removeClass|forShowReport|template|messageTypes|buildingId|Trader|header|messageElement|reportsListCheckboxes|checked|filter|parseInt|default|townName|errorCode|goToPage|unionId|level|tooltip|player|disabled|count|attackerTownName|no|reportFilter|messageId|Customer|sendingResources|sendForm|positive|attackerName|Location|dungeon|deleteMessage|deleteAllReportsButton|closeReport|resource|||buildings||null|checkedKey|close|uiUtils|Id|Army|Armies|Reinforcement|newArmyId|switch|checkAllReportsCheckbox|negative|timeRemain|showSystemMessage|messageController|ids|masterId|reportContent|name|troop|getTitle|crashedBuildingAdditionalString|Resources|send|menu|bodyHandler|delay|showURL|playerController|prepareMessage|applyTemplate|hasClass|deleteCheckedReportsButton|span|reportsButton|getMessageSubjectByType|timestampToTimeString|autoBuy|subjects|getBarbariansName|reportContainer|resources|Level|crashedBuildings|crashedBuildingString|crashedBuildingData|Player|receiveTemplate|receive|sendTemplate|totalPages|reportWindowTemplateData|buttons|armyController|gameController|Route|armyId|reinforcementType|updateChecked|reportsListContainer|Type|subjectTemplates|finishTraining|cellInfo|sidebar|map|iconType|title|undefined|getTextByCode|children|remove|declineInvitation|acceptInvitation|timeFormat|Tradings|display|not|troops|val|receiverName|item|displayProfile|nick|onMessageClick|reportHeader|capture|CurrentTown|armies|exist|initCheckBoxes|checkedElementsLength|allElementsLength|button|html|systemMessageContent|typeof|subject|barbarianTownName|Owner|relationId|seller|getReportSubjectsByType|attacker|constructor|filters|push|match|studyModel|showWindow|unionController|FinishTime|RecruitingList|BuildingConstruction|empty|replace|value|decline|accept|templateType|barbarian|from|jQuery|battle|diedReinfTroops|hasDiedReinf|scrollable|Header|input|control|pagerContainer|initReportControls|reportFilterSubMenu|select|all|townId|getReportBody|newRoutes|oldArmyId|checkbox|box|allChecked|onCheckAllReportsClick|showUnreadMessages|getSettings|counter|img|active|height|container|top|messageData|addMessageToLog|chatController|removeMessageButton|simpleReportHeaders|prepareSubj|time|gameOver|finishing|autobuy|boolean|padawanLvlUp|yourLvlUp|playerId|receiver|battleResult|getDungeonTitleWithLevel|deleteAllReports|el|each|deleteCheckedReports|declineStudyInvitation|acceptStudyInvitation|FinishTimeString|continue|BuildTime|BuildTimeString|pos|union|class|modifier|rearrange|messageBody|playerIngredients|playerItems|premiumName|spyReport|Troops|Union|prepareTradingBody|crashedAdditional|to|troopId|appendTo|readMessage|resourcesReceive|resourcesSend|feodal|textarea|addSendFormHandler|loadError|isEmptyObject|createPager|getSortedArray|getPage|initFilterControl|reportReturnButton|group|onWindowShow|onWindowClose|slideDown|hide|prepend|displayMessages|onAddTown|onLoseTown|TownList|onNewMartialReport|loyaltyReduced|loyaltyWas|round|Math|Loyalty|isCaptured|updateResources|resourcesPanel|updateAllArmies|processMartialReport|updateMap|worldMap|isMap|loadDataSoftly|ArmyId|updateArmyInfo|createArmyQueue|getReinforcementList|armyModel|proccessReinforcement|initCheckbox|selection|loadUnreadCount|onNewReport|nativeNotificationController|ntfReport|playReportSound|audioController|soundReport|onUpdateReportsUnreadCount|getUnreadCount|system|px|css|onWindowResize|getCurrentTime|timingModel|Timestamp|Message|RemoveButton|forwardMessageButton|ForwardButton|replyMessageButton|ReplyButton|closeMessageButton|CloseButton|readMessageButton|OpenButton|nickPrefixIncoming|NickPrefix|boldSubject|status|object|getTimeFormat|getDateFormat|timestampToDateString|Date|trainingType|titleCoordinates|dungeonLevel|dungeonType|deleteAll|ok|deleteReports|showConfirm|has|acceptInviteMessage|study|viewUnionChannel|prepareIntelligenceReport|goToMapPosition|left|method|controller|displayUnionInfo|trim|green|red|with|dead|declineDiplomacy|acceptDiplomacy|append|messageWindowMessageBody|getAchievementTitle|day|hour|3600|premiumId|premium|finishTrainingToMaster|maxAttackLevel|minAttackLevel|finishTrainingToPadawan|bodyTitles|barbarianTown|playerTown|unionName|Leader|bodies|bodyText|crashed|crashedAdditionalFull|inArray|crashedFull|reinfTroops|attack|indexOf|result|getList|removeAttr|getMessage|bold|unread|transfer|buyer|sellResources|finished|topTitle|sendMessage|prepareSendForm|unbind|focus|replyMessage|reply|target|parent|scrollToTop|sub|radio|element|li|info|selected|handler|reportFilterMenu|radioButtonList|visible|paging|returnToReportsListButton|view|label|onClose|onShow|windowTitle|show|reportWindow|windowPreload|block|200|messageSlideDuration|400|systemMessageAnimationDuration|586|systemMessageWidth|2000|systemMessageTimeToStay|systemMessageStartOpacity|itemsPerPage|systemMessages'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('31 30={k:t,2Z:t,z:{y:g.2Y},2X:P,2W:P,2V:2U,2T:2S,1E:\'2R({0}h/2Q/h-o-2P/{1}.2O)\',2N:8(){4 9=2,1b={};K(4 7 J 1p.1o.M.1n){1b[7]=1q.f().15[7]}q{1D:n.f().B.1e,1G:n.f().B.1G,2M:1b,1C:g.v}},2L:8(k){4 9=2;2.k=k.c();2.Q=2.k.c(\'.O-1B\');2.j=2.Q.c(\'.6-2K\').2J();2.j.c().2I(8(i,1F){4 u=$(1F),5=u.16(\'2H\').1t(/h-o-6-(\\d+)/)[1];u.b(\'> .G\').2G(\'2F-2E\',1f.2D(9.1E,2C,5))});2.j.c().1y(8(e){9.S(e)}).1x({1v:0,1w:P,2B:\'2A\',2z:2y,1u:8(){4 l=$(2),5=$.V(l,/h-o-6-(\\d+)/),1a=$(2x.2w(\'2v\',{1D:n.f().B,6:g.v[5]}));1a.b(\'>p\').2u(n.f().B.1C[5].2t);q 1a.2s()}});2.D=2.Q.c(\'.1A-2r-1B\');2.N=2.D.b(\'>.2q-M-2p-O\');2.13=2.N.b(\'>2o\');2.11=2.N.c(\'.2n-M-2m\');2.1z=2.D.b(\'.2l-2k\');2.1r=2.D.b(\'#1A-2j\');A.2i(2.1z,2.z);2.m=2.Q.b(\'.O-6-2h\').2g().1y(8(){9.1h()});2.k.b(\'.2f-G, .2e-G, .2d-G\').1x({1w:P,1v:0,1u:8(){4 18=$(2).16(\'1s\').1t(/(\\w+)-G/)[1],17=\'\';K(4 19 J A.T){a(A.T[19]===18){17=19;2c}}q n.f().18[17]}});2.k.16(\'1s\',\'O\');2.j.1j()},S:8(e){4 l=e?$(e.2b).2a(\'.h-o-6\'):2.j.c(\'.H\');a(!l.W||l.1g(\'r\')){q}4 5=$.V(l,/h-o-6-(\\d+)/);4 6=g.v[5];a(!6){q}l.29(\'28\').s(\'H\');l.C(\'H\');2.m.s(\'r\');2.N.C(\'Z\');2.1r.Y((6.27/26).25().24(\'.\',\',\'));4 F=1q.f().15,14=6.15,1m={};2.11.s(\'Z\');K(4 7 J 1p.1o.M.1n){4 x=1m[7],12=F[7+\'23\']-F[7+\'22\'];x=X.21(F[7]+(14[7]?14[7]:0));4 1k=2.13.b(\'>.\'+7+\'>.y\'),L=2.13.b(\'>.\'+7+\'>.20\');a(x>12){x=12;L.C(\'1l\');2.11.C(\'Z\')}1d{L.s(\'1l\')}1k.Y(x);L.Y(\'(+\'+X.1Z(x-F[7])+\')\')}},1Y:8(){2.j.1j();K(4 5 J g.v){a(!g.v[5].1X.W){2.I=1W(5,10)}}a(2.I){4 E=X.1V(1,2.I-3);1U(!g.v[E]&&E<2.I){E++}4 u=$(\'#h-o-6-\'+E);a(u.1i()!==1T){2.j.1S(u.1i().1R)}}},1Q:8(){2.k=t;2.1P=t;2.D=t;2.m=t},1h:8(){4 9=2,U=2.j.c(\'.H\'),5;a(2.m.1g(\'r\')){q}a(!U.W){q}5=$.V(U,/h-o-6-(\\d+)/);2.m.C(\'r\');g.1O(5,2.z.y,8(R){a(R.1N!==1f){1c.1M(n.f().B.1e.1L,A.T[9.z.y]);9.S();a(!1K){A.1J(9.z.y)}9.m.s(\'r\')}1d{1c.1I(n.1H(R));9.m.s(\'r\')}})}};', 62, 188, '||this||let|packId|pack|resourceName|function|self|if|find|children|||getData|premiumModel|resource||packList|content|packElement|buyButton|i18nModel|shop||return|disabled|removeClass|null|packEl|resourceShopPacks||resourceAmount|value|currencyToUse|premiumController|resourceShop|addClass|finalCalculatePane|packIdToScrollTo|playerResources|icon|selected|lastOpenPackId|in|for|additionElement|resources|playerResourcesAfterBuyPane|buy|false|buyPane|data|onSelectPack|currencyList|selectedPack|parseId|length|Math|text|visible||lostResourcesTitle|resourceLimit|playerResourcesAfterBuy|packResources|Resources|attr|currencyKey|currencyName|currencyId|tooltipObject|resourcesArray|messageController|else|windowTitles|String|hasClass|buyResources|position|rearrange|valueElement|overloaded|newResources|nameToId|config|staticDataModel|playerModel|currentPrice|class|match|bodyHandler|delay|showURL|tooltip|click|currencySelect|final|pane|packs|titles|packIconImageURLFormat|el|helpText|getTextByCode|showSystemMessage|updateCurrencyDependentOnType|eventsEnabled|successfulPurchaseMessage|addMessageToLog|constructor|buyResourceShopPack|orderResourcesList|onWindowClose|top|scrollTo|undefined|while|max|parseInt|restrictions|onSwitchWhenInTab|ceil|addition|floor|Trade|Max|replace|toString|100|Cost|div|siblings|closest|target|break|sducat|gold|ducat|clickable|button|initCurrencySelect|cost|select|currency|title|lost|ul|after|player|calculate|outerHTML|description|html|resourceShopPackTooltip|applyTemplate|uiUtils|true|track|bordered|extraClass|staticDataUrl|format|image|background|css|id|each|scrollable|list|onWindowShow|resourcesList|createTemplateData|jpg|icons|premium|url|2000|hideResourceMaxTitleTimeout|1000|resourceBuyFactor|isBarnFilled|isBlockInterface|currencyTypeDucat|hideResourceMaxTitleTimer|resourceShopController|var'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('c n={e:1b,g:1b,2V:[4D,4C,4B,4A,4z],34:f(){c 1A=j.i()[j.w.2e]||0,1z=j.i()[j.w.2d]||0,1y=j.i()[j.w.2c]||0,2u=j.i()[j.w.2b]||0;6(1A+1z+1y+2u>0){c E=1;6(2u>0||1A+1z+1y===28){E=4}r{6(1A>1z){6(1A>1y){E=1}r{E=3}}r{6(1z>1y){E=2}r{E=3}}}n.2t(E)}r{c e=$(1R.1Q(\'4y\',{3m:k.i().m.2F}));Q.2n();Q.3k(k.i().m.4x,e,1b,{4w:Q.4v,2k:f(){e.z(\'.4u-33-4t\').1n().1d(f(){c E=1J(/\\d/.4s($(8).4r().18(\'N\'))[0]);n.2t(E)})}})}},2t:f(2s){c 7=n,2r={3m:k.i().m,2s:2s||1,3l:3,4q:b.a.9,4p:19};6(l.1F(4)>=28){2r.3l=4}Q.2n();7.e=$(1R.1Q(\'4o\',2r));Q.3k(k.i().m.4n,7.e,1b,{2k:f(){7.3i()},4m:f(){7.3j()}})},3j:f(){c 7=n;7.e=1b;7.g=1b;7.4l={}},3i:f(){c 7=n;n.e.z(\'4k.K > 4j:4i(.4h)\').1d(f(){7.3d($(8))});7.e.2q={};7.e.z(\'.K-e .x-1M\').2K(f(1G,3h){7.e.2q[1G]=$(3h).4g()});7.e.z(\'.K-e .x-1M .p .4f-H\').1n().1d(f(){7.2Q($(8))});7.e.z(\'.K-e .x-1M .p .4e-H\').1n().1d(f(){7.2P($(8))});7.e.1w=7.e.z(\'#x-4d\');7.e.1w.1n().1d(7.3b);7.e.1v=7.e.z(\'#x-3g\');7.e.1v.1n().1d(7.38);7.e.1x=7.e.z(\'#x-4c-3g\');7.e.1x.1n().1d(7.37);7.e.2T=7.e.z(\'.3f .W-2U 3e\');7.e.3c=7.e.z(\'.3f .W-C-14 3e\');7.1j();7.2L()},3d:f(E){c 7=n,1c=E.18(\'1i\'),1P=7.2p(1c);7.e.18(\'N\',1c);7.e.2q[1P-1].4b();7.29()},4a:f(){h(n.e)?19:G},2p:f(1c){h 1J(1c.31(\'E-\',\'\').49(),10)},29:f(){c 7=n,1c=7.e.18(\'N\'),1P=7.2p(1c);7.e.3c.2S(7.1L(1P))},3a:f(){c 7=n;6(7.g&&7.g.O){h 7.g}r{h G}},3b:f(){Q.48({1f:k.i().47.46,36:f(){n.2o()}})},2o:f(){c 7=n,g=7.3a();6(7.e.1w.1K(\'J\')){h}6(g){l.2o(g,f(9){7.g=1b;7.1j();45.44()},f(39){2m.2l(k.1O(39))})}},38:f(){c 7=n;6(7.e.1v.1K(\'J\')){h}n.g=[];n.1j()},37:f(){c 7=n;6(7.e.1x.1K(\'J\')){h}c 32=1W.43.X<15?42:41,2j={35:40.3Z};Q.3Y({\'1f\':k.1O(\'m:3X\'),\'36\':f(){l.3W(2j.35,f(9){Q.2n();j.P[j.w.2e]=j.P[j.w.2d]=j.P[j.w.2c]=j.P[j.w.2b]=0;j.P[j.w.30]=9[\'3V\'];l.3U(n.34)},f(9){6(9==12||!9){2m.2l(k.1O(\'m:3T\'))}r{2m.2l(k.1O(9))}})},2k:f(){3S.3R(Q.3Q.z(\'.3P-33\'),2j)},3O:32.3N().31(\'.\',\',\')})},1L:f(14){c 2h=(1s 14===\'12\'),2i=(2h)?j.w.30:l.2G[14],1a;6(1s 2i===\'12\'){h 0}1a=j.i()[2i];6(1a==12){1a=0}6(8.g&&8.g.O){D(c I C 8.g){c 5=8.g[I].S,s=8.g[I].X;6(2h){1a-=b.a.9[5].q[s].17}r{6(b.a.9[5].1h==14){1a+=b.a.9[5].q[s].17}}}}h 1a},Z:f(5){c s=(1s l.R[5]===\'12\')?0:l.R[5].X;6(8.g&&8.g.O){D(c 11 C 8.g){c 1H=8.g[11].S,1l=8.g[11].X;6((1H==5)&&(1l>s)){s=1l}}}h s},26:f(5){6(8.g&&8.g.O){D(c I C 8.g){6(5==8.g[I].S){h 19}}}r{h G}},25:f(5){6(b.a.9[5].q[1].Y[0]){D(c 2Z C b.a.9[5].q[1].Y){c 1m=b.a.9[5].q[1].Y[2Z];21(1m.20){B l.1g.2H:6(!(8.Z(1m.p)>=1m.H)){h G}y;B l.1g.1Z:6(!8.2Y(b.a.9[5].1h,5)){h G}y;B l.1g.2E:6(8.Z(1m.p)>0){h G}y;B l.1g.2D:6(l.1F(4)<1m.W){h G}y}}}h 19},2Y:f(14,2X){c 1N=[];D(c 5 C b.a.9){6(b.a.9[5].1h===14){D(c 2g C b.a.9[5].q[1].Y){6(b.a.9[5].q[1].Y[2g].20===l.1g.1Z){1N[5]=b.a.9[5].q[1].Y[2g].1Y}}}6(5>=2X){y}}c W=0;D(5 C b.a.9){6(b.a.9[5].1h===14){6(1N[5]!==12&&1N[5]>W){h G}c s=8.Z(5);6(s>0){D(c H=1;H<=s;H++){W+=b.a.9[5].q[H].17}}}}h 19},2W:f(5){6(1s b.a.9[5]==\'12\'){h-1}c a=b.a.9[5],2f=8.Z(5);6(2f){6(2f<a.22){h 2}r{h 3}}6(!8.25(5)){h 0}6(b.a.9[5].q[1].17<0){h 0}h 1},1j:f(){6(!8.e){h G}6(!!(j.P[j.w.2e]||j.P[j.w.2d]||j.P[j.w.2c]||j.P[j.w.2b])){8.e.1x.1u(\'J\')}r{8.e.1x.1t(\'J\')}D(c I C b.a.9){c 5=b.a.9[I].S,2a=8.2W(5),s=8.Z(5),13=\'p 1i-\'+5;6(2a==-1){3M}21(2a){B 0:y;B 3:13+=\' 3L-H\';B 2:13+=\' H-\'+s;6(8.26(5)){13+=\' 3K-3J\'}6($.3I(5,8.2V)>-1){13+=\' 3H-p\'}B 1:13+=\' 2U\';6(b.a.9[5].q[s+1]&&(b.a.9[5].q[s+1].17<=8.1L())){13+=\' 3G-3F\'}y}8.e.z(\'.K-e .x-1M .p.1i-\'+5).1u().1t(13)}6(8.g&&8.g.O){8.e.1w.1u(\'J\');8.e.1v.1u(\'J\')}r{8.e.1w.1t(\'J\');8.e.1v.1t(\'J\')}8.e.2T.2S(8.1L());8.29();6(8.e.2R(\'.K\').1K(\'K-3\')&&l.1F(4)>=28){8.e.2R(\'.K\').1u(\'K-3\').1t(\'K-4\')}h 19},2Q:f(1I){c 7=n,5=1J(1I.2O(\'.p\').18(\'p-1i\'),10);6(!(5&&b.a.9[5])){h}c 27=7.Z(5)+1;6(27<=b.a.9[5].22){6(!7.g){7.g=[]}7.g.v({S:5,X:27});7.1j()}},2P:f(1I){c 7=n,5=1J(1I.2O(\'.p\').18(\'p-1i\'),10);6(!(5&&b.a.9[5]&&7.26(5))){h}7.24(5)},24:f(5,1k){1k=(1s 1k!==\'12\');c s=0,I=0,1r=[];6(8.g&&8.g.O){D(c 11 C 8.g){c 1H=8.g[11].S,1l=8.g[11].X;6(1H==5){6(1k){1r.v(11)}r 6((1l>s)){s=1l;I=11}}}6(1k){6(!1r.O){h}3E(1r.O){8.g.2N(1r.3D(),1)}}r{6(!I){h}8.g.2N(I,1)}6(8.g.O){D(c 2M C 8.g){c 23=8.g[2M].S;6(!8.25(23)){8.24(23,19)}}}6(!1k){8.1j()}}},2L:f(){n.e.z(\'.p\').2K(f(){c 7=$(8),5=7.18(\'p-1i\');7.2J({3C:16,3B:G,3A:f(){h n.2I(5)},3z:\'p-2J\'})})},2I:f(5){c 1e=n.Z(5),1S=b.a.9[5].22,F=1e+1>1S?0:1e+1,1p=\'\',u=\'\',1C=\'\',1B=\'\',1o=\'\';6(b.a.9[5].q[1].17<0){u=\'<t N="o">\'+k.i().m.A.V.J+\'</t>\'}r{6(F>0){1p=M.L(k.i().m.A.V.F,[F,b.a.9[5].q[F].17]);D(c 1G C b.a.9[5].q[F].Y){c o=b.a.9[5].q[F].Y[1G];21(o.20){B b.a.1X.2H:6(l.R[o.p]&&l.R[o.p].X>=o.H)y;6(u!=\'\'){u+=\'<1D>\'}u+=\'<t N="o">\'+M.L(k.i().m.A.V.3y,[o.H,k.i().m.x[o.p].1f])+\'</t>\';y;B b.a.1X.1Z:6(j.i()[l.2G[b.a.9[5].1h]]>=o.1Y)y;6(u!=\'\'){u+=\'<1D>\'}u+=\'<t N="o">\'+M.L(k.i().m.A.V.3x,[o.1Y,k.i().m.2F[b.a.9[5].1h]])+\'</t>\';y;B b.a.1X.2E:6(u!=\'\'){u+=\'<1D>\'}6(l.R[o.p]&&l.R[o.p].X>0){u+=\'<t N="o">\'+M.L(k.i().m.A.V.3w,[k.i().m.x[o.p].1f])+\'</t>\'}r{u+=\'<t N="o">\'+M.L(k.i().m.A.V.3v,[k.i().m.x[o.p].1f])+\'</t>\'}y;B l.1g.2D:6(l.1F(4)<o.W){u+=\'<t N="o">\'+M.L(k.i().m.A.V.3u,[o.W])+\'</t>\'}y}}}r{1p=k.i().m.A.V.3t}}c U=[];6(1e>0){U.v(l.1V(b.a.9[5].q[1e].1U,5));6(b.a.9[5].1q>0){U.v(b.a.9[5].1q/16);6(b.a.9[5].1E>0){U.v(b.a.9[5].2C/16);U.v(b.a.9[5].1E);U.v(b.a.9[5].2B);U.v(b.a.9[5].2A/16)}}1C=M.L(k.i().m.x[5].2z,U)}c T=[];6(F>0){T.v(l.1V(b.a.9[5].q[F].1U,5));6(b.a.9[5].1q>0){T.v(b.a.9[5].1q/16);6(b.a.9[5].1E>0){T.v(b.a.9[5].2C/16);T.v(b.a.9[5].1E);T.v(b.a.9[5].2B);T.v(b.a.9[5].2A/16)}}1B=M.L(k.i().m.x[5].2z,T)}6(b.a.9[5].1q>0){1o=\'<t>\'+k.i().m.A.3s+\'</t>\';c 2x=1W.i().2y?1W.i().2y.S:G;6(2x){c 1T=0;6(l.R[5]){1T=l.1V(l.R[5].1U,5)}1o+=\'<1D><t>\'+M.L(k.i().m.A.3r,1T)+\'</t>\'}}c 2v={5:5,3q:k.i().m.x[5].1f,3p:1e,3o:1S,1p:1p,u:u,1C:1C,1B:1B,2w:k.i().m.A.2w,F:k.i().m.A.F,1o:1o};h 1R.1Q(\'3n\',2v)}};', 62, 288, '|||||skillId|if|self|this|data|skillStaticData|staticDataModel|var||content|function|newSkills|return|getData|playerItemsModel|i18nModel|rpgModel|rpg|rpgController|depend|skill|Levels|else|skillLevel|div|dependencies|push|skillItems|skills|break|find|toolTip|case|in|for|tab|nextLvl|false|level|skillIndex|disabled|tabs|format|String|class|length|playerItemsData|uiWindow|playerSkills|Id|descNextLvlParam|descThisLvlParam|newLvlInfo|points|Level|Dependencies|getSkillLevelConsideringRaisedSkills||currentSkillIndex|undefined|skillClasses|branch||100|Points|attr|true|skillPoints|null|tabId|click|curLvl|title|skillsDependencies|Branch|id|recalculateSkillsState|allLevels|currentSkillLevel|dependency|clickable|descUnionSkill|nextLvlInfo|Limit|itemsToRemove|typeof|addClass|removeClass|resetButton|saveButton|fullResetButton|branch3|branch2|branch1|descNextLvl|descThisLvl|br|UnionEachPlayers|getSummaryPoints|index|currentSkillId|clickedButton|parseInt|hasClass|getSkillPointsConsideringRaisedSkills|list|viewedSkills|getTextByCode|branchId|applyTemplate|uiUtils|maxLvl|param|Parameter|paramToString|playerModel|const|branchPoints|SKILL_DEPENDENCY_TYPE_BRANCH_POINTS|type|switch|MaxLevel|testingSkillId|decreaseSkillLevelInRaised|checkSkillDependencies|isSkillLevelRaised|newSkillLevel|250|refreshBranchPointsSpanValue|skillState|PLAYER_ITEM_RPG_POINTS_BRANCH_4|PLAYER_ITEM_RPG_POINTS_BRANCH_3|PLAYER_ITEM_RPG_POINTS_BRANCH_2|PLAYER_ITEM_RPG_POINTS_BRANCH_1|playerSkillLevel|dependenceId|getFreeSkillPoints|itemId|currencyToUse|onShow|showSystemMessage|messageController|close|saveSkills|getBranchIdByTabId|skillLists|rpgWindowTemplateData|defaultTab|openRpgWindow|branch4|tooltipTemplateData|thisLvl|currentUnionId|Union|description|UnionParameterLimit|UnionMaxLevel|UnionParameter|SKILL_DEPENDENCY_TYPE_ALL_POINTS|SKILL_DEPENDENCY_TYPE_EXCLUSIVE|skillBranches|branchPointsItems|SKILL_DEPENDENCY_TYPE_LEVEL|createTooltipTemplate|tooltip|each|addTooltip|testingSkillIndex|splice|closest|onRemoveLevelClick|onAddLevelClick|children|text|freeSkillPointsSpan|available|topSkillsIds|getSkillState|checkedSkillId|checkSkillDependenciesBranchPoints|dependencyId|PLAYER_ITEM_RPG_POINTS_FREE|replace|price|select|showWindow|value|ok|onFullResetClick|onResetClick|error|getSkillsToSave|onSaveClick|branchSkillPointsSpan|onTabClick|span|footer|reset|skillList|onWindowShow|onWindowClose|show|visibleTabsCount|titles|skillTooltip|skillMaxLvl|skillLvl|skillName|unionSkillParameter|unionSkill|noNextLvl|dependAllPoints|dependExclusive|dependExclusiveAlready|dependPoints|dependLvl|extraClass|bodyHandler|showURL|delay|pop|while|increase|can|top|inArray|added|levels|max|continue|toString|cost|currency|confirmWindow|initCurrencySelect|premiumController|fullResetError|loadSkills|freePoints|fullResetSkills|fullResetConfirmText|showPaymentConfirm|currencyTypeDucat|premiumModel|1000|200|playerData|updateRPGIcon|gadgetsController|saveSkillPoints|confirmText|showConfirm|trim|isWindowOpened|rearrange|full|save|remove|add|scrollable|decor|not|li|ul|skillPointsInBranches|onClose|windowTitle|rpgWindow|newRpgSystem|skillsStatic|parent|exec|button|spec|WINDOW_LAYOUT_PREMIUM|windowLayout|windowTitleSpecsSelect|rpgWindowSelectSpecs|154|151|137|124|113'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('5x H={f:q,5w:q,h:[],5v:q,24:{},2M:9(){c 2x=[];Z(c j 1j g.m().1C){b((j===n.5u&&g.m().1C[j]===0)||j===18){3x}2x.5t({8:j,2f:M.3t(j),L:n.1s(j),1y:g.m().1C[j].5s})}6.f.5r(2T.2S(\'N\',2x));6.f[6.3w(g.m().X,g.m().Y)?\'v\':\'J\'](\'3k\');6.f.P({U:-(6.f.F()-6.r.F())/2,u:-(6.f.Q()-6.r.Q())/2});Z(c j 1j g.m().1C){b(n.1s(j)===0&&!g.m().1C[j].5q){3x}6.3p(j,n.1s(j))}6.5p=6.5o=6.5n=6.37;6.2Z()},3w:9(x,y){Z(c i=0;i<1A.3v.3u.1E;i++){c 1B=1A.3v.3u[i];b(1B.U<=x&&1B.u<=y&&1B.5m>=x&&1B.5l>=y){l 1J}}l w},5k:9(){b(g.5j()>0&&g.m().5i[0].5h===0&&1A.2w.5g){$(A.z(\'#p .15-14-{0} .1h-2u\'+\', \'+\'#2t-t-N 2s.1i 2r#R-1i-2q-0 .1h-2p\',g.C(0).1c)).2Y(\'2k\').2k(9(){b($(6).1x(\'2o\'))l w;$(A.z(\'#p .15-14-{0} .1h-2u\'+\', \'+\'#2t-t-N 2s.1i 2r#R-1i-2q-0 .1h-2p\',g.C(0).1c)).v(\'2o\');c 2n=5f.5e((((g.C(0).1r-g.C(0).1N)/1A.2w[\'5d\'])*1A.2w[\'5c\']/ 1q) * 1q) /1q,3s=M.3t(g.C(0).1c),2v={1g:5b.5a};E.59({58:A.z(M.m().57.56,3s,2n.2i().3q(\'.\',\',\')),55:9(){3r.54(2v.1g)},34:9(){3r.53(E.52.23(\'.51-4Z\'),2v)},1z:9(){$(A.z(\'#p .15-14-{0} .1h-2u\'+\', \'+\'#2t-t-N 2s.1i 2r#R-1i-2q-0 .1h-2p\',g.C(0).1c)).J(\'2o\')},4Y:2n.2i().3q(\'.\',\',\')})}).3o({3n:w,3m:9(){l M.m().p.4X}}).v(\'12-2e\')}},3p:9(8){c 2l=$(\'#R-\'+8+\'-1v .R\');b(2l.1E<=0){l}c 7=H,4W=\'1W(\'+19+\'17/p/N/{0}/{0}2j{1}{2}.1t) 1z-1V U u\',4V=\'1W(\'+19+\'17/p/N/{0}/{0}4U.1t) 1z-1V U u\',4T=\'1W(\'+19+\'17/p/N/{0}/{0}2j{1}4S.1t) 1z-1V U u\',K=7.31(8)||1,L=n.1s(8),1y=n.1b(8),3l=(8===3&&$.1U.1e(\'2m\')&&$.1U.1e(\'2m\').1E)?(\'-\'+$.1U.1e(\'2m\')):\'\';b(L===0){L=1;n.4R(8,L)}b(!7.h[8]){7.h[8]={3b:2l,1S:$(\'#R-\'+8+\'-1v .1S\'),V:$(\'#V-\'+8),W:{t:$(\'.15-14-\'+8),1g:$(\'.15-14-\'+8+\'>.1g .15-14-4Q\'),1T:$(\'.15-14-\'+8+\'>.1T\')},1v:$(\'#R-\'+8+\'-1v\'),13:$(\'#13-\'+8).4P(9(){$(\'#V-\'+8).v(\'G\')}).4O(9(){$(\'#V-\'+8).J(\'G\')}).2k(H.3a).3o({3n:w,3m:9(){c 8=$(6).1e(\'8\').1P(/^13-(\\d+)/)[1];l n.4N(8)},u:0,U:40})}}c 1R,1f,1w;b(1y!==0||(38 K===\'4M\'&&K.39(\'-\')!==-1)){1R={3e:A.z(\'1W(\'+19+\'17/p/N/{0}/{0}2j{1}{2}{3}.1t) 1z-1V U u\',8,K,3l,$.1U.1x(\'4L-4K-4J\')?\'-3k\':\'\')};c 2h=K.2i().1P(/(\\d+)(?:-\\d+)?/),2g=2h==q?0:2h[1];1f=A.z(\'1y-{0}\',2g);1w=A.z(\'1y-{0}\',2g);7.h[8].1S.P({\'2e\':\'12\'});b(g.C(0).1c===8){c T=g.C(0);7.h[8].W.t.v(\'G\');T.1M=4I(T.1M);2Q(T.1M){3j 1:7.h[8].W.1g.P({F:$.3i(T.1N,T.1r)});7.h[8].W.1T.3h(M.m().p.N[8].2f+" "+A.z(M.m().p.3g,n.1b(8)+1));3f;3j 2:7.h[8].W.1g.P({F:$.3i(T.1r-T.1N,T.1r)});7.h[8].W.1T.3h(M.m().p.N[8].2f+" "+A.z(M.m().p.3g,n.1b(8)-1));3f}}1k{7.h[8].W.t.J(\'G\')}}1k{1R={3e:\'3c\'};1f=\'3d\';1w=\'3d\';7.h[8].1S.P({\'2e\':\'3c\'});7.h[8].W.t.J(\'G\')}7.h[8].3b.P(1R);b(!7.h[8].13.1x(1f)){7.h[8].13.J().v(1f).v(\'2d\')}b(!7.h[8].V.1x(1w)){c G=7.h[8].V.1x(\'G\');7.h[8].V.J().v(1w).v(\'2d\');G&&7.h[8].V.v(\'G\')}7.h[8].1v.J().v(1f+\' 2d\')},3a:9(e){b(!H.2W){l}c j=36($(6).1e(\'8\').1P(/^13-(\\d+)/)[1]),4H=[11],D=29.4G(j);b(4F.4E(g.m().4D,[4,5])>0&&[n.4C,n.4B,n.4A].39(j)===-1){l}b(n.1b(j)===0){4z.4y(M.m().p.4x.4w);l}b(H[\'1O\'+j]){H[\'1O\'+j](D,$(e.4v))}1k{H.1O(j,D)}},4u:9(D){E.12();c 1d=9(){E.1o(D,2c.t,q,2c.1u)};2c.2a(1d)},4t:9(1Q){E.12();c 1d=9(){E.1o(M.m().p.4s.D,2b.t,q,2b.1u);1Q&&38(1Q)===\'9\'&&1Q()};2b.2a(1d)},4r:9(){E.4q();4p.4o({})},37:9(D,R){E.12();c j=36(R.1e(\'8\').1P(/13-(\\d+)/)[1]);c 1d=9(){E.1o(D,16.t,q,16.1u);b(16.j===20&&4n.4m()){4l.4k(16.t.4j())}};16.2a(j,1d)},4i:9(D,35){E.12();2z.4h(D,35)},1O:9(8,D){E.12();c 1u={34:29.4g};29.4f(8,9(t){E.1o(D,t,q,1u)})},4e:9(32){l A.z(19+\'17/4d/{0}S.1t\',32)},31:9(8){c L=n.1s(8);b(g.C(0).1c!==8||8===3){l L}c B=g.C(0).1N/g.C(0).1r*1q;b(B>=1q){l L}c K;b(n.1b(8)===0){K=B<33?25:B<4c?50:28;l A.z(\'{0}-{1}\',1,K)}K=B<20?28:B>=20&&B<40?50:B>=40&&B<30?25:B>=30&&B<2X?50:28;L+=(n.1b(8)%10===0&&g.C(0).1M===1&&B>=50);l A.z(\'{0}-{1}\',L,K)},2Z:9(){c 7=6,27=w,26=w;b(7.f.Q()<7.r.Q()){27=1J}b(7.f.F()<7.r.F()){26=1J}7.f.2Y();b(27||26){7.f.4b(9(4a,1L){1L=1L*2X;c u=$(6).2C().u,1a=u+1L;b(1a<7.o[1]){1a=7.o[1]}1k b(1a>7.o[3]){1a=7.o[3]}$(6).P({u:$.1Z(1a)});l w});b(!1H.2F){6.f.2E({49:w,o:7.o})}}7.f.2P().1K(\'48\',9(e){l w}).1K(\'2O\',9(e){7.1p={x:e.2V,y:e.2U}}).1K(\'47\',9(e){7.2W=7.1p&&$.46({x:7.1p.x,y:7.1p.y},{x:e.2V,y:e.2U})<3;7.1p=q})},2B:9(r){c 7=6;6.r=r;45.44=\'#p\';c 2R=$(2T.2S(\'43\'));2R.42(r);7.f=r.23(\'#p\');7.1F=7.r.41(\'.3Z-2Q\').2P().1K(\'2O\',9(e){2N.3Y();2N.3X.3W(g.m().X,g.m().Y);e.3V();l w}).3U(9(){7.1F.J(\'1o\')});7.2M()},2G:9(){c 7=6;7.s={};7.O={};Z(c k 1j 6.24){(9(k){c I=7.24[k];7.s[k]=7.f.23(\'>.s>.\'+k);7.s[k].1I(19+\'17/1I/\'+k+\'.3T\',I.3S,I.3R,I.3Q,I.3P,1,w,w,9(){b(I.22>0){7.s[k].J(\'G\')}7.O[k]=2L(9(){7.21(k)},$.2K(I.2J,I.22))},1J);7.O[k]=2L(9(){7.21(k)},$.2K(I.2J,I.22))})(k)}},21:9(k){b(H.s&&H.s[k]){c 1I=H.s[k];1I.v(\'G\').2y().3O()}},2A:9(){c 1n=6.r.F()/6.f.F(),1m=6.r.Q()/6.f.Q(),1l=(1n>1m?1n:1m)<1?1:(1n>1m?1n:1m),2I=6.f.F()*(1l-1)/2,2H=6.f.Q()*(1l-1)/2;6.o=[-(2I+6.f.F()-6.r.F()),-(2H+6.f.Q()-6.r.Q()),0,0];b(1l!=1){6.f.P({3N:\'3M(\'+1l+\')\'})}1k{6.2G()}b(6.o[0]>0){6.o[0]=0}b(6.o[1]>0){6.o[1]=0}b(!1H.2F){6.f.2E({o:[6.o[0],6.o[1]+1H.2D+50,6.o[2],6.o[3]+1H.2D+50]})}6.f.P({U:$.1Z(6.o[0]/2),u:$.1Z(6.o[1]/2)})},3L:9(){},3K:9(){6.3J=6.f.2C();6.1D()},3I:9(){6.2B(6.r);6.2A();3H.3G()},3F:9(){3E.3D()},3C:9(i,1G,3B){b(!i&&!1G){l}b(1G.3A){2z.3z(i,1G)}},1D:9(){b(6.f==q){l}b(6.s){Z(c a 1j 6.s){b(6.s[a]){6.s[a].2y().1Y();1X 6.s[a]}}6.s=q}b(6.O){Z(c k 1j 6.O){b(6.O[k]){3y(6.O[k]);1X 6.O[k]}}6.O=q}6.f.1Y();6.1F.1Y();6.f=q;6.1F=q;Z(c i=0;i<6.h.1E;++i){6.h[i]=q;1X 6.h[i]}n.1D();16.1D()}};', 62, 344, '||||||this|self|id|function||if|let|||townBacking|townModel|buildingLayers||buildingId|animationId|return|getData|buildingsModel|containment|town|null|viewport|animations|content|top|addClass|false|||format|String|percent|getBuildingConstructionByQueue|windowTitle|uiWindow|width|visible|townController|aConfig|removeClass|imageSuffix|imageIndex|i18nModel|buildings|animationsTimeout|css|height|building||buildingConstruction|left|contour|progressBar|||for|||block|selectable|bar|progress|recruitBuildingController|resource||staticDataUrl|newTop|getLevel|BuildingId|callback|attr|selectableClass|value|speed|queue|in|else|zoom|zoomY|zoomX|show|mouseDownPos|100|BuildTime|getImageIndex|png|params|container|contourClass|hasClass|level|no|staticDataModel|range|Buildings|clear|length|mapSwitchButton|route|uiManager|animation|true|on|delta|Type|CompleteTime|displayBuildingWindow|match|editingCallback|mainStyle|road|label|body|repeat|url|delete|remove|px||spawnAnimation|maximumAnimationRespawnInterval|find|animationsConfig||wide|tall|75|buildingController|initWindow|armyController|townHallController|babs|display|name|realIndex|index|toString|_|click|buildingContainer|class|price|disabled|ap|item|li|ul|tab|up|currencyToUse|premiumParams|buildingsTemplateData|stopAnimation|marketController|onWindowResize|loadContent|position|viewportTopOffset|draggable|isMobile|initAnimations|topDelay|leftDelay|minimumAnimationRespawnInterval|random|setTimeout|loadTown|gameController|mousedown|off|switch|viewportContent|applyTemplate|uiUtils|pageY|pageX|allowClick|80|unbind|__updateBackgroundEvents|60|calculateConstructingImage|resId||onShow|options|parseInt|displayBuildingWindow14|typeof|indexOf|onBuildingClick|main|none|hidingBuilding|background|break|buildingProgressBarLabelFormat|html|pc|case|winter|holydaySuffix|bodyHandler|showURL|tooltip|updateBuildingInfo|replace|premiumController|buildingName|getBuildingName|winterZones|mapParams|areCoordsSnowy|continue|clearTimeout|onTradeTownTick|Trading|step|onTickArmyAction|updateTownList|playerModel|updateTownInfo|checkQuestsToBeDone|questController|switchToTown|oldTownPos|prepareToSwitch|showTownStatsWindow|scale|transform|pauseAnimation|duration|frameSize|framesCount|horizontal|jpg|hover|stopPropagation|goToCoordinate|worldMap|loadMap|map||children|appendTo|townContainer|hash|location|distance|mouseup|selectstart|scroll|event|mousewheel|66|resources|getSmallResourceImageURL|generateHelpContentForBuilding|rearrangeHelpContent|showWindow|displayBuildingWindow13|parent|init|additionalAristocratController|isEnabled|additionalAristocratModel|showResearchWindow|TownResearch|unblock|displayBuildingWindow11|square|displayBuildingWindow3|displayBuildingWindow1|target|nothingToDowngrade|townCenter|showSystemMessage|messageController|squareId|wallsId|townHallId|CreatedType|inArray|jQuery|getBuildingTitleForWindow|buildingSoundsAvailable|Number|theme|year|new|string|getTooltipForBuilding|mouseout|mouseover|line|setImageIndex|_round|contourTemplate|_road|roadBackgroundTemplate|buildingBackgroundTemplate|buildingSpeedUpTooltip|cost|select||currency|confirmWindow|initCurrencySelect|speedUpBuilding|ok|speedUpConstruction|confirmText|title|showPaymentConfirm|currencyTypeDucat|premiumModel|speedUpConstructionPrice|speedUpConstructionTime|ceil|Math|speedUpEnabled|SpeedUp|BuildingConstruction|getBuildingConstructionCount|initBuildingSpeedUp|bottom|right|displayBuildingWindow19|displayBuildingWindow15|displayBuildingWindow20|build|append|Level|push|specialBuildingId|townSelectWindowContent|tabContentContainer|var'.split('|')))

var townHallController = {
    content: {},
    buildingQueue: [],
    animationDuration: 200,
    intervalIndex: null,
    buildingsContent: null,
    message: {},
    errorMessage: {},
    button: {},
    currencyToUse: {
        value: 1
    },
    initWindow: function(callback) {
        let helpContent = function(helpTemplate) {
            let self = townHallController;
            self.createContent();
            for (let buildingId in staticDataModel.buildings) {
                self.content.find(String.format('#building-item-{0} div.thumbnail', buildingId)).css({
                    background: String.format('transparent url({0}) no-repeat center center', self.getBuildingThumbnailURL(buildingId))
                });
            }
            self.params = {
                helpButton: true,
                onShow: self.onWindowShow,
                onClose: self.onWindowClose,
                onHelp: buildingController.rearrangeHelpContent,
                helpContent: helpTemplate,
                disableScrolling: true
            };
            self.intervalIndex = timingModel.addIntervaled({
                interval: 3,
                onTick: self.updateButtonsOnTab
            });
            callback && callback();
        };
        buildingController.generateHelpContentForBuilding(1, helpContent);
    },
    createContent: function() {
        let buildings = [[], [], []]
            , buildingIds = $.objectKeys(staticDataModel.buildings)
            , i8 = buildingIds.indexOf("8")
            , i9 = buildingIds.indexOf("9")
            , self = this;
        buildingIds.splice(i9, 1, "8");
        buildingIds.splice(i8, 1, "9");
        for (let buildingIdIndex = 0; buildingIdIndex < buildingIds.length; buildingIdIndex++) {
            let buildingId = parseInt(buildingIds[buildingIdIndex])
                , buildingLevel = buildingsModel.getLevelConsideringQueue(buildingId)
                , upgradeInfo = buildingsModel.getUpgradeInfo(buildingId, buildingLevel);
            if ([17, 18, 8, 9, 13].indexOf(buildingId) !== -1) {
                continue;
            }
            let building = {
                id: buildingId,
                ignoreInTownHall: buildingId == 3,
                name: i18nModel.getBuildingName(buildingId),
                title: buildingLevel < 1 ? i18nModel.getBuildingName(buildingId) : String.format(i18nModel.getData().town.buildingTooltipFormat, i18nModel.getBuildingName(buildingId), buildingLevel),
                description: i18nModel.getBuildingDescription(buildingId),
                level: buildingLevel,
                exp: {
                    title: i18nModel.getData().experience,
                    value: upgradeInfo.Experience || 0
                },
                resources: []
            };
            if (buildingLevel !== staticDataModel.buildings[buildingId].maxLevel) {
                for (let res in upgradeInfo.Cost) {
                    building.resources.push({
                        id: res,
                        name: i18nModel.getResourceName(res),
                        cost: Math.ceil(upgradeInfo.Cost[res])
                    });
                }
                if (upgradeInfo.PionsToStay > 0) {
                    building.resources.push({
                        id: 'builders',
                        name: i18nModel.getResourceName('builders'),
                        cost: parseInt(upgradeInfo.PionsToStay)
                    });
                }
                let timeToBuild = $.secsToString(buildingsModel.getActualUpgradeTimeForBuilding(buildingId), i18nModel.getTimeFormat());
                building.resources.push({
                    id: 'time',
                    name: i18nModel.getResourceName('time'),
                    cost: timeToBuild
                });
            }
            buildings[staticDataModel.buildings[buildingId].type - 1].push(building);
        }
        self.content = $(uiUtils.applyTemplate('townHallWindow', {
            tabs: i18nModel.getData().town.townCenter.tabs,
            activeTab: 1,
            buildings: buildings,
            titles: i18nModel.getData().town.square,
            name: townModel.getData().Name,
            loyalty: townModel.getData().Loyalty,
            loyaltyLabel: i18nModel.getData().town.townCenter.loyalty
        }));
        self.buildingsContent = {};
        self.content.find('div.building').each(function() {
            let id = $(this).attr('id').match(/^building-item-(\d+)$/)[1];
            self.buildingsContent[id] = $(this);
            self.message[id] = {
                upgrade: self.buildingsContent[id].find('div.image-container>.blocking-text>.message'),
                buyResourcesButton: self.buildingsContent[id].find('div.image-container>.buy-resources-button')
            };
            self.button[id] = {
                upgrade: self.buildingsContent[id].find('div.upgrade-button'),
                downgrade: self.buildingsContent[id].find('div.downgrade-button')
            };
        });
        self.updateButtonsOnTab();
    },
    onBuyResourcesButtonClick: function() {
        townHallController.onWindowClose();
        premiumController.showPremiumsWindow('resource-shop');
    },
    updateBuildingInfo: function(buildingId) {
        let buildingLevel = buildingsModel.getLevelConsideringQueue(buildingId)
            , upgradeInfo = buildingsModel.getUpgradeInfo(buildingId, buildingLevel);
        this.buildingsContent[buildingId].children('h2').html(buildingLevel < 1 ? i18nModel.getBuildingName(buildingId) : String.format(i18nModel.getData().town.buildingTooltipFormat, i18nModel.getBuildingName(buildingId), buildingLevel));
        if (buildingLevel < staticDataModel.buildings[buildingId].maxLevel) {
            this.buildingsContent[buildingId].find('.exp-value').text(upgradeInfo.Experience);
            for (let resourceId in upgradeInfo.Cost) {
                this.buildingsContent[buildingId].find('label.res-count-' + resourceId).html(Math.ceil(upgradeInfo.Cost[resourceId]));
            }
            let builders = parseInt(upgradeInfo.PionsToStay, 10);
            this.buildingsContent[buildingId].find('label.res-count-builders').html(builders);
            let timeToBuild = $.secsToString(buildingsModel.getActualUpgradeTimeForBuilding(buildingId), i18nModel.getTimeFormat());
            this.buildingsContent[buildingId].find('label.res-count-time').html(timeToBuild);
            this.buildingsContent[buildingId].find('.resources').removeClass('not-display');
        } else {
            this.buildingsContent[buildingId].find('.resources').addClass('not-display');
        }
        this.button[buildingId].upgrade.attr({
            tooltip: this.getUpgradeButtonTooltip(buildingId)
        });
        this.button[buildingId].downgrade.attr({
            tooltip: this.getDowngradeButtonTooltip(buildingId)
        });
    },
    getUpgradeButtonTooltip: function(buildingId) {
        let buildingLevel = buildingsModel.getLevelConsideringQueue(buildingId);
        if (buildingLevel <= 0) {
            return i18nModel.getData().town.townCenter.buildTheBuilding;
        } else {
            if (buildingLevel >= staticDataModel.buildings[buildingId].maxLevel) {
                return i18nModel.getData().error.townBuildingUpgrade.maxLevel;
            } else {
                return String.format(i18nModel.getData().town.townCenter.upgradeOneLevel, buildingLevel + 1);
            }
        }
    },
    getDowngradeButtonTooltip: function(buildingId) {
        let buildingLevel = buildingsModel.getLevelConsideringQueue(buildingId);
        if (buildingLevel === staticDataModel.buildings[buildingId].minLevel) {
            return i18nModel.getData().town.townCenter.minLevel;
        } else {
            switch (buildingLevel) {
                case 0:
                    return i18nModel.getData().town.townCenter.nothingToDowngrade;
                case 1:
                    return i18nModel.getData().town.townCenter.demolishBuilding;
                default:
                    return String.format(i18nModel.getData().town.townCenter.downgradeOneLevel, buildingLevel - 1);
            }
        }
    },
    updateButtonsOnTab: function() {
        let self = townHallController;
        if (!self.buildingsContent) {
            timingModel.removeIntervaled(self.intervalIndex);
            self.intervalIndex = null;
            return;
        }
        for (let buildingId in self.buildingsContent) {
            self.updateButtons(parseInt(buildingId));
        }
        self.content.find('.buy-resources-button').tooltip({
            showURL: false,
            delay: 0,
            bodyHandler: function() {
                return i18nModel.getData().town.townCenter.buyResourcesButtonTooltip;
            }
        }).unbind('click').click(self.onBuyResourcesButtonClick);
    },
    updateButtons: function(id) {
        let self = townHallController
            , errorMessage = {
            upgrade: buildingsModel.checkForBuildingUpgrade(id),
            downgrade: buildingsModel.checkForBuildingDowngrade(id)
        };
        if (errorMessage.upgrade !== '') {
            self.button[id].upgrade.addClass('disabled');
            if (errorMessage.upgrade === 'squareOnlyOneLevel') {
                self.button[id].upgrade.addClass('disabled');
                self.button[id].downgrade.addClass('disabled');
                return;
            }
            self.message[id].upgrade.parent().addClass('visible');
            self.message[id].upgrade.html(errorMessage.upgrade);
            if (errorMessage.upgrade === i18nModel.getData().error.townBuildingUpgrade.resources) {
                self.message[id].buyResourcesButton.removeClass('not-display');
                self.message[id].upgrade.addClass('with-button');
            } else {
                self.message[id].buyResourcesButton.addClass('not-display');
                self.message[id].upgrade.removeClass('with-button');
            }
        } else {
            self.message[id].upgrade.parent().removeClass('visible');
            self.button[id].upgrade.removeClass('disabled');
            self.message[id].buyResourcesButton.addClass('not-display');
        }
        if (errorMessage.downgrade !== '') {
            self.button[id].downgrade.addClass('disabled');
        } else {
            self.button[id].downgrade.removeClass('disabled');
        }
    },
    onWindowShow: function(content) {
        let self = townHallController;
        content.find('ul.tabs > li:not(.decor)').addClass('cursor-over').click(self.onTownCenterTabClick);
        content.find('img.experience').tooltip({
            showURL: false,
            delay: 0
        });
        content.find('div.resources img.thumbnail').tooltip({
            showURL: false,
            extraClass: 'building-resource-tooltip',
            bodyHandler: function() {
                let $this = $(this)
                    , buildingId = parseInt($this.closest('div.building').attr('id').match(/^building-item-(\d+)$/)[1])
                    , resourceName = $this.data('name')
                    , upgradeInfo = buildingsModel.getUpgradeInfo(buildingId)
                    , needResourceCount = upgradeInfo.Cost[resourceName]
                    , currentResourceCount = playerModel.getData().Resources[resourceName]
                    , increment = 0;
                if (!currentResourceCount || needResourceCount <= currentResourceCount) {
                    if (resourceName === 'time') {
                        let skillArr = rpgModel.getSkillsAffectingRepositoryLimit();
                        for (let index in skillArr) {
                            let skillId = skillArr[index];
                            if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                                continue;
                            increment += rpgModel.playerSkills[skillId].Parameter / 100;
                        }
                    } else {
                        return String.format(i18nModel.getData().town.townCenter.timeTooltip, i18nModel.getData().resources[resourceName]);
                    }
                    if (upgradeInfo.Time && (premiumModel.getPlayerPremiums()[premiumModel.ministerTasks.buildingFaster] || increment > 0)) {
                        let baseTimeToBuild = buildingsModel.getBaseUpgradeTimeForBuilding(buildingId)
                            , premiumTimeToBuild = buildingsModel.getActualUpgradeTimeForBuilding(buildingId)
                            , baseTimeToBuildStr = $.secsToString(baseTimeToBuild, i18nModel.getTimeFormat())
                            , premiumTimeToBuildStr = $.secsToString(premiumTimeToBuild, i18nModel.getTimeFormat());
                        return String.format(i18nModel.getData().town.townCenter.timeTooltipPremium, [i18nModel.getData().resources[resourceName], baseTimeToBuildStr, premiumTimeToBuildStr]);
                    } else {
                        return String.format(i18nModel.getData().town.townCenter.timeTooltip, i18nModel.getData().resources[resourceName]);
                    }
                }
                let resourcePerHour = playerModel.getData().Resources[resourceName + 'Inc'] - playerModel.getData().Resources[resourceName + 'Dec']
                    , resourceDifference = needResourceCount - currentResourceCount
                    , time = resourcePerHour > 0 ? $.secsToString(resourceDifference / resourcePerHour * 3600, i18nModel.getTimeFormat()) : $.secsToString(999999999);
                return String.format(i18nModel.getData().town.buildingResourceTimeRemain, i18nModel.getData().resources[resourceName], time);
            },
            delay: 0
        }).attr('src', function() {
            let resId = $(this).next('label').attr('class').match(/^res-count-(.+)/)[1];
            return self.getBigResourceImageURL(resId);
        }).each(function() {
            let resId = $(this).next('label').attr('class').match(/^res-count-(.+)/)[1];
            $(this).data('name', resId)
        });
        content.find('div.downgrade-button, div.upgrade-button').clickable().click(function() {
            let $this = $(this);
            if ($this.hasClass('disabled')) {
                return;
            }
            let id = parseInt($this.closest('div.building').attr('id').match(/^building-item-(\d+)$/)[1])
                , action = $this.hasClass('upgrade-button') ? 'Upgrade' : 'Downgrade'
                , type = $this.hasClass('upgrade-button') ? 1 : 2;
            if (townModel.getData().CreatedType === 4 && id !== buildingsModel.wallsId) {
                return;
            }
            $this.closest('.building').children('.downgrade-button, .upgrade-button').addClass('disabled');
            self.constructionClick(id, action, type);
        }).contextmenu(function() {
            let $this = $(this);
            if ($this.hasClass('disabled')) {
                return;
            }
            let id = parseInt($this.closest('div.building').attr('id').match(/^building-item-(\d+)$/)[1])
                , action = $this.hasClass('upgrade-button') ? 'Upgrade' : 'Downgrade'
                , type = $this.hasClass('upgrade-button') ? 1 : 2;
            if (townModel.getData().CreatedType === 4 && id !== buildingsModel.wallsId) {
                return;
            }
            $this.closest('.building').children('.downgrade-button, .upgrade-button').addClass('disabled');
            self.constructionClick(id, action, type);
        }).tooltip({
            showURL: false,
            delay: 0,
            bodyHandler: function() {
                return $(this).attr('tooltip');
            }
        }).attr('tooltip', function() {
            let id = $(this).closest('div.building').attr('id').match(/^building-item-(\d+)$/)[1];
            return $(this).hasClass('upgrade-button') ? self.getUpgradeButtonTooltip(id) : self.getDowngradeButtonTooltip(id);
        });
        self.tabsContents = [];
        content.find('>div.tabs-content>div>div.scrollable').each(function() {
            self.tabsContents.push($(this).scrollable());
        });
        self.content.addClass('tab-1');
        self.tabsContents[self.getSelectedTabIndex()].rearrange().scrollToTop();
        self.prepareRenameForm(content);
        content.find('.evo-tree-pane .evo-building').each(function() {
            $(this).tooltip({
                showURL: false,
                bodyHandler: function() {
                    let buildingId = $(this).attr('class').match(/building-(\d+)/)[1];
                    return self.getEvoBuildingIconTooltip(buildingId);
                }
            });
        });
        methodModel.getHandler('onOpenTownHall')();
    },
    prepareRenameForm: function(content) {
        let self = townHallController
            , hideRenameForm = function() {
            content.children('.rename-town-form').animate({
                width: ''
            }, self.animationDuration, function() {
                $(this).hide();
                content.children('.rename-town').fadeIn(self.animationDuration);
                content.children('.town-info-block').show();
            });
        };
        content.children('.rename-town').clickable().click(function() {
            $(this).fadeOut(self.animationDuration, function() {
                content.children('.town-info-block').hide();
                content.children('.rename-town-form').show().animate({
                    width: '573px'
                }, self.animationDuration);
                content.children('.evo-tree').hide();
            });
        });
        content.children('.evo-tree').clickable().click(function() {
            if (content.children('.evo-tree-pane').css('display') === 'none') {
                content.children('.rename-town').hide();
                content.children('.tabs').hide();
                content.children('.tabs-content').hide();
                content.children('.evo-tree-pane').addClass('visible');
                content.find('.evo-tree label').text(i18nModel.getData().town.square.renameTown.back);
                content.closest('#window').find('h1 .level').addClass('not-display');
            } else {
                content.children('.rename-town').show();
                content.children('.tabs').show();
                content.children('.tabs-content').show();
                content.children('.evo-tree-pane').removeClass('visible');
                content.find('.evo-tree label').text(i18nModel.getData().town.square.renameTown.showEvoTreeButton);
                content.closest('#window').find('h1 .level').removeClass('not-display');
            }
        });
        content.find('.rename-town-form .cancel').clickable().click(function() {
            hideRenameForm();
        });
        content.find('.rename-town-form .name').keypress(function(e) {
            if (e.keyCode === chatController.KEY_RETURN) {
                $(this).siblings('.submit').click();
            }
        });
        content.find('.rename-town-form .submit').clickable().click(function() {
            let input = content.find('.rename-town-form input')
                , value = input.val();
            if (!value) {
                messageController.showSystemMessage(i18nModel.getData().error.townRename.nameIsEmpty);
                input.focus();
                return;
            } else if (!/^(?:[a-z\d][a-z\d\-_ ]{2,14}|[а-яё\d][а-яё\d\-_ ]{2,14})$/i.test(value)) {
                messageController.showSystemMessage(i18nModel.getData().error.nameError);
                input.focus();
                return;
            }
            let callback = function(response) {
                if (/error/.test(response)) {
                    messageController.showSystemMessage(i18nModel.getTextByCode(response));
                    return;
                }
                uiManager.playerInfoPanel.update();
                content.find('.town-info-block .town-name').text(value);
                content.children('.town-info-block ').show();
                playerItemsModel.setFlagItem(playerItemsModel.flagItems.PLAYER_ITEM_RENAMED_TOWN, function() {
                    questController.checkQuestsToBeDone();
                });
                hideRenameForm();
            };
            townModel.renameCurrentTown(value, callback);
        });
    },
    getEvoBuildingIconTooltip: function(buildingId) {
        return $(uiUtils.applyTemplate('buildingEvoTooltip', {
            name: i18nModel.getBuildingName(buildingId),
            description: i18nModel.getBuildingDescription(buildingId)
        }));
    },
    getSelectedTabIndex: function() {
        if (!this.content)
            return 0;
        return this.content.find('.tab-content:visible').prevAll('.tab-content').length;
    },
    constructionClick: function(id, action, type) {
        let self = this
            , supply = false;
        if (arguments[3] !== undefined) {
            supply = arguments[3];
        }
        let callback = function(buildingAction) {
            if (/error/.test(buildingAction.action['town:building' + action])) {
                let error = buildingAction.action['town:building' + action].split(":")[2];
                messageController.showSystemMessage(i18nModel.getData().error.townBuildingUpgrade[error]);
                return;
            }
            if (!townModel.getData().BuildingConstruction) {
                townModel.getData().BuildingConstruction = [];
            }
            let queue = 0
                , startTime = buildingAction.action['town:building' + action]['startTime'];
            if (townModel.getData().BuildingConstruction.length > 0) {
                queue = townModel.getData().BuildingConstruction.length;
                startTime = townModel.getData().BuildingConstruction[0].StartTime;
                for (let h = 0; h < queue; h++) {
                    startTime += townModel.getData().BuildingConstruction[h].BuildTime;
                }
            }
            townModel.getData().BuildingConstruction.push({
                BuildTime: buildingAction.action['town:building' + action]['timeToBuild'],
                StartTime: startTime,
                CompleteTime: 0,
                Type: type,
                BuildingId: id,
                SpeedUp: 0
            });
            let startBuildingMessage = (!buildingsModel.getLevel(id)) ? String.format(i18nModel.getData().messages.system.buildingUpgradeFrom0, i18nModel.getBuildingNameInGenitive(id)) : String.format(i18nModel.getData().messages.system['building' + action + 'Start'], i18nModel.getBuildingNameInGenitive(id));
            messageController.addMessageToLog(startBuildingMessage, 'build-start');
            townController.updateBuildingInfo(id, buildingsModel.getImageIndex(id));
            let actionInfo = buildingsModel['get' + action + 'Info'](id);
            for (let res in townModel.getData().Resources) {
                playerModel.getData().Resources[res] -= actionInfo.Cost[res];
            }
            if (type === 1) {
                townModel.getData().FreePeople -= parseInt(actionInfo.PionsToStay);
                townModel.getData().Workers += parseInt(actionInfo.PionsToStay);
            }
            self.updateBuildingInfo(id);
            self.updateButtonsOnTab();
            if (townModel.getBuildingConstructionCount() === 1) {
                townController.initBuildingSpeedUp();
            }
            methodModel.getHandler('onBuildingStart')(id);
            methodModel.getHandler('onTabClickInTownHall')(self.getSelectedTabIndex() + 1);
        };
        townModel.sendRequestForBuildingAction(id, action, callback, supply);
    },
    onTownCenterTabClick: function() {
        let $tab = $(this)
            , tabId = $tab.attr('id');
        $tab.closest('#town-hall-content').attr('class', tabId);
        townHallController.tabsContents[townHallController.getSelectedTabIndex()].rearrange().scrollToTop();
        methodModel.getHandler('onTabClickInTownHall')(tabId.match(/tab-(\d+)/)[1]);
    },
    getBigResourceImageURL: function(resId) {
        return String.format(staticDataUrl + 'resource/resources/{0}B.png', resId);
    },
    getBuildingThumbnailURL: function(id) {
        return String.format(staticDataUrl + 'resource/town/buildings/{0}/{0}-1-thumbnail.png', id);
    },
    onWindowClose: function() {
        let self = townHallController;
        timingModel.removeIntervaled(self.intervalIndex);
        self.intervalIndex = null;
        self.buildingsContent = null;
        self.message = {};
        self.errorMessage = {};
        self.button = {};
        self.intervalIndex = {};
        self.tabsContents = null;
        self.content = {};
        methodModel.getHandler('onCloseTownHall')();
    }
};
eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('d 5M={w:15,5L:15,1z:15,5K:15,2M:30,33:{K:0,1Y:0},3I:{1:\'3P\',2:\'1L\',3:\'5J\',4:\'3P\'},n:{1:{1:{X:8(){b j.2F(j.1g)>=1},19:8(){b j.2E(j.1g)>=1}},2:{X:8(){b j.2F(j.1h)>=1},19:8(){b j.2E(j.1h)>=1}}},2:{3:{X:8(){b j.2F(j.1K)>=1},19:8(){b j.2E(j.1K)>=1}}},3:{4:{19:8(){b y.16(y.Z.3b)}},5:{19:8(){b y.16(y.Z.2p)}}}},e:a,P:[],f:8(){b 2y.q().5I},5H:8(){9(7.f()){9(!7.w){7.2H();7.1A($.1b);1k.1j(h)}k{7.24()}}},1A:8(3O){d c=7;7.w=7.11().28(3O);7.w.1F.20(8(){c.3N()});7.w.L.20(8(){c.3G()});7.27();N.2x(a);7.2Q();D.C(\'5G\',1,8(x){c.3h(x)},a);D.C(\'5F\',1,8(x){c.3g(x)},a);D.C(\'5E\',1,8(){c.3e()},a);D.C(\'5D\',1,8(){c.3c()},a);D.C(\'5C\',1,8(){c.3d()},a);D.C(\'5B\',1,8(){c.3f()},h);D.C(\'5A\',1,8(){c.3q()},a);D.C(\'5z\',1,8(){c.3p()},a);D.C(\'5y\',1,8(){c.3m()},a);D.C(\'5x\',1,8(18){c.3j(18)},a);D.C(\'5w\',1,8(18){c.3i(18)},a);D.C(\'5v\',1,8(){c.3l()},a);D.C(\'5u\',1,8(){c.3o()},a);D.C(\'5t\',1,8(){c.3n()},a);7.24()},27:8(){9(!7.l){7.l=$(\'<2u 5s="v-l"></2u>\')}},11:8(){d A=$(2w.2v(\'5r\',u.q().v));A.1F=A.T(\'>.2r-1T\').2s().3w({3v:0,K:40,3u:a});A.L=A.T(\'>.3s-1T\').2s();A.1L=A.T(\'>.1L\');A.t=A.T(\'>.t\');A.M=A.T(\'>.M\');b A},3N:8(){d c=7;p.5q({M:u.q().v.5p,5o:8(){c.2D()}})},2D:8(){d c=7;2y.2D(8(A){9(A.3D==3C){3B.3A(u.3z(A));b}c.e=a;c.m();c.s();c.1a(a);13.1i(a);13.3y();1k.1j(a);N.2x(h)})},3L:8(t){7.w.M.E(t)},3K:8(W,1E){7.w.t.E(2w.2v(\'5n\',{W:W,1E:1E}))},3J:8(3M){7.w.1L.2m(\'2l\',\'1L \'+3M)},2A:8(Y,2C){9(!7.w.t){b}7.w.t.T(\'.2B-\'+Y)[2C?\'H\':\'1o\'](\'2C\')},1a:8(1n){7.w[1n?\'1o\':\'H\'](\'R\')},s:8(){1I(d i=0;i<7.P.12;i++){7.P[i].2G()}7.P=[]},24:8(){9(!7.f()){7.3H();b}O(7.f()){o 1:o 2:o 3:o 4:7.3L(u.q().v.n[7.f()].M);7.3K(u.q().v.n[7.f()].W,u.q().v.n[7.f()].1E);7.3J(7.3I[7.f()]);7.w.L.3F(7.e?u.q().v.3E:u.q().v.L);I;3t:b}9(!$(\'#v-23\').12){9(7.e){7.1w();13.1i(h);7.1a(a)}k{13.1i(a);7.1a(h)}7.V()}k{7.e=a;7.m();7.s();7.1a(a);13.1i(a)}},1w:8(){7.s();O(7.f()){o 1:o 2:9(!p.G&&1O.1N){7.1M(j.3k)}k{7.21()}I;o 3:9(!p.G){9(1O.1N){d g=7.11();g.1e(N.1R);g.M.E(\'\');g.t.E(u.q().v.n[3].1v[1].W);g.L.H(\'R\');7.P.1c(g);7.2d()}k{9(7.n[3][4].19()){d g=7.11();g.1e(N.1R);g.M.E(\'\');g.t.E(u.q().v.n[3].1v[3].W);g.L.H(\'R\');7.P.1c(g);7.2d()}k{d 1y=7.11();1y.1e(N.1R);1y.M.E(\'\');1y.t.E(u.q().v.n[3].1v[2].W);1y.L.H(\'R\');7.P.1c(1y);7.m()}}}I;o 4:9(!p.G){d g=7.11();g.1e(N.2X);g.M.E(\'\');g.t.E(u.q().v.n[4].1v[1].W);g.L.H(\'R\');7.P.1c(g);7.2Y()}k 9(7.e){7.1J()}I}},3H:8(){7.m()},3G:8(){9(7.V()){7.e=a;7.s();7.m();7.U()}k{13.1i(h);7.e=h;7.1a(a);7.1w();7.w.L.3F(u.q().v.3E)}},V:8(){d 2z=h;1I(d Y 2q 7.n[7.f()]){d 2B=7.n[7.f()][Y];9(!2B.19()){2z=a;7.2A(Y,a)}k{7.2A(Y,h)}}b 2z},3r:8(){d c=7;2y.5m(8(A){9(A.3D==3C){3B.3A(u.3z(A));b}c.e=a;9(!c.f()){c.m();c.s();c.1a(a);13.1i(a);13.3y();1k.1j(a);N.2x(h);3x.5l(8(){})}k{c.24()}})},U:8(){9(!7.f()){b}9(p.G&&!$(\'#v-23\').12){p.2r()}d c=7;7.1a(a);13.1i(a);p.5k(u.q().v.n[7.f()].5j,$(2w.2v(\'5i\',{5h:7.f(),5g:u.q().v,23:3x.5f[7.f()]})),a,{5e:p.5d,5c:8(t){t.T(\'.23 > 2u\').3w({3v:0,3u:a,5b:8(){d 1U=$(7),2t=1U.2m(\'2l\').5a(/^(.+)B$/,\'$1\');O(2t){o\'59\':b u.q().58[2];3t:b u.57(2t)}}});t.T(\'> .3s-1T\').2s().20(8(){p.2r()})},56:8(){c.3r()}})},3q:8(){9(!7.e){b}7.s();O(7.f()){o 4:7.1J();I}},26:8(){9($.55.54()<53){p.G.52(\'.51\').F(\'K\',$.1m(2h(p.G.F(\'2g-K\'),10)))}},3p:8(){7.l.2a().F({1C:\'\'});9(7.e){7.1w()}},3o:8(){},3n:8(){},3m:8(){9(!7.e){b}O(7.f()){o 1:o 2:7.21();I}},3l:8(){9(!7.e){b}O(7.f()){o 1:o 2:d 1x=h;1I(d Y 2q 7.n[7.f()]){9(!7.n[7.f()][Y].X()){1x=a;I}}9(1x){7.e=a;7.m()}k{7.1M(j.3k)}}},3j:8(18){9(!7.e){b}O(7.f()){o 1:o 2:7.21();I}},3i:8(18){9(!7.e){b}O(7.f()){o 4:7.l.2a().F({1C:\'\'});7.1J();I}},21:8(){O(7.f()){o 1:9(1t.1H()==1){9(!7.n[1][1].X()){7.1u(j.1g);7.1q(j.1g)}k 9(!7.n[1][2].X()){7.1u(j.1h);7.1q(j.1h)}k{7.e=a;7.m()}}k{7.1W(2)}I;o 2:9(1t.1H()==0){9(!7.n[2][3].X()){7.1u(j.1K);7.1q(j.1K)}k{7.e=a;7.m()}}k{7.1W(1)}I}},1J:8(){O(7.f()){o 4:d g=7.11();g.1e($.1b);g.M.E(\'\');g.t.E(u.q().v.n[4].1v[2].W);g.L.H(\'R\');g.1F.H(\'R\');7.P.1c(g);9(2W.1H()==0){9(!7.n[4][6].19()){7.2U(3)}k{7.U()}}k{7.1W(1)}I}},3h:8(x){O(7.f()){o 1:9(x==j.1g){9(7.n[1][2].X()){7.e=a;7.m()}k{7.1q(j.1h);7.1u(j.1h,h)}}k 9(x==j.1h){9(7.n[1][1].X()){7.e=a;7.m()}k{7.1q(j.1g);7.1u(j.1g,h)}}I;o 2:9(x==j.1K){7.e=a;7.m()}I}},3g:8(x){O(7.f()){o 1:o 2:9(7.V()){7.e=a;7.s();7.m();7.U()}k{d 1x=h;1I(d Y 2q 7.n[7.f()]){9(!7.n[7.f()][Y].X()){1x=a;I}}9(1x){7.e=a;7.m()}}}},3f:8(){},3e:8(){9(7.f()!=3){b}7.s();9(7.V()&&7.e){7.e=a;7.s();7.m();7.U()}k 9(7.e){7.1w()}},3d:8(){9(7.f()!=3){b}7.s();9(7.V()&&7.e){7.e=a;7.s();7.m();7.U()}k 9(7.e){7.1w()}},3c:8(){9(!1O.1N&&y.16(y.Z.3b)&&!y.16(y.Z.2p)){d c=7;y.4Z(y.Z.2p,8(){9(c.f()==3&&c.V()&&c.e){c.e=a;c.s();c.m();c.U()}})}},4Y:8(t){9(7.f()!=4){b}7.s();7.m();t.T(\'.4X > .4W-4V > 4U.4T\').20();d g=7.11();g.1e($.1b);g.M.E(\'\');g.t.E(u.q().v.n[4].1v[3].W);g.L.H(\'R\');g.1F.H(\'R\');7.P.1c(g);9(7.V()){7.e=a;7.s();7.m();7.4S();7.U()}},4R:8(){9(7.f()!=4){b}7.s();7.m();7.1J();9(7.V()){7.e=a;7.s();7.m();7.U()}},4Q:8(){9(7.f()!=4){b}7.s();7.m();9(7.V()){7.e=a;7.s();7.m();7.U()}},1u:8(x,36,1Z){d J=$(\'#J-1U-\'+x);9(!J.12){b}d 1f=0,2o=J.4P(\'.J\');1I(d i=0;i<2o.12;i++){1f+=$(2o[i]).1B()}d 39=J.2n().3a(),38=J.2n().2n().3a(),37=39-38;1f=4O.4N(37,1f);9(36){1t.35[1t.1H()].34(1f,h,1Z)}k{1t.35[1t.1H()].34(1f,a);1Z&&1Z()}},r:8(Q,z,31){9(!7.l||!7.e){b}9(!z){z={}}d 2f=z.1S!=1d?z.1S:0,2j=z.2e!=1d?z.2e:0;d c=7,17=z.17!=1d?z.17:a,1r=z.1r!=1d?z.1r:a,S=z.S!=1d?z.S:a,1p=z.1p!=1d?z.1p:a,F={K:\'\',1G:\'\'},1s=17?Q.1f():Q.4M(),2i=7.33.K<0;7.l.2m(\'2l\',\'1n\');7.l.4L().H(\'1n\');9(17){7.l.28($.1b)}k{7.l.1e(Q)}9(S){7.l.H(\'S\');7.l.1o(\'2k-1Y\');9(!1p){F.1G=$.1m(1s.1G+Q.1B()-(17?N.32:0)+2j);F.K=$.1m(1s.K+(Q.1X()-7.l.1X())/2+2f)}}k{9(2i){7.l.H(\'2k-1Y\')}k{7.l.1o(\'2k-1Y\')}7.l.1o(\'S\');9(!1p){F.1G=$.1m(1s.1G+Q.1B()/2-7.l.1B()/2-(17?N.32:0)+2j);F.K=$.1m((!2i?1s.K-7.l.1X()+(1r?2h(Q.F(\'2g-K\'),10):0):1s.K+Q.1X()-(1r?2h(Q.F(\'2g-K\'),10):0))+2f)}}9(z.2b!=1d){7.l.H(z.2b.4K())}7.l.F(F);9(!7.1z||!31){7.1z=8(){c.r(Q,z,h)}}},4J:8(){9(!p.G){b}7.r(p.1F)},25:8(){9(!p.G){b}7.r(p.G,{1r:h,1S:-30,2e:-10})},1M:8(x){d J=$(\'#4I-\'+x);9(!J.12){b}7.r(J)},1W:8(18){9(!p.G){b}d 1V=$(\'#1V-\'+18);9(!1V.12){b}7.r(1V)},4H:8(){},1q:8(x){9(!p.G){b}d J=$(\'#J-1U-\'+x);9(!J.12){b}d 2Z=J.4G(\'.4F-1T\');7.r(2Z)},4E:8(){7.r($(\'#4D\'),{1S:50})},4C:8(){7.r(N.4B,{S:h})},2d:8(){7.r(N.1R,{S:h})},2Y:8(){7.r(N.2X,{S:h})},4A:8(){9(!p.G){b}7.r(4z.t.T(\'.4y .4x:1n\'))},4w:8(){7.r($(\'#4v\'))},4u:8(){7.r(2V.4t.4s)},2K:8(){7.r($(\'#4r-4q-4p\'),{17:h,S:h})},4o:8(1Q){9(!p.G){b}7.r($(\'#2c-\'+1Q+\' 4n\'))},4m:8(1Q){9(!p.G){b}7.r($(\'#2c-\'+1Q+\' .1E\'))},4l:8(){9(!p.G){b}7.r(2W.4k.4j)},2L:8(){7.r(2V.4i)},4h:8(4g){9(!p.G){b}7.r(4f.4e)},2U:8(2T){9(!7.e){b}d 1D=$(\'#2c-1D-\'+2T);9(!1D.12){b}7.r(1D,{2b:\'1D\',1p:h});7.l.2a().F({1C:0.5});7.29(7.l)},29:8(1P){d c=7,2S=4d(1P.F(\'1C\')),2R=0.5-2S;1P.4c({1C:2R},4b,\'4a\',8(){c.29(1P)})},m:8(){7.1z=15;7.l&&7.l.1o(\'1n\')},2Q:8(){9(!7.w){b}d 2N=2P.2O.49(\'48\')?0:2P.2O.1B();7.w.F({47:$.1m(2N+7.2M)})},46:8(){b;9(y.16(y.Z.45)){b}7.1A($.1b);1k.1j(h);7.2L()},44:8(){b;9(y.16(y.Z.43)||(7.f()&&7.f()<=3)){b}d c=7,1l=7.11();1l.28($(\'.42\'));1l.M.E(\'\');1l.t.E(\'ВозвращайсО!\');1l.L.H(\'R\');7.P.1c(1l);7.27();7.e=h;7.2K();D.C(\'41\',1,8(){c.s();c.e=a;c.m()},h)},3Z:8(){b;9(y.16(y.Z.3Y)){b}d c=7;7.1A($.1b);1k.1j(h);7.26();7.25()},3X:8(){b;9(y.16(y.Z.3W)||!2J.q()[22]||2J.q()[22].3V||!3U.q().3T[j.3S[0]].3R){b}d c=7,x=14;9(!1O.1N){b}7.1A($.1b);1k.1j(h);7.1M(x);D.C(\'3Q\',1,8(2I){9(2I!=x){b}c.26();c.25()},h)},2H:8(){9(7.w){7.w.2G();7.w=15}7.l=15;7.1z=15}};', 62, 359, '|||||||this|function|if|false|return|self|var|showingArrows|getPart|showOnMapButtonContainer|true||buildingsModel|else|arrow|hideArrow|parts|case|uiWindow|getData|showArrow|cleanAdditionalContainers|content|i18nModel|tutorial|tutorialContainer|buildingId|playerItemsModel|extraParams|result||add|methodModel|html|css|hWindow|addClass|break|building|left|acceptButton|title|uiManager|switch|additionalContainers|relativeElement|hidden|vertical|find|showRewardWindow|checkPartComplete|description|checkCompleting|taskId|flagItems||createContainer|length|gadgetsController||null|isFlagSet|absolutePositioning|tabId|checkComplete|setVisibility|pageContainer|push|undefined|insertAfter|offset|quarryId|mineId|updateTutorialIcon|disableChestButton|chestController|showOnReturnToOwnTownButtonContainer|px|visible|removeClass|relativeFlow|showArrowForUpgradeButtonInTownHall|onlyInnerSize|relOffset|townHallController|scrollToTownHallBuilding|additionalAdvisers|checkForShowingArrows|needHide|showDragMapContainer|onArrowResizeHandler|init|outerHeight|opacity|cabinet|tasks|closeButton|top|getSelectedTabIndex|for|checkArrowsInPremiumWindow|barnId|adviser|showArrowForBuilding|townBacking|townController|element|ministerId|btnTownMapSwitcher|leftOffset|button|item|tab|showArrowForWindowTab|outerWidth|right|callback|click|checkArrowsInTownHall||reward|rebuildInterface|showArrowForWindow|moveWindowToTheLeftOnLowBrowserWidth|createArrow|appendTo|animateGlow|stop|extraClass|minister|showArrowForMainMenuMapTownButton|topOffset|additionalLeftOffset|padding|parseInt|fromRight|additionalTopOffset|from|class|attr|parent|prevElements|PLAYER_ITEM_RETURNED_TO_TOWN_AFTER_MAP_DRAGGING|in|close|clickable|type|div|applyTemplate|uiUtils|showQuestsButton|playerModel|fullComplete|markTaskComplete|task|complete|cancelTutorial|getLevel|getLevelConsideringQueue|remove|clear|bId|questModel|showArrowForMapReturnToOwnTownButton|showArrowForMapCellSelection|distanceFromChat|chatPosition|chatContainer|chatController|onWindowResize|targetOpacity|currentOpacity|cabinetId|showArrowForMinisterCabinet|mapController|premiumController|btnPremium|showArrowForMainMenuPremiumButton|upgradeButton||resizeEvent|viewportTopOffset|confirmWindowPositions|scrollTo|tabsContents|animatable|maxOffset|heightView|heightContent|height|PLAYER_ITEM_DRAGGED_MAP|onMapTownSwitcherClickHook|onMapDraggedHook|onMapTownSwitchHook|onDisplayCellInfoHook|onBuildingCompleteHook|onBuildingStartHook|onTabClickInPremiumWindowHook|onTabClickInTownHallHook|townHallId|onCloseTownHallHook|onOpenTownHallHook|onCloseQuestWindowHook|onOpenQuestWindowHook|onClosePremiumWindowHook|onOpenPremiumWindowHook|receiveReward|accept|default|showURL|delay|tooltip|staticDataModel|updateQuestIcons|getTextByCode|showSystemMessage|messageController|String|constructor|minimizeButton|text|onAcceptButtonClick|cleanInterface|adviserIcons|setAdviserIcon|setContent|setTitle|iconClass|onCloseButtonClick|container|architector|onOpenMilitaryBuildingWindow|Level|millitaryBuildings|Buildings|townModel|Unread|PLAYER_ITEM_QUEST_22_READ|onQuest22Read|PLAYER_ITEM_FIRST_SQUARE_OPEN|onFirstSquareOpen||onReturnToOwnTownButtonClick|mapSidebar|PLAYER_ITEM_FIRST_FOREIGN_TOWN_CLICK|onFirstForeignTownClick|PLAYER_ITEM_FIRST_DUNGEON_CLICK|onFirstDungeonClick|bottom|minimized|hasClass|swing|500|animate|parseFloat|createArmyButton|armyController|transparentBlocking|showArrowForSquareCreateNewArmyButton|selection|pane|pricingControls|showArrowForPricePaneInPremiumWindow|showArrowForMinisterTasksInPremiumWindow|h2|showArrowForMinisterTitleInPremiumWindow|centering|city|current|cellInfo|sidebar|showArrowForMapCellInfo|people|showArrowForTopFreePeopleIcon|finish|quest|questController|showArrowForFinishQuestButton|btnQuests|showArrowForMainMenuQuestButton|resources|showArrowForTopResourcesBar|upgrade|children|showArrowForBuildingConstructionQueue|selectable|showArrowForWindowCloseButton|toString|detach|position|min|Math|prevAll|onPurchaseMinisterCabinetHook|onCloseMinisterCabinetDetailsHook|closeOverlay|ducat|li|select|currency|cy|onOpenMinisterCabinetDetailsHook|setFlagItem||blockUI|closest|1400|width|body|onClose|getResourceName|currencyName|ducats|replace|bodyHandler|onShow|WINDOW_TUTORIAL_REWARD|windowLayout|tutorialStepsRewards|titles|partId|tutorialRewardWindow|rewardTitle|show|updateConfig|finishTutorialPart|tutorialContent|ok|cancelTutorText|showConfirm|tutorialAdviser|id|onCloseQuestWindow|onOpenQuestWindow|onCloseTownHall|onTabClickInPremiumWindow|onTabClickInTownHall|onOpenTownHall|onClosePremiumWindow|onOpenPremiumWindow|displayCellInfo|onMapDragged|onMapTownSwitcherClick|onMapTownSwitch|onBuildingComplete|onBuildingStart|start|TutorialPart|oldman|onConfirmWindowResizeHandler|onBlackeningResizeHandler|tutorialController'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('g 1h={o:1s,8z:1s,9:1s,3n:{1z:8y.8x},2B:1s,2A:1s,2T:a(12,N){g 7=1h,U=19;c(h.f().l){g 4U=8w P();4U.8v(x.8u.t,[\'8t\'],{C:h.f().l.C});1c=4U.8s();h.8r(1c[\'n\'])}7.4D();c(h.f().l){U=h.f().l.C;7.o.t={};$.3j(1K,7.o.t,h.f().l);g 4T=7.o.t.6q,33=[];16(g 6u 1l 4T){33.1A(4T[6u])}33=33.8q(a(6s,6t){n 6t.6r-6s.6r});7.o.t.6q=33;16(g 2x 1l 7.o.t.K){7.o.t.K[2x].4c=7.2I(7.o.t.K[2x])}7.o.t.4C=7.2H(7.o.t.2P||\'\');7.o.1N=\'t\';7.o.1N+=\' N-\'+7.1f(7.o.1N);7.o.8p=h.f();7.o.1J.1w=7.o.1J.j=1K;7.o.1J.5V=1K}R{7.o.1N=\'t\';7.o.1N+=\' N-\'+7.1f(7.o.1N)}7.4B(U,12,N)},1f:a(2F){g 4S={t:1,1e:2,Y:3,1a:4,1F:5};n 4S[2F]?4S[2F]:0},4D:a(){8.o={8o:h.f().C,5F:h.f().l.K?h.f().l.K:1s};$.3j(8.o,r.f().q);8.o.6p=r.f().8n.8m.6p;8.o.4C=8.2H(8.o.2P||\'\');8.o.1J={}},4B:a(U,12,N){g 7=1h,31={8l:!!12,8k:12},32=h.f();c(32.l&&U===32.l.C){31.8j=1M.8i;31.4R=a(){2L.8h(7.9.b(\'>.1F\'))};31.8g=a(){2L.8f()};7.o[\'5l\']=r.f().q.5k;6o 1e=32.l.K;16(6o 3N 1l 1e){c(1e.8e(3N)){c(1e[3N].C===32.C){7.o[\'5j\']=1e[3N].1o===x.29;1k}}}}1M.23();7.9=$(y.3c(\'8d\',7.o));7.6i(U);1M.4h(r.f().q.4p,7.9,1s,31);7.9.1d=7.9.b(\'>.t .1H\').1P();7.9.1u=7.9.b(\'>.1e 1I.1j\').1P();7.9.6a=7.9.b(\'>.3M 1I.1j\').1P();7.9.T=7.9.b(\'>.1a .H-1B\').1P();7.9.T.4g=7.9.T.b(\'.1a-1B\');7.9.T.1L=7.9.T.b(\'.2J-1B\');7.2O();7.9.1Y=7.9.b(\'>.Y .Y-1I .1j\').1P();7.9.8c=7.9.b(\'>.Y .Y-8b .1j\').1P();7.9.1u.b(\'.q-J>.1T>.J-2m\').39({4a:0,49:19,48:a(){n 7.47($(8))}});7.9.1u.b(\'.1w>.17\').w(a(){7.2p()});y.3S(7.9.1d,7.1E());y.3R(7.9.1d,7.1E());y.3Q(7.9.1d);y.2i(7.9.1d);y.2h(7.9.1d);y.2g(7.9.1d,a(){7.9.1d.S()});c(N){7.9.M(\'13\',N+\' N-\'+7.1f(N))}7.38();7.2p();7.2a();7.2t();c(N){34(N){1r\'1e\':7.9.1u.S();1k;1r\'1a\':7.9.T.S();1k;1r\'Y\':7.9.1Y.S();1k;1r\'1F\':2L.4R();1k}}},2p:a(){g 6n=8.9.1u.b(\'.1w>.17.F\').D;8.2r[6n?\'p\':\'u\'](\'v\')},2a:a(){g 6l=8.9.T.b(\'.17.F\').D,6m=8.9.T.b(\'.2J-1B .17.F\').D;8.3C[6m?\'p\':\'u\'](\'v\');8.3E[6l?\'p\':\'u\'](\'v\')},47:a(6k){g 6j=2y(6k.M(\'13\').3D(/J-2m-(\\d+)/)[1],10);n r.f().q.I.8a[6j]},6i:a(U){g 7=8,5W=h.f().l&&h.f().l.C==8.o.t.C;y.4b(8.9.b(\'.17\'));8.9.b(\'89.1G 42:1m(.41)\').w(a(){g N=$(8),2F=N.M(\'13\');7.9.M(\'13\',2F+\' \'+N.M(\'24\'));7.1n();34(2F){1r\'1e\':7.9.1u.S();1k;1r\'1a\':7.9.T.S();1k;1r\'Y\':7.9.1Y.S();1k;1r\'1F\':2L.4R();1k}});8.9.b(\'>.Y .Y-1I .1j .Y-1I-6h.5r m.3f\').1B({1c:r.f().q.3g.3f,5o:{\'w\':8.4e}});8.9.b(\'>.Y .Y-1I .1j .Y-1I-6h.q-1Z 3e\').w(8.4d);8.9.b(\'m.1e 5n.1Z 3e.88\').w({87:U},8.5J);8.2V=8.9.b(\'#q-1Z\').28(a(){7.3F()}).6g(\'w\',a(){7.2V.1g(\'\').w(a(){7.3F()})}).6f(a(e){7.3F();c(e.6e==2R.6d){7.2c.w()}});8.2c=8.9.b(\'#86-q\').Q().w(a(){7.4A()});8.2u=8.9.b(\'#2K-1Z\').28(a(){7.2t()}).6g(\'w\',a(){7.2u.1g(\'\').w(a(){7.2t()})}).6f(a(e){7.2t();c(e.6e==2R.6d){7.9.b(\'#2K\').w()}});8.3u=8.9.b(\'#2K\').Q().w(a(){7.4z()});8.3E=8.9.b(\'#2o-1a\').Q().w(a(){7.5T()});8.3C=8.9.b(\'#5a-P\').Q().w(a(){7.5S()});g 1U=8.9.b(\'>.1e\');8.2r=8.9.b(\'#1w\').Q().w(a(){7.5D()});8.9.b(\'q-J-\'+h.f().C).u(\'14\');8.1X=8.9.b(\'#j-I\');8.1W=8.9.b(\'#2o-j-I\');8.1V=8.9.b(\'#1S-I\');8.1X.Q().w(a(){16(g i 1l h.f().l.K){g 1p=h.f().l.K[i],G=7.9.b(\'#q-J-\'+1p.C+\' .I-j-21\');7.5N(1p,G);7.5R(G)}1U.u(\'I-j-2M\');7.2r.u(\'14\');7.1X.u(\'14\');7.1W.u(\'11\');7.1V.u(\'11\');7.9.b(\'.1w .17\').u(\'v\')});8.1W.Q().w(a(){1U.p(\'I-j-2M\');7.2r.p(\'14\');7.1X.p(\'14\');7.1W.p(\'11\');7.1V.p(\'11\');7.9.b(\'.1w .17\').p(\'v\')});8.1V.Q().w(a(){c(!7.5Q()){n}1U.p(\'I-j-2M\');7.2r.p(\'14\');7.1X.p(\'14\');7.1W.p(\'11\');7.1V.p(\'11\');7.9.b(\'.1w .17\').p(\'v\')});1U.b(\'.I-6c\').39({49:19,4a:0,48:a(){g 6b=$(8).M(\'13\').63(/I-6c/,\'\').2U();n r.f().q.I.85[6b]}});8.9.b(\'m.t .3M-2e\').Q().w(a(){7.9.M(\'13\',\'3M\');7.1n();7.9.6a.S()});8.9.b(\'m.3M .84\').Q().w(a(){7.9.M(\'13\',\'t N-\'+7.1f(\'t\'));7.1n()});8.9.b(\'m.t .j\').Q().w(a(){7.9.M(\'13\',\'j N-\'+7.1f(\'j\'));7.9.b(\'m.j .L-15-V\').p(\'11\');7.9.b(\'m.j .L-j-V\').p(\'14\');7.9.b(\'m.j 2S.1H\').1g(h.f().l.2P);7.9.b(\'m.j .3m-3l-21\').u(\'1m-3k\');7.1n();7.2B=1s;7.2A=1s;7.4P.M({65:h.f().l.3H})});8.64=8.9.b(\'#83-3m-3l\');8.4H=8.9.b(\'.3m-3l-21\');8.4P=8.9.b(\'#1R-15\');8.4N=8.9.b(\'82\');8.2B=1s;8.2A=1s;8.4O=8.9.b(\'27[1Z=81-69]\');g 5Z=a(e){g 27=e.69,1j=19;c(27.68){1j=27.68.1j}R c(27.67){1j=27.67.4Q.1j}R c(27.4Q){1j=27.4Q.1j}c(!1j){n}g 3L=$(1j).O(\'3L\'),30=19;c(3L.D){30=3L.2j()}c(30){g 1Q=66?66.80(30):7Z(\'(\'+30+\')\');c(1Q&&1Q.7Y){7.2B=1Q.3G;7.2A=1Q.3H;7.4P.M({65:1Q.3H});7.64.2j((2Q.7X.7W/7V).7U().63(\'.\',\',\'));7.4H.p(\'1m-3k\');7.2W.p(\'v\')}R{g 3K=(1Q&&1Q.3K)?1Q.3K:\'B:62:61\';A.z(r.X(3K))}}R{A.z(r.X(\'B:62:61\'))}7.3J.p(\'v\');7.4O.7T(\'60\')};8.7S=8.4N.b(\'18[1Z=4M]\').28(a(e){c(7.3J.Z(\'v\')){n}7.3J.u(\'v\');7.4O.60(a(e){5Z(e)});7.4N.7R()});8.3J=8.9.b(\'.5X-4M-2e\').Q().w(a(){7.9.b(\'18[3O=4M]\').7Q(\'w\')});8.2W=8.9.b(\'.7P-1R-2e\').Q().w(a(){7.5U()});8.9.b(\'m.j .2o\').Q().w(a(){7.9.M(\'13\',\'t N-\'+7.1f(\'t\'));7.1n()});8.9.b(\'m.j .1S\').Q().w(a(){g 1z=7.9.b(\'m.j 2S.1H\').1g(),1R=7.9.b(\'m.j .5Y .5Y-1B > m:7O(.7N.11)\'),2Z=0;c(1R.D){2Z=2y(1R.M(\'24\').3D(/1R-(\\d+)/)[1])}7.9.M(\'13\',\'t N-\'+7.1f(\'t\'));7.1n();c(h.f().l.3G&&(h.f().l.3G==2Z)){2Z=0}7.4n(1z,2Z)});8.9.b(\'m.j .7M\').39();5w.7L(8.9.b(\'m.j .7K-5X\'),8.3n);y.4J(8.9.b(\'m.j .L-21\'),8.9.b(\'m.j .1H\'));g 2E=8.9.b(\'m.j .L-15-V .L-4I\').1P();8.9.b(\'m.j .15-2e\').Q().w(a(){7.9.b(\'m.j .L-15-V\').u(\'11\');7.9.b(\'m.j .L-j-V\').u(\'14\');2E.2j(y.2N(7.9.b(\'m.j .L-j-V .1H\').1g())).S();y.2i(2E);y.2h(2E);y.2g(2E,a(){2E.S()})});8.9.b(\'m.j .L-15-V .23-15\').Q().w(a(){7.9.b(\'m.j .L-15-V\').p(\'11\');7.9.b(\'m.j .L-j-V\').p(\'14\')});c(5W){c(h.f().l.4L){8.9.b(\'m.H-j .2Y-E\').1g(h.f().l.4L)}c(h.f().l.3I){8.9.b(\'m.H-j .4K-1a .17\').u(\'F\')}y.4J(8.9.b(\'m.H-j .L-21\'),8.9.b(\'m.H-j .2Y-E\'));g 2D=8.9.b(\'m.H-j .L-15-V .L-4I\').1P();8.9.b(\'m.H-j .15-2e\').Q().w(a(){7.9.b(\'m.H-j .L-15-V\').u(\'11\');7.9.b(\'m.H-j .L-j-V\').u(\'14\');2D.2j(y.2N(7.9.b(\'m.H-j .L-j-V .2Y-E\').1g())).S();y.2i(2D);y.2h(2D);y.2g(2D,a(){2D.S()})});8.9.b(\'m.H-j .L-15-V .23-15\').Q().w(a(){7.9.b(\'m.H-j .L-15-V\').p(\'11\');7.9.b(\'m.H-j .L-j-V\').p(\'14\')});8.9.b(\'m.t .H-j\').Q().w(a(){7.9.M(\'13\',\'H-j N-\'+7.1f(\'H-j\'));7.9.b(\'m.H-j .L-15-V\').p(\'11\');7.9.b(\'m.H-j .L-j-V\').p(\'14\');7.9.b(\'m.H-j 2S.2Y-E\').1g(h.f().l.4L);c(h.f().l.3I){7.9.b(\'m.H-j .4K-1a .17\').u(\'F\')}7.1n()});8.9.b(\'m.H-j .2o\').Q().w(a(){7.9.M(\'13\',\'t N-\'+7.1f(\'t\'));7.1n()});8.9.b(\'m.H-j .1S\').Q().w(a(){c(!$(8).Z(\'v\')){$(8).u(\'v\');7.3U(7.9.b(\'m.H-j .2Y-E\').1g());7.3W(7.9.b(\'m.H-j .4K-1a .17\').Z(\'F\'))}})}8.9.b(\'.5V-q\').Q().w(8.4r);8.9.b(\'m.P-18 .n-2e\').Q().w(a(){7.9.M(\'13\',\'t N-\'+7.1f(\'t\'));7.1n()});y.4J(7.9.b(\'m.P-18 .L-21\'),7.9.b(\'m.P-18 .P-E\'));c(8.o.t&&8.o.t.C){8.1q=8.9.b(\'m.t .P-37\').Q().w(a(){c(7.o.t.3I&&!7.1q.Z(\'v\')){c(7.1q.Z(\'2G\')){7.1q.u(\'v\');7.4u(7.o.t.C)}R{c(7.1q.Z(\'2f\')){7.4t(2y(7.o.t.C),a(){7.2T();2R.4q(1K)})}R{7.9.M(\'13\',\'P-18 N-\'+7.1f(\'P-18\'));7.1n()}}}});8.9.b(\'m.P-18 .4v\').Q().w(a(){c(!$(8).Z(\'v\')){$(8).u(\'v\');7.4y(7.o.t.C,7.9.b(\'m.P-18 2S.P-E\').1g())}});g 2C=8.9.b(\'m.P-18 .L-15-V .L-4I\').1P();8.9.b(\'m.P-18 .15-2e\').Q().w(a(){7.9.b(\'m.P-18 .L-15-V\').u(\'11\');7.9.b(\'m.P-18 .L-j-V\').u(\'14\');2C.2j(y.2N(7.9.b(\'m.P-18 .L-j-V .P-E\').1g())).S();y.2i(2C);y.2h(2C);y.2g(2C,a(){2C.S()})});8.9.b(\'m.P-18 .L-15-V .23-15\').Q().w(a(){7.9.b(\'m.P-18 .L-15-V\').p(\'11\');7.9.b(\'m.P-18 .L-j-V\').p(\'14\')});c(!8.o.t.3I){8.1q.u(\'v\')}c(h.f().2X&&h.f().2X.D){16(g i=0;i<h.f().2X.D;i++){c(h.f().2X[i].7J==8.o.t.C){c(h.f().2X[i].5s.C){8.1q.u(\'2f\').E(r.f().q.4V)}R{8.1q.u(\'2G\').E(r.f().q.4W)}1k}}}}},5U:a(){g 7=8;c(8.2W.Z(\'v\')){n}8.2W.u(\'v\');x.7I(8.2B,8.3n.1z,a(1c){7.2W.p(\'v\');c(1c.7H==20){A.z(r.X(1c));n}h.f().3H=7.2A;h.f().3G=7.2B;7.4Y(7.2A);A.z(r.X(\'q:7G:7F\'));7.4H.u(\'1m-3k\')})},3F:a(){c(!8.2V.D||!8.2c.D){n}g E=8.2V.1g();8.2c[E.2U().D?\'p\':\'u\'](\'v\')},2t:a(){c(!8.2u.D||!8.3u.D){n}g E=8.2u.1g();8.3u[E.2U().D?\'p\':\'u\'](\'v\')},5T:a(){c(!x.I.5c()){n}c(8.3E.Z(\'v\')){n}g 7=8,1b=[];8.9.b(\'.H-17 .17.F\').3t(a(){1b.1A(2y($(8).2q(\'.q-J\').M(\'24\').3D(/^1C-(\\d+)$/)[1],10))});c(!1b.D){n}8.3E.u(\'v\');x.7E(1b,a(){A.z(r.f().q.7D);7.2O();7.2a()},a(B){A.z(r.X(B));7.2a()})},5S:a(){c(!x.I.5b()){n}c(8.3C.Z(\'v\')){n}g 7=8,1b=[];8.9.b(\'.2J-1B .H-17 .17.F\').3t(a(){1b.1A(2y($(8).2q(\'.q-J\').M(\'24\').3D(/^1C-(\\d+)$/)[1],10))});c(!1b.D){n}8.3C.u(\'v\');x.7C(1b,a(){A.z(r.f().q.7B);7.2O();7.5m();7.2a()},a(B){A.z(r.X(B));7.2a()})},5R:a(G){g 3B=G.O(\'.1O\'),3A=G.O(\'.26\');3B.w(a(){c(3B.Z(\'v\')){n}c(3B.Z(\'F\')){G.O(\':1m(.1O)\').u(\'v\').u(\'F\')}R{G.O(\'.26\').p(\'v\')}});3A.w(a(){c(3A.Z(\'v\')){n}c(3A.Z(\'F\')){G.O(\':1m(.1O,.26)\').u(\'v\').u(\'F\')}R{G.O(\':1m(.1O,.26)\').p(\'v\')}})},5Q:a(){g 7=8,2z={},3z=0;16(g i 1l h.f().l.K){g 1p=h.f().l.K[i],1D=1p.C,G=$(\'#q-J-\'+1D+\' .I-j-21\'),1v={C:1D,2w:19,2v:19,4G:19,4F:19,4E:19};c(G.O(\'.1O.F\').D>0){1v.1o=x.29}R c(G.O(\'.26.F\').D>0){1v.1o=x.3a}R{1v.1o=x.7A}c(1v.1o==x.29){3z++}c(x.7z.5C(1v.1o)==-1){1v.2w=G.O(\'.Y.F\').D>0;1v.2v=G.O(\'.3y.F\').D>0;1v.4G=G.O(\'.1F-3x.F\').D>0;1v.4F=G.O(\'.14-25.F\').D>0;1v.4E=G.O(\'.3w-25.F\').D>0}c(x.7y(1v,1p)){2z[1D]=1v}}c(3z>1){A.z(r.f().B.q.I.7x);n 19}R c(!3z){A.z(r.f().B.q.I.7w);n 19}x.7v(2z,a(){g 5P=x.7u(2z);7.56();c(5P){7.38()}16(g 1D 1l 2z){7.40(2z[1D])}},a(5O){A.z(r.X(5O))});n 1K},5N:a(1p,G){c(1p.1o==x.29){G.O(\'.1O\').p(\'v\').u(\'F\');G.O(\':1m(.1O)\').u(\'F\').u(\'v\')}R c(1p.1o==x.3a){G.O(\'.1O\').p(\'F\').p(\'v\');G.O(\'.26\').p(\'v\').u(\'F\');G.O(\'.Y,.3y,.1F-3x,.14-25,.3w-25\').u(\'F\').u(\'v\')}R{G.O(\'.1O\').p(\'F\').p(\'v\');G.O(\'.26\').p(\'F\');G.O(\'.26,.Y,.3y,.1F-3x,.14-25,.3w-25\').p(\'v\');G.O(\'.Y\')[1p.2w?\'u\':\'p\'](\'F\');G.O(\'.3y\')[1p.2v?\'u\':\'p\'](\'F\');G.O(\'.1F-3x\')[1p.4G?\'u\':\'p\'](\'F\');G.O(\'.14-25\')[1p.4F?\'u\':\'p\'](\'F\');G.O(\'.3w-25\')[1p.4E?\'u\':\'p\'](\'F\')}},4e:a(){g 7=1h,U=$(8).2q(\'.Y-1I-5M\').M(\'5L\'),1z=$(8).M(\'t\');c(1z==0){x.7t([U],a(){g 5K=h.f().l.3h;7.9.1Y.b(\'.Y-1I-5M\').3t(a(){g U=$(8).M(\'5L\');c(!5K[U]){$(8).4i()}});7.9.1Y.S()},a(B){A.z(r.X(B))})}7.4k(U,1z)},5t:a(){g 3v=$(8).E(),12=1h.1E(\'1a\');1M.23();5I.5H(3v,19,12)},5J:a(e){g 3v=$(8).E(),12=1h.1E(\'1e\');1M.23();5I.5H(3v,19,12)},4d:a(e){g U=2y($(8).2q(\'1x\').M(\'13\'),10),12=1h.1E(\'Y\');c(U){1M.23();1h.3Z(U,12)}},3Z:a(2d,12,N){g 7=1h;c(h.f().l&&((3X 2d==\'7s\'&&2d.5G()==h.f().l.4w.5G())||(3X 2d==\'7r\'&&2d==h.f().l.C))){7.2T(12,N);n}x.7q(2d,a(1c){c(!7.o){7.4D()}7.o.t={};$.3j(1K,7.o.t,1c);16(g 2x 1l 7.o.t.K){7.o.t.K[2x].4c=7.2I(7.o.t.K[2x])}7.o.t.4C=7.2H(7.o.t.2P||\'\');7.o.1N=\'t\';7.o.1N+=\' N-\'+7.1f(7.o.1N);7.o.1J={};7.o.5F=1s;7.o.7p=20.2b(r.f().q.7o,7.o.t.4w);7.4B(2d,12,N)})},2I:a(1i){c(1i.1o===x.29){n 1}R c(1i.1o===x.3a){n 2}R c(1i.2w&&1i.2v){n 3}R c(1i.2w&&!1i.2v){n 4}R c(!1i.2w&&1i.2v){n 5}n 6},2H:a(1H){n y.2N(1H)},4A:a(){c(8.2c.Z(\'v\')){n}g 7=8;g E=8.2V.1g();c(!E||E.2U()==\'\'){n}8.2c.u(\'v\');x.4A(E,a(){A.z(20.2b(r.f().q.7n,E));7.2T();2R.4q(1K)},a(B){A.z(r.X(B));7.2c.p(\'v\')})},4z:a(){c(!x.I.5d()){n}g 7=8;c(8.3u.Z(\'v\')){n}g E=8.2u.1g().2U();c(!E.D){n}x.4z(E,a(){A.z(20.2b(r.f().q.7m,E));7.2u.1g(\'\');7.2O();7.2t()},a(B){A.z(r.X(B))})},4y:a(U,4x){g 7=1h;c(h.f().l.K){n}x.4y(U,4x?4x:\'\',a(4s){c(4s){A.z(20.2b(r.f().q.7l,h.f().l.4w));c(7.2n()){7.2T()}}R{A.z(r.f().q.7k);c(7.W()){7.9.b(\'m.P-18 .4v\').p(\'v\');7.3P(2);7.9.b(\'m.P-18 2S.P-E\').1g(\'\');7.9.M(\'13\',\'t N-\'+7.1f(\'t\'));7.1n()}}},a(B){c(7.W()){7.9.b(\'m.P-18 .4v\').p(\'v\')}A.z(r.X(B))})},4u:a(U){g 7=1h;c(h.f().l.K){n}x.4u(U,a(){A.z(r.f().q.7j);c(7.W()){7.1q.p(\'v\');7.3P(1)}},a(B){A.z(r.X(B));c(7.W()){7.1q.p(\'v\')}})},4t:a(24,2s){x.4t(24,a(){A.z(r.f().q.4s);2s&&2s()},a(B){A.z(r.X(B))})},5E:a(24,2s){x.5E(24,a(){A.z(r.f().q.7i);2s&&2s()},a(B){A.z(r.X(B))})},4r:a(){g 22=0;16(g i 1l h.f().l.K){g J=h.f().l.K[i];c(J.C==h.f().C){22+=3s.3r(J.3q*2Q.3p.7h)}}g 3o=20.2b(r.X(\'q:7g\'),22);1M.5B({4p:3o,5A:a(){x.4r(a(){A.z(r.f().q.7f);2R.4q(19);1M.23()},a(B){A.z(r.X(B))})}})},5D:a(){c(!x.I.59()){n}c(8.2r.Z(\'v\')){n}g 1b=[],7=8;8.9.b(\'.1w .17.F\').3t(a(){1b.1A($.7e($(8).2q(\'.q-J\'),/q-J-(\\d+)/))});c(!1b.D){n}g 22=0;16(g i 1l h.f().l.K){g J=h.f().l.K[i];c(1b.5C(J.C)!=-1){34(J.7d){1r 1:22+=3s.3r(J.3q*2Q.3p.7c);1k;1r 2:22+=3s.3r(J.3q*2Q.3p.7b);1k;7a:22+=3s.3r(J.3q*2Q.3p.79)}}}g 3o=20.2b(1b.D>1?r.X(\'q:78\'):r.X(\'q:77\'),22);1M.5B({4p:3o,5A:a(){x.1w(1b,a(){A.z(r.f().q.76);7.5z(1b);7.2p()},a(B){A.z(r.X(B));7.2p()})}})},5z:a(1b){c(!8.W()||!8.2n()){n}16(g i=0;i<1b.D;i++){1D=1b[i];8.9.b(\'#q-J-\'+1D).4i()}1b.D&&8.9.1u.S()},5y:a(1D,1T,4o){x.5y(1D,1T,a(1c){4o&&4o.E(r.f().q.5x[1T]);16(g i 1l h.f().l.K){c(h.f().l.K[i].C==1D){h.f().l.K[i].1o=1T;h.f().l.K[i].75=r.f().q.5x[1T];1k}}},a(B){A.z(r.X(B))})},4n:a(1H){g 7=8,4m=7.3n.1z;c(!x.I.57()){n 19}x.4n(1H,4m,a(){7.52(h.f().l.2P);7.9.b(\'m.j .3m-3l-21\').u(\'1m-3k\');c(!74){5w.73(4m)}},a(1c){c((1c[\'q:4l\'])&&(/B/.5e(1c[\'q:4l\']))){A.z(r.X(1c[\'q:4l\']))}});n 1K},4k:a(U,1z){c(!x.I.44()){n}g 1c=h.f().l.3h;c((1c[U]&&1c[U].72==1z)||(!1c[U]&&!1z)){n}x.4k(U,1z,a(){A.z(r.f().q.71)},a(B){A.z(r.X(B))})},W:a(){n $(\'#q\').D>0},2n:a(){c(8.W()&&h.f().l){n h.f().l.C==8.o.t.C}n 19},70:a(1B){c(h.f().l&&h.f().l.1y){16(g i=0;i<h.f().l.1y.D;i++){g 4j=h.f().l.1y[i].6Z.C;16(g k=0;k<1B.D;k++){c(4j==1B[k]){h.f().l.1y.6Y(i,1);i--;8.W()&&$(\'#1C-\'+4j).4i()}}}8.W()&&8.9&&8.9.T.S()}},2O:a(){c(!8.W()||!h.f().l){n}g 7=1h;8.9.T.4g.3d();8.9.T.1L.3d();16(g 1C 1l h.f().l.1y){g o=$.3j(1K,{},h.f().l.1y[1C],{6X:20.2b(\'{0} {1}\',$.6W(h.f().l.1y[1C].5v,r.6V()),$.6U(h.f().l.1y[1C].5v,r.6T()))});c(h.f().l.1y[1C].3i){o.3i=y.2N(h.f().l.1y[1C].3i)}g 1x=$(y.3c(\'6S\',o));c(h.f().l.1y[1C].3i){1x.5u(\'.q-J\').O().1m(\'.H-17\').w(a(){$(8).2q(\'1x.q-J\').6R(\'1x.P-2k\').6Q(\'4h\');7.9.T.S()});1x.5u(\'.P-2k\').w(a(){$(8).p(\'4h\');7.9.T.S()})}1x.b(\'.1Z 3e\').w(8.5t);c(h.f().l.1y[1C].5s.C){8.9.T.4g.3b(1x)}R{8.9.T.1L.3b(1x)}}g 4f=8.9.T.b(\'.17\');y.4b(4f);4f.w(a(){7.2a()});8.9.T.S();y.3S(8.9.T.1L,8.1E(\'1a\'));y.3R(8.9.T.1L,8.1E(\'1a\'));y.3Q(8.9.T.1L);y.2i(8.9.T.1L);y.2h(8.9.T.1L);y.2g(8.9.T.1L,a(){7.9.T.S()})},6P:a(){c(!8.W()||!h.f().l){n}g 7=8,5p=x.I.44();8.9.1Y.3d();16(g 5q 1l h.f().l.3h){g o={5r:h.f().l.3h[5q],3g:r.f().q.3g,1J:{}};c(5p){o.1J.2K=o.1J.1w=o.1J.j=1K}g 1x=$(y.3c(\'6O\',o));8.9.1Y.3b(1x);c(o.1J.j){1x.b(\'m.3f\').1B({1c:r.f().q.3g.3f,5o:{\'w\':8.4e}})}}8.9.b(\'>.Y 1I.1j 5n.q-1Z 3e\').w(8.4d);8.9.1Y.S()},5m:a(){c(!8.W()||!h.f().l){n}g 7=8;8.9.1u.3d();16(g i 1l h.f().l.K){g 1i=h.f().l.K[i];1i.4c=7.2I(1i);g 5i=y.3c(\'6N\',{J:1i,6M:i+1,5l:r.f().q.5k,5j:h.f().l.K.1o==x.29});8.9.1u.3b($(5i))}c(h.f().l&&h.f().l.C==8.o.t.C){c(h.f().l.K&&(h.f().l.K.1o==x.29||h.f().l.K.1o==x.3a)){g 5h=8.9.1u.b(\'.17\'),5g=8.9.1u.b(\'.1w>.17\');y.4b(5h);5g.w(a(){7.2p()})}}8.9.1u.b(\'.q-J>.1T>.J-2m\').39({4a:0,49:19,48:a(){n 7.47($(8))}});8.9.1u.S()},38:a(){c(!8.W()){n}c(!8.2n()){8.1n();n}g 1U=8.9.b(\'>.1e\');g 1X=8.9.b(\'#j-I\'),1W=8.9.b(\'#2o-j-I\'),1V=8.9.b(\'#1S-I\');c(x.I.58()){c(!1U.Z(\'I-j-2M\')){1X.p(\'14\');1W.p(\'11\');1V.p(\'11\')}}R{1X.u(\'14\');1W.p(\'11\');1V.p(\'11\');1U.p(\'I-j-2M\')}8.1n();2L.38()},1n:a(){g 46=8.9.M(\'13\').6L(/\\s+/),36=[];c(!8.W()){n}c(!8.2n()){8.9.u(\'1m-5f-q\');c(8.o.t&&8.o.t.C&&!h.f().l){8.9.u(\'1t-P-37\')}R{8.9.p(\'1t-P-37\')}8.9.O(\'.1G\').M(\'13\',\'1G 1G-\'+8.9.b(\'>.1G>42:1m(.41):11\').D);n}R{8.9.p(\'1m-5f-q\')}16(g i=0;i<46.D;i++){g 45=46[i];c(!/1t-.+/.5e(45)){36.1A(45)}}g 43={5d:\'1t-2K\',5c:\'1t-2o-1a\',5b:\'1t-5a-37-2J\',53:\'1t-28-6K-2k\',54:\'1t-28-7-2J-6J\',59:\'1t-1w\',58:\'1t-j-I\',44:\'1t-28-Y\',57:\'1t-j-1H\',6I:\'1t-28-1R\'};16(g 35 1l 43){c(x.I[35]()){36.1A(43[35])}}8.9.M(\'13\',36.2f(\' \'));8.9.O(\'.1G\').M(\'13\',\'1G 1G-\'+8.9.b(\'>.1G>42:1m(.41):11\').D);c(!8.9.b(\'>.1G>#N-\'+8.1f(\'1a\')+\':11\').D&&8.9.Z(\'1a\')){8.9.p(\'1a N-\'+8.1f(\'1a\')).u(\'1e N-\'+8.1f(\'1e\'))}},56:a(){c(!8.W()||!8.2n()){n}16(g i 1l h.f().l.K){g J=h.f().l.K[i];8.40(J)}},40:a(1i){$(\'#q-J-\'+1i.C+\' .1T .J-2m\').M(\'13\',\'J-2m J-2m-\'+8.2I(1i))},1E:a(3Y){g 12={6H:\'1h\',35:\'3Z\',2l:[8.55(),1s]};c(3Y){12.2l.1A(3Y)}R{c(8.9.Z(\'1e\')){12.2l.1A(\'1e\')}c(8.9.Z(\'1a\')){12.2l.1A(\'1a\')}c(8.9.Z(\'Y\')){12.2l.1A(\'Y\')}c(8.9.Z(\'1F\')){12.2l.1A(\'1F\')}}n 12},55:a(){c(8.W()&&8.o.t&&8.o.t.C){n 8.o.t.C}R{n 19}},3W:a(3V){g 7=1h;c(!x.I.54()||3X(3V)!==\'6G\'){n}x.3W(3V,a(){A.z(r.f().q.6F);c(7.W()){7.9.b(\'m.H-j .1S\').p(\'v\')}},a(B){A.z(r.X(B));c(7.W()){7.9.b(\'m.H-j .1S\').p(\'v\')}})},3U:a(2k){g 7=1h;c(!x.I.53()){n}x.3U(2k?2k:\'\',a(){A.z(r.f().q.6E);c(7.W()){7.9.b(\'m.H-j .1S\').p(\'v\')}},a(B){A.z(r.X(B));c(7.W()){7.9.b(\'m.H-j .1S\').p(\'v\')}})},52:a(3T){c(!3T||!8.W()){n}g 7=8;8.9.1d.2j(1h.2H(3T));8.9.1d.S();y.3S(8.9.1d,8.1E());y.3R(8.9.1d,8.1E());y.3Q(8.9.1d);y.2i(8.9.1d);y.2h(8.9.1d);y.2g(8.9.1d,a(){7.9.1d.S()})},6D:a(51){c(!8.W()){n}8.9.b(\'.t .6C-50\').E(51)},6B:a(4Z){c(!8.W()){n}8.9.b(\'.t .6A-50\').E(4Z)},4Y:a(4X){c(!8.W()){n}8.9.b(\'m.t .1R\').6z(\'6y-6x\',\'6w(\'+4X+\')\')},3P:a(3O){34(3O){1r 1:8.1q.p(\'2G 2f\').E(r.f().q.6v);1k;1r 2:8.1q.p(\'2f\').u(\'2G\').E(r.f().q.4W);1k;1r 3:8.1q.p(\'2G\').u(\'2f\').E(r.f().q.4V)}}};', 62, 532, '|||||||self|this|content|function|find|if|||getData|var|playerModel||edit||Union|div|return|templateData|removeClass|union|i18nModel||info|addClass|disabled|click|unionModel|uiUtils|showSystemMessage|messageController|error|Id|length|text|checked|rightsEditPane|recruiting|rights|member|Members|bb|attr|tab|children|request|clickable|else|rearrange|recruitingList|unionId|container|isWindowOpen|getTextByCode|diplomacy|hasClass||visible|backObject|class|hidden|preview|for|checkbox|input|false|invitations|ids|data|unionDescription|members|getTabNumberForName|val|unionController|unionMember|body|break|in|not|rebuildContentClassAttribute|Rank|memberRights|requestMembershipButton|case|null|can|membersList|newUserRights|kick|tr|UnacceptedInvites|value|push|list|invitation|memberId|getBackObject|forum|tabs|description|table|actions|true|requestsList|uiWindow|defaultTab|leader|scrollable|json|blazon|save|rank|membersTab|saveRightsButton|cancelEditRightsButton|editRightsButton|diplomacyList|name|String|pane|loosePoints|close|id|forums|advisor|iframe|change|RANK_LEADER|checkAcceptRequestAndCancelInvitationsButtonEnabled|format|createUnionButton|idOrName|button|join|prepareSpoilersInContent|prepareBuildingIconsInContent|prepareUnitIconsInContent|html|message|params|icon|isMyUnionOpen|cancel|checkKickMemberButtonEnabled|closest|kickMembersButton|success|checkInviteButtonEnabled|inviteNameInput|RightInvitations|RightDiplomacy|mi|parseInt|newRights|selectedBlazonUrl|selectedBlazonId|requestPreview|greetingPreview|descriptionPreview|tabName|withdraw|formatDescription|getRankIconForMember|requests|invite|unionForumController|mode|bb2html|rebuildInvitesList|Description|staticDataModel|chatController|textarea|showUnionWindow|trim|createUnionName|buyBlazonButton|UnionInvitations|greeting|blazonId|jsonUnparsed|windowParams|playerData|enumeratedLog|switch|method|classes|membership|updateMyRights|tooltip|RANK_ADVISOR|append|applyTemplate|empty|span|relations|diplomacyTitles|Diplomacy|Message|extend|display|price|avatar|currencyToUse|confirmText|unionParams|RatingPoints|ceil|Math|each|inviteButton|playerName|trusted|moder|inviter|leaderCount|advisorCheckbox|leaderCheckbox|acceptRequestButton|match|cancelInvitationsButton|checkCreateNewUnionButtonEnabled|AvatarId|AvatarUrl|SelfRequestsAllowed|selectFileButton|messageCode|pre|log|index|type|setRequestMembershipButtonType|prepareCoordsLinksInContent|prepareUnionLinksInContent|preparePlayerLinksInContent|descriptionText|changeWelcomeMessage|on|changeRequestsAllowed|typeof|forcedTab|displayUnionInfo|updateMemberIconForMember|decor|li|method2css|canIChangeDiplomacy|cClass|currentClasses|getRankTitleForIcon|bodyHandler|showURL|delay|initCheckbox|RankIcon|onUnionClick|onDiplomacyItemClick|invitationsCeckboxes|invitationsList|show|remove|invitedPlayerId|saveDiplomacy|setDescription|cyType|editUnion|membershipLabelElement|title|viewUnionChannel|leaveUnion|accepted|acceptInvitation|cancelMembershipRequest|send|Name|requestMessage|requestForMembership|sendInvitation|createUnion|displayWindow|FormattedDesc|createTemplateData|RightTrustedForums|RightHiddenForums|RightForumModer|selectedAvatarPricePane|render|initBBEditor|allowing|WelcomeMessage|file|uploadBlazonForm|uploadBlazonIFrame|uploadBlazonPreview|document|onShow|ratio|objectiveLog|req|requestForMembershipJoinButton|requestForMembershipWithdrawButton|blazonUrl|setDisplayedBlazon|playersCount|count|townCount|setDisplayedDescription|canIChangeWelcomeMessage|canIChangeSelfRequestsAllowedSetting|getOpenedUnionId|updateOthersRights|canIEditUnionDescription|canIEditRights|canIKick|accept|canIAcceptMembershipRequest|canICancelInvite|canIInvite|test|my|memberKickCheckboxes|memberCheckboxes|unionMemberContent|isLeader|offline|offlineLabel|rebuildMembersList|td|handler|iCanChangeDiplomacy|relatedUnionId|relation|Inviter|onInvitePlayerClick|filter|Date|premiumController|ranks|changeMemberMembership|removeMembers|ok|showConfirm|indexOf|onKickMember|declineInvitation|UnionMembership|toLowerCase|displayProfile|playerController|onPlayerClick|unionDiplomacyData|union_id|row|updateRightEditPaneForMember|errorCode|myRightsUpdated|saveRights|bindRightEditPaneEventsForMember|onAcceptRequestButtonClick|onCancelInvitationsButtonClick|onBuyBlazonButtonClick|leave|isMyUnion|select|blazons|onBlazonLoadCallback|load|generalUploadError|blazonUpload|replace|selectedAvatarPriceElement|src|JSON|contentWindow|contentDocument|target|logList|tooltipKey|legend|KEY_RETURN|keyCode|keypress|one|cell|updateWindowContent|iconType|memberIconElement|invitesAndRequestsCheckedCount|requestsCheckedCount|checkedCount|let|coinTitle|Log|RecId|r1|r2|recId|requestForMembershipButton|url|image|background|css|players|setDisplayedPlayersCount|town|setDisplayedTownCount|changeWelcomeMessageSuccess|changeRequestsAllowedSuccess|boolean|controller|canIEditUnionBlazon|allowed|welcome|split|memberNumber|unionWindowMemberRow|unionWindowDiplomacyRow|rebuildDiplomacyList|toggleClass|next|unionWindowInvitationRow|getTimeFormat|timestampToTimeString|getDateFormat|timestampToDateString|InvitationDate|splice|Player|removeUnacceptedInvites|diplomacySet|Relation|updateCurrencyDependentOnType|eventsEnabled|RankTitle|kicked|memberKickCanMakeLoseRatingPointsConfirm|membersKickCanMakeLoseRatingPointsConfirm|activePlayerKickRatingPointsLost|default|bannedPlayerKickRatingPointsLost|inactivePlayerKickRatingPointsLost|RatingPointsKickType|parseId|left|memberLeaveCanMakeLoseRatingPointsConfirm|leaveRatingPointsLost|declined|requestForMembershipWithdraw|requestForMembershipSent|requestForMembershipAccepted|invited|created|requestForMembershipInfoText|membershipRequestInfoText|getUnionInfo|number|string|deleteDiplomacy|applyNewRights|changeMembersRights|leaderMustBeSpecified|tooManyLeaders|areRightsDifferent|SPECIAL_RANKS|RANK_MEMBER|requestsAccepted|acceptRequests|invitationsCancelled|cancelInvitations|uploadBlazonSucceeded|editInfo|constructor|buyBlazon|UnionId|currency|initCurrencySelect|coin|selection|has|buy|trigger|submit|uploadBlazonFile|unbind|toString|100|uploadableBlazonPrice|avatarUploadData|status|eval|parse|upload|form|selected|back|editModeTooltips|create|currentUnionId|nick|ul|memberListIconTooltips|notes|notesList|unionInfo|hasOwnProperty|clear|onClose|initWithPlaceholder|WINDOW_LAYOUT_LONG|windowLayout|addToStack|backButton|windowTitles|premium2|PlayerId|player|sort|updateUnionData|getResponse|all|gettings|addGetting|new|currencyTypeDucat|premiumModel|onlineMembersContainer'.split('|')))

eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('7 6g={1j:\'6f\',3u:\'3G\',3x:\'N\',2B:\'4S\',47:\'1w-m\',46:\'1w-f\',43:\'1w-q\',2u:13,2m:{A:1,26:1},1r:{A:1,26:1},1L:V,v:V,D:V,1G:V,6e:5(4V){7 4=3,4W={4r:b.o().k.a};3.J=$(u.2L(\'6d\',4W));4V.2k().2M(3.J);3.1y=3.J.6(\'.j-n\').l().1v({1u:13,1t:4B,1C:5(){7 1K=4.J.M(\'L\')?4.J.M(\'L\').3J(/\\s+/):[];1c(7 i=0;i<1K.C;i++){7 1J=1K[i];9(!/2s-.+/.3I(1J)){j b.o().k.a.6c[1J]}}j\'\'}});3.25=3.J.6(\'.6b-n\').l().1v({1u:13,1t:0});3.1B=3.J.6(\'>.m-F\');3.Y=3.1B.6(\'>2w\').2n();3.1B.6(\'>.3F-E-S-n\').l().8(5(){4.4k()});3.1B.6(\'>.3E-E-S-n\').l().8(5(){4.4j()});3.1R=3.1B.6(\'>.2i-N-n\').l().8(5(){4.3O()});3.12=3.J.6(\'>.f-F\');3.Q=3.12.6(\'>.F\').2n();3.4w=3.12.6(\'>.4T\');3.6a=3.12.6(\'>.E-m-n\').l().8(5(){4.3N()});3.12.6(\'>.69 68.1a>3A\').1v({1t:0,1u:13,1C:5(){7 $L=$(3).M(\'L\');j b.o().k.a.4y[$L]}});3.12.6(\'>.3F-E-S-n\').l().8(5(){4.4i()});3.12.6(\'>.3E-E-S-n\').l().8(5(){4.4h()});3.1D=3.12.6(\'>.2i-3G-n\').l().8(5(){4.3M()});3.1H=3.12.6(\'>.4U-m-F\');3.1k=3.12.6(\'>.4U-3G-n\').l().8(5(){4.4A()});3.1T=3.J.6(\'>.67-66-19\');3.1f=3.J.6(\'>.q-F\');3.w=3.1f.6(\'>2w\').2n();3.4l=3.1f.6(\'>.4T\');3.1f.6(\'>.3F-E-S-n\').l().8(5(){4.4f()});3.1f.6(\'>.3E-E-S-n\').l().8(5(){4.4e()});3.1N=3.1f.6(\'>.2i-4S-n\').l().8(5(){4.3L()});3.65=3.1B.6(\'>.1w-m-n\').l().8(5(){4.30()});3.2o=3.J.6(\'>.1w-m\');3.1X=3.2o.6(\'.2a-1x-F\').64({c:b.o().k.a.4F});3.3b=3.2o.6(\'4R.19\');3.3g=3.2o.6(\'>.1o-n\').l().8(5(){4.41()});3.63=3.2o.6(\'>.3B-n\').l().8(5(){4.3V()});3.62=3.1f.6(\'>.E-f-n\').l().8(5(){4.4d()});3.61=3.12.6(\'>.1w-f-n\').l().8(5(){4.3f()});3.3D=3.J.6(\'>.1w-f\');3.22=3.3D.6(\'>.1A-20-2R\');3.29=3.22.6(\'>.1A-4O\').2n();3.60=3.22.6(\'>.4N-n\').l().8(5(){4.22.g(\'1Y\');4.R.g(\'1z\')});3.R=3.3D.6(\'>.E-2R\');3.4J=3.R.6(\'>.1A-2y\');3.36=3.R.6(\'4R.19\');3.2e=3.R.6(\'4M\');3.5Z=3.R.6(\'>.20-n\').l().8(5(){4.22.h(\'1Y\');4.R.h(\'1z\');4.29.4L(u.4K(4.2e.1m())).1s();u.3q(4.29);u.3p(4.29);u.3o(4.29,5(){4.29.1s()})});3.3e=3.R.6(\'>.1o-n\').l().8(5(){4.3U()});3.5Y=3.R.6(\'>.3B-n\').l().8(5(){4.3S()});3.1V=3.R.6(\'.p.11\');3.5X=3.R.6(\'4Q.11\').8(5(){4.1V.4P(\'8\')});3.1U=3.R.6(\'.p.U\');3.5W=3.R.6(\'4Q.U\').8(5(){4.1U.4P(\'8\')});3.5V=3.1f.6(\'>.1w-q-n\').l().8(5(){4.2x()});3.3C=3.J.6(\'>.1w-q\');3.1Z=3.3C.6(\'>.1A-20-2R\');3.28=3.1Z.6(\'>.1A-4O\').2n();3.5U=3.1Z.6(\'>.4N-n\').l().8(5(){4.1Z.g(\'1Y\');4.1q.g(\'1z\')});3.1q=3.3C.6(\'>.E-2R\');3.4H=3.1q.6(\'>.1A-2y\');3.2d=3.1q.6(\'4M\');3.5T=3.1q.6(\'>.20-n\').l().8(5(){4.1Z.h(\'1Y\');4.1q.h(\'1z\');4.28.4L(u.4K(4.2d.1m())).1s();u.3q(4.28);u.3p(4.28);u.3o(4.28,5(){4.28.1s()})});3.3c=3.1q.6(\'>.1o-n\').l().8(5(){4.3R()});3.5S=3.1q.6(\'>.3B-n\').l().8(5(){4.3P()});u.2h(3.R.6(\'.p\'));u.4I(3.4J,3.2e);u.4I(3.4H,3.2d)},5R:5(){9(3.2u){j}3.2u=1E;3.3w()},3w:5(){7 4=3;3.I(3.1j);O.5Q(5(N){9(!N||H(N)==\'G\'){t.r(b.W(H(N)==\'G\'?N:\'2E:k:5P:3s\'))}x{4.1L=N;4.4G(N)}})},I:5(S){3.J.M(\'L\',S);3.3K()},4G:5(N){7 4=3;3.Y.2k();3.1R.h(\'y\');1c(7 i=0;i<N.C;i++){3.Y.2M($(u.2L(\'5O\',N[i])).M(\'L\',3.2W(N[i])))}3.25.1e(\'8\').8(5(){4.2c()});3.Y.6(\'.1a>3A.2a-1x-1,.1a>3A.2a-1x-2\').1v({1u:13,1t:0,1C:5(){7 1a=$(3),1W=3a(1a.M(\'L\').3Z(/2a-1x-(\\d+)/)[1],10);j b.o().k.a.4F[\'1x:\'+1W]}});3.Y.6(\'.2v\').8(5(){7 1d=$.18($(3).1n(\'K\'),/a-m-(\\d+)/),m=V;1c(7 i=0;i<N.C;i++){9(N[i].B==1d){m=N[i]}}9(!m){j}4.2O(m)});3.Y.5N({4E:\'2t-4E\',5M:\'.2t-4C\',5L:\'5K\',5J:15,5I:1E,5H:1E,5G:\'5F\',5E:5(e,4D){4.4t(4D.5D)}}).5C();3.Y.6(\'.2t-4C\').1v({1u:13,1t:4B,1C:5(){j b.o().k.a.Y.5B}});3.Y.6(\'K:2z(0)\').h(\'2K-m\');3.I(3.3x);3.Y.1s().3m();7 3z=3.Y.6(\'.1h>.p\');u.2h(3z);3z.8(5(){7 1I=4.Y.6(\'.1h>.p.z\').C;4.1R[1I?\'g\':\'h\'](\'y\')})},4v:5(){7 3y={};1c(7 i=0;i<3.1L.C;i++){3y[3.1L[i].B]=3.1L[i].16}3.1H.c(\'F\',13).2k();3.1H.F({c:3y,5A:3.v.B})},4A:5(){7 4=3,1d=3a(3.1H.6(\'K.3Y\').M(\'37\'),10),X=[];9(3.1k.14(\'y\')||!1d||1d==3.v.B){j}3.1k.h(\'y\');3.Q.6(\'.1h>.p.z\').1O(5(){7 p=$(3),1l=$.18(p.1n(\'1Q\'),/a-f-(\\d+)/);X.1b(1l)});9(!X.C){j}3.I(3.1j);O.5z(X,1d,5(c){9(H(c)==\'G\'){t.r(b.W(c));3.1k.g(\'y\');4.1i()}x{t.r(b.o().k.a.Q.5y);4.1P()}})},38:5(23){j $(\'#a-m-\'+23)},1F:5(){7 4=3;3.I(3.3x);3.v=V;3.25.1e(\'8\').8(5(){4.2c()})},2c:5(){3.3w()},2O:5(m,A){7 4=3,1d=m.B;3.I(3.1j);O.5x(1d,A,5(17){9(!17||H(17)==\'G\'){t.r(b.W(H(17)==\'G\'?17:\'2E:k:4g:3s\'));4.1F()}x{4.v=m;4.4z(m,17)}})},4z:5(m,17){7 4=3;3.1T.Z(m.16);3.Q.2k();3.2m.A=17.A+1;3.2m.26=17.26;3.1D.h(\'y\');3.1k.h(\'y\');3.12.g(\'E-S\');3.1y.1e(\'8\').8(5(){4.1F()});3.25.1e(\'8\').8(5(){4.1P()});1c(7 i=0;i<17.F.C;i++){7 2Q=17.F[i];O.5w(2Q);3.Q.2M($(u.2L(\'5v\',2Q)).M(\'L\',3.2r(2Q)))}3.Q.6(\'.1a>.1a\').1v({1u:13,1t:0,1C:5(){7 4x=$(3).M(\'L\').3i(\'1a\',\'\').5u();j b.o().k.a.4y[4x]}});3.Q.6(\'.2v\').8(5(){7 1l=$.18($(3).1n(\'1Q\'),/a-f-(\\d+)/),f=V;1c(7 i=0;i<17.F.C;i++){9(17.F[i].B==1l){f=17.F[i]}}9(!f){j}4.2g(f)});u.4o(3.Q,4q.4p());3.I(3.3u);3.Q.1s().3m();7 3v=3.Q.6(\'.1h>.p\');u.2h(3v);3v.8(5(){7 1I=4.Q.6(\'.1h>.p.z\').C;4.1D[1I?\'g\':\'h\'](\'y\');4.1k[1I?\'g\':\'h\'](\'y\')});u.2h(3.Q.6(\'.1a>.p\'));4n.4m(3.2m,3.4w,5(A,2P){4.4u(2P,A)},m);3.4v()},2f:5(23){j $(\'#a-f-\'+23)},4u:5(2P,A){3.2O(2P,A-1)},1i:5(){7 4=3;3.I(3.3u);3.D=V;3.1T.Z(3.v.16);3.1y.1e(\'8\').8(5(){4.1F()});3.25.1e(\'8\').8(5(){4.1P()})},1P:5(){3.2O(3.v,3.2m.A-1)},4t:5(2N){7 1d=$.18(2N,/a-m-(\\d+)/),27=2N.5t(\'K\'),3t=13,2l=0;9(27.C){2l=$.18(27,/a-m-(\\d+)/)}x{27=2N.5s(\'K\');9(27.C){2l=$.18(27,/a-m-(\\d+)/);3t=1E}}9(!2l){j}3.Y.6(\'K\').g(\'2K-m\');3.Y.6(\'K:2z(0)\').h(\'2K-m\');O.5r(1d,2l,3t,5(c){9(H(c)==\'G\'){t.r(b.W(c))}})},2g:5(f,A){7 4=3,1l=f.B;3.I(3.1j);O.5q(1l,A,5(T){9(!T||H(T)==\'G\'){t.r(b.W(H(T)==\'G\'?T:\'2E:k:5p:3s\'));4.1i()}x{f.2U=13;4.2f(f.B).g(\'2T\');4.D=f;4.4s(f,T)}})},4s:5(f,T){7 4=3;3.1T.Z(f.16);3.w.2k();3.1f[f.2q?\'h\':\'g\'](\'U\');3.1r.A=T.A+1;3.1r.26=T.26;3.1N.h(\'y\');3.1f.g(\'E-S\');1c(7 i=0;i<T.F.C;i++){7 2j=T.F[i];O.5o(2j);$.5n(1E,2j,{4r:b.o().k.a.w});3.w.2M($(u.2L(\'5m\',2j)).M(\'L\',3.3H(2j)))}7 3r=4q.4p();u.4o(3.w,3r);u.5l(3.w,3r);u.5k(3.w);u.3q(3.w);u.3p(3.w);u.3o(3.w,5(){4.w.1s()});4.1y.1e(\'8\').8(5(){4.1i()});3.25.1e(\'8\').8(5(){4.2b()});3.w.6(\'.3n>.E\').l().1v({1u:13,1t:0,1C:5(){j b.o().k.a.w.1p.E}}).8(5(){7 1g=$.18($(3).1n(\'K\'),/a-q-(\\d+)/),q=V;1c(7 i=0;i<T.F.C;i++){9(T.F[i].B==1g){q=T.F[i]}}9(!q){j}4.4c(q)});3.w.6(\'.3n>.2C\').l().1v({1u:13,1t:0,1C:5(){j b.o().k.a.w.1p.2C}}).8(5(){7 1g=$.18($(3).1n(\'K\'),/a-q-(\\d+)/),q=V;1c(7 i=0;i<T.F.C;i++){9(T.F[i].B==1g){q=T.F[i]}}9(!q){j}4.4b(q)});3.w.6(\'.3n>.2i\').l().1v({1u:13,1t:0,1C:5(){j b.o().k.a.w.1p.2i}}).8(5(){7 1g=$.18($(3).1n(\'K\'),/a-q-(\\d+)/);4.49(1g)});9(3.1r.A==1){3.w.6(\'K:2z(0)\').h(\'2K-q\')}3.I(3.2B);3.w.1s().3m();7 3l=3.w.6(\'.1h>.p\');u.2h(3l);3l.8(5(){7 1I=4.w.6(\'.1h>.p.z\').C;4.1N[1I?\'g\':\'h\'](\'y\')});4n.4m(3.1r,3.4l,5(A,2A){4.48(2A,A)},f)},1M:5(){7 4=3;3.I(3.2B);3.1G=V;3.1y.1e(\'8\').8(5(){4.1i()})},2b:5(){3.2g(3.D,3.1r.A-1)},4k:5(){3.1B.h(\'E-S\')},4j:5(){3.1B.g(\'E-S\')},4i:5(){3.Q.6(\'1Q\').1O(5(){7 f=$(3),2G=f.14(\'U\'),2F=f.14(\'11\'),2I=f.6(\'>2J.1a>.p.U\'),2H=f.6(\'>2J.1a>.p.11\');2I[2G?\'h\':\'g\'](\'z\');2H[2F?\'h\':\'g\'](\'z\')});3.Q.6(\'.1h>.p\').g(\'z\');3.12.h(\'E-S\');3.1D.h(\'y\');3.1k.h(\'y\')},4h:5(){7 4=3,24=[];3.Q.6(\'1Q\').1O(5(){7 f=$(3),2G=f.14(\'U\'),2F=f.14(\'11\'),2I=f.6(\'>2J.1a>.p.U\'),2H=f.6(\'>2J.1a>.p.11\'),3k=2I.14(\'z\'),3j=2H.14(\'z\');9(2G!=3k||2F!=3j){7 1l=$.18(f,/a-f-(\\d+)/);24.1b({23:1l,U:3k,11:3j})}});9(!24.C){3.12.g(\'E-S\');j}3.I(3.1j);O.5j(24,5(c){9(!c||H(c)==\'G\'){t.r(b.W(H(c)==\'G\'?N:\'2E:k:4g:5i\'))}x{4.12.g(\'E-S\');1c(7 i=0;i<24.C;i++){7 2D=24[i],3h=4.2f(2D.23),P=3h.M(\'L\').3i(\'11\',\'\').3i(\'U\',\'\');3h.M(\'L\',P+(2D.U?\' U\':\'\')+(2D.11?\' 11\':\'\'))}4.1i()}})},4f:5(){3.1f.h(\'E-S\')},4e:5(){3.1f.g(\'E-S\')},4d:5(){3.3f(1E)},4c:5(q){3.1G=q;3.2x(q.4a)},4b:5(q){3.2x(\'[2C=\'+q.5h+\']\'+q.4a+\'[/2C]\')},49:5(1g){7 4=3;3.I(3.1j);O.5g(1g,5(c){9(H(c)==\'G\'){t.r(b.W(c));4.I(4.2B);j}$(\'#a-q-\'+1g).5f();4.w.1s();9(!4.w.34(\'1Q\').C&&4.1r.A>1){4.1r.A--}4.2g(4.D,4.1r.A-1)})},48:5(2A,A){3.2g(2A,A-1)},30:5(21){7 4=3;3.I(3.47);3.3b.1m(21?3.v.16:\'\').3d();9(21){3.1X.6(\'K\').g(\'z\');3.1X.6(\'K[40="1x:\'+3.v.2V+\'"]\').h(\'z\');3.3g.Z(b.o().k.a.39.1p.1o)}x{3.1X.6(\'K\').g(\'z\');3.1X.6(\'K:2z(0)\').h(\'z\');3.3g.Z(b.o().k.a.3W.1p.1o)}3.1y.1e(\'8\').8(5(){4.1F()})},3f:5(21){7 4=3;3.I(3.46);3.R.g(\'1z\');3.22.g(\'1Y\');3.36.1m(21?3.D.16:\'\').3d();3.2e.1m(\'\');9(21){3.R.6(\'.45.44,.1A-2y,.20-n\').h(\'1z\');3.3e.Z(b.o().k.a.35.1p.1o);9(3.D.2S){3.1V.h(\'z\')}x{3.1V.g(\'z\')}9(3.D.2q){3.1U.h(\'z\')}x{3.1U.g(\'z\')}}x{3.R.6(\'.45.44,.1A-2y,.20-n\').g(\'1z\');3.1V.g(\'z\');3.1U.g(\'z\');3.3e.Z(b.o().k.a.3T.1p.1o)}3.1y.1e(\'8\').8(5(){4.1i()})},2x:5(1S){7 4=3,42=!1S?\'\':1S;3.I(3.43);3.1q.g(\'1z\');3.1Z.g(\'1Y\');3.2d.1m(42).3d();9(3.1G){3.3c.Z(b.o().k.a.33.1p.1o)}x{3.3c.Z(b.o().k.a.3Q.1p.1o)}3.1y.1e(\'8\').8(5(){4.1M()})},41:5(){7 4=3,19=3.3b.1m(),1W=3a(3.1X.6(\'.z\').M(\'40\').3Z(/1x:(\\d+)/)[1],10);9(3.v){O.39(3.v.B,19,1W,5(c){9(H(c)==\'G\'){t.r(b.W(c))}x{t.r(b.o().k.a.39.32);4.v.16=19;4.v.2V=1W;4.38(4.v.B).34(\'.2v\').Z(4.v.16);4.38(4.v.B).M(\'L\',4.2W(4.v));4.1H.6(\'>2w>K[37=\'+4.v.B+\']\').Z(4.v.16);9(4.1H.6(\'>2w>K[37=\'+4.v.B+\']\').14(\'3Y\')){4.1H.6(\'>.3X-19>.3X-19-Z\').Z(4.v.16)}4.1T.Z(4.v.16);4.1i()}})}x{O.5e(19,1W,5(c){9(H(c)==\'G\'){t.r(b.W(c))}x{t.r(b.o().k.a.3W.31);4.2c()}})}},3V:5(){9(3.v){3.1i()}x{3.1F()}},3U:5(){7 4=3,19=4.36.1m(),11=4.1V.14(\'z\'),U=4.1U.14(\'z\');9(3.D){O.35(3.D.B,19,11,U,5(c){9(H(c)==\'G\'){t.r(b.W(c))}x{t.r(b.o().k.a.35.32);4.D.16=19;4.D.2S=11;4.D.2q=U;4.2f(4.D.B).34(\'.2v\').Z(4.D.16);4.2r(4.D);4.2f(4.D.B).M(\'L\',4.2r(4.D));4.1T.Z(4.D.16);4.1M()}})}x{O.5d(19,4.2e.1m(),11,U,4.v.B,5(c){9(H(c)==\'G\'){t.r(b.W(c))}x{t.r(b.o().k.a.3T.31);4.1P()}})}},3S:5(){9(3.D){3.1M()}x{3.1i()}},3R:5(){7 4=3,1S=3.2d.1m();9(3.1G){O.33(3.1G.B,1S,5(c){9(H(c)==\'G\'){t.r(b.W(c))}x{t.r(b.o().k.a.33.32);4.1G=V;4.2b()}})}x{O.5c(3.D.B,1S,5(c){9(H(c)==\'G\'){t.r(b.W(c))}x{t.r(b.o().k.a.3Q.31);4.2b()}})}},3P:5(){3.1M()},3O:5(){7 4=3,X=[];9(3.1R.14(\'y\')){j}3.1R.h(\'y\');3.Y.6(\'.1h>.p.z\').1O(5(){7 p=$(3),1d=$.18(p.1n(\'K\'),/a-m-(\\d+)/);X.1b(1d)});9(!X.C){j}3.I(3.1j);O.5b(X,5(c){9(H(c)==\'G\'){t.r(b.W(c));3.1R.g(\'y\');4.1F()}x{t.r(b.o().k.a.Y.2Z);4.2c()}})},3N:5(){3.30(1E)},3M:5(){7 4=3,X=[];9(3.1D.14(\'y\')||3.1k.14(\'y\')){j}3.1D.h(\'y\');3.1k.h(\'y\');3.Q.6(\'.1h>.p.z\').1O(5(){7 p=$(3),1l=$.18(p.1n(\'1Q\'),/a-f-(\\d+)/);X.1b(1l)});9(!X.C){j}3.I(3.1j);O.5a(X,5(c){9(H(c)==\'G\'){t.r(b.W(c));3.1D.g(\'y\');3.1k.g(\'y\');4.1i()}x{t.r(b.o().k.a.Q.2Z);4.1P()}})},3L:5(){7 4=3,X=[];9(3.1N.14(\'y\')){j}3.1N.h(\'y\');3.w.6(\'.1h>.p.z\').1O(5(){7 p=$(3),1g=$.18(p.1n(\'K\'),/a-q-(\\d+)/);X.1b(1g)});9(!X.C){j}3.I(3.1j);O.59(X,5(c){9(H(c)==\'G\'){t.r(b.W(c));4.1N.g(\'y\');4.1M()}x{t.r(b.o().k.a.w.2Z);4.2b()}})},58:5(){3.J=V;3.2u=13;3.v=V;3.1L=V;3.D=V},3K:5(){9(!3.J){j}7 P=[],1K=3.J.M(\'L\')?3.J.M(\'L\').3J(/\\s+/):[],2Y={57:\'2s-2t-N\',56:\'2s-55-54\'};1c(7 i=0;i<1K.C;i++){7 1J=1K[i];9(!/2s-.+/.3I(1J)){P.1b(1J)}}1c(7 2X 53 2Y){9(52.51[2X]()){P.1b(2Y[2X])}}3.J.M(\'L\',P.2p(\' \'))},2W:5(m){7 P=[\'2a-1x-\'+m.2V];9(m.2U){P.1b(\'2T\')}j P.2p(\' \')},2r:5(f){7 P=[];9(f.2U){P.1b(\'2T\')}9(f.2q){P.1b(\'U\')}9(f.2S){P.1b(\'11\')}j P.2p(\' \')},3H:5(q){7 P=[];9(q.50==4Z.o().B){P.1b(\'4Y-4X\')}j P.2p(\' \')}};', 62, 389, '|||this|self|function|find|var|click|if|forum|i18nModel|data|||topic|removeClass|addClass||return|union|clickable|section|button|getData|checkbox|post|showSystemMessage||messageController|uiUtils|currentSection|postList|else|disabled|checked|page|Id|length|currentTopic|edit|list|string|typeof|switchUIMode|content|li|class|attr|sections|unionForumModel|classes|topicList|newTopicEditContainer|mode|postsData|closed|null|getTextByCode|ids|sectionList|text||important|topicListPane|false|hasClass||Name|topicsData|parseId|title|icon|push|for|sectionId|unbind|postListPane|postId|select|backToTopicList|UI_MODE_LOADING|moveTopicsButton|topicId|val|closest|submit|buttonLabels|newPostEditContainer|postListPaginationInfo|rearrange|delay|showURL|tooltip|new|type|returnButton|hidden|bb|sectionListPane|bodyHandler|deleteTopicsButton|true|backToSectionList|editablePost|moveTopicsSectionList|checkedCount|cClass|currentClasses|currentSections|backToPostList|deletePostsButton|each|refreshTopicList|tr|deleteSectionsButton|postBody|currentPlaceTitle|newTopicCheckboxClosed|newTopicCheckboxImportant|privacyType|newSectionPrivacyTypeList|visible|newPostPreviewContainer|preview|editCurrent|newTopicPreviewContainer|id|gatheredTopicAttributes|refreshButton|totalPages|relatedSection|newPostPreview|newTopicPreview|privacy|refreshPostList|refreshSectionList|newPostText|newTopicText|getTopicUIRowById|openTopic|initCheckbox|delete|postData|empty|relatedSectionId|topicListPaginationInfo|scrollable|newSectionPane|join|Closed|buildTopicUIClasses|can|sort|isInitialized|name|ul|onNewPostButtonClick|pane|eq|contextTopic|UI_MODE_POSTS|quote|updatedTopic|error|isCurrentlyImportant|isCurrentlyClosed|importantCheckbox|closedCheckbox|td|first|applyTemplate|append|sectionElement|openSection|contextSection|topicData|container|Important|unread|Unread|PrivacyType|buildSectionUIClasses|method|method2css|deletionSuccess|onNewSectionButtonClick|creationSuccess|editSuccess|editPost|children|editTopic|newTopicTitle|info|getSectionUIRowById|editSection|parseInt|newSectionTitle|newPostSubmitButton|focus|newTopicSubmitButton|onNewTopicButtonClick|newSectionSubmitButton|updatedTopicRow|replace|importantCheckboxChecked|closedCheckboxChecked|postsCheckboxes|scrollToTop|header|prepareSpoilersInContent|prepareBuildingIconsInContent|prepareUnitIconsInContent|backObjectForLinks|generalLoadlListError|placeAbove|UI_MODE_TOPICS|topicsCheckboxes|openSectionList|UI_MODE_SECTIONS|listData|sectionsCheckboxes|div|cancel|newPostPane|newTopicPane|exit|enter|topics|buildPostUIClasses|test|split|updateMyRights|onDeletePostsButtonClick|onDeleteTopicsButtonClick|onEditSectionButtonClick|onDeleteSectionsButtonClick|onCancelPostButtonClick|newPost|onSubmitPostButtonClick|onCancelTopicButtonClick|newTopic|onSubmitTopicButtonClick|onCancelSectionButtonClick|newSection|main|selected|match|key|onSubmitSectionButtonClick|initialPostBody|UI_MODE_NEW_POST|body|row|UI_MODE_NEW_TOPIC|UI_MODE_NEW_SECTION|goToPostListPage|onDeletePostClick|Body|onQuotePostClick|onEditPostClick|onEditTopicButtonClick|onPostsExitEditModeButtonClick|onPostsEnterEditModeButtonClick|topicManagement|onTopicsExitEditModeButtonClick|onTopicsEnterEditModeButtonClick|onSectionsExitEditModeButtonClick|onSectionsEnterEditModeButtonClick|postListPaging|createPager|uiWindow|preparePlayerLinksInContent|getBackObject|unionController|lang|showAndRenderPostList|onSectionSorted|goToTopicListPage|updateTopicMoveList|topicListPaging|iconClass|topicAttributes|showAndRenderTopicList|onMoveTopicsButtonClick|500|pin|ui|placeholder|privacyTypes|showAndRenderSectionList|newPostBBPane|initBBEditor|newTopicBBPane|bb2html|html|textarea|close|render|trigger|span|input|posts|paging|move|contentPlaceholder|templateData|mine|is|playerModel|PosterId|rights|unionModel|in|forums|moderate|canIModerateForums|canIChangeSectionOrder|clear|deletePosts|deleteTopics|deleteSections|createPost|createTopic|createSection|remove|deletePost|PosterName|generalEditError|changeTopicsAttributes|prepareCoordsLinksInContent|prepareUnionLinksInContent|unionForumPostListRow|extend|preparePostForTemplate|postManagement|getTopicPosts|changeSectionPosition|next|prev|trim|unionForumTopicListRow|prepareTopicForTemplate|getSectionTopics|movementSuccess|moveTopics|index|sortPinTooltip|disableSelection|item|update|parent|containment|forcePlaceholderSizeType|forceHelperSizeType|distance|pointer|tolerance|handle|sortable|unionForumSectionListRow|sectionManagement|getSections|onShow|newPostCancelButton|newPostPreviewButton|newPostPreviewCloseButton|newPostButton|newTopicLabelClosed|newTopicLabelImportant|newTopicCancelButton|newTopicPreviewButton|newTopicPreviewCloseButton|newTopicButton|editTopicButton|newSectionCancelButton|radioButtonList|newSectionButton|place|current|th|head|editSectionButton|refresh|backButtonModes|unionForum|initWithPlaceholder|loading|unionForumController'.split('|')))

class ArmyControl {
    initWindow(x, y) {
        let self = this
            , helpCallback = function(helpTemplate) {
            Route.ensureAimDataIsLoaded(function() {
                self.__createContent();
                self.__params = {
                    onShow: ()=>{
                        self.__onWindowShow();
                    }
                    ,
                    windowLayout: uiWindow.WINDOW_LAYOUT_PREMIUM,
                    onShowHelp: buildingController.rearrangeHelpContent,
                    onClose: ()=>{
                        self.__onClose();
                    }
                    ,
                    helpContent: helpTemplate,
                    disableScrolling: true,
                    helpButton: true
                };
                self.__showWindow();
            });
        };
        self.__target = {
            x: x,
            y: y
        };
        buildingController.generateHelpContentForBuilding(3, helpCallback);
    }
    __showWindow() {
        uiWindow.show(i18nModel.getData().armyControl.title, this.__content, null, this.__params);
    }
    __onWindowShow() {
        let self = this
            , content = self.__content;
        self.__tabsContent = content.find('.tabs-content');
        self.__armiesPane = self.__tabsContent.children('.army-control-list');
        self.__armiesList = self.__armiesPane.children('.scroll-content').scrollable();
        self.__tabSize = self.__content.children('.tabs');
        self.__tabs = self.__content.find('.tab').click((e)=>{
                self.__onTabClick(e.target);
            }
        );
        self.__routeSteps = [{
            X: townModel.getData().X,
            Y: townModel.getData().Y
        }].concat(Route.createStepsArray(townModel.getData().X, townModel.getData().Y, self.__target.x, self.__target.y));
        for (let armyId in townModel.getData().Armies) {
            self.__createArmyPanel(armyId);
        }
        self.updateWindow();
        self.__raf = requestAnimationFrame(()=>{
                self.__updateTime();
            }
        );
        methodModel.getHandler('onOpenSquareWindow')();
    }
    __onTabClick(target) {
        let self = this
            , tabId = $(target).attr('id');
        self.__content.attr('class', tabId);
        self.__tabId = tabId;
    }
    __updateTime() {
        let self = this
            , curTime = timingModel.getCurrentTime();
        if (self.__lastUpdate !== curTime) {
            self.__armiesList.children().each(function() {
                let curObj = $(this)
                    , timeToGo = parseInt(curObj.attr('ttg'))
                    , finishTimeLabel = curObj.find('.finish-time span');
                finishTimeLabel.text(Util.timestampToDateTimeString(timeToGo + curTime, i18nModel.getDateTimeFormat(), {
                    showDateForAnotherDay: true,
                    currentTime: curTime,
                    timeFormat: i18nModel.getTimeFormat()
                }));
            });
            self.__lastUpdate = curTime;
        }
        self.__raf = requestAnimationFrame(()=>{
                self.__updateTime();
            }
        );
    }
    __updateTabs(cellType) {
        let self = this
            , attackTab = self.__tabs.filter('#tab-1')
            , siegeTab = self.__tabs.filter('#tab-2')
            , defenceTab = self.__tabs.filter('#tab-3')
            , replaceTab = self.__tabs.filter('#tab-4');
        switch (cellType) {
            case WorldMap.cellType.yourTown:
                replaceTab.removeClass('hidden');
                attackTab.addClass('hidden');
                siegeTab.addClass('hidden');
                defenceTab.removeClass('hidden');
                self.__content.removeClass().addClass('tab-3');
                break;
            case WorldMap.cellType.barbarian:
            case WorldMap.cellType.warTown:
            case WorldMap.cellType.neutralTown:
                replaceTab.addClass('hidden');
                attackTab.removeClass('hidden');
                defenceTab.removeClass('hidden');
                siegeTab.removeClass('hidden');
                self.__content.removeClass().addClass('tab-2');
                break;
            case WorldMap.cellType.friendlyTown:
                replaceTab.addClass('hidden');
                attackTab.addClass('hidden');
                siegeTab.addClass('hidden');
                defenceTab.removeClass('hidden');
                self.__content.removeClass().addClass('tab-3');
                break;
            case WorldMap.cellType.dungeon:
                replaceTab.addClass('hidden');
                attackTab.removeClass('hidden');
                siegeTab.addClass('hidden');
                defenceTab.addClass('hidden');
                self.__content.removeClass().addClass('tab-1');
                break;
        }
        let hiddenTabs = self.__tabs.filter('.hidden').length;
        self.__tabSize.removeClass('tabs-1 tabs-2 tabs-3 tabs-4').addClass('tabs-' + (4 - hiddenTabs));
    }
    __createArmyPanel(armyId) {
        let self = this
            , army = townModel.getData().Armies[armyId];
        if (army.RouteId > 0 || army.CurrentTown) {
            return;
        }
        army.Name = army.Name || i18nModel.getBarbariansName();
        let timeToGo = Route.calculateStepsTime(armyId, self.__routeSteps);
        let armyContent = $(uiUtils.applyTemplate('armyControlWindowItem', {
            id: armyId,
            name: army.Name,
            titles: i18nModel.getData().armyControl.armyItem,
            troops: army.Troops,
            timeToGo: timeToGo,
            timeToGoString: Util.secondsToString(timeToGo, i18nModel.getTimeFormat()),
            finishTime: Util.timestampToDateTimeString(timeToGo + timingModel.getCurrentTime(), i18nModel.getDateTimeFormat(), {
                showDateForAnotherDay: true,
                currentTime: timingModel.getCurrentTime(),
                timeFormat: i18nModel.getTimeFormat()
            }),
        }));
        self.__setEvent(armyContent);
        armyContent.appendTo(self.__armiesList);
    }
    updateWindow() {
        let self = this;
        for (let armyId in townModel.getData().Armies) {
            let army = townModel.getData().Armies[armyId];
            if (army.RouteId > 0 && self.__armiesList.find('.army-row[aid="' + armyId + '"]').length === 0) {
                self.__createArmyPanel(armyId);
            }
        }
        self.__armiesList.rearrange();
        self.__updateTabs(gameController.gameData.map[self.__target.x][self.__target.y].ct);
    }
    __onSendClick(target) {
        let self = this
            , curButton = $(target)
            , armyRow = curButton.parent().parent()
            , armyId = parseInt(armyRow.attr('aid'))
            , type = 'default';
        if (curButton.hasClass('siege')) {
            type = 'siege';
        } else if (curButton.hasClass('reinforcement')) {
            type = 'defend';
        } else if (curButton.hasClass('replace')) {
            type = 'replace';
        }
        Route.saveRoute(type, undefined, self.__routeSteps, armyId, (result)=>{
                if (result) {
                    armyRow.slideUp(200, ()=>{
                            self.__armiesList.rearrange();
                            armyRow.remove();
                        }
                    );
                }
            }
        );
        return false;
    }
    __setEvent(armyContent) {
        let self = this;
        armyContent.find('.actions>.send').clickable().tooltip({
            delay: 0,
            showURL: false,
            bodyHandler: function() {
                return i18nModel.getData().armyControl.sendTooltip;
            }
        }).click((e)=>{
                self.__onSendClick(e.target);
            }
        );
        armyContent.find('.troop-count>.troop').each(function() {
            let self = $(this), troopId, idAttr = self.closest('.troop-count').attr('id');
            if (/^troop-.+?-(.+)$/.test(idAttr)) {
                troopId = idAttr.match(/^troop-.+?-(.+)$/)[1];
            } else {
                troopId = idAttr.match(/^troop-(.+)$/)[1];
            }
            self.tooltip({
                delay: 100,
                showURL: false,
                track: true,
                left: 40,
                top: 0,
                bodyHandler: function() {
                    return staticDataModel.troops[troopId].getTooltipTemplate();
                },
                extraClass: 'troop-tooltip'
            });
        });
    }
    __onClose() {
        cancelAnimationFrame(this.__raf);
        this.__target = {
            x: -1,
            y: -1
        };
        this.__content = null;
        this.__params = {};
        this.__raf = undefined;
        this.__lastUpdate = 0;
        this.__routeSteps = [];
        methodModel.getHandler('onCloseSquareWindow')();
    }
    __createContent() {
        let troops = {}
            , denyTroopsId = [12, 13, 15, 16, 17, 18, 19, 20, 21]
            , freeTroopsOrder = [5, 6, 1, 2, 8, 7, 3, 4, 9, 10, 14, 11];
        for (let troopId in staticDataModel.troops) {
            if (denyTroopsId.indexOf(parseInt(troopId)) >= 0) {
                continue;
            }
            troops[troopId] = staticDataModel.troops[troopId];
            troops[troopId].count = townModel.getData().Troops[troopId];
        }
        let townArmies = townModel.getData().Armies;
        this.__content = $(uiUtils.applyTemplate('armyControlWindow', {
            titles: i18nModel.getData().armyControl,
            armyNameMaxLength: staticDataModel.config.armyNameMaxLength,
            armies: townArmies,
            troops: troops,
            freeTroopsOrder: freeTroopsOrder
        }));
    }
    constructor() {
        this.__target = {
            x: -1,
            y: -1
        };
        this.__content = null;
        this.__params = {};
        this.__raf = undefined;
        this.__lastUpdate = 0;
        this.__routeSteps = [];
    }
}

class Building {
    constructor(data) {
        this.__id = data.Id;
        this.__levels = data.Levels;
        this.__maxLevel = data.MaxLevel;
        this.__minLevel = data.MinLevel;
        this.__points = data.Points;
        this.__requirements = data.Requirements;
        this.__type = data.Type;
    }
    get id() {
        return this.__id;
    }
    get levels() {
        return this.__levels;
    }
    get maxLevel() {
        return this.__maxLevel;
    }
    get minLevel() {
        return this.__minLevel;
    }
    get points() {
        return this.__points;
    }
    get requirements() {
        return this.__requirements;
    }
    get type() {
        return this.__type;
    }
    get name() {
        return i18nModel.getData().town.buildings[this.__id].name;
    }
    get description() {
        return i18nModel.getData().town.buildings[this.__id].description;
    }
    testOnRequirements(asString=false) {
        let reqString = ''
            , reqArray = []
            , i18n = i18nModel.getData().town.buildings;
        for (let requirement in this.__requirements) {
            if (this.__requirements.hasOwnProperty(requirement) && this.__requirements[requirement] > buildingsModel.getLevel(requirement)) {
                if (asString) {
                    reqString += i18n[requirement].name + '(' + this.__requirements[requirement] + ')' + '</br>';
                } else {
                    reqArray.push(requirement + '_' + this.__requirements[requirement]);
                }
            }
        }
        return asString ? reqString : reqArray;
    }
    static init() {
        timingModel.addIntervaled({
            interval: 1,
            onTick: Building.onConstructionTick
        });
    }
    static __onConstructionFinish() {
        Building.stopUpdate();
        if (townModel.sendUpdateData()) {
            let constructions = townModel.getData().BuildingConstruction
                , newStartTime = constructions[0].StartTime + constructions[0].BuildTime;
            constructions.splice(0, 1);
            if (constructions.length > 0) {
                constructions[0].StartTime = newStartTime;
            }
        }
        Building.startUpdate();
    }
    static onConstructionTick() {
        if (Building.updateStopped) {
            return;
        }
        let constructions = townModel.getData().BuildingConstruction
            , now = Util.getCurrentTimestamp();
        if (constructions.length === 0 || constructions[0].StartTime > now) {
            return;
        }
        let construction = constructions[0]
            , buildingId = construction.BuildingId;
        if (construction.StartTime + construction.BuildTime <= now) {
            Building.__onConstructionFinish();
        } else {
            townModel.setConstructionCompleteTime(now - construction.StartTime);
            if (gameController.isTown()) {
                townController.updateBuildingInfo(buildingId);
            }
        }
        for (let subscribeId in Building.subscribes) {
            if (Building.subscribes.hasOwnProperty(subscribeId)) {
                Building.subscribes[subscribeId](now);
            }
        }
    }
    static unsubscribe(subscribeId) {
        delete Building.subscribes[subscribeId];
    }
    static subscribe(subscribeId, subscribeFunction) {
        Building.subscribes[subscribeId] = subscribeFunction;
    }
    static stopUpdate() {
        Building.updateStopped = true;
    }
    static startUpdate() {
        Building.updateStopped = false;
    }
}
Building.updateStopped = false;
Building.subscribes = {};
Building.TOWN_HALL_ID = 1;
Building.BARN_ID = 4;
Building.TREASURE_ID = 10;
Building.REPOSITORY_ID = 12;

class CoinsDonate {
    constructor() {
        let self = this;
        self.__div = $(uiUtils.applyTemplate('coinsDonateWindow', {
            i18n: i18nModel.getData().coinsDonate,
        }));
        self.__div.find('.cancel-button, .block-ui').click((e)=>{
                self.__onCancelButtonClick(e);
            }
        );
        self.__acceptButton = self.__div.find('.accept-button').click((e)=>{
                self.__onAcceptButtonClick(e);
            }
        );
        self.__coinsValue = self.__div.find('.coins .value');
        self.__coinsInput = self.__div.find('.input input');
        self.__coinsLeft = self.__div.find('.left-button').click((e)=>{
                self.__onLeftButtonClick(e);
            }
        );
        self.__coinsRight = self.__div.find('.right-button').click((e)=>{
                self.__onRightButtonClick(e);
            }
        );
        self.__coinsMax = self.__div.find('.max-button').click((e)=>{
                self.__onMaxButtonClick(e);
            }
        );
        $('body').append(self.__div);
    }
    __onLeftButtonClick(e) {
        let self = this
            , curValue = parseInt(self.__coinsInput.val())
            , max = self.getMaxAmount();
        curValue = curValue > 1 ? (curValue <= max ? curValue - 1 : max) : 1;
        self.__coinsInput.val(curValue);
    }
    __onRightButtonClick(e) {
        let self = this
            , curValue = parseInt(self.__coinsInput.val())
            , max = self.getMaxAmount();
        curValue = curValue >= 1 ? (curValue < max ? curValue + 1 : max) : 1;
        self.__coinsInput.val(curValue);
    }
    __onMaxButtonClick(e) {
        let self = this
            , max = self.getMaxAmount();
        self.__coinsInput.val(max);
    }
    __onCancelButtonClick(e) {
        this.closeWindow();
    }
    __onAcceptButtonClick(e) {
        let self = this
            , amount = parseInt(self.__coinsInput.val());
        if (amount < 1 && self.__acceptButton.hasClass('disabled'))
            return;
        self.__acceptButton.addClass('disabled');
        self.__onAcceptCallback(amount, ()=>{
                self.__acceptButton.removeClass('disabled');
                self.closeWindow();
            }
            , ()=>{
                self.__acceptButton.removeClass('disabled');
            }
        );
    }
    __updateCoinsValue() {
        let self = this;
        self.__coinsValue.text(playerModel.getCoins());
    }
    getMaxAmount() {
        let playerCoins = playerModel.getCoins();
        return Math.min(this.__maxAmount, playerCoins);
    }
    showWindow(onAcceptCallback, onCloseCallback, amount=1, maxAmount=9999999) {
        let self = this;
        self.__maxAmount = maxAmount;
        self.__onAcceptCallback = onAcceptCallback;
        self.__onCloseCallback = onCloseCallback;
        self.__coinsInput.val(1);
        self.__updateCoinsValue();
        self.__div.addClass('show');
    }
    closeWindow() {
        this.__onCloseCallback && this.__onCloseCallback();
        this.__onCloseCallback = false;
        this.__div.removeClass('show');
    }
    static getCoins() {
        return playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_COINS] === undefined ? 0 : playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_COINS];
    }
}

class CoinsExchange {
    constructor() {
        let self = this;
        self.__div = $(uiUtils.applyTemplate('coinsExchangeWindow', {
            i18n: i18nModel.getData().coinsExchange,
            resources: staticDataModel.config.resources.nameToId,
        }));
        self.__div.find('.cancel-button, .block-ui').click((e)=>{
                self.__onCancelButtonClick(e);
            }
        );
        self.__exchangeButton = self.__div.find('.exchange-button').click((e)=>{
                self.__onExchangeButtonClick(e);
            }
        );
        self.__coinsValue = self.__div.find('.coins .value');
        self.__resources = {};
        for (let resourceId in CoinsExchange.getCoinPrice()) {
            self.__resources[resourceId] = self.__div.find('.resources .resource[type="' + resourceId + '"]');
        }
        self.__coinsInput = self.__div.find('.input input');
        self.__coinsLeft = self.__div.find('.left-button').click((e)=>{
                self.__onLeftButtonClick(e);
            }
        );
        self.__coinsRight = self.__div.find('.right-button').click((e)=>{
                self.__onRightButtonClick(e);
            }
        );
        self.__coinsMax = self.__div.find('.max-button').click((e)=>{
                self.__onMaxButtonClick(e);
            }
        );
        $('body').append(self.__div);
    }
    static getCoinPrice() {
        return staticDataModel.config.coinPrices;
    }
    __onLeftButtonClick(e) {
        let self = this
            , curValue = parseInt(self.__coinsInput.val())
            , max = self.getMaxAmount();
        curValue = curValue > 1 ? (curValue <= max ? curValue - 1 : max) : 1;
        self.__calculateResources(curValue);
    }
    __onRightButtonClick(e) {
        let self = this
            , curValue = parseInt(self.__coinsInput.val())
            , max = self.getMaxAmount();
        curValue = curValue >= 1 ? (curValue < max ? curValue + 1 : max) : 1;
        self.__calculateResources(curValue);
    }
    __onMaxButtonClick(e) {
        let self = this
            , max = self.getMaxAmount();
        self.__calculateResources(max);
    }
    __onCancelButtonClick(e) {
        this.closeWindow();
    }
    __onExchangeButtonClick(e) {
        let self = this
            , amount = parseInt(self.__coinsInput.val());
        if (amount < 1 && self.__exchangeButton.hasClass('disabled'))
            return;
        self.__exchangeButton.addClass('disabled');
        self.buyCoins(amount, ()=>{
                self.__exchangeButton.removeClass('disabled');
                self.closeWindow();
            }
            , ()=>{
                self.__exchangeButton.removeClass('disabled');
            }
        );
    }
    buyCoins(coinsAmount, success, error) {
        let req = new request();
        req.addGetting('aristocrat:buyAristocratCoins', ['all'], {
            townId: townModel.getData().Id,
            amount: coinsAmount
        });
        req.addGetting(playerItemsModel.getting.getItems, ['all'], {
            id: playerModel.getData().Id
        });
        req.getResponse(function(data) {
            if (data['return']['aristocrat:buyAristocratCoins']instanceof String) {
                messageController.showSystemMessage(i18nModel.getTextByCode(data));
                error && error();
            } else {
                playerItemsModel.loadData(data['return'][playerItemsModel.getting.getItems]);
                success && success();
            }
        }, {
            timeout: 20000,
            callback: uiWindow.ajaxError
        });
    }
    __updateCoinsValue() {
        let self = this;
        self.__coinsValue.text(playerModel.getCoins());
    }
    getMaxAmount() {
        let self = this
            , coinPrice = CoinsExchange.getCoinPrice()
            , playerResources = playerModel.getData().Resources
            , max = Number.MAX_SAFE_INTEGER;
        for (let resource in coinPrice) {
            if (coinPrice[resource] > 0) {
                max = Math.min(Math.floor(playerResources[resource] / coinPrice[resource]), max);
            }
        }
        return max;
    }
    __calculateResources(amount) {
        let self = this
            , coinPrice = CoinsExchange.getCoinPrice()
            , max = self.getMaxAmount();
        amount = amount <= 0 ? 1 : (amount >= max ? max : amount);
        for (let resource in self.__resources) {
            let price = coinPrice[resource] * amount;
            self.__resources[resource].children('.value').text(Util.formatNumber(price));
        }
        self.__coinsInput.val(amount);
    }
    showWindow(onCloseCallback, amount=1) {
        let self = this;
        self.__onCloseCallback = onCloseCallback;
        self.__calculateResources(amount);
        self.__updateCoinsValue();
        self.__div.addClass('show');
    }
    closeWindow() {
        this.__onCloseCallback && this.__onCloseCallback();
        this.__onCloseCallback = false;
        this.__div.removeClass('show');
    }
    static getCoins() {
        return playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_COINS] === undefined ? 0 : playerItemsModel.playerItemsData[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_COINS];
    }
}

class CollectionArmy {
    static init() {
        let self = this;
        self.data = {
            'to': {
                'x': 20,
                'y': 10,
                'name': 'Владение Поддержка',
            },
            'start': timingModel.getCurrentTime(),
            'duration': 21600,
            'from': {
                'x': 350,
                'y': 420,
                'name': 'Владение solmi',
            },
            'myArmies': {},
            'allyArmies': {}
        };
        self.contentDiv = $(uiUtils.applyTemplate('collectionArmyWindow', {
            i18n: i18nModel.getData().collectionArmy
        }));
        self.timeValue = self.contentDiv.find('.time-block .value');
        self.fromCoords = self.contentDiv.find('.from-block .coords');
        self.fromName = self.contentDiv.find('.from-block .town-name');
        self.toCoords = self.contentDiv.find('.to-block .coords');
        self.toName = self.contentDiv.find('.to-block .town-name');
    }
    static onTick() {
        let self = CollectionArmy;
        self.timeValue.html($.secsToString(self.data.start + self.data.duration - timingModel.getCurrentTime(), '{0}:{1}:{2}'));
    }
    static fillData() {
        let self = this;
        if (self.intervalId) {
            delete timingModel.intervaled[defenceWindowModel.intervalId];
            self.intervalId = null;
        }
        self.intervalId = timingModel.addIntervaled({
            interval: 1,
            onTick: self.onTick
        });
        self.fromCoords.html(String.format(i18nModel.getData().collectionArmy.coordsFormat, self.data.from.x, self.data.from.y));
        self.fromName.html(self.data.from.name);
        self.toCoords.html(String.format(i18nModel.getData().collectionArmy.coordsFormat, self.data.to.x, self.data.to.y));
        self.toName.html(self.data.to.name);
        self.onTick();
    }
    static showWindow() {
        this.fillData();
        WOFWindow.showWindow(i18nModel.getData().collectionArmy.title, this.contentDiv, this.__onHideWindow);
    }
    static hideWindow() {
        WOFWindow.__onHideWindow();
    }
    static __onHideWindow() {
        WOFWindow.closeWindow();
        if (self.intervalId) {
            delete timingModel.intervaled[defenceWindowModel.intervalId];
            self.intervalId = null;
        }
    }
}

class Commerce {
    static init() {
        let self = Commerce;
        self.__windowDiv = null;
        self.__contentDiv = null;
        self.__trades = {};
        self.__windowOpen = false;
        self.__pageCount = 0;
        self.__openTab = undefined;
    }
    static onCommerceEvent(tradesId) {
        let self = Commerce;
        for (let index in tradesId) {
            let tradeId = tradesId[index];
            if (self.__trades[tradeId] !== undefined) {
                self.__trades[tradeId].sold();
            }
        }
        let curTab = self.__contentDiv.attr('class');
        switch (curTab) {
            case 'trade-list':
                self.__tradeListUpdate();
                break;
            case 'create-trade':
                break;
            case 'send-resources':
                break;
            case 'my-trades':
                self.__myTradesDelete(tradesId);
                break;
        }
    }
    static __tradeListLoadPageCount(callback) {
        let self = Commerce
            , req = new request()
            , sellFilter = self.__getTradeListSellFilter()
            , buyFilter = self.__getTradeListBuyFilter()
            , method = Commerce.getting.tradeListPageCount;
        req.addGetting(method, request.all, {
            sf: sellFilter,
            bf: buyFilter
        });
        req.getResponse((data)=>{
                if (data['return'] && data['return'][method]) {
                    if (/error/.test(data['return'][method])) {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    } else {
                        callback && callback(data['return'][method]);
                    }
                } else {
                    messageController.showSystemMessage(i18nModel.getData().error.commerce.loadError);
                }
            }
        );
    }
    static __getTradeListSellFilter() {
        let self = Commerce
            , filter = self.__sellFilterResources.filter('.active');
        if (filter.length > 0) {
            switch (filter.attr('resource')) {
                case 'wood':
                    return 1;
                case 'iron':
                    return 2;
                case 'stone':
                    return 3;
                case 'gold':
                    return 4;
            }
        }
        return 0;
    }
    static __getTradeListBuyFilter() {
        let self = Commerce
            , filter = self.__buyFilterResources.filter('.active');
        if (filter.length > 0) {
            switch (filter.attr('resource')) {
                case 'wood':
                    return 1;
                case 'iron':
                    return 2;
                case 'stone':
                    return 3;
                case 'gold':
                    return 4;
            }
        }
        return 0;
    }
    static __tradeListUpdateButtonStatus() {
        let self = Commerce
            , active = false;
        if (!$.isEmptyObject(self.__trades)) {
            for (let tradeId in self.__trades) {
                if (self.__trades[tradeId].isSelected()) {
                    active = true;
                    break;
                }
            }
        }
        if (active) {
            self.__tradeListButton.removeClass('disabled');
        } else {
            self.__tradeListButton.addClass('disabled');
        }
    }
    static __tradeListLoadTradeData(page=1, callback) {
        let self = Commerce
            , req = new request()
            , method = Commerce.getting.getTradeList
            , sellFilter = self.__getTradeListSellFilter()
            , buyFilter = self.__getTradeListBuyFilter();
        req.addGetting(method, request.all, {
            p: page,
            sf: sellFilter,
            bf: buyFilter
        });
        req.getResponse((data)=>{
                if (data['return'] && data['return'][method]) {
                    let trades = data['return'][method];
                    self.__trades = {};
                    for (let tradeId in trades) {
                        if (trades.hasOwnProperty(tradeId)) {
                            tradeId = parseInt(tradeId);
                            self.__trades[tradeId] = new CommerceItem(trades[tradeId]);
                        }
                    }
                    callback && callback();
                } else {
                    messageController.showSystemMessage(i18nModel.getData().rating.loadError);
                }
            }
        );
    }
    static __tradeListUpdate() {
        let self = Commerce
            , bodyDiv = self.__tradeListDiv.find('.trade-list .body')
            , headerCheckBox = self.__tradeListDiv.find('.trade-list .header .check .checkbox')
            , unselected = false;
        bodyDiv.empty();
        for (let index in self.__trades) {
            if (self.__trades.hasOwnProperty(index)) {
                index = parseInt(index);
                let trade = self.__trades[index];
                if (!trade.isSelected()) {
                    unselected = true;
                }
                bodyDiv.append(trade.getTradeListItemTemplate());
            }
        }
        if (!unselected) {
            headerCheckBox.addClass('checked');
        } else {
            headerCheckBox.removeClass('checked');
        }
        headerCheckBox.off().on('click', (e)=>{
                self.__tradeListHeaderCheckBoxClick(e);
            }
        );
        bodyDiv.find('.check > .checkbox').off().on('click', (e)=>{
                self.__tradeListCheckBoxClick(e);
            }
        );
        self.__tradeListUpdateButtonStatus();
    }
    static __tradeListHeaderCheckBoxClick(e) {
        let self = Commerce
            , headerCheckBoxDiv = $(e.currentTarget)
            , checked = headerCheckBoxDiv.hasClass('checked');
        if (!$.isEmptyObject(self.__trades)) {
            for (let tradeId in self.__trades) {
                let trade = self.__trades[tradeId];
                if (checked) {
                    trade.unselect();
                } else {
                    trade.select();
                }
            }
            headerCheckBoxDiv.addClass('checked');
        } else {
            headerCheckBoxDiv.removeClass('checked');
        }
        self.__tradeListUpdate();
    }
    static __tradeListCheckBoxClick(e) {
        let self = Commerce
            , curObj = $(e.currentTarget)
            , tradeListItem = curObj.parents('.trade-list-item')
            , tradeId = parseInt(tradeListItem.attr('trade-id'))
            , trade = self.__trades[tradeId];
        if (trade.isSelected()) {
            trade.unselect();
        } else {
            trade.select();
        }
        self.__tradeListUpdate();
    }
    static isWindowOpen() {
        return Commerce.__windowOpen;
    }
    static __initializeTradeList(page=1) {
        let self = Commerce;
        if (self.__tradeListDiv === undefined) {
            return;
        }
        self.__tradeListDiv.append($(uiUtils.applyTemplate('commerceWindowTradeList', {
            i18n: i18nModel.getData().commerce.tradeList,
        })));
        self.__tradeListDiv.addClass('loading');
        self.__tradeListButton = self.__tradeListDiv.find('.buy-button ').off().on('click', (e)=>{
                self.__tradeListButtonClick(e);
            }
        );
        self.__sellFilterResources = self.__tradeListDiv.find('.filter .sell .resources > div ').off().on('click', (e)=>{
                self.__tradeListSellFilterClick(e);
            }
        );
        self.__buyFilterResources = self.__tradeListDiv.find('.filter .buy .resources > div ').off().on('click', (e)=>{
                self.__tradeListBuyFilterClick(e);
            }
        );
        self.__tradeListMaxPages = 0;
        self.__tradeListDiv.find('.paging .next').off().on('click', self.__tradeListNextPageClick);
        self.__tradeListDiv.find('.paging .last').off().on('click', self.__tradeListLastPageClick);
        self.__tradeListLoad(page);
    }
    static __tradeListUpdatePaging(activePage) {
        let self = Commerce;
        if (activePage > 0 && activePage <= self.__tradeListMaxPages) {
            let pagesDiv = self.__tradeListDiv.find('.paging > .pages')
                , fromPage = activePage - Math.floor((Commerce.TRADE_LIST_PAGE_SHOW - 1) / 2)
                , toPage = activePage + Math.ceil((Commerce.TRADE_LIST_PAGE_SHOW - 1) / 2);
            pagesDiv.empty();
            fromPage = fromPage < 1 ? 1 : fromPage;
            toPage = toPage > self.__tradeListMaxPages ? self.__tradeListMaxPages : toPage;
            for (let pageNumber = fromPage; pageNumber <= toPage; pageNumber++) {
                pagesDiv.append('<div class="page' + (pageNumber === activePage ? ' active' : '') + '" page=' + pageNumber + '>' + pageNumber + '</div>');
            }
            self.__tradeListPages = pagesDiv.children().off().on('click', self.__tradeListPageClick);
        }
    }
    static __tradeListLoad(page=1) {
        let self = Commerce;
        self.__tradeListLoadPageCount((pageCount)=>{
                self.__tradeListMaxPages = pageCount;
                self.__tradeListLoadTradeData(page, ()=>{
                        self.__tradeListUpdate();
                        self.__tradeListUpdatePaging(page);
                        self.__tradeListDiv.removeClass('loading');
                    }
                );
            }
        );
    }
    static __tradeListBuyFilterClick(e) {
        let self = Commerce
            , curObj = $(e.currentTarget);
        if (curObj.hasClass('active')) {
            self.__buyFilterResources.removeClass('active');
        } else {
            self.__buyFilterResources.removeClass('active');
            curObj.addClass('active');
        }
        self.__tradeListLoad();
    }
    static __tradeListSellFilterClick(e) {
        let self = Commerce
            , curObj = $(e.currentTarget);
        if (curObj.hasClass('active')) {
            self.__sellFilterResources.removeClass('active');
        } else {
            self.__sellFilterResources.removeClass('active');
            curObj.addClass('active');
        }
        self.__tradeListLoad();
    }
    static __tradeListButtonClick(e) {
        let self = Commerce
            , req = new request()
            , method = Commerce.getting.acceptTrade
            , tradesId = '';
        if (self.__tradeListButton.hasClass('disabled')) {
            return false;
        }
        self.__tradeListButton.addClass('disabled');
        for (let tradeId in self.__trades) {
            if (self.__trades[tradeId].isSold() || !self.__trades[tradeId].isSelected()) {
                continue;
            }
            if (tradesId.length === 0) {
                tradesId = tradeId
            } else {
                tradesId += ":" + tradeId;
            }
        }
        if (tradesId === '') {
            return false;
        }
        req.addGetting(method, request.all, {});
        req.addPostData({
            't': tradesId
        });
        req.getResponse((data)=>{
                if (!(data['return'] && data['return'][method])) {
                    messageController.showSystemMessage(i18nModel.getData().rating.loadError);
                }
                if (data['return'] && data['return'][method]) {
                    if (/error/.test(data['return'][method])) {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    } else {
                        messageController.showSystemMessage(i18nModel.getData().commerce.tradesAccepted);
                    }
                } else {
                    messageController.showSystemMessage(i18nModel.getData().error.commerce.loadError);
                }
                self.__tradeListButton.removeClass('disabled');
            }
        );
    }
    static __tradeListPageClick(e) {
        let self = Commerce
            , curPage = $(this)
            , pageNumber = parseInt(curPage.attr('page'));
        if (pageNumber > 0 && pageNumber <= self.__tradeListMaxPages) {
            self.__tradeListLoad(pageNumber);
        }
    }
    static __tradeListNextPageClick(e) {
        let self = Commerce
            , curPage = self.__tradeListPages.filter('.active')
            , pageNumber = parseInt(curPage.attr('page')) + 1;
        if (pageNumber > 0 && pageNumber <= self.__tradeListMaxPages) {
            self.__tradeListLoad(pageNumber);
        }
    }
    static __tradeListLastPageClick(e) {
        let self = Commerce
            , curPage = self.__tradeListPages.filter('.active')
            , pageNumber = parseInt(curPage.attr('page')) - 1;
        if (pageNumber > 0 && pageNumber <= self.__tradeListMaxPages) {
            self.__tradeListLoad(pageNumber);
        }
    }
    static __initializeCreateTrade() {
        let self = Commerce;
        if (self.__createTradeDiv === undefined) {
            return;
        }
        self.__createTradeDiv.append($(uiUtils.applyTemplate('commerceWindowCreateTrade', {
            i18n: i18nModel.getData().commerce.createTrade,
        })));
        self.__createTradeCreateButton = self.__createTradeDiv.find('.create-button').off().on('click', (e)=>{
                self.__createTradeCreateButtonClick(e);
                self.__createTradeUpdateButtonStatus();
            }
        );
        self.__createTradeSellMaxButton = self.__createTradeDiv.find('.sell .max-button').off().on('click', (e)=>{
                self.__createTradeSellMaxButtonClick(e);
                self.__createTradeBuyInputChanged();
                self.__createTradeUpdateButtonStatus();
            }
        );
        self.__createTradeBuyMaxButton = self.__createTradeDiv.find('.buy .max-button').off().on('click', (e)=>{
                self.__createTradeBuyMaxButtonClick(e);
                self.__createTradeBuyInputChanged();
                self.__createTradeUpdateButtonStatus();
            }
        );
        self.__createTradeSellResources = self.__createTradeDiv.find('.sell .resources > div').off().on('click', (e)=>{
                self.__createTradeSellResourceClick(e);
                self.__createTradeBuyInputChanged();
                self.__createTradeUpdateButtonStatus();
            }
        );
        self.__createTradeBuyResources = self.__createTradeDiv.find('.buy .resources > div').off().on('click', (e)=>{
                self.__createTradeBuyResourceClick(e);
                self.__createTradeUpdateButtonStatus();
            }
        );
        self.__createTradeBuyInput = self.__createTradeDiv.find('.buy input').off().on('change', (e)=>{
                self.__createTradeBuyInputChanged(e);
                self.__createTradeUpdateButtonStatus();
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        ).on('mousedown', (e)=>{
                self.__createTradeBuyInputClick(e);
            }
        ).on('focusout', (e)=>{
                self.__createTradeBuyInputFocusOut(e);
            }
        );
        self.__createTradeSellInput = self.__createTradeDiv.find('.sell input').off().on('keyup', (e)=>{
                self.__createTradeSellInputChanged(e);
                self.__createTradeBuyInputChanged();
                self.__createTradeUpdateButtonStatus();
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        ).on('mousedown', (e)=>{
                self.__createTradeSellInputClick(e);
            }
        ).on('focusout', (e)=>{
                self.__createTradeSellInputFocusOut(e);
            }
        );
        self.__createTradeUpdateButtonStatus();
    }
    static __createTradeBuyInputFocusOut() {
        let self = Commerce
            , value = self.__createTradeBuyInput.val();
        if (value === "") {
            self.__createTradeBuyInput.val(0);
        }
    }
    static __createTradeSellInputFocusOut() {
        let self = Commerce
            , value = self.__createTradeSellInput.val();
        if (value === "") {
            self.__createTradeSellInput.val(0);
        }
    }
    static __createTradeBuyInputClick() {
        let self = Commerce
            , value = self.__createTradeBuyInput.val();
        if (value == 0) {
            self.__createTradeBuyInput.val('');
        }
    }
    static __createTradeSellInputClick() {
        let self = Commerce
            , value = self.__createTradeSellInput.val();
        if (value == 0) {
            self.__createTradeSellInput.val('');
        }
    }
    static __createTradeSellInputChanged() {
        let self = Commerce
            , inputVal = parseInt(self.__createTradeSellInput.val().replace(/\s/g, '')) || 0
            , resources = playerModel.getData().Resources
            , maxValue = Number.MAX_VALUE
            , active = self.__createTradeSellResources.filter('.active');
        if (active.length > 0) {
            maxValue = resources[active.attr('resource')];
        }
        if (inputVal < 0) {
            self.__createTradeSellInput.val(0);
        } else if (inputVal > maxValue) {
            self.__createTradeSellInput.val(Util.formatNumber(maxValue));
        } else {
            self.__createTradeSellInput.val(Util.formatNumber(inputVal));
        }
    }
    static __createTradeBuyInputChanged() {
        let self = Commerce
            , inputVal = parseInt(self.__createTradeBuyInput.val().replace(/\s/g, '')) || 0
            , sellInputVal = parseInt(self.__createTradeSellInput.val().replace(/\s/g, '')) || 0
            , maxValue = Math.floor(sellInputVal * Commerce.MAX_VALUE)
            , minValue = Math.ceil(sellInputVal * Commerce.MIN_VALUE);
        if (inputVal < minValue) {
            self.__createTradeBuyInput.val(Util.formatNumber(minValue));
        } else if (inputVal > maxValue) {
            self.__createTradeBuyInput.val(Util.formatNumber(maxValue));
        } else {
            self.__createTradeBuyInput.val(Util.formatNumber(inputVal));
        }
    }
    static __createTradeUpdateButtonStatus() {
        let self = Commerce
            , sellSelected = self.__createTradeSellResources.filter('.active')
            , buySelected = self.__createTradeBuyResources.filter('.active')
            , sellAmount = parseInt(self.__createTradeSellInput.val().replace(/\s/g, '')) || 0
            , buyAmount = parseInt(self.__createTradeBuyInput.val().replace(/\s/g, '')) || 0;
        if (sellSelected.length > 0 && buySelected.length > 0 && sellAmount > 0 && buyAmount > 0) {
            self.__createTradeCreateButton.removeClass('disabled');
        } else {
            self.__createTradeCreateButton.addClass('disabled');
        }
    }
    static __createTradeSellResourceClick(e) {
        let self = Commerce
            , curObj = $(e.currentTarget);
        if (curObj.hasClass('active')) {
            self.__createTradeSellResources.removeClass('active');
        } else {
            self.__createTradeSellResources.removeClass('active');
            curObj.addClass('active');
            let inputVal = parseInt(self.__createTradeSellInput.val().replace(/\s/g, ''))
                , resources = playerModel.getData().Resources
                , resource = curObj.attr('resource')
                , maxValue = resources[resource];
            self.__createTradeBuyResources.filter('[resource="' + resource + '"]').removeClass('active');
            if (inputVal > maxValue) {
                self.__createTradeSellInput.val(Util.formatNumber(maxValue));
            }
        }
    }
    static __createTradeBuyResourceClick(e) {
        let self = Commerce
            , curObj = $(e.currentTarget)
            , resource = curObj.attr('resource');
        if (curObj.hasClass('active')) {
            self.__createTradeBuyResources.removeClass('active');
        } else {
            if (!self.__createTradeSellResources.filter('[resource="' + resource + '"]').hasClass('active')) {
                self.__createTradeBuyResources.removeClass('active');
                curObj.addClass('active');
            }
        }
    }
    static __createTradeSellActiveResource() {
        let self = Commerce
            , active = self.__createTradeSellResources.filter('.active');
        if (active.length > 0) {
            switch (active.attr('resource')) {
                case 'wood':
                    return 1;
                case 'iron':
                    return 2;
                case 'stone':
                    return 3;
                case 'gold':
                    return 4;
            }
        }
        return 0;
    }
    static __createTradeBuyActiveResource() {
        let self = Commerce
            , active = self.__createTradeBuyResources.filter('.active');
        if (active.length > 0) {
            switch (active.attr('resource')) {
                case 'wood':
                    return 1;
                case 'iron':
                    return 2;
                case 'stone':
                    return 3;
                case 'gold':
                    return 4;
            }
        }
        return 0;
    }
    static __createTradeCreateButtonClick() {
        let self = Commerce;
        if (self.__createTradeCreateButton.hasClass('disabled')) {
            return;
        }
        self.__createTradeCreateButton.addClass('disabled');
        let req = new request()
            , method = Commerce.getting.createTrade
            , sellResourceId = self.__createTradeSellActiveResource()
            , sellResourceAmount = parseInt(self.__createTradeSellInput.val().replace(/\s/g, ''))
            , buyResourceId = self.__createTradeBuyActiveResource()
            , buyResourceAmount = parseInt(self.__createTradeBuyInput.val().replace(/\s/g, ''));
        req.addGetting(method, request.all, {
            sr: sellResourceId,
            sa: sellResourceAmount,
            br: buyResourceId,
            ba: buyResourceAmount,
            u: 0
        });
        req.getResponse((data)=>{
                if (data['return'] && data['return'][method]) {
                    if (/error/.test(data['return'][method])) {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    } else {
                        messageController.showSystemMessage(i18nModel.getData().commerce.tradeCreatedMessage);
                    }
                } else {
                    messageController.showSystemMessage(i18nModel.getData().error.commerce.loadError);
                }
                self.__createTradeUpdateButtonStatus();
            }
        );
    }
    static __createTradeSellMaxButtonClick(e) {
        let self = Commerce
            , activeResource = self.__createTradeSellResources.filter('.active');
        if (activeResource.length > 0) {
            let resources = playerModel.getData().Resources
                , maxValue = resources[activeResource.attr('resource')];
            self.__createTradeSellInput.val(Util.formatNumber(maxValue));
        }
    }
    static __createTradeBuyMaxButtonClick(e) {
        let self = Commerce
            , sellInputVal = parseInt(self.__createTradeSellInput.val().replace(/\s/g, '')) || 0
            , maxValue = Math.floor(sellInputVal * Commerce.MAX_VALUE);
        self.__createTradeBuyInput.val(Util.formatNumber(maxValue));
    }
    static __initializeSendResources() {
        let self = Commerce;
        if (self.__sendResourcesDiv === undefined) {
            return;
        }
        self.__sendResourcesDiv.append($(uiUtils.applyTemplate('commerceWindowSendResources', {
            i18n: i18nModel.getData().commerce.sendResources,
        })));
        self.__sendResourcesSendButton = self.__sendResourcesDiv.find('.send-button').click(self.__sendResourcesSendButtonClick);
        self.__sendResourcesSearchButton = self.__sendResourcesDiv.find('.search-button').click(self.__sendResourcesSearchButtonClick);
        self.__sendResourcesSearchInput = self.__sendResourcesDiv.find('.search input').off().on('keyup', (e)=>{
                self.__sendResourcesSearchInputChange(e);
            }
        ).on('focusin', ()=>{
                self.__sendResourcesSearchInput.parent().children('.placeholder').addClass('disabled');
            }
        ).on('focusout', ()=>{
                if (self.__sendResourcesSearchInput.val() === '') {
                    self.__sendResourcesSearchInput.parent().children('.placeholder').removeClass('disabled');
                }
            }
        );
        self.__sendResourcesPlayerNick = self.__sendResourcesDiv.find('.player-nickname');
        self.__sendResourcesInputs = self.__sendResourcesDiv.find('.trade .resource input').off().on('keyup', (e)=>{
                self.__sendResourcesInputsChanged(e);
                self.__sendResourcesButtonUpdateStatus();
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        ).on('mousedown', self.__sendResourcesInputsClick).on('focusout', self.__sendResourcesInputsFocusOut);
        self.__sendResourcesSelectedPlayerId = 0;
        self.__sendResourcesMaxButtons = self.__sendResourcesDiv.find('.resource > .max-button').off().on('click', self.__sendResourcesMaxButtonsClick);
        self.__sendResourcesAllMaxButton = self.__sendResourcesDiv.find('.all-max-button').off().on('click', self.__sendResourcesAllMaxButtonClick);
        self.__sendResourcesResetButton = self.__sendResourcesDiv.find('.reset-button').off().on('click', self.__sendResourcesResetButtonClick);
        self.__sendResourcesSendersList = self.__sendResourcesDiv.find('.senders-list');
        self.__sendResourcesLoadSendersList();
    }
    static __sendResourcesLoadSendersList() {
        let self = Commerce;
        let req = new request()
            , method = Commerce.getting.getSendersList;
        req.addGetting(method, request.all, {});
        req.getResponse((data)=>{
                if (data['return'] && data['return'][method]) {
                    if (/error/.test(data['return'][method])) {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    } else {
                        data = data['return'][method];
                        self.__sendResourcesSendersList.empty();
                        for (let index in data) {
                            self.__sendResourcesSendersList.append('<div>' + data[index] + '</div>');
                        }
                        self.__sendResourcesSendersList.children().off().on('click', self.__sendResourcesSendersListItemClick);
                    }
                } else {
                    messageController.showSystemMessage(i18nModel.getData().error.commerce.loadError);
                }
            }
        );
    }
    static __sendResourcesSendersListItemClick(e) {
        let self = Commerce
            , curObj = $(e.currentTarget)
            , name = curObj.html();
        Commerce.sendResourcesSetPlayer(name);
    }
    static sendResourcesSetPlayer(nickname) {
        let self = Commerce;
        self.__sendResourcesSearchInput.parent().children('.placeholder').addClass('disabled');
        self.__sendResourcesSearchInput.val(nickname);
        self.__sendResourcesSearchButtonClick();
    }
    static __sendResourcesResetButtonClick(e) {
        let self = Commerce;
        self.__sendResourcesInputs.each(function() {
            let curObj = $(this);
            curObj.val(0);
        });
        self.__sendResourcesButtonUpdateStatus();
    }
    static __sendResourcesAllMaxButtonClick(e) {
        let self = Commerce
            , resources = playerModel.getData().Resources;
        self.__sendResourcesInputs.each(function() {
            let curObj = $(this)
                , resourceName = curObj.attr('title');
            curObj.val(Util.formatNumber(resources[resourceName]));
        });
        self.__sendResourcesButtonUpdateStatus();
    }
    static __sendResourcesMaxButtonsClick(e) {
        let curObj = $(this)
            , self = Commerce
            , parent = curObj.parent()
            , resourceName = parent.attr('resource')
            , curInput = self.__sendResourcesInputs.filter('[title="' + resourceName + '"]')
            , maxValue = playerModel.getData().Resources[resourceName];
        curInput.val(Util.formatNumber(maxValue));
        self.__sendResourcesButtonUpdateStatus();
    }
    static __sendResourcesInputsChanged(e) {
        let self = Commerce
            , curObj = $(e.currentTarget)
            , resourceName = curObj.parents('.resource').attr('resource')
            , value = parseInt(curObj.val().replace(/\s/g, '')) || 0
            , playerResources = playerModel.getData().Resources;
        if (value < 0) {
            curObj.val(0);
        } else if (value > playerResources[resourceName]) {
            curObj.val(Util.formatNumber(playerResources[resourceName]));
        } else {
            curObj.val(Util.formatNumber(value));
        }
    }
    static __sendResourcesInputsClick() {
        let curObj = $(this)
            , value = curObj.val();
        if (value == 0) {
            curObj.val('');
        }
    }
    static __sendResourcesInputsFocusOut() {
        let curObj = $(this)
            , value = curObj.val();
        if (value === '') {
            curObj.val(0);
        }
    }
    static __sendResourcesButtonUpdateStatus() {
        let self = Commerce
            , sendingAmount = 0;
        self.__sendResourcesInputs.each(function() {
            let curInput = $(this);
            sendingAmount += parseInt(curInput.val().replace(/\s/g, ''));
        });
        if (sendingAmount > 0 && self.__sendResourcesSelectedPlayerId > 0) {
            self.__sendResourcesSendButton.removeClass('disabled');
        } else {
            self.__sendResourcesSendButton.addClass('disabled');
        }
    }
    static __sendResourcesSearchInputChange(e) {
        let self = Commerce;
        if (e.keyCode === 13) {
            self.__sendResourcesSearchButtonClick();
        }
    }
    static __sendResourcesSendButtonClick(e) {
        let self = Commerce;
        if (self.__sendResourcesSendButton.hasClass('disabled')) {
            return;
        }
        self.__sendResourcesSendButton.addClass('disabled');
        let req = new request()
            , method = Commerce.getting.sendResources
            , amount = 0
            , resources = {};
        self.__sendResourcesInputs.each(function() {
            let curObj = $(this)
                , resourceName = curObj.parents('.resource').attr('resource');
            resources[resourceName] = parseInt(curObj.val().replace(/\s/g, ''));
            amount += resources[resourceName];
        });
        if (amount === 0 || self.__sendResourcesSelectedPlayerId === 0) {
            self.__sendResourcesSendButton.removeClass('disabled');
            messageController.showSystemMessage(i18nModel.getData().error.commerce.failSendResources);
            return;
        }
        resources['pid'] = self.__sendResourcesSelectedPlayerId;
        req.addGetting(method, request.all, resources);
        req.getResponse((data)=>{
                if (data['return'] && data['return'][method]) {
                    if (/error/.test(data['return'][method])) {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    } else {
                        self.__sendResourcesButtonUpdateStatus();
                    }
                } else {
                    messageController.showSystemMessage(i18nModel.getData().error.commerce.failSendResources);
                }
                self.__sendResourcesSendButton.removeClass('disabled');
            }
        );
    }
    static __sendResourcesSearchButtonClick() {
        let self = Commerce;
        if (self.__sendResourcesSearchButton.hasClass('disabled')) {
            return;
        }
        self.__sendResourcesSearchButton.addClass('disabled');
        let req = new request()
            , method = Commerce.getting.findPlayer
            , name = self.__sendResourcesSearchInput.val();
        req.addGetting(method, request.all, {});
        req.addPostData({
            n: name
        });
        req.getResponse((data)=>{
                if (data['return'] && data['return'][method]) {
                    if (/error/.test(data['return'][method])) {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    } else {
                        self.__sendResourcesPlayerNick.html(name);
                        self.__sendResourcesSelectedPlayerId = parseInt(data['return'][method]);
                        self.__sendResourcesButtonUpdateStatus();
                        self.__sendResourcesLoadSendersList();
                    }
                } else {
                    messageController.showSystemMessage(i18nModel.getData().error.commerce.loadError);
                }
                self.__sendResourcesSearchButton.removeClass('disabled');
            }
        );
    }
    static __initializeMyTrades(page=1) {
        let self = Commerce;
        if (self.__myTradesDiv === undefined) {
            return;
        }
        self.__myTradesDiv.append($(uiUtils.applyTemplate('commerceWindowMyTrades', {
            i18n: i18nModel.getData().commerce.myTrades,
        })));
        self.__myTradesDiv.addClass('loading');
        self.__myTradesMaxPages = 0;
        self.__myTradesDiv.find('.paging .next').off().on('click', self.__myTradesNextPageClick);
        self.__myTradesDiv.find('.paging .last').off().on('click', self.__myTradesLastPageClick);
        self.__myTradesLoad(page);
    }
    static __myTradesUpdatePaging(activePage) {
        let self = Commerce;
        if (activePage > 0 && activePage <= self.__myTradesMaxPages) {
            let pagesDiv = self.__myTradesDiv.find('.paging > .pages')
                , fromPage = activePage - Math.floor((Commerce.TRADE_LIST_PAGE_SHOW - 1) / 2)
                , toPage = activePage + Math.ceil((Commerce.TRADE_LIST_PAGE_SHOW - 1) / 2);
            pagesDiv.empty();
            fromPage = fromPage < 1 ? 1 : fromPage;
            toPage = toPage > self.__myTradesMaxPages ? self.__myTradesMaxPages : toPage;
            for (let pageNumber = fromPage; pageNumber <= toPage; pageNumber++) {
                pagesDiv.append('<div class="page' + (pageNumber === activePage ? ' active' : '') + '" page=' + pageNumber + '>' + pageNumber + '</div>');
            }
            self.__myTradesPages = pagesDiv.children().off().on('click', self.__myTradesPageClick);
        }
    }
    static __myTradesUpdate() {
        let self = Commerce
            , bodyDiv = self.__myTradesDiv.find('.my-trades .body');
        bodyDiv.empty();
        for (let index in self.__myTrades) {
            if (self.__myTrades.hasOwnProperty(index)) {
                index = parseInt(index);
                let myTrade = self.__myTrades[index];
                bodyDiv.append(myTrade.getMyTradesItemTemplate());
            }
        }
        bodyDiv.find('.cancel > .cancel-button').off().on('click', (e)=>{
                self.__myTradesCancelButtonClick(e);
            }
        );
    }
    static __myTradesLoad(page=1) {
        let self = Commerce;
        self.__myTradesLoadPageCount((pageCount)=>{
                self.__myTradesMaxPages = pageCount;
                self.__myTradesLoadTradeData(page, ()=>{
                        self.__myTradesUpdate();
                        self.__myTradesUpdatePaging(page);
                        self.__myTradesDiv.removeClass('loading');
                    }
                );
            }
        );
    }
    static __myTradesLoadTradeData(page=1, callback) {
        let self = Commerce
            , req = new request()
            , method = Commerce.getting.getMyTrades;
        req.addGetting(method, request.all, {
            p: page
        });
        req.getResponse((data)=>{
                if (data['return'] && data['return'][method]) {
                    let trades = data['return'][method];
                    self.__myTrades = {};
                    for (let tradeId in trades) {
                        if (trades.hasOwnProperty(tradeId)) {
                            tradeId = parseInt(tradeId);
                            self.__myTrades[tradeId] = new CommerceItem(trades[tradeId]);
                        }
                    }
                    callback && callback();
                } else {
                    messageController.showSystemMessage(i18nModel.getData().rating.loadError);
                }
            }
        );
    }
    static __myTradesCancelButtonClick(e) {
        let self = Commerce
            , curObj = $(e.currentTarget)
            , req = new request()
            , method = Commerce.getting.cancelTrade
            , tradeId = parseInt(curObj.parents('.my-trades-item').attr('trade-id'));
        req.addGetting(method, request.all, {});
        req.addPostData({
            't': tradeId
        });
        req.getResponse((data)=>{
                if (!(data['return'] && data['return'][method])) {
                    messageController.showSystemMessage(i18nModel.getData().rating.loadError);
                }
                if (data['return'] && data['return'][method]) {
                    if (/error/.test(data['return'][method])) {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    } else {
                        messageController.showSystemMessage(i18nModel.getData().commerce.tradesCanceled);
                    }
                } else {
                    messageController.showSystemMessage(i18nModel.getData().error.commerce.loadError);
                }
            }
        );
    }
    static __myTradesPageClick(e) {
        let self = Commerce
            , curPage = $(this)
            , pageNumber = parseInt(curPage.attr('page'));
        if (pageNumber > 0 && pageNumber <= self.__myTradesMaxPages) {
            self.__myTradesLoad(pageNumber);
        }
    }
    static __myTradesNextPageClick(e) {
        let self = Commerce
            , curPage = self.__myTradesPages.filter('.active')
            , pageNumber = parseInt(curPage.attr('page')) + 1;
        if (pageNumber > 0 && pageNumber <= self.__myTradesMaxPages) {
            self.__myTradesLoad(pageNumber);
        }
    }
    static __myTradesLastPageClick(e) {
        let self = Commerce
            , curPage = self.__myTradesPages.filter('.active')
            , pageNumber = parseInt(curPage.attr('page')) - 1;
        if (pageNumber > 0 && pageNumber <= self.__myTradesMaxPages) {
            self.__myTradesLoad(pageNumber);
        }
    }
    static __myTradesLoadPageCount(callback) {
        let self = Commerce
            , req = new request()
            , method = Commerce.getting.myTradesPageCount;
        req.addGetting(method, request.all, {});
        req.getResponse((data)=>{
                if (data['return'] && data['return'][method]) {
                    if (/error/.test(data['return'][method])) {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    } else {
                        callback && callback(data['return'][method]);
                    }
                } else {
                    messageController.showSystemMessage(i18nModel.getData().error.commerce.loadError);
                }
            }
        );
    }
    static __myTradesDelete(tradesId) {
        let self = Commerce;
        for (let index in tradesId) {
            let tradeId = tradesId[index];
            self.__myTradesDiv.find('.my-trades-item[trade-id"' + tradeId + '"]').remove();
        }
    }
    static showCommerceWindow(activeTab) {
        let self = Commerce;
        activeTab = activeTab || 'create-trade';
        self.__contentDiv = $(uiUtils.applyTemplate('commerceWindow', {
            i18n: i18nModel.getData().commerce,
        }));
        self.__exitButton = self.__contentDiv.find('.exit-button').click(self.__onExitButtonClick);
        self.__tabs = self.__contentDiv.find('.tabs .tab').click(self.__onTabClick);
        self.__tradeListDiv = self.__contentDiv.find('.main-block > .trade-list');
        self.__createTradeDiv = self.__contentDiv.find('.main-block > .create-trade');
        self.__sendResourcesDiv = self.__contentDiv.find('.main-block > .send-resources');
        self.__myTradesDiv = self.__contentDiv.find('.main-block > .my-trades');
        self.__windowOpen = true;
        self.changeTab(activeTab);
        WOFWindow.setWindowClass('small');
        self.__windowDiv = WOFWindow.showWindow(i18nModel.getData().commerce.title, self.__contentDiv, self.__onCloseWindow);
    }
    static __onTabClick(e) {
        let self = Commerce
            , curObj = $(this)
            , tab = curObj.attr('tab');
        if (tab === 'buy-resources') {
            let openedTab = self.__contentDiv.attr('class');
            $.tooltip.close();
            self.closeWindow();
            premiumController.showPremiumsWindow('resource-shop', ()=>{
                    Commerce.showCommerceWindow(openedTab);
                }
            );
        } else {
            self.changeTab(tab);
        }
    }
    static changeTab(tab) {
        let self = Commerce;
        if (!self.isWindowOpen())
            return;
        let curTab = self.__contentDiv.attr('class');
        switch (curTab) {
            case 'trade-list':
                self.__tradeListDiv.empty();
                break;
            case 'create-trade':
                self.__createTradeDiv.empty();
                break;
            case 'send-resources':
                self.__sendResourcesDiv.empty();
                break;
            case 'my-trades':
                self.__myTradesDiv.empty();
                break;
        }
        switch (tab) {
            case 'trade-list':
                self.__initializeTradeList();
                break;
            case 'create-trade':
                self.__initializeCreateTrade();
                break;
            case 'send-resources':
                self.__initializeSendResources();
                break;
            case 'my-trades':
                self.__initializeMyTrades();
                break;
        }
        self.__contentDiv.removeClass().addClass(tab);
    }
    static __onExitButtonClick() {
        Commerce.closeWindow();
    }
    static __onCloseWindow() {
        let self = Commerce;
        self.__windowOpen = false;
        delete self.__windowDiv;
        delete self.__contentDiv;
        delete self.__tabs;
        delete self.__exitButton;
        delete self.__tradeListDiv;
        delete self.__createTradeDiv;
        delete self.__sendResourcesDiv;
    }
    static closeWindow() {
        WOFWindow.closeWindow();
    }
}
Commerce.getting = {
    getTradeList: 'Commerce:getTradeList',
    getSendersList: 'Commerce:getFindList',
    tradeListPageCount: 'Commerce:getTradeListPageCount',
    createTrade: 'Commerce:createNewTrade',
    findPlayer: 'Commerce:findPlayer',
    sendResources: 'Commerce:sendResources',
    acceptTrade: 'Commerce:acceptTrade',
    getMyTrades: 'Commerce:getMyTrades',
    cancelTrade: 'Commerce:cancelTrade',
    myTradesPageCount: 'Commerce:getMyTradesPageCount',
};
Commerce.TRADE_LIST_PAGE_SHOW = 7;
Commerce.MAX_VALUE = 1.25;
Commerce.MIN_VALUE = 0.75;

class CommerceItem {
    constructor(data) {
        this.__id = data.id;
        this.__playerId = data.playerId;
        this.__sellResourceId = data.sellResourceId;
        this.__sellResourceAmount = data.sellResourceAmount;
        this.__buyResourceId = data.buyResourceId;
        this.__buyResourceAmount = data.buyResourceAmount;
        this.__forUnionId = data.forUnionId;
        this.__createdTime = data.createdTime;
        this.__selected = false;
        this.__sold = false;
    }
    sold() {
        this.__sold = true;
    }
    isSold() {
        return this.__sold;
    }
    isSelected() {
        return this.__selected;
    }
    get id() {
        return this.__id;
    }
    get playerId() {
        return this.__playerId;
    }
    get sellResourceId() {
        return this.__sellResourceId;
    }
    get sellResourceAmount() {
        return this.__sellResourceAmount;
    }
    get buyResourceId() {
        return this.__buyResourceId;
    }
    get buyResourceAmount() {
        return this.__buyResourceAmount;
    }
    get forUnionId() {
        return this.__forUnionId;
    }
    get createdTime() {
        return this.__createdTime;
    }
    select() {
        this.__selected = true;
    }
    unselect() {
        this.__selected = false;
    }
    getTradeListItemTemplate() {
        let playerName = gameController.gameData.players && gameController.gameData.players[this.playerId] ? gameController.gameData.players[this.playerId].n : '';
        return $(uiUtils.applyTemplate('commerceWindowTradeListItem', {
            i: this.id,
            sri: 'resource-' + this.sellResourceId,
            bri: 'resource-' + this.buyResourceId,
            hsra: Util.resourceToHumanNumber(this.sellResourceAmount),
            sra: Util.formatNumber(this.sellResourceAmount),
            hbra: Util.resourceToHumanNumber(this.buyResourceAmount),
            bra: Util.formatNumber(this.buyResourceAmount),
            p: playerName,
            selected: this.isSelected(),
            sold: this.isSold(),
            i18n: i18nModel.getData().commerce.tradeList,
        }));
    }
    getMyTradesItemTemplate() {
        return $(uiUtils.applyTemplate('commerceWindowMyTradesItem', {
            i: this.id,
            sri: 'resource-' + this.sellResourceId,
            bri: 'resource-' + this.buyResourceId,
            hsra: Util.resourceToHumanNumber(this.sellResourceAmount),
            sra: Util.formatNumber(this.sellResourceAmount),
            hbra: Util.resourceToHumanNumber(this.buyResourceAmount),
            bra: Util.formatNumber(this.buyResourceAmount),
        }));
    }
}

class ControlWindow {
    constructor(title, tabs, defaultPlace, mainControl) {
        this.__title = title;
        this.__defaultPlace = defaultPlace;
        this.__place = null;
        this.__mainControl = mainControl;
        this.__lastUpdate = mainControl.getUseTick();
        this.__div = $(uiUtils.applyTemplate('ControlWindow', {
            tabsAmount: Object.getOwnPropertyNames(tabs).length,
            tabs: tabs,
            title: title,
        }));
        this.__divBody = this.__div.find('.body');
        this.__divHeader = this.__div.find('.header');
        this.__divTabs = this.__div.find('.tabs > div.tab');
        this.__divTabHover = this.__div.find('.tabs > .tabs-hover > .tab').off().on('mouseenter', (e)=>{
                this.__onTabMouseEnter(e);
            }
        ).on('mouseleave', (e)=>{
                this.__onTabMouseLeave(e);
            }
        ).on('mousedown', (e)=>{
                this.__onTabMouseDown(e);
            }
        ).on('click', (e)=>{
                this.__onTabClick(e);
            }
        );
        this.__div.off().on('click', (e)=>{
                this.__lastUpdate = this.__mainControl.getUseTick();
            }
        );
        this.__show = false;
        this.__activeTab = 0;
    }
    __onTabMouseEnter(e) {
        let curObj = $(e.currentTarget)
            , tabType = curObj.attr('tabs');
        this.__divTabs.removeClass('hover mousedown').filter('[tabs="' + tabType + '"]').addClass('hover');
    }
    __onTabMouseLeave(e) {
        let curObj = $(e.currentTarget)
            , tabType = curObj.attr('tabs');
        this.__divTabs.removeClass('hover mousedown');
    }
    __onTabMouseDown(e) {
        let curObj = $(e.currentTarget)
            , tabType = curObj.attr('tabs');
        this.__divTabs.removeClass('hover mousedown').filter('[tabs="' + tabType + '"]').addClass('mousedown');
    }
    __onTabClick(e) {
        let curObj = $(e.currentTarget)
            , tabType = curObj.attr('tabs');
        this.setTab(tabType);
    }
    onTownDataUpdated(fields) {}
    getTab() {
        return this.__activeTab;
    }
    setTab(tab) {
        this.__divTabs.removeClass('active');
        this.__divTabs.filter('.tab[tabs="' + tab + '"]').addClass('active');
        this.__activeTab = tab;
        this.__onTabChange();
    }
    __onTabChange() {}
    isShown() {
        return this.__show;
    }
    get lastUpdate() {
        return this.__lastUpdate;
    }
    __activate() {
        this.__place = this.__mainControl.getPlaceForOpenWindow(this.__defaultPlace);
        this.__show = true;
    }
    close() {
        this.__show = false;
        this.__div.removeClass('shown');
        this.__onCloseWindow();
    }
    show() {
        this.__activate();
        this.__div.addClass('shown');
        this.__onShowWindow();
    }
    __onCloseWindow() {}
    __onShowWindow() {}
    getContent() {
        return this.__div;
    }
    static getBuildingLevel(id) {
        return townModel.getData().Buildings[id].Level;
    }
    static getMaxBuildingLevel(id) {
        return staticDataModel.buildings[id].maxLevel;
    }
    static getBuildingType(id) {
        return staticDataModel.buildings[id].type;
    }
    static getBuildingLevelConsideringQueue(id) {
        let buildingLevel = ControlWindow.getBuildingLevel(id);
        for (let k = 0; k < townModel.getData().BuildingConstruction.length; k++) {
            if (townModel.getData().BuildingConstruction[k].BuildingId === id) {
                buildingLevel = (townModel.getData().BuildingConstruction[k].Type === 1) ? (buildingLevel + 1) : (buildingLevel - 1);
            }
        }
        return buildingLevel;
    }
}
ControlWindow.WINDOW_TYPE_ROUTE = 1;
ControlWindow.WINDOW_TYPE_ARMIES = 2;
ControlWindow.WINDOW_TYPE_EDIT_ARMY = 3;
ControlWindow.WINDOW_TYPE_ECONOMIC = 4;
ControlWindow.WINDOW_TYPE_BUILDINGS = 5;
ControlWindow.WINDOW_TYPE_RECRUITING = 6;
ControlWindow.WINDOW_TYPE_SPY = 7;
ControlWindow.WINDOW_TYPE_TROOPS = 8;
ControlWindow.WINDOW_TYPE_CONSTRUCTIONS = 9;
ControlWindow.WINDOW_TYPE_CREATE_ARMY = 10;
ControlWindow.WINDOW_TYPE_REINFORCEMENTS = 11;

class ControlWindowArmies extends ControlWindow {
    constructor(control) {
        let i18n = i18nModel.getData().townControl.controlWindows.armies;
        super(i18n.title, {}, TownControl.WINDOW_PLACE_RIGHT, control);
        this.__init();
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowArmies', {
            i18n: i18nModel.getData().townControl.controlWindows.armies
        }));
        this.__mainDiv = this.__divBody.children('#control-window-armies');
        this.__armiesPane = this.__mainDiv.find('.armies-pane');
        this.__bottomPanel = this.__mainDiv.find('.bottom-panel');
        this.__emptyButton = this.__mainDiv.find('.empty-button');
        this.setTab(ControlWindowArmies.tabs["1"]);
    }
    __onShowWindow() {
        if (this.__scrollBar) {
            this.__scrollBar.updateScrollBar();
        }
    }
    __calculateTownDefence() {
        let townArmies = townModel.getData().Armies
            , townReinforcements = townModel.getData().Reinforcement
            , townTroops = townModel.getData().Troops
            , armiesCounter = 0
            , reinforcementCounter = 0
            , troopsCounter = 0;
        for (let troopId in townTroops) {
            if (townTroops.hasOwnProperty(troopId)) {
                troopsCounter += townTroops[troopId];
            }
        }
        for (let armyId in townArmies) {
            if (townArmies.hasOwnProperty(armyId) && townArmies[armyId].RouteId === null) {
                for (let troopId in townArmies[armyId].Troops) {
                    if (townArmies[armyId].Troops.hasOwnProperty(troopId)) {
                        armiesCounter += parseInt(townArmies[armyId].Troops[troopId]);
                    }
                }
            }
        }
        for (let armyId in townReinforcements) {
            if (townReinforcements.hasOwnProperty(armyId)) {
                for (let troopId in townReinforcements[armyId].Troops) {
                    if (townReinforcements[armyId].Troops.hasOwnProperty(troopId)) {
                        reinforcementCounter += parseInt(townReinforcements[armyId].Troops[troopId]);
                    }
                }
            }
        }
        this.__bottomPanel.find('.town-armies > .value').text(Util.formatNumber(armiesCounter + troopsCounter));
        this.__bottomPanel.find('.reinforcement-armies > .value').text(Util.formatNumber(reinforcementCounter));
        this.__bottomPanel.find('.summary-armies > .value').text(Util.formatNumber(armiesCounter + reinforcementCounter + troopsCounter));
    }
    static getPrintableUnitSpeed(time) {
        return $.secsToString(time, i18nModel.getData().shortTimeFormat);
    }
    __createSquareArmyItem(armyId) {
        let army = townModel.getData().Armies[armyId];
        if (army === undefined || army.RouteId > 0)
            return false;
        let speed = 0
            , trophy = 0
            , amount = 0
            , additionalSpace = 0
            , additionalSpeed = 0
            , skillTrophiesArr = rpgModel.getSkillsAffectingUnitsTrophies()
            , skillSpeedArr = rpgModel.getSkillsAffectingUnitsSpeed()
            , editArmyId = 0;
        for (let index in skillTrophiesArr) {
            if (skillTrophiesArr.hasOwnProperty(index)) {
                let skillId = skillTrophiesArr[index];
                if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                    continue;
                additionalSpace += rpgModel.playerSkills[skillId].Parameter;
            }
        }
        for (let index in skillSpeedArr) {
            if (skillSpeedArr.hasOwnProperty(index)) {
                let skillId = skillSpeedArr[index];
                if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                    continue;
                additionalSpeed += rpgModel.playerSkills[skillId].Parameter / 100;
            }
        }
        let premium = premiumModel.getPlayerPremiums();
        if (premium[11]) {
            additionalSpeed += premium[11].Percent;
        }
        for (let troopId in army.Troops) {
            if (army.Troops.hasOwnProperty(troopId)) {
                speed = Math.max(speed, staticDataModel.troops[troopId].speed * (100 - additionalSpeed) / 100);
                trophy += army.Troops[troopId] * (staticDataModel.troops[troopId].space + additionalSpace);
                amount += army.Troops[troopId];
            }
        }
        if (this.__mainControl.getLeftWindowType() === ControlWindow.WINDOW_TYPE_EDIT_ARMY) {
            editArmyId = this.__mainControl.getLeftWindow().getEditArmyId();
        }
        let templateData = {
            'id': armyId,
            'troops': army.Troops,
            'name': army.Name,
            'trophy': trophy,
            'speed': ControlWindowArmies.getPrintableUnitSpeed(speed),
            'amount': amount,
            'i18n': i18nModel.getData().townControl.controlWindows.armies,
            'aristocrat': army.Troops[Troop.ARISTOCRAT_ID] > 0,
            'ram': army.Troops[Troop.RAM_ID] > 0,
            'edit': armyId === editArmyId,
        };
        return $(uiUtils.applyTemplate('ControlWindowArmiesItem', templateData));
    }
    __updateArmiesEvents() {
        let i18n = i18nModel.getData().townControl.controlWindows.armies;
        this.__armiesPane.find('.army > .left-block').off().tooltip({
            delay: 0,
            track: true,
            left: 40,
            top: 0,
            showURL: false,
            bodyHandler: function() {
                let armyDiv = $(this).parent()
                    , armyId = parseInt(armyDiv.attr('army-id'));
                return uiUtils.applyTemplate('ControlWindowArmiesItemTooltip', {
                    armyId: armyId,
                    armyContent: townModel.getData().Armies[armyId]
                });
            },
            extraClass: 'sidebar-army-item'
        });
        this.__armiesPane.find('.army .attack-button').off().on('click', (e)=>{
                this.__onAttackButtonClick(e);
            }
        ).tooltip({
            showURL: false,
            bodyHandler: function() {
                return i18n.attackButtonLabel;
            }
        });
        this.__armiesPane.find('.army .edit-button').off().on('click', (e)=>{
                this.__onEditButtonClick(e);
            }
        ).tooltip({
            showURL: false,
            bodyHandler: function() {
                return i18n.editButtonLabel;
            }
        });
        this.__armiesPane.find('.army .dismiss-button').off().on('click', (e)=>{
                this.__onDismissButtonClick(e);
            }
        ).tooltip({
            showURL: false,
            bodyHandler: function() {
                return i18n.dismissButtonLabel;
            }
        });
        this.__armiesPane.find('.army .edit-cancel-button').off().on('click', (e)=>{
                this.__onEditCancelButtonClick(e);
            }
        ).tooltip({
            showURL: false,
            bodyHandler: function() {
                return i18n.editCancelButtonLabel;
            }
        });
        this.__emptyButton.off().on('click', (e)=>{
                this.__mainControl.switchPanel(ControlWindow.WINDOW_TYPE_CREATE_ARMY);
            }
        );
    }
    __onAttackButtonClick(e) {
        let armyDiv = $(e.currentTarget).parents('.army')
            , armyId = parseInt(armyDiv.attr('army-id'));
        this.__mainControl.close();
        if (gameController.isTown()) {
            gameController.loadMap();
            gameController.worldMap.__pointAtCurrentTown();
        }
        gameController.worldMap.startRouteConstructor(armyId);
    }
    __onEditButtonClick(e) {
        let curButton = $(e.currentTarget)
            , armyDiv = curButton.parents('.army')
            , armyId = parseInt(armyDiv.attr('army-id'));
        $.tooltip.close();
        this.__mainControl.switchPanel(ControlWindow.WINDOW_TYPE_EDIT_ARMY, ControlWindowArmies.WINDOW_TYPE_ARMIES, 1, 1, armyId);
    }
    __onEditCancelButtonClick(e) {
        let curButton = $(e.currentTarget)
            , armyDiv = curButton.parents('.army')
            , armyId = parseInt(armyDiv.attr('army-id'));
        $.tooltip.close();
        this.__mainControl.switchPanel(this.__mainControl.getLastLeftWindowType(), ControlWindowArmies.WINDOW_TYPE_ARMIES);
    }
    __onDismissButtonClick(e) {
        let curButton = $(e.currentTarget)
            , armyDiv = curButton.parents('.army')
            , armyId = parseInt(armyDiv.attr('army-id'));
        $.tooltip.close();
        armyModel.disbandArmy(armyId, townModel.getData().Id, function(data) {});
    }
    __onCloseWindow() {}
    __updateContent() {
        let armies = townModel.getData().Armies
            , scrollY = 0;
        if (this.__scrollBar !== undefined) {
            scrollY = this.__scrollBar.getScrollY();
        }
        this.__armiesPane.empty();
        this.__mainDiv.removeClass('empty');
        for (let armyId in armies) {
            if (armies.hasOwnProperty(armyId)) {
                armyId = parseInt(armyId);
                let armyDiv = this.__createSquareArmyItem(armyId);
                if (armyDiv) {
                    this.__armiesPane.append(armyDiv);
                }
            }
        }
        if (this.__armiesPane.is(':empty')) {
            this.__mainDiv.addClass('empty');
        }
        this.__updateArmiesEvents();
        this.__calculateTownDefence();
        if (this.__scrollBar === undefined) {
            this.__scrollBar = new ScrollBar(this.__armiesPane,false,13);
        } else {
            this.__scrollBar.updateScrollBar();
        }
        this.__scrollBar.setScrollY(scrollY);
    }
    __onTabChange() {
        this.__updateContent();
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
}
ControlWindowArmies.tabs = {
    1: 'armies-all',
    2: 'armies-moving',
    3: 'armies-home'
};

class ControlWindowBuildings extends ControlWindow {
    constructor(control) {
        let i18n = i18nModel.getData().townControl.controlWindows.buildings;
        super(i18n.title, ControlWindowBuildings.tabs, TownControl.WINDOW_PLACE_LEFT, control);
        this.__buildingsDiv = {};
        this.__init();
    }
    __onTabChange() {
        this.__updateContent();
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowBuildings', {}));
        this.__buildingsPane = this.__divBody.find('#control-window-buildings');
        this.setTab(ControlWindowBuildings.tabs["1"]);
    }
    __onBuildingLevelDownClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled')) {
            return;
        }
        let parentDiv = curButton.parents('.building')
            , buildingId = parseInt(parentDiv.attr('building-id'));
        if (townModel.getData().CreatedType === 4 && buildingId !== buildingsModel.wallsId) {
            return;
        }
        parentDiv.find('.buttons > .level-up, .buttons > .level-down').addClass('disabled');
        this.__startConstructions("Downgrade", buildingId);
    }
    __onBuildingLevelUpClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled')) {
            return;
        }
        let parentDiv = curButton.parents('.building')
            , buildingId = parseInt(parentDiv.attr('building-id'));
        if (townModel.getData().CreatedType === 4 && buildingId !== buildingsModel.wallsId) {
            return;
        }
        parentDiv.find('.buttons > .level-up, .buttons > .level-down').addClass('disabled');
        this.__startConstructions("Upgrade", buildingId);
    }
    __startConstructions(action, buildingId) {
        townModel.sendRequestForBuildingAction(buildingId, action, (buildingAction)=>{
                if (/error/.test(buildingAction.action['town:building' + action])) {
                    let error = buildingAction.action['town:building' + action].split(":")[2];
                    messageController.showSystemMessage(i18nModel.getData().error.townBuildingUpgrade[error]);
                    return;
                }
                let startBuildingMessage = (!buildingsModel.getLevel(buildingId)) ? String.format(i18nModel.getData().messages.system.buildingUpgradeFrom0, i18nModel.getBuildingNameInGenitive(buildingId)) : String.format(i18nModel.getData().messages.system['building' + action + 'Start'], i18nModel.getBuildingNameInGenitive(buildingId));
                messageController.addMessageToLog(startBuildingMessage, 'build-start');
                townController.updateBuildingInfo(buildingId, buildingsModel.getImageIndex(buildingId));
                this.__mainControl.switchPanel(0, ControlWindow.WINDOW_TYPE_CONSTRUCTIONS);
                methodModel.getHandler('onBuildingStart')(buildingId);
                methodModel.getHandler('onTabClickInTownHall')(this.getTab());
            }
        );
    }
    __onBuildingHover(e) {}
    static __getBuildingUpgradeInfo(buildingId) {
        let buildingLevel = ControlWindow.getBuildingLevelConsideringQueue(buildingId) + 1
            , buildingCost = staticDataModel.buildings[buildingId].levels[buildingLevel]
            , buildingRequirement = {};
        if (staticDataModel.buildings[buildingId] && staticDataModel.buildings[buildingId].requirements && staticDataModel.buildings[buildingId].requirements[buildingLevel]) {
            buildingRequirement = staticDataModel.buildings[buildingId].requirements[buildingLevel]
        }
        let retArr = $.extend(true, {
            'Requirement': buildingRequirement
        }, buildingCost);
        for (let res in retArr.Cost) {
            if (['PionsToStay'].indexOf(res) !== -1)
                continue;
            let skillArr = rpgModel.getSkillsAffectingBuildingCost(res)
                , koef = 0;
            for (let index in skillArr) {
                let skillId = skillArr[index];
                if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                    continue;
                koef += rpgModel.playerSkills[skillId].Parameter / 100;
            }
            if (koef >= 90) {
                koef = 90;
            }
            retArr.Cost[res] = Math.ceil(retArr.Cost[res] * (100 - koef) / 100);
        }
        let timeToBuild = retArr.Time
            , skillArr = rpgModel.getSkillsAffectingBuildingSpeedIncrease()
            , speedKoef = 0;
        for (let index in skillArr) {
            let skillId = skillArr[index];
            if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                continue;
            speedKoef += rpgModel.playerSkills[skillId].Parameter / 100;
        }
        if (premiumModel.getPlayerPremiums()[premiumModel.ministerTasks.buildingFaster]) {
            speedKoef += premiumModel.getPlayerPremiums()[premiumModel.ministerTasks.buildingFaster].Percent;
        }
        if (staticDataModel.config.newbie && staticDataModel.config.newbie.buildSpeedMaxLvl >= playerModel.getData().Level) {
            speedKoef += staticDataModel.config.newbie.buildSpeedCoefficient;
        }
        if (speedKoef > 85) {
            speedKoef = 85;
        }
        if (speedKoef > 0) {
            timeToBuild *= (100 - speedKoef) / 100;
        }
        let townHall = staticDataModel.buildings[Building.TOWN_HALL_ID]
            , townHallLevel = townModel.getData().Buildings[Building.TOWN_HALL_ID].Level;
        if (townHall.levels[townHallLevel] !== undefined) {
            timeToBuild = timeToBuild * townHall.levels[townHallLevel].Spec2 / 100;
        }
        retArr.Time = Math.ceil(timeToBuild);
        return retArr;
    }
    static __getBuildingDowngradeInfo(buildingId) {
        let buildingLevel = townModel.getData().Buildings[buildingId].Level - 1
            , buildingCost = staticDataModel.buildings[buildingId].levels[buildingLevel] || {}
            , retArr = $.extend(true, {}, buildingCost);
        for (let res in retArr.Cost) {
            if (['PionsToStay', 'food'].indexOf(res) !== -1)
                continue;
            let skillArr = rpgModel.getSkillsAffectingBuildingCost(res)
                , koef = 0;
            for (let index in skillArr) {
                let skillId = skillArr[index];
                if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                    continue;
                koef += rpgModel.playerSkills[skillId].Parameter / 100;
            }
            if (koef >= 90) {
                koef = 90;
            }
            retArr.Cost[res] = Math.ceil(retArr.Cost[res] * (100 - koef) / 100);
        }
        return retArr;
    }
    static __checkForBuildingUpgrade(id) {
        if (townModel.getData().CreatedType === 4 && id === 16) {
            return '';
        }
        let errorHandlers = i18nModel.getData().error.townBuildingUpgrade
            , upgradeInfo = ControlWindowBuildings.__getBuildingUpgradeInfo(id)
            , buildersPerLevel = upgradeInfo.PionsToStay;
        let requirementNameAndLevel = '';
        let buildingConstructionCount = townModel.getData().BuildingConstruction.length;
        if (buildingConstructionCount >= staticDataModel.config.defaultBuildingConstructionQueueSize) {
            return errorHandlers['slotBusy'];
        }
        let buildingLevel = ControlWindow.getBuildingLevelConsideringQueue(id);
        let req = false;
        for (let requirementBuildingId in upgradeInfo.Requirement) {
            requirementBuildingId = parseInt(requirementBuildingId);
            if (upgradeInfo.Requirement[requirementBuildingId] > ControlWindow.getBuildingLevel(requirementBuildingId)) {
                requirementNameAndLevel += i18nModel.getData().town.buildings[requirementBuildingId].name + '(' + upgradeInfo.Requirement[requirementBuildingId] + ')' + '</br>';
                req = true;
            }
        }
        if (req) {
            return errorHandlers['buildRequire'] + '</br></br>' + requirementNameAndLevel;
        }
        if (buildingLevel >= staticDataModel.buildings[id].maxLevel) {
            return errorHandlers['maxLevel'];
        }
        if (buildersPerLevel > townModel.getData().FreePeople && buildersPerLevel > 0) {
            return errorHandlers['freePeople'];
        }
        for (let upResource in staticDataModel.config.resources.nameToId) {
            if (parseInt(upgradeInfo.Cost[upResource]) > parseInt(playerModel.getData().Resources[upResource])) {
                return errorHandlers['resources'];
            }
        }
        return '';
    }
    static __getBuildingTooltip(id) {
        let upgradeInfo = ControlWindowBuildings.__getBuildingUpgradeInfo(id)
            , buildersPerLevel = upgradeInfo.PionsToStay
            , building = staticDataModel.buildings[id]
            , i18n = i18nModel.getData().townControl.controlWindows.buildings.tooltip
            , currentBuildingLevel = ControlWindow.getBuildingLevel(id)
            , buildingLevel = ControlWindow.getBuildingLevelConsideringQueue(id)
            , template = {
            'title': String.format(i18n.title, [building.name]),
            'description': building.description,
            'i18n': i18n,
            'level': String.format(i18n.levelLabel, [buildingLevel, building.maxLevel]),
            'progress': Math.round(100 * currentBuildingLevel / building.maxLevel),
            'progressWithConstructions': Math.round(100 * buildingLevel / building.maxLevel),
            'isMaxLevel': buildingLevel === building.maxLevel,
        };
        if (i18n.buildingBonus[id]) {
            if (buildingLevel > 0) {
                template.currentLevelBonus = '';
                if (i18n.buildingBonus[id][1]) {
                    let spec = building.levels[buildingLevel].Spec1;
                    switch (id) {
                        case 14:
                        case 15:
                        case 19:
                        case 20:
                            let base = building.levels[1].Spec1;
                            spec = Math.round((1 - spec / base) * 100);
                            break;
                    }
                    template.currentLevelBonus += String.format(i18n.buildingBonus[id][1], [spec]) + '<br>';
                }
                if (i18n.buildingBonus[id][2]) {
                    let spec = building.levels[buildingLevel].Spec2;
                    switch (id) {
                        case 1:
                            let base = building.levels[1].Spec2;
                            spec = Math.round((1 - spec / base) * 100);
                            break;
                    }
                    template.currentLevelBonus += String.format(i18n.buildingBonus[id][2], [spec]) + '<br>';
                }
                if (i18n.buildingBonus[id][3]) {
                    if (i18n.buildingBonus[id][3][buildingLevel]) {
                        template.currentLevelBonus += i18n.buildingBonus[id][3][buildingLevel];
                    }
                }
            }
            if (buildingLevel < building.maxLevel) {
                template.nextLevelBonus = '';
                if (i18n.buildingBonus[id][1]) {
                    let spec = building.levels[buildingLevel + 1].Spec1;
                    switch (id) {
                        case 14:
                        case 15:
                        case 19:
                        case 20:
                            let base = building.levels[1].Spec1;
                            spec = Math.round((1 - spec / base) * 100);
                            break;
                    }
                    template.nextLevelBonus += String.format(i18n.buildingBonus[id][1], [spec]) + '<br>';
                }
                if (i18n.buildingBonus[id][2]) {
                    let spec = building.levels[buildingLevel + 1].Spec2;
                    switch (id) {
                        case 1:
                            let base = building.levels[1].Spec2;
                            spec = Math.round((1 - spec / base) * 100);
                            break;
                    }
                    template.nextLevelBonus += String.format(i18n.buildingBonus[id][2], [spec]) + '<br>';
                }
                if (i18n.buildingBonus[id][3]) {
                    if (i18n.buildingBonus[id][3][buildingLevel + 1]) {
                        template.nextLevelBonus += i18n.buildingBonus[id][3][buildingLevel + 1];
                    }
                }
            }
        }
        if (buildingLevel < building.maxLevel) {
            template["people"] = buildersPerLevel;
            if (buildersPerLevel > townModel.getData().FreePeople && buildersPerLevel > 0) {
                template["peopleNotHave"] = true;
            }
            for (let upResource in staticDataModel.config.resources.nameToId) {
                if (parseInt(upgradeInfo.Cost[upResource]) > 0) {
                    template[upResource] = Util.formatNumber(parseInt(upgradeInfo.Cost[upResource]));
                    if (parseInt(upgradeInfo.Cost[upResource]) > parseInt(playerModel.getData().Resources[upResource])) {
                        template[upResource + "NotHave"] = true;
                    }
                }
            }
            template['buildingTime'] = Util.secondsToString(upgradeInfo.Time, i18nModel.getTimeFormat());
        }
        return uiUtils.applyTemplate('ControlWindowBuildingsTooltip', template);
    }
    static __checkForBuildingDowngrade(id) {
        if (townModel.getData().CreatedType === 4 && id === 16) {
            return '';
        }
        let building = staticDataModel.buildings[id]
            , downgradeInfo = ControlWindowBuildings.__getBuildingDowngradeInfo(id)
            , errorHandlers = i18nModel.getData().error.townBuildingUpgrade
            , buildingConstructionCount = townModel.getData().BuildingConstruction.length;
        if (buildingConstructionCount >= staticDataModel.config.defaultBuildingConstructionQueueSize) {
            return errorHandlers['slotBusy'];
        }
        for (let res in downgradeInfo.Cost) {
            if (playerModel.getData().Resources[res] < downgradeInfo.Cost[res]) {
                return errorHandlers['resources'];
            }
        }
        if (building.minLevel >= ControlWindow.getBuildingLevelConsideringQueue(id)) {
            return errorHandlers['minLevel'];
        }
        return '';
    }
    __updateBuildingEvents() {
        this.__buildingsPane.find('.building > .img, .building > .name').off().tooltip({
            showURL: false,
            delay: 0,
            bodyHandler: function() {
                let id = parseInt($(this).parents('.building').attr('building-id'));
                return ControlWindowBuildings.__getBuildingTooltip(id);
            },
            left: 40,
            top: 0,
            track: true,
            extraClass: 'building-tooltip',
        });
        this.__buildingsPane.find('.building .level-up:not(.disabled)').off().on('click', (e)=>{
                this.__onBuildingLevelUpClick(e);
            }
        );
        this.__buildingsPane.find('.building .level-down:not(.disabled)').off().on('click', (e)=>{
                this.__onBuildingLevelDownClick(e);
            }
        );
        this.__buildingsPane.find('.building .buy-resources').off().tooltip({
            showURL: false,
            delay: 0,
            bodyHandler: function() {
                return i18nModel.getData().town.townCenter.buyResourcesButtonTooltip;
            }
        }).on('click', (e)=>{
                this.__onBuyResourcesButtonClick(e);
            }
        );
    }
    __onBuyResourcesButtonClick() {
        $.tooltip.close();
        this.__mainControl.close();
        premiumController.showPremiumsWindow('resource-shop', ()=>{
                this.__mainControl.show(this.__mainControl.getLeftWindowType(), this.__mainControl.getRightWindowType(), this.__mainControl.getLeftWindow().getTab(), this.__mainControl.getRightWindow().getTab(), );
            }
        );
    }
    __updateBuildingContent(buildingId) {
        let i18nData = i18nModel.getData().townControl.controlWindows.buildings
            , buildingConstructions = townModel.getData().BuildingConstruction
            , level = ControlWindow.getBuildingLevelConsideringQueue(buildingId)
            , templateData = {
            'id': buildingId,
            'type': ControlWindow.getBuildingType(buildingId),
            'level': level,
            'imgSrc': staticDataUrl + 'resource/town/buildings/' + buildingId + '/' + buildingId + '-1-thumbnail.png',
            'name': i18nModel.getData().town.buildings[buildingId].name,
        };
        if (buildingConstructions.length > 0 && buildingConstructions[0].BuildingId === buildingId) {
            templateData['progress'] = (Util.getCurrentTimestamp() - buildingConstructions[0].StartTime) / buildingConstructions[0].BuildTime;
        }
        if (level >= ControlWindow.getMaxBuildingLevel(buildingId)) {
            templateData['maxLevel'] = i18nData.max;
        } else {
            templateData['nextLevel'] = String.format(i18nData.level, [level + 1])
        }
        this.__buildingsDiv[buildingId] = $(uiUtils.applyTemplate('ControlWindowBuildingsItem', templateData));
        this.__buildingsPane.append(this.__buildingsDiv[buildingId]);
        this.__updateButtons(buildingId);
    }
    __updateContent() {
        this.__buildingsPane.empty();
        this.__buildingsDiv = {};
        let openedTabType = 0;
        for (let tabTypeId in ControlWindowBuildings.tabs) {
            if (ControlWindowBuildings.tabs[tabTypeId] === this.__activeTab) {
                openedTabType = parseInt(tabTypeId);
                break;
            }
        }
        for (let buildingId in townModel.getData().Buildings) {
            if (townModel.getData().Buildings.hasOwnProperty(buildingId)) {
                buildingId = parseInt(buildingId);
                if (ControlWindowBuildings.excludedBuildingId.indexOf(buildingId) !== -1) {
                    continue;
                }
                if (ControlWindow.getBuildingType(buildingId) === openedTabType) {
                    this.__updateBuildingContent(buildingId);
                }
            }
        }
        this.__updateBuildingEvents();
    }
    __updateButtons(id) {
        let errorMessage = {
            upgrade: ControlWindowBuildings.__checkForBuildingUpgrade(id),
            downgrade: ControlWindowBuildings.__checkForBuildingDowngrade(id)
        }
            , curBuilding = this.__buildingsDiv[id];
        if (curBuilding === undefined)
            return;
        let buttonLevelUp = curBuilding.find('.buttons .level-up')
            , buttonLevelDown = curBuilding.find('.buttons .level-down')
            , buttonBuyResources = curBuilding.find('.buy-resources')
            , message = curBuilding.find('.message');
        if (errorMessage.upgrade !== '') {
            buttonLevelUp.addClass('disabled');
            if (errorMessage.upgrade === 'squareOnlyOneLevel') {
                buttonLevelDown.addClass('disabled');
                return;
            }
            message.addClass('visible');
            message.html(errorMessage.upgrade);
            if (errorMessage.upgrade === i18nModel.getData().error.townBuildingUpgrade.resources) {
                buttonBuyResources.removeClass('not-display');
                message.addClass('with-button');
            } else {
                buttonBuyResources.addClass('not-display');
                message.removeClass('with-button');
            }
        } else {
            message.removeClass('visible');
            buttonLevelUp.removeClass('disabled');
            buttonBuyResources.addClass('not-display');
        }
        if (errorMessage.downgrade !== '') {
            buttonLevelDown.addClass('disabled');
        } else {
            buttonLevelDown.removeClass('disabled');
        }
    }
}
ControlWindowBuildings.excludedBuildingId = [3, 8, 9, 13, 17, 18];
ControlWindowBuildings.tabs = {
    1: 'buildings-main',
    2: 'buildings-economic',
    3: 'buildings-military'
};
ControlWindowBuildings.buildingImagesLevelsCount = {
    default: 6,
    11: 4,
    12: 3,
    13: 5,
    15: 5,
    19: 3,
    20: 5
};

class ControlWindowCreateArmy extends ControlWindow {
    constructor(control) {
        let i18n = i18nModel.getData().townControl.controlWindows.createArmy;
        super(i18n.title, {}, TownControl.WINDOW_PLACE_LEFT, control);
        this.__init();
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowCreateArmy', {
            i18n: i18nModel.getData().townControl.controlWindows.createArmy
        }));
        this.__mainDiv = this.__divBody.children('#control-window-create-army');
        this.__troopsPane = this.__mainDiv.find('.troops-pane');
        this.__armyNameInput = this.__mainDiv.find('.army-name input');
        this.__createButton = this.__divBody.find('.create-army-button');
        this.__disbandButton = this.__divBody.find('.disband-army-button');
        this.__emptyButton = this.__mainDiv.find('.empty-button');
        this.__updateContent();
    }
    __onShowWindow() {
        if (this.__scrollBar) {
            this.__scrollBar.updateScrollBar();
        }
    }
    __createTroopItem(troopId) {
        let troopAmount = townModel.getData().Troops[troopId]
            , templateData = {
            'id': troopId,
            'amount': Util.formatNumber(troopAmount),
        };
        return $(uiUtils.applyTemplate('ControlWindowCreateArmyItem', templateData));
    }
    __onMinusButtonClick(e) {
        let curButton = $(e.currentTarget)
            , curTroop = curButton.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input')
            , inputVal = parseInt(inputDiv.val()) || 0
            , maxVal = townModel.getData().Troops[troopId] || 0;
        inputVal = Math.max(0, Math.min(--inputVal, maxVal));
        inputDiv.val(inputVal);
    }
    __onPlusButtonClick(e) {
        let curButton = $(e.currentTarget)
            , curTroop = curButton.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input')
            , maxVal = townModel.getData().Troops[troopId] || 0
            , inputVal = parseInt(inputDiv.val()) || 0;
        inputVal = Math.max(0, Math.min(++inputVal, maxVal));
        inputDiv.val(inputVal);
    }
    __onMinButtonClick(e) {
        let curButton = $(e.currentTarget)
            , curTroop = curButton.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input');
        inputDiv.val(0);
    }
    __onMaxButtonClick(e) {
        let curButton = $(e.currentTarget)
            , curTroop = curButton.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input')
            , maxVal = townModel.getData().Troops[troopId] || 0;
        inputDiv.val(maxVal);
    }
    __onInputChanged(e) {
        let curInput = $(e.currentTarget)
            , curTroop = curInput.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputVal = parseInt(curInput.val(), 10) || 0
            , maxVal = townModel.getData().Troops[troopId] || 0;
        inputVal = Math.max(0, Math.min(maxVal, inputVal));
        curInput.val(inputVal);
    }
    __onArmyNameChange(e) {
        let curInput = $(e.currentTarget)
            , inputVal = curInput.val();
        if (inputVal.length > 14) {
            inputVal = inputVal.substr(0, 14);
            curInput.val(inputVal);
        }
    }
    __updateTroopsEvents() {
        let i18n = i18nModel.getData().townControl.controlWindows.createArmy;
        this.__troopsPane.find('.troop .img').off().tooltip({
            delay: 0,
            left: 40,
            top: 0,
            showURL: false,
            track: true,
            bodyHandler: function() {
                let id = parseInt($(this).parents('.troop').attr('troop-id'));
                return staticDataModel.troops[id].getTooltipTemplate();
            },
            extraClass: 'troop-tooltip'
        });
        this.__troopsPane.find('.troop  .minus-button').off().on('click', (e)=>{
                this.__onMinusButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop  .plus-button').off().on('click', (e)=>{
                this.__onPlusButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop  .min-button').off().on('click', (e)=>{
                this.__onMinButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop  .max-button').off().on('click', (e)=>{
                this.__onMaxButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop .input > input').off().on('keyup', (e)=>{
                this.__onInputChanged(e);
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        );
        this.__createButton.off().on('click', (e)=>{
                this.__onCreateButtonClick(e);
            }
        );
        this.__disbandButton.off().on('click', (e)=>{
                this.__onDisbandButtonClick(e);
            }
        );
        this.__armyNameInput.off().on('keyup', (e)=>{
                this.__onArmyNameChange(e);
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        ).on('focusin', (e)=>{
                let armyNameInput = $(e.currentTarget)
                    , armyName = armyNameInput.val().trim();
                if (armyName === i18n.armyNamePlaceholder) {
                    armyNameInput.val('');
                }
            }
        ).on('focusout', (e)=>{
                let armyNameInput = $(e.currentTarget)
                    , armyName = armyNameInput.val().trim();
                if (armyName === '') {
                    armyNameInput.val(i18n.armyNamePlaceholder);
                }
            }
        );
        this.__emptyButton.off().on('click', (e)=>{
                this.__mainControl.switchPanel(ControlWindow.WINDOW_TYPE_TROOPS);
            }
        );
    }
    __onDisbandButtonClick(e) {
        if (this.__disbandButton.hasClass('disabled')) {
            return;
        }
        this.__disbandButton.addClass('disabled')
        let troops = this.__getSelectedTroops();
        uiWindow.showConfirm({
            title: i18nModel.getData().confirmText.dismissFreeTroops,
            ok: ()=>{
                townModel.troopsDismiss(townModel.getData().Id, troops, (data)=>{
                        this.__disbandButton.removeClass('disabled');
                        this.__updateContent();
                    }
                );
            }
            ,
            no: ()=>{
                this.__disbandButton.removeClass('disabled');
            }
        });
    }
    __getSelectedTroops() {
        let troopsDiv = this.__troopsPane.find('.troop')
            , selectedTroops = {};
        troopsDiv.each(function() {
            let troopDiv = $(this)
                , troopId = parseInt(troopDiv.attr('troop-id'))
                , inputDiv = troopDiv.find('.input input')
                , troopAmount = parseInt(inputDiv.val());
            if (troopAmount > 0) {
                selectedTroops[troopId] = troopAmount;
            }
        });
        return selectedTroops;
    }
    __onCreateButtonClick(e) {
        if (this.__createButton.hasClass('disabled')) {
            return;
        }
        this.__createButton.addClass('disabled');
        let i18n = i18nModel.getData().townControl.controlWindows.createArmy
            , armyName = this.__armyNameInput.val()
            , townId = townModel.getData().Id
            , selectedTroops = this.__getSelectedTroops();
        if (armyName === "") {
            armyName = i18n.armyNamePlaceholder;
        }
        if ($.isEmptyObject(selectedTroops)) {
            this.__createButton.removeClass('disabled');
            return;
        }
        armyModel.createArmy(armyName, townId, selectedTroops, (data)=>{
                this.__createButton.removeClass('disabled');
                if (data.constructor === String && /^error:/.test(data)) {
                    if (data === 'error:armyNameError') {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data), 5000);
                    } else {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data));
                    }
                    return;
                }
                if (!data) {
                    messageController.showSystemMessage(i18nModel.getData().error.squareArmyManagement.createError);
                    return;
                }
                if (playerItemsModel.getData()[playerItemsModel.flagItems.PLAYER_ITEM_CREATED_ARMY] !== 1) {
                    playerItemsModel.setFlagItem(playerItemsModel.flagItems.PLAYER_ITEM_CREATED_ARMY, function() {
                        questController.checkQuestsToBeDone();
                    });
                    methodModel.getHandler('onArmyCreate')(data);
                }
            }
        );
    }
    __onCloseWindow() {}
    __updateContent() {
        let troops = townModel.getData().Troops
            , expel = [9, 10, 12, 13]
            , scrollY = 0;
        if (this.__scrollBar !== undefined) {
            scrollY = this.__scrollBar.getScrollY();
        }
        this.__troopsPane.empty();
        this.__mainDiv.removeClass('empty');
        for (let troopId in troops) {
            if (troops.hasOwnProperty(troopId) && troops[troopId] > 0 && $.inArray(parseInt(troopId), expel) < 0) {
                let troopDiv = this.__createTroopItem(troopId);
                if (troopDiv) {
                    this.__troopsPane.append(troopDiv);
                }
            }
        }
        if (this.__troopsPane.is(':empty')) {
            this.__mainDiv.addClass('empty');
        }
        this.__updateTroopsEvents();
        if (this.__scrollBar === undefined) {
            this.__scrollBar = new ScrollBar(this.__troopsPane,false,13);
        } else {
            this.__scrollBar.updateScrollBar();
        }
        this.__scrollBar.setScrollY(scrollY);
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
}

class ControlWindowEconimic extends ControlWindow {
    constructor(control) {
        super('', {}, TownControl.WINDOW_PLACE_RIGHT, control);
        this.__init();
    }
    __onTabChange() {
        this.__updateContent();
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
    __init() {
        this.__updateContent();
    }
    __updateContent() {
        let playerResources = playerModel.getData().Resources
            , resources = staticDataModel.config.resources.nameToId
            , i18n = i18nModel.getData().townControl.controlWindows.economic
            , template = {
            'curTown': {},
            'allTowns': {},
            'statistics': ControlWindowEconimic.getCurrentTownStatistics(),
            'i18n': i18n,
            'curTownStorage': [],
            'allTownsStorage': [],
        };
        this.__divBody.empty();
        for (let resourceName in resources) {
            if (resources.hasOwnProperty(resourceName)) {
                let storageBuilding = 0;
                switch (resourceName) {
                    case 'wood':
                    case 'iron':
                    case 'stone':
                        storageBuilding = 4;
                        break;
                    case 'gold':
                        storageBuilding = 10;
                        break;
                }
                let mining = ControlWindowEconimic.getCurrentTownResourceIncrease(resourceName);
                template.curTown[resourceName] = {
                    addIncrease: Util.formatNumber(mining.addIncrease),
                    decrease: Util.formatNumber(mining.decrease),
                    increase: Util.formatNumber(mining.increase),
                    summary: String.format(i18n.perHour, [Util.formatNumber(mining.summary)]),
                    buildingInfo: mining.buildingInfo,
                };
                let allTownsSummary = playerResources[resourceName + 'Inc'] + playerResources[resourceName + 'Dec'];
                allTownsSummary = allTownsSummary > 0 ? Util.formatNumber(allTownsSummary) : '<span class="neg">' + Util.formatNumber(allTownsSummary) + '</span>';
                template.allTowns[resourceName] = {
                    summary: String.format(i18n.perHour, [allTownsSummary]),
                    progress: 100 * (playerResources[resourceName] / playerResources[resourceName + 'Max']),
                    max: Util.resourceToHumanNumber(playerResources[resourceName + 'Max']),
                    value: Util.formatNumber(playerResources[resourceName]),
                };
            }
        }
        let curTownStorage = ControlWindowEconimic.getCurrentTownStorage();
        for (let index in curTownStorage) {
            template.curTownStorage[index] = {
                name: curTownStorage[index].name,
                value: Util.formatNumber(curTownStorage[index].value),
            };
        }
        template.allTownsStorage.push({
            'name': i18n.allTownsStorages[Building.BARN_ID],
            'value': Util.formatNumber(playerResources['woodMax']),
        });
        template.allTownsStorage.push({
            'name': i18n.allTownsStorages[Building.TREASURE_ID],
            'value': Util.formatNumber(playerResources['goldMax']),
        });
        template.allTownsStorage.push({
            'name': i18n.allTownsStorages[Building.REPOSITORY_ID],
            'value': Util.formatNumber(playerResources['woodRes']),
        });
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowEconomic', template));
        this.__rightBlockResources = this.__divBody.find('.resource-block .right-block .resource');
        this.__subscribeId = playerModel.subscribe('resourceIncrease', ()=>{
                this.__onResourceIncreaseEvent();
            }
        );
    }
    __onResourceIncreaseEvent() {
        let playerResources = playerModel.getData().Resources;
        this.__rightBlockResources.each(function() {
            let curRes = $(this)
                , resourceName = curRes.attr('resource')
                , progressBar = curRes.find('.progress-bar > .value')
                , value = curRes.find('.amount');
            progressBar.css({
                width: (100 * playerResources[resourceName] / playerResources[resourceName + 'Max']) + '%'
            });
            value.html(Util.formatNumber(playerResources[resourceName]));
        });
    }
    __onCloseWindow() {
        playerModel.unsubscribe(this.__subscribeId);
        super.__onCloseWindow();
    }
    static getCurrentTownStorage() {
        let i18n = i18nModel.getData().townControl.controlWindows.economic
            , retArr = []
            , buildings = staticDataModel.buildings;
        retArr.push({
            name: i18n.curTownStorages[Building.BARN_ID],
            value: buildings[Building.BARN_ID].levels[ControlWindow.getBuildingLevel(Building.BARN_ID)].Spec1,
        });
        retArr.push({
            name: i18n.curTownStorages[Building.TREASURE_ID],
            value: buildings[Building.TREASURE_ID].levels[ControlWindow.getBuildingLevel(Building.TREASURE_ID)].Spec1,
        });
        let repositoryLevel = ControlWindow.getBuildingLevel(Building.REPOSITORY_ID)
            , baseValue = repositoryLevel > 0 ? buildings[Building.REPOSITORY_ID].levels[repositoryLevel].Spec1 : 0
            , affectingSkills = rpgModel.getSkillsAffectingRepositoryLimit()
            , playerSkills = rpgModel.playerSkills
            , increment = 100;
        for (let index in affectingSkills) {
            let skillId = affectingSkills[index];
            if (!playerSkills[skillId] || playerSkills[skillId].Level === 0)
                continue;
            increment += playerSkills[skillId].Parameter / 100;
        }
        retArr.push({
            name: i18n.curTownStorages[Building.REPOSITORY_ID],
            value: Math.ceil(baseValue * increment / 100),
        });
        return retArr;
    }
    static getCurrentTownResourceIncrease(resourceName) {
        let i18n = i18nModel.getData().townControl.controlWindows.economic
            , retArr = {
            'increase': 0,
            'addIncrease': 0,
            'decrease': 0,
            'summary': 0,
            'buildingInfo': '',
        }
            , buildingId = 0;
        switch (resourceName) {
            case 'wood':
                buildingId = 6;
                break;
            case 'iron':
                buildingId = 7;
                break;
            case 'stone':
                buildingId = 5;
                break;
            case 'gold':
                buildingId = 1;
                break;
        }
        let buildingLevel = ControlWindow.getBuildingLevel(buildingId);
        retArr.buildingInfo = String.format(i18n.buildingInfo, [i18nModel.getBuildingName(buildingId), buildingLevel]);
        retArr.increase = staticDataModel.buildings[buildingId].levels[buildingLevel].Spec1;
        retArr.decrease = 0;
        let affectingSkillsPercent = rpgModel.getSkillsAffectingResourcePerHourPercent()
            , affectingSkills = rpgModel.getSkillsAffectingResourcePerHour()
            , prem = premiumModel.getPlayerPremiums()
            , playerSkills = rpgModel.playerSkills
            , incrementPercent = 0
            , increment = 0;
        for (let index in affectingSkills[resourceName]) {
            if (!affectingSkills[resourceName].hasOwnProperty(index))
                continue;
            if (playerSkills[affectingSkills[resourceName][index]]) {
                increment += playerSkills[affectingSkills[resourceName][index]].Parameter;
            }
        }
        for (let index in affectingSkillsPercent[resourceName]) {
            if (!affectingSkillsPercent[resourceName].hasOwnProperty(index))
                continue;
            if (playerSkills[affectingSkillsPercent[resourceName][index]]) {
                incrementPercent += playerSkills[affectingSkillsPercent[resourceName][index]].Parameter / 100;
            }
        }
        if (prem[premiumModel.ministerTasks.fasterGoldGathering]) {
            incrementPercent += prem[premiumModel.ministerTasks.fasterGoldGathering].Percent;
        }
        if (staticDataModel.config.newbie && staticDataModel.config.newbie.miningSpeedMaxLvl >= playerModel.getData().Level) {
            incrementPercent += staticDataModel.config.newbie.miningSpeedCoefficient;
        }
        retArr.addIncrease = Math.ceil(retArr.increase * incrementPercent / 100) + increment;
        retArr.summary = retArr.increase + retArr.addIncrease + retArr.decrease;
        return retArr;
    }
    static getCurrentTownStatistics() {
        let i18n = i18nModel.getData().townControl.controlWindows.economic
            , retArr = []
            , townBuildings = townModel.getData().Buildings
            , buildings = staticDataModel.buildings;
        let economicBuildings = [5, 6, 7, 1]
            , maxMining = 0
            , townMining = 0;
        for (let index in economicBuildings) {
            let buildingId = economicBuildings[index]
                , building = buildings[buildingId];
            maxMining += building.levels[building.maxLevel].Spec1;
            townMining += building.levels[townBuildings[buildingId].Level].Spec1;
        }
        let economicValue = Math.round(100 * townMining / maxMining);
        retArr.push({
            name: i18n.economicValue,
            value: economicValue < 1 ? ' < 1%' : economicValue + '%',
        });
        let townLevels = 0
            , maxLevels = 0;
        for (let buildingId in buildings) {
            if (buildings.hasOwnProperty(buildingId) && townBuildings.hasOwnProperty(buildingId)) {
                let building = buildings[buildingId]
                    , townBuilding = townBuildings[buildingId];
                maxLevels += building.maxLevel;
                townLevels += townBuilding.Level;
            }
        }
        economicValue = Math.round(100 * townLevels / maxLevels);
        retArr.push({
            name: i18n.townRise,
            value: economicValue < 1 ? ' < 1%' : economicValue + '%',
        });
        let resources = staticDataModel.config.resources.nameToId
            , playerResources = playerModel.getData().Resources
            , curTownMining = 0
            , allTownsMining = 0;
        for (let resourceName in resources) {
            let mining = ControlWindowEconimic.getCurrentTownResourceIncrease(resourceName);
            curTownMining += mining['summary'];
            allTownsMining += playerResources[resourceName + 'Inc'] + playerResources[resourceName + 'Dec'];
        }
        economicValue = Math.round(100 * curTownMining / allTownsMining);
        retArr.push({
            name: i18n.economicPercent,
            value: economicValue < 1 ? ' < 1%' : economicValue + '%',
        });
        return retArr;
    }
}

class ControlWindowEditArmy extends ControlWindow {
    constructor(control, armyEditId) {
        let i18n = i18nModel.getData().townControl.controlWindows.editArmy;
        super(i18n.title, {}, TownControl.WINDOW_PLACE_LEFT, control);
        this.__armyEditId = armyEditId;
        this.__init();
    }
    getEditArmyId() {
        return this.__armyEditId;
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowEditArmy', {
            i18n: i18nModel.getData().townControl.controlWindows.editArmy
        }));
        this.__mainDiv = this.__divBody.children('#control-window-edit-army');
        this.__troopsPane = this.__mainDiv.find('.troops-pane');
        this.__armyNameInput = this.__mainDiv.find('.army-name input');
        this.__saveButton = this.__divBody.find('.save-army-button');
        this.__cancelButton = this.__divBody.find('.cancel-army-button');
        this.__updateContent();
    }
    __onShowWindow() {
        if (this.__scrollBar) {
            this.__scrollBar.updateScrollBar();
        }
    }
    __createTroopItem(troopId) {
        let townAmount = townModel.getData().Troops[troopId]
            , army = townModel.getData().Armies[this.getEditArmyId()];
        if (army === undefined)
            return false;
        let troops = army.Troops
            , armyAmount = troops[troopId] || 0
            , templateData = {
            'id': troopId,
            'maxAmount': Util.formatNumber(armyAmount + townAmount),
            'amount': Util.formatNumber(armyAmount),
        };
        return $(uiUtils.applyTemplate('ControlWindowEditArmyItem', templateData));
    }
    __onMinusButtonClick(e) {
        let curButton = $(e.currentTarget)
            , curTroop = curButton.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input')
            , inputVal = parseInt(inputDiv.val()) || 0
            , army = townModel.getData().Armies[this.getEditArmyId()];
        if (army === undefined)
            return false;
        let troops = army.Troops
            , armyAmount = troops[troopId] || 0
            , maxVal = armyAmount + (townModel.getData().Troops[troopId] || 0);
        inputVal = Math.max(0, Math.min(--inputVal, maxVal));
        inputDiv.val(inputVal);
    }
    __onPlusButtonClick(e) {
        let curButton = $(e.currentTarget)
            , curTroop = curButton.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input')
            , army = townModel.getData().Armies[this.getEditArmyId()];
        if (army === undefined)
            return false;
        let troops = army.Troops
            , armyAmount = troops[troopId] || 0
            , maxVal = armyAmount + (townModel.getData().Troops[troopId] || 0)
            , inputVal = parseInt(inputDiv.val()) || 0;
        inputVal = Math.max(0, Math.min(++inputVal, maxVal));
        inputDiv.val(inputVal);
    }
    __onMinButtonClick(e) {
        let curButton = $(e.currentTarget)
            , curTroop = curButton.parents('.troop')
            , inputDiv = curTroop.find('input');
        inputDiv.val(0);
    }
    __onMaxButtonClick(e) {
        let curButton = $(e.currentTarget)
            , curTroop = curButton.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input')
            , army = townModel.getData().Armies[this.getEditArmyId()];
        if (army === undefined)
            return false;
        let troops = army.Troops
            , armyAmount = troops[troopId] || 0
            , maxVal = armyAmount + (townModel.getData().Troops[troopId] || 0);
        inputDiv.val(maxVal);
    }
    __onInputChanged(e) {
        let curInput = $(e.currentTarget)
            , curTroop = curInput.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputVal = parseInt(curInput.val(), 10) || 0
            , army = townModel.getData().Armies[this.getEditArmyId()];
        if (army === undefined)
            return false;
        let troops = army.Troops
            , armyAmount = troops[troopId] || 0
            , maxVal = armyAmount + (townModel.getData().Troops[troopId] || 0);
        inputVal = Math.max(0, Math.min(maxVal, inputVal));
        curInput.val(inputVal);
    }
    __onArmyNameChange(e) {
        let curInput = $(e.currentTarget)
            , inputVal = curInput.val();
        if (inputVal.length > 14) {
            inputVal = inputVal.substr(0, 14);
            curInput.val(inputVal);
        }
    }
    __updateTroopsEvents() {
        let i18n = i18nModel.getData().townControl.controlWindows.editArmy;
        this.__troopsPane.find('.troop .img').off().tooltip({
            delay: 0,
            left: 40,
            top: 0,
            showURL: false,
            track: true,
            bodyHandler: function() {
                let id = parseInt($(this).parents('.troop').attr('troop-id'));
                return staticDataModel.troops[id].getTooltipTemplate();
            },
            extraClass: 'troop-tooltip'
        });
        this.__troopsPane.find('.troop  .minus-button').off().on('click', (e)=>{
                this.__onMinusButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop  .plus-button').off().on('click', (e)=>{
                this.__onPlusButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop  .min-button').off().on('click', (e)=>{
                this.__onMinButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop  .max-button').off().on('click', (e)=>{
                this.__onMaxButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop .input > input').off().on('keyup', (e)=>{
                this.__onInputChange(e);
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        );
        this.__saveButton.off().on('click', (e)=>{
                this.__onSaveButtonClick(e);
            }
        );
        this.__cancelButton.off().on('click', (e)=>{
                this.__onCancelButtonClick(e);
            }
        );
        this.__armyNameInput.off().on('keyup', (e)=>{
                this.__onArmyNameChange(e);
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        ).on('focusin', (e)=>{
                let armyNameInput = $(e.currentTarget)
                    , armyName = armyNameInput.val().trim();
                if (armyName === i18n.armyNamePlaceholder) {
                    armyNameInput.val('');
                }
            }
        ).on('focusout', (e)=>{
                let armyNameInput = $(e.currentTarget)
                    , armyName = armyNameInput.val().trim();
                if (armyName === '') {
                    armyNameInput.val(i18n.armyNamePlaceholder);
                }
            }
        );
    }
    __onCancelButtonClick(e) {
        this.__mainControl.switchPanel(this.__mainControl.getLastLeftWindowType(), ControlWindowEditArmy.WINDOW_TYPE_ARMIES);
    }
    __getSelectedTroops() {
        let troopsDiv = this.__troopsPane.find('.troop')
            , selectedTroops = {};
        troopsDiv.each(function() {
            let troopDiv = $(this)
                , troopId = parseInt(troopDiv.attr('troop-id'))
                , inputDiv = troopDiv.find('.input input')
                , troopAmount = parseInt(inputDiv.val());
            if (troopAmount > 0) {
                selectedTroops[troopId] = troopAmount;
            }
        });
        return selectedTroops;
    }
    __onSaveButtonClick(e) {
        if (this.__saveButton.hasClass('disabled')) {
            return;
        }
        this.__saveButton.addClass('disabled');
        let i18n = i18nModel.getData().townControl.controlWindows.editArmy
            , armyName = this.__armyNameInput.val()
            , townId = townModel.getData().Id
            , armyId = this.getEditArmyId()
            , selectedTroops = this.__getSelectedTroops();
        if (armyName === "") {
            armyName = i18n.armyNamePlaceholder;
        }
        if ($.isEmptyObject(selectedTroops)) {
            this.__saveButton.removeClass('disabled');
            return;
        }
        armyModel.editArmy(armyId, armyName, townId, selectedTroops, (data)=>{
                this.__saveButton.removeClass('disabled');
                if (data && data.constructor === String && /^error:/.test(data)) {
                    if (data === 'error:armyNameError') {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data), 5000);
                    } else {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data));
                    }
                    return;
                }
                this.__mainControl.switchPanel(this.__mainControl.getLastLeftWindowType(), ControlWindow.WINDOW_TYPE_ARMIES);
            }
        );
    }
    __onCloseWindow() {}
    __updateContent() {
        let armyId = this.getEditArmyId()
            , army = townModel.getData().Armies[armyId]
            , townTroops = townModel.getData().Troops
            , armyTroops = townModel.getData().Armies[armyId].Troops
            , expel = [9, 10, 12, 13]
            , scrollY = 0;
        if (this.__scrollBar !== undefined) {
            scrollY = this.__scrollBar.getScrollY();
        }
        this.__troopsPane.empty();
        for (let troopId in staticDataModel.troops) {
            if (staticDataModel.troops.hasOwnProperty(troopId) && (townTroops[troopId] > 0 || armyTroops[troopId] > 0) && $.inArray(parseInt(troopId), expel) < 0) {
                let troopDiv = this.__createTroopItem(troopId);
                if (troopDiv) {
                    this.__troopsPane.append(troopDiv);
                }
            }
        }
        this.__armyNameInput.val(army.Name);
        this.__updateTroopsEvents();
        if (this.__scrollBar === undefined) {
            this.__scrollBar = new ScrollBar(this.__troopsPane,false,13);
        } else {
            this.__scrollBar.updateScrollBar();
        }
        this.__scrollBar.setScrollY(scrollY);
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
    static setArmyId(armyId) {
        ControlWindowEditArmy.armyId = armyId;
    }
}
ControlWindowEditArmy.armyId = 0;

class ControlWindowRecruiting extends ControlWindow {
    constructor(control) {
        let i18n = i18nModel.getData().townControl.controlWindows.recruiting;
        super(i18n.title, {}, TownControl.WINDOW_PLACE_RIGHT, control);
        this.__updateContentDelayed = false;
        this.__updateContentBlocked = false;
        this.__init();
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowRecruiting', {
            i18n: i18nModel.getData().townControl.controlWindows.recruiting
        }));
        this.__mainDiv = this.__divBody.children('#control-window-recruiting');
        this.__recruitingPane = this.__mainDiv.find('.recruiting-pane');
        this.__emptyButton = this.__mainDiv.find('.empty-button');
        this.__updateContent();
    }
    __onShowWindow() {
        this.__scrollBar.updateScrollBar();
    }
    __getRecruitingListByQueue() {
        let recruitingList = townModel.getData().RecruitingList
            , result = {};
        for (let recruitingId in recruitingList) {
            result[recruitingList[recruitingId].Queue] = recruitingList[recruitingId];
        }
        return result;
    }
    __createRecruitItem(queue, recruiting=false) {
        recruiting = recruiting || this.__getRecruitingListByQueue();
        if (recruiting[queue] === undefined)
            return false;
        let i18nData = i18nModel.getData().townControl.controlWindows.recruiting
            , recruit = recruiting[queue]
            , troopId = recruit.TroopId
            , now = Util.getCurrentTimestamp()
            , startTime = recruiting[1].StartTime;
        for (let recruitQueue in recruiting) {
            recruitQueue = parseInt(recruitQueue);
            if (recruitQueue === queue)
                break;
            startTime += recruiting[recruitQueue].RecruitingTime * recruiting[recruitQueue].Amount;
        }
        let finishTime = startTime + recruit.RecruitingTime * recruit.Amount
            , elapsedAmount = recruit.Amount
            , elapsedTime = recruit.Queue > 1 ? recruit.RecruitingTime : (startTime + recruit.RecruitingTime > now ? (startTime + recruit.RecruitingTime - now) % recruit.RecruitingTime : 0)
            , progress = 100 * (1 - elapsedTime / recruit.RecruitingTime);
        let templateData = {
            'id': troopId,
            'queue': recruit.Queue,
            'timeElapsed': Util.secondsToString(elapsedTime, i18nModel.getTimeFormat()),
            'timeFinish': Util.timestampToDateTimeString(finishTime, i18nModel.getDateTimeFormat(), {
                showDateForAnotherDay: true,
                currentTime: now,
                timeFormat: i18nModel.getTimeFormat()
            }),
            'recruitName': String.format(i18nData.recruitName, [i18nModel.getTroopsName(troopId), elapsedAmount]),
            'i18n': i18nData,
            'progress': progress,
        };
        return $(uiUtils.applyTemplate('ControlWindowRecruitingItem', templateData));
    }
    __updateRecruitingEvents() {
        this.__recruitingPane.find('.recruit > .cancel-button').off().on('click', (e)=>{
                this.__onCancelButtonClick(e);
            }
        );
        this.__emptyButton.off().on('click', (e)=>{
                this.__mainControl.switchPanel(ControlWindow.WINDOW_TYPE_TROOPS);
            }
        );
    }
    __onCountTick() {
        let recruitingList = this.__getRecruitingListByQueue();
        if (recruitingList[1] === undefined)
            return;
        let now = timingModel.getCurrentTime()
            , recruiting = recruitingList[1]
            , finishTime = recruiting.StartTime + recruiting.RecruitingTime
            , troopId = recruiting.TroopId
            , i18nData = i18nModel.getData().townControl.controlWindows.recruiting
            , recruitDiv = this.__recruitingPane.children('.recruit[queue="1"]');
        if (recruitDiv.length === 0)
            return;
        if (finishTime <= now) {
            if (recruiting.Amount === 1) {
                this.__stopTimer();
                this.__blockContentUpdate();
                recruitDiv.hide(200, ()=>{
                        this.__unblockContentUpdate();
                        this.__startTimer();
                    }
                );
            }
            return;
        }
        let elapsedTime = finishTime - now
            , progress = 100 * (1 - (elapsedTime - 1) / recruiting.RecruitingTime);
        recruitDiv.find('.name').html(String.format(i18nData.recruitName, [i18nModel.getTroopsName(troopId), recruiting.Amount])),
            recruitDiv.find('.time-elapsed .value').html($.secsToString(elapsedTime, i18nModel.getTimeFormat()));
        recruitDiv.find('.progress-bar .value').css({
            'width': progress + '%'
        });
    }
    __onCloseWindow() {
        this.__stopTimer();
    }
    __blockContentUpdate() {
        this.__updateContentBlocked = true;
    }
    __unblockContentUpdate() {
        this.__updateContentBlocked = false;
        if (this.__updateContentDelayed) {
            this.__updateContentDelayed = false;
            this.__updateContent();
        }
    }
    __onCancelButtonClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled')) {
            return false;
        }
        let recruitDiv = curButton.parent()
            , queue = parseInt(recruitDiv.attr('queue'))
            , troopId = parseInt(recruitDiv.attr('troop-id'))
            , recruit = this.__getRecruitingListByQueue()[queue];
        if (queue === 1) {
            this.__stopTimer();
        }
        this.__blockContentUpdate();
        Troop.cancelRecruiting(recruit.Id, (data)=>{
                messageController.addMessageToLog(String.format(i18nModel.getData().messages.system.recruitingCanceled, i18nModel.getTroopsNameInGenitivePlural(recruit.TroopId)), 'cancel');
                recruitDiv.slideUp({
                    done: ()=>{
                        recruitDiv.remove();
                        this.__unblockContentUpdate();
                    }
                    ,
                    duration: 350,
                });
            }
            , ()=>{
                messageController.showSystemMessage(String.format(i18nModel.getData().error.troopRecruiting.unableToCancelRecruiting, i18nModel.getTroopsName(recruit.TroopId)));
            }
        );
    }
    __updateContent() {
        if (this.__updateContentBlocked) {
            this.__updateContentDelayed = true;
            return;
        }
        let recruiting = this.__getRecruitingListByQueue()
            , scrollY = 0;
        if (this.__scrollBar !== undefined) {
            scrollY = this.__scrollBar.getScrollY();
        }
        this.__recruitingPane.empty();
        this.__mainDiv.removeClass('empty');
        for (let queue in recruiting) {
            if (recruiting.hasOwnProperty(queue)) {
                let recruitDiv = this.__createRecruitItem(parseInt(queue), recruiting);
                if (recruitDiv) {
                    this.__recruitingPane.append(recruitDiv);
                }
            }
        }
        if (this.__recruitingPane.is(':empty')) {
            this.__mainDiv.addClass('empty');
        }
        this.__updateRecruitingEvents();
        if (this.__scrollBar === undefined) {
            this.__scrollBar = new ScrollBar(this.__recruitingPane,380,13);
        } else {
            this.__scrollBar.updateScrollBar();
        }
        this.__scrollBar.setScrollY(scrollY);
        this.__startTimer();
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
    __startTimer() {
        Troop.subscribe('Recruiting', (now)=>{
                this.__onCountTick(now);
            }
        );
    }
    __stopTimer() {
        Troop.unsubscribe('Recruiting');
    }
}

class ControlWindowReinforcements extends ControlWindow {
    constructor(control) {
        super('', ControlWindowReinforcements.tabs, TownControl.WINDOW_PLACE_RIGHT, control);
        this.__init();
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowReinforcements', {
            i18n: i18nModel.getData().townControl.controlWindows.reinforcements
        }));
        this.__mainDiv = this.__divBody.children('#control-window-reinforcements');
        this.__reinforcementsPane = this.__mainDiv.find('.reinforcements-pane');
        this.__emptyButton = this.__mainDiv.find('.empty-button');
        this.setTab(ControlWindowReinforcements.tabs["1"]);
    }
    __onShowWindow() {
        if (this.__scrollBar) {
            this.__scrollBar.updateScrollBar();
        }
    }
    __createReinforcementItem(armyId) {
        let reinforcement = playerModel.getData().Reinforcements.my[armyId] || playerModel.getData().Reinforcements.other[armyId];
        if (reinforcement === undefined)
            return false;
        let i18n = i18nModel.getData().townControl.controlWindows.reinforcements
            , gameData = gameController.gameData;
        if (gameData.map[reinforcement.ftx] === undefined || gameData.map[reinforcement.ftx][reinforcement.fty] === undefined || gameData.map[reinforcement.ftx][reinforcement.fty].town === undefined || gameData.map[reinforcement.ttx] === undefined || gameData.map[reinforcement.ttx][reinforcement.tty] === undefined || gameData.map[reinforcement.ttx][reinforcement.tty].town === undefined) {
            return false;
        }
        let fromTown = gameData.map[reinforcement.ftx][reinforcement.fty].town
            , fromPlayer = gameData.players[fromTown.pid]
            , toTown = gameData.map[reinforcement.ttx][reinforcement.tty].town
            , toPlayer = gameData.players[toTown.pid]
            , myRoute = playerModel.getData().Id === fromTown.pid
            , armyTroops = reinforcement.troops
            , label = ""
            , troops = [];
        for (let troopId in armyTroops) {
            if (armyTroops[troopId] > 0) {
                troops.push({
                    i: troopId,
                    a: armyTroops[troopId],
                });
            }
        }
        for (let i = 0; i < troops.length; i++) {
            for (let j = 0; j < troops.length; j++) {
                if (troops[i].a > troops[j].a) {
                    let buf = troops[i];
                    troops[i] = troops[j];
                    troops[j] = buf;
                }
            }
        }
        if (troops.length > 3) {
            let amount = 0;
            for (let i = 3; i < troops.length; i++) {
                amount += troops[i].a;
            }
            label = String.format(i18n.label, [amount]);
        }
        if (fromPlayer === undefined || toPlayer === undefined) {
            return false;
        }
        let templateData = {
            myRoute: myRoute,
            id: reinforcement.ai,
            i18n: i18n,
            fromPlayerName: fromPlayer.n,
            toTownName: toTown.n,
            toPlayerName: toPlayer.n,
            fromTownName: fromTown.n,
            targetX: reinforcement.ttx,
            targetY: reinforcement.tty,
            fromX: reinforcement.ftx,
            fromY: reinforcement.fty,
            troops: troops.slice(0, 3),
            label: label,
        };
        return $(uiUtils.applyTemplate('ControlWindowReinforcementsItem', templateData));
    }
    __updateReinforcementsEvents() {
        this.__reinforcementsPane.find('.troops > .troops-list, .troops > .label').off().tooltip({
            delay: 0,
            track: true,
            left: 40,
            top: 0,
            showURL: false,
            bodyHandler: function() {
                let armyDiv = $(this).parents('.reinforcement')
                    , armyId = parseInt(armyDiv.attr('army-id'))
                    , reinforcement = playerModel.getData().Reinforcements.my[armyId] || playerModel.getData().Reinforcements.other[armyId];
                return uiUtils.applyTemplate('ControlWindowReinforcementsItemTooltip', {
                    troops: reinforcement.troops,
                });
            },
            extraClass: 'sidebar-army-item'
        });
        this.__reinforcementsPane.find('.reinforcement .coords').off().on('click', (e)=>{
                this.__onCoordsClick(e);
            }
        );
        this.__reinforcementsPane.find('.reinforcement .return-button').off().on('click', (e)=>{
                this.__onReturnButtonClick(e);
            }
        ).tooltip({
            delay: 0,
            track: true,
            left: 40,
            top: 0,
            showURL: false,
            bodyHandler: function() {
                let curObj = $(this);
                return curObj.attr('tooltip');
            },
        });
        this.__emptyButton.off().on('click', (e)=>{
                this.__mainControl.switchPanel(ControlWindow.WINDOW_TYPE_CREATE_ARMY);
            }
        );
    }
    __onCoordsClick(e) {
        let curObj = $(e.currentTarget)
            , x = parseInt(curObj.attr('x'))
            , y = parseInt(curObj.attr('y'));
        WOFWindow.closeWindow(true);
        gameController.goToMapPosition({
            left: x,
            top: y
        });
    }
    __onReturnButtonClick(e) {
        let curObj = $(e.currentTarget)
            , armyId = parseInt(curObj.parents('.reinforcement').attr('army-id'));
        uiWindow.showConfirm({
            title: i18nModel.getData().confirmText.reinforcementCancel,
            ok: function() {
                Route.cancelReinforcement(armyId);
            }
        });
    }
    __updateContent() {
        let i18n = i18nModel.getData().townControl.controlWindows.reinforcements
            , playerReinforcements = playerModel.getData().Reinforcements
            , reinforcements = {}
            , scrollY = 0;
        if (this.__scrollBar !== undefined) {
            scrollY = this.__scrollBar.getScrollY();
        }
        let openedTabType = 0;
        for (let tabTypeId in ControlWindowReinforcements.tabs) {
            if (ControlWindowReinforcements.tabs[tabTypeId] === this.__activeTab) {
                openedTabType = parseInt(tabTypeId);
                break;
            }
        }
        let curTownId = townModel.getData().Id;
        switch (openedTabType) {
            case 3:
                Object.assign(reinforcements, playerReinforcements.my, playerReinforcements.other);
                break;
            case 4:
                reinforcements = playerReinforcements.my;
                break;
            case 5:
                reinforcements = playerReinforcements.other;
                break;
            case 2:
                for (let armyId in playerReinforcements.my) {
                    let reinforcement = playerReinforcements.my[armyId];
                    if (parseInt(reinforcement.fti) === curTownId) {
                        reinforcements[armyId] = reinforcement;
                    }
                }
                for (let armyId in playerReinforcements.other) {
                    let reinforcement = playerReinforcements.other[armyId];
                    if (parseInt(reinforcement.fti) === curTownId) {
                        reinforcements[armyId] = reinforcement;
                    }
                }
                break;
            case 1:
                for (let armyId in playerReinforcements.my) {
                    let reinforcement = playerReinforcements.my[armyId];
                    if (parseInt(reinforcement.tti) === curTownId) {
                        reinforcements[armyId] = reinforcement;
                    }
                }
                for (let armyId in playerReinforcements.other) {
                    let reinforcement = playerReinforcements.other[armyId];
                    if (parseInt(reinforcement.tti) === curTownId) {
                        reinforcements[armyId] = reinforcement;
                    }
                }
                break;
            default:
                return;
        }
        this.__divHeader.html(i18n.titles[openedTabType] || '');
        this.__reinforcementsPane.empty();
        this.__mainDiv.removeClass('empty');
        for (let armyId in reinforcements) {
            if (reinforcements.hasOwnProperty(armyId)) {
                let reinforcementDiv = this.__createReinforcementItem(armyId);
                if (reinforcementDiv) {
                    this.__reinforcementsPane.append(reinforcementDiv);
                }
            }
        }
        if (this.__reinforcementsPane.is(':empty')) {
            this.__mainDiv.addClass('empty');
        }
        this.__updateReinforcementsEvents();
        if (this.__scrollBar === undefined) {
            this.__scrollBar = new ScrollBar(this.__reinforcementsPane,false,13);
        } else {
            this.__scrollBar.updateScrollBar();
        }
        this.__scrollBar.setScrollY(scrollY);
    }
    __onTabChange() {
        this.__updateContent();
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
}
ControlWindowReinforcements.tabs = {
    1: 'reinforcements-in-current-town',
    2: 'reinforcements-from-current-town',
    3: 'reinforcements-all',
    4: 'reinforcements-my',
    5: 'reinforcements-other',
};

class ControlWindowRoutes extends ControlWindow {
    constructor(control) {
        super('', ControlWindowRoutes.tabs, TownControl.WINDOW_PLACE_RIGHT, control);
        this.__updateContentDelayed = false;
        this.__updateContentBlocked = false;
        this.__init();
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowRoutes', {
            i18n: i18nModel.getData().townControl.controlWindows.routes
        }));
        this.__mainDiv = this.__divBody.children('#control-window-routes');
        this.__routesPane = this.__mainDiv.find('.routes-pane');
        this.__emptyButton = this.__mainDiv.find('.empty-button');
        this.setTab(ControlWindowRoutes.tabs["1"]);
    }
    __onShowWindow() {
        if (this.__scrollBar) {
            this.__scrollBar.updateScrollBar();
        }
    }
    __createRouteItem(routeId) {
        let route = Route.routesList[routeId]
            , now = Util.getCurrentTimestamp();
        if (route === undefined || route.finishTime < now)
            return false;
        let armies = townModel.getData().Armies
            , curArmyId = 0;
        for (let armyId in armies) {
            if (armies[armyId].RouteId === routeId) {
                curArmyId = parseInt(armyId);
                break;
            }
        }
        if (curArmyId === 0) {
            return false;
        }
        let armyAmount = 0;
        for (let troopId in armies[curArmyId].Troops) {
            armyAmount += armies[curArmyId].Troops[troopId];
        }
        let i18n = i18nModel.getData().townControl.controlWindows.routes
            , templateData = {
            id: route.id,
            armyId: curArmyId,
            type: route.type,
            moveBack: route.moveBack,
            armyName: armies[curArmyId].Name,
            i18n: i18n,
            elapsedTime: Util.secondsToString(Math.max(route.timeToGo - route.completed, 0), i18nModel.getTimeFormat()),
            finishTime: Util.timestampToDateTimeString(route.finishTime, i18nModel.getDateTimeFormat(), {
                showDateForAnotherDay: true,
                currentTime: now,
                timeFormat: i18nModel.getTimeFormat()
            }),
            progress: route.completed / route.timeToGo * 100,
            targetName: String.format(route.moveBack === 1 ? i18n.from : i18n.to, [route.targetName, route.x, route.y]),
            armyAmount: armyAmount,
        };
        return $(uiUtils.applyTemplate('ControlWindowRoutesItem', templateData));
    }
    __onCloseWindow() {
        this.__stopTimer();
    }
    __onCountTick(now) {
        let routes = Route.routesList
            , showingRouteTypes = this.__getShowingRouteTypes();
        for (let routeId in routes) {
            let route = routes[routeId];
            if (jQuery.inArray(route.type, showingRouteTypes) >= 0 && route.moveBack < 2) {
                let routeDiv = this.__routesPane.children('[route-id="' + routeId + '"]');
                if (routeDiv === undefined)
                    continue;
                if (route.finishTime <= now) {
                    routeDiv.find('.time-elapsed .value').html($.secsToString(0, i18nModel.getTimeFormat()));
                    this.__blockContentUpdate();
                    this.__stopTimer();
                    routeDiv.fadeOut(450, ()=>{
                            this.__unblockContentUpdate();
                            this.__startTimer();
                        }
                    );
                } else {
                    let elapsedTime = Util.secondsToString(Math.max(route.timeToGo - route.completed, 0), i18nModel.getTimeFormat())
                        , progress = route.completed / route.timeToGo * 100;
                    routeDiv.find('.elapsed-time .value').html(elapsedTime);
                    routeDiv.find('.progress-bar .value').css({
                        'width': progress + '%'
                    });
                }
            }
        }
    }
    __blockContentUpdate() {
        this.__updateContentBlocked = true;
    }
    __unblockContentUpdate() {
        this.__updateContentBlocked = false;
        if (this.__updateContentDelayed) {
            this.__updateContentDelayed = false;
            this.__updateContent();
        }
    }
    __startTimer() {
        Route.subscribe('Route', (now)=>{
                this.__onCountTick(now);
            }
        );
    }
    __stopTimer() {
        Route.unsubscribe('Construction');
    }
    __updateRoutesEvents() {
        this.__routesPane.find('.route > .army-info').off().tooltip({
            delay: 0,
            track: true,
            left: 40,
            top: 0,
            showURL: false,
            bodyHandler: function() {
                let routeDiv = $(this).parents('.route')
                    , armyId = parseInt(routeDiv.attr('army-id'))
                    , army = townModel.getData().Armies[armyId];
                return uiUtils.applyTemplate('ControlWindowRoutesItemTooltip', {
                    troops: army.Troops,
                });
            },
            extraClass: 'sidebar-army-item'
        });
        this.__routesPane.find('.route > .cancel-button').off().on('click', (e)=>{
                this.__onCancelButtonClick(e);
            }
        ).tooltip({
            delay: 0,
            track: true,
            left: 40,
            top: 0,
            showURL: false,
            bodyHandler: function() {
                return i18nModel.getData().townControl.controlWindows.routes.cancelButton;
            },
        });
        this.__emptyButton.off().on('click', (e)=>{
                this.__mainControl.switchPanel(ControlWindow.WINDOW_TYPE_CREATE_ARMY);
            }
        );
    }
    __onCancelButtonClick(e) {
        let curObj = $(e.currentTarget)
            , routeId = parseInt(curObj.parents('.route').attr('route-id'))
            , route = Route.routesList[routeId];
        this.__stopTimer();
        this.__blockContentUpdate();
        if (route.completed <= 300) {
            Route.cancelArmyRoute(routeId, false, ()=>{
                    this.__unblockContentUpdate();
                    this.__updateContent();
                }
            );
        } else {
            Route.showCancelArmyRouteConfirm(routeId, false, ()=>{
                    this.__unblockContentUpdate();
                    this.__updateContent();
                }
            );
        }
    }
    __getShowingRouteTypes() {
        this.__openedTabType = 0;
        for (let tabTypeId in ControlWindowRoutes.tabs) {
            if (ControlWindowRoutes.tabs[tabTypeId] === this.__activeTab) {
                this.__openedTabType = parseInt(tabTypeId);
                break;
            }
        }
        switch (this.__openedTabType) {
            case 1:
                return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
            case 2:
                return [1, 5, 6, 11];
            case 3:
                return [4];
            case 4:
                return [7, 8];
            case 5:
                return [10];
        }
        return [];
    }
    __updateContent() {
        let i18n = i18nModel.getData().townControl.controlWindows.routes
            , routes = Route.routesList
            , showingRoutes = {}
            , showingRouteTypes = []
            , scrollY = 0
            , now = Util.getCurrentTimestamp();
        if (this.__scrollBar !== undefined) {
            scrollY = this.__scrollBar.getScrollY();
        }
        showingRouteTypes = this.__getShowingRouteTypes();
        for (let routeId in routes) {
            let route = routes[routeId];
            if ($.inArray(route.type, showingRouteTypes) >= 0 && route.moveBack < 2 && route.finishTime > now) {
                showingRoutes[routeId] = route;
            }
        }
        this.__divHeader.html(i18n.titles[this.__openedTabType] || '');
        this.__routesPane.empty();
        this.__mainDiv.removeClass('empty');
        for (let routeId in showingRoutes) {
            if (routes.hasOwnProperty(routeId)) {
                let routeDiv = this.__createRouteItem(parseInt(routeId));
                if (routeDiv) {
                    this.__routesPane.append(routeDiv);
                }
            }
        }
        if (this.__routesPane.is(':empty')) {
            this.__mainDiv.addClass('empty');
        }
        this.__updateRoutesEvents();
        if (this.__scrollBar === undefined) {
            this.__scrollBar = new ScrollBar(this.__routesPane,false,13);
        } else {
            this.__scrollBar.updateScrollBar();
        }
        this.__scrollBar.setScrollY(scrollY);
        this.__startTimer();
    }
    __onTabChange() {
        this.__updateContent();
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
}
ControlWindowRoutes.tabs = {
    1: 'routes-all',
    2: 'routes-attack',
    3: 'routes-defence',
    4: 'routes-spying',
    5: 'routes-replace',
};

class ControlWindowSpies extends ControlWindow {
    constructor(control) {
        let i18n = i18nModel.getData().townControl.controlWindows.spies;
        super(i18n.title, {}, TownControl.WINDOW_PLACE_RIGHT, control);
        this.__init();
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowSpies', {
            i18n: i18nModel.getData().townControl.controlWindows.spies
        }));
        this.__mainDiv = this.__divBody.children('#control-window-spies');
        this.__spiesPane = this.__mainDiv.find('.spies-pane');
        this.__bottomPanel = this.__mainDiv.find('.bottom-panel');
        this.__searchButton = this.__bottomPanel.find('.search-button');
        this.__clearButton = this.__bottomPanel.find('.clear-button');
        this.__emptyButton = this.__mainDiv.find('.empty-button');
        this.__inputCoordX = this.__bottomPanel.find('.input-x input');
        this.__inputCoordY = this.__bottomPanel.find('.input-y input');
        this.__inputNick = this.__bottomPanel.find('.search-by-nick input');
        this.__updateContent();
    }
    __onShowWindow() {
        if (this.__scrollBar) {
            this.__scrollBar.updateScrollBar();
        }
    }
    __createSpyItem(townId) {
        let spy = playerModel.getData().SpyInTown[townId];
        if (spy === undefined)
            return false;
        let now = Util.getCurrentTimestamp()
            , gameData = gameController.gameData
            , townList = playerModel.getData().TownList;
        if (gameData.map[spy.SpiedTownX] === undefined || gameData.map[spy.SpiedTownX][spy.SpiedTownY] === undefined || gameData.map[spy.SpiedTownX][spy.SpiedTownY].town === undefined) {
            return false;
        }
        if (gameData.players[spy.SpiedPlayerId] === undefined) {
            return false;
        }
        if (townList[spy.SpyingTownId] === undefined) {
            return false;
        }
        let spiedTownName = gameData.map[spy.SpiedTownX][spy.SpiedTownY].town.n
            , spiedPlayerName = gameData.players[spy.SpiedPlayerId].n
            , spyingTownName = townList[spy.SpyingTownId].Name
            , templateData = {
            'id': spy.SpiedTownId,
            'i18n': i18nModel.getData().townControl.controlWindows.spies,
            'lastReport': Util.timestampToDateTimeString(spy.LastScanTimestamp, i18nModel.getDateTimeFormat(), {
                showDateForAnotherDay: true,
                currentTime: now,
                timeFormat: i18nModel.getTimeFormat()
            }),
            'playerName': spiedPlayerName,
            'from': spyingTownName,
            'to': spiedTownName,
            'targetX': spy.SpiedTownX,
            'targetY': spy.SpiedTownY,
        };
        return $(uiUtils.applyTemplate('ControlWindowSpiesItem', templateData));
    }
    __onReportButtonClick(e) {
        let curObj = $(e.currentTarget)
            , townId = parseInt(curObj.parents('.spy').attr('town-id'));
        spyModel.getSpyReport(townId);
    }
    __onReturnButtonClick(e) {
        let curObj = $(e.currentTarget)
            , townId = parseInt(curObj.parents('.spy').attr('town-id'))
            , spy = playerModel.getData().SpyInTown[townId];
        uiWindow.showConfirm({
            title: i18nModel.getData().confirmText.spyCancel,
            ok: function() {
                spyModel.returnSpy(spy.ArmyId);
            }
        });
    }
    __updateSpiesEvents() {
        this.__spiesPane.find('.spy > .actions > .report-button').off().on('click', (e)=>{
                this.__onReportButtonClick(e);
            }
        ).tooltip({
            delay: 0,
            track: true,
            left: 40,
            top: 0,
            showURL: false,
            bodyHandler: function() {
                let curObj = $(this);
                return curObj.attr('tooltip');
            },
        });
        this.__spiesPane.find('.spy > .actions > .return-button').off().on('click', (e)=>{
                this.__onReturnButtonClick(e);
            }
        ).tooltip({
            delay: 0,
            track: true,
            left: 40,
            top: 0,
            showURL: false,
            bodyHandler: function() {
                let curObj = $(this);
                return curObj.attr('tooltip');
            },
        });
        this.__searchButton.off().on('click', (e)=>{
                this.__onSearchButtonClick(e);
            }
        );
        this.__clearButton.off().on('click', (e)=>{
                this.__onClearButtonClick(e);
            }
        );
        this.__emptyButton.off().on('click', (e)=>{
                this.__mainControl.switchPanel(ControlWindow.WINDOW_TYPE_TROOPS);
            }
        );
        this.__inputCoordX.off().on('keyup', (e)=>{
                this.__onInputCoordXChanged(e);
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        ).on('mousedown', (e)=>{
                this.__onInputCoordXClick(e);
            }
        ).on('focusout', (e)=>{
                this.__onInputCoordXFocusOut(e);
            }
        );
        this.__inputCoordY.off().on('keyup', (e)=>{
                this.__onInputCoordYChanged(e);
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        ).on('mousedown', (e)=>{
                this.__onInputCoordYClick(e);
            }
        ).on('focusout', (e)=>{
                this.__onInputCoordYFocusOut(e);
            }
        );
    }
    __onInputCoordXFocusOut() {
        let value = this.__inputCoordX.val();
        if (value === "") {
            this.__inputCoordX.val(0);
        }
    }
    __onInputCoordXClick() {
        let value = this.__inputCoordX.val();
        if (value == 0) {
            this.__inputCoordX.val('');
        }
    }
    __onInputCoordXChanged() {
        let inputVal = parseInt(this.__inputCoordX.val().replace(/\s/g, '')) || 0
            , maxValue = gameController.gameData.maxX
            , minValue = gameController.gameData.minX;
        if (inputVal < minValue) {
            this.__inputCoordX.val(minValue);
        } else if (inputVal > maxValue) {
            this.__inputCoordX.val(maxValue);
        } else {
            this.__inputCoordX.val(inputVal);
        }
    }
    __onInputCoordYFocusOut() {
        let value = this.__inputCoordY.val();
        if (value === "") {
            this.__inputCoordY.val(0);
        }
    }
    __onInputCoordYClick() {
        let value = this.__inputCoordY.val();
        if (value == 0) {
            this.__inputCoordY.val('');
        }
    }
    __onInputCoordYChanged() {
        let inputVal = parseInt(this.__inputCoordY.val().replace(/\s/g, '')) || 0
            , maxValue = gameController.gameData.maxY
            , minValue = gameController.gameData.minY;
        if (inputVal < minValue) {
            this.__inputCoordY.val(minValue);
        } else if (inputVal > maxValue) {
            this.__inputCoordY.val(maxValue);
        } else {
            this.__inputCoordY.val(inputVal);
        }
    }
    __onClearButtonClick(e) {}
    __onSearchButtonClick(e) {}
    __updateContent() {
        let spies = playerModel.getData().SpyInTown
            , scrollY = 0;
        if (this.__scrollBar !== undefined) {
            scrollY = this.__scrollBar.getScrollY();
        }
        this.__spiesPane.empty();
        this.__mainDiv.removeClass('empty');
        for (let townId in spies) {
            if (spies.hasOwnProperty(townId)) {
                let spyDiv = this.__createSpyItem(townId);
                if (spyDiv) {
                    this.__spiesPane.append(spyDiv);
                }
            }
        }
        if (this.__spiesPane.is(':empty')) {
            this.__mainDiv.addClass('empty');
        }
        this.__updateSpiesEvents();
        if (this.__scrollBar === undefined) {
            this.__scrollBar = new ScrollBar(this.__spiesPane,false,13);
        } else {
            this.__scrollBar.updateScrollBar();
        }
        this.__scrollBar.setScrollY(scrollY);
    }
    __onTabChange() {
        this.__updateContent();
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
}

class ControlWindowTroops extends ControlWindow {
    constructor(control) {
        let i18n = i18nModel.getData().townControl.controlWindows.troops;
        super(i18n.title, ControlWindowTroops.tabs, TownControl.WINDOW_PLACE_LEFT, control);
        this.__troopsDiv = {};
        this.__init();
    }
    __onTabChange() {
        this.__updateContent();
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowTroops', {
            i18n: i18nModel.getData().townControl.controlWindows.troops
        }));
        this.__troopsPane = this.__divBody.find('#control-window-troops .troops-pane');
        this.__controlPanel = this.__divBody.find('#control-window-troops .control-panel');
        this.__troopsToRecruit = {};
        this.__startRecruitingButton = this.__divBody.find('.start-recruiting').on('click', (e)=>{
                this.__onStartRecruitingButtonClick(e);
            }
        );
        this.__cancelRrecruitingButton = this.__divBody.find('.cancel-recruiting').on('click', (e)=>{
                this.__onCancelRecruitingButtonClick(e);
            }
        );
        this.setTab(ControlWindowTroops.tabs["1"]);
    }
    __updateTroopsPrice() {
        let resources = {
            'people': 0,
            'wood': 0,
            'iron': 0,
            'stone': 0,
            'gold': 0,
        }
            , coins = 0
            , time = 0;
        for (let troopId in this.__troopsToRecruit) {
            troopId = parseInt(troopId);
            let amount = this.__troopsToRecruit[troopId]
                , troop = staticDataModel.troops[troopId]
                , cost = troop.getCalculatedCost();
            if (troop) {
                if (troopId === Troop.ARISTOCRAT_ID) {
                    let needCoins = 0
                        , aristocratNumber = additionalAristocratModel.getAristocratNumber() + 1;
                    for (let i = 0; i < amount; i++) {
                        needCoins += additionalAristocratModel.getAristocratPrice(aristocratNumber++);
                    }
                    coins += Math.max(Math.floor(needCoins * (1 - cost.coinsDiscount)), 1);
                }
                resources['people'] += troop.peopleRequired * amount;
                for (let resId in resources) {
                    if (cost.hasOwnProperty(resId) && resources.hasOwnProperty(resId)) {
                        resources[resId] += cost[resId] * amount;
                    }
                }
                time += troop.getCalculatedTrainingTime() * amount;
            }
        }
        for (let resId in resources) {
            this.__controlPanel.find('.resource[resource="' + resId + '"] .value').html(Util.formatNumber(resources[resId]));
        }
        this.__controlPanel.find('.time .value').html($.secsToString(time, i18nModel.getTimeFormat()));
        this.__controlPanel.find('.coins .value').html(coins);
    }
    __onStartRecruitingButtonClick(e) {
        let amount = 0;
        for (let i in this.__troopsToRecruit) {
            amount += this.__troopsToRecruit[i];
        }
        if (amount > 0) {
            Troop.sendRecruitRequest(this.__troopsToRecruit, (e)=>{
                    this.__troopsToRecruit = {};
                    this.__troopsPane.find('input').val(0);
                    this.__updateTroopsPrice();
                    this.__mainControl.switchPanel(0, ControlWindow.WINDOW_TYPE_RECRUITING);
                }
            );
        }
    }
    __onCancelRecruitingButtonClick(e) {
        this.__troopsToRecruit = {};
        this.__troopsPane.find('input').val(0);
        this.__updateTroopsPrice();
    }
    __onRecruitButtonClick(e) {
        let curObj = $(e.currentTarget)
            , troopDiv = curObj.parents('.troop')
            , troopId = parseInt(troopDiv.attr('troop-id'))
            , inputDiv = troopDiv.find('.input input')
            , amount = parseInt(inputDiv.val())
            , troops = {};
        if (troopDiv.hasClass('disabled')) {
            inputDiv.val(0);
            return false;
        }
        if (amount > 0) {
            troops[troopId] = amount;
            Troop.sendRecruitRequest(troops, (e)=>{
                    inputDiv.val(0);
                    this.__addTroopsToRecruit(troopId, 0);
                    this.__mainControl.switchPanel(0, ControlWindow.WINDOW_TYPE_RECRUITING);
                }
            );
        }
    }
    __onTroopMinusClick(e) {
        let curObj = $(e.currentTarget)
            , curTroop = curObj.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input')
            , inputVal = parseInt(inputDiv.val()) || 0
            , maxVal = this.__calculateMaxTroopCount(troopId);
        if (curTroop.hasClass('disabled')) {
            inputDiv.val(0);
            return false;
        }
        inputVal = Math.max(0, Math.min(--inputVal, maxVal));
        inputDiv.val(inputVal);
        this.__addTroopsToRecruit(troopId, inputVal);
    }
    __onTroopPlusClick(e) {
        let curObj = $(e.currentTarget)
            , curTroop = curObj.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input')
            , maxVal = this.__calculateMaxTroopCount(troopId)
            , inputVal = parseInt(inputDiv.val()) || 0;
        if (curTroop.hasClass('disabled')) {
            inputDiv.val(0);
            return false;
        }
        inputVal = Math.max(0, Math.min(++inputVal, maxVal));
        inputDiv.val(inputVal);
        this.__addTroopsToRecruit(troopId, inputVal);
    }
    __onTroopMaxClick(e) {
        let curObj = $(e.currentTarget)
            , curTroop = curObj.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputDiv = curTroop.find('input')
            , maxVal = this.__calculateMaxTroopCount(troopId);
        if (curTroop.hasClass('disabled')) {
            inputDiv.val(0);
            return false;
        }
        inputDiv.val(maxVal);
        this.__addTroopsToRecruit(troopId, maxVal);
    }
    __addTroopsToRecruit(troopId, amount, sum=false) {
        if (troopId > 0) {
            if (!this.__troopsToRecruit.hasOwnProperty(troopId)) {
                this.__troopsToRecruit[troopId] = 0;
            }
            this.__troopsToRecruit[troopId] = sum ? this.__troopsToRecruit + amount : amount;
            this.__updateTroopsPrice();
        }
    }
    __calculateMaxTroopCount(troopId) {
        let freePeople = townModel.getData().FreePeople
            , maxCount = 4294967296
            , troop = staticDataModel.troops[troopId]
            , resourcesToRecruit = {};
        if (freePeople <= 0) {
            return 0;
        }
        $.extend(resourcesToRecruit, playerModel.getData().Resources);
        let skillArr = rpgModel.getSkillsAffectingUnitCost()
            , aristocratSkillArr = rpgModel.getSkillsAffectingAristocratUnitCost()
            , increment = 0
            , aristocratIncrement = 0;
        for (let index in skillArr) {
            let skillId = skillArr[index];
            if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                continue;
            increment += rpgModel.playerSkills[skillId].Parameter / 100;
        }
        for (let index in aristocratSkillArr) {
            let skillId = aristocratSkillArr[index];
            if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                continue;
            aristocratIncrement += rpgModel.playerSkills[skillId].Parameter / 100;
        }
        for (let key in this.__troopsToRecruit) {
            key = parseInt(key);
            let curTroop = staticDataModel.troops[key];
            if (key === troopId) {
                continue;
            }
            freePeople -= this.__troopsToRecruit[key] * curTroop.peopleRequired;
            if (freePeople <= 0) {
                return 0;
            }
            for (let res in staticDataModel.config.resources.nameToId) {
                if (key === 14) {
                    resourcesToRecruit[res] -= Math.ceil(curTroop.cost[res] * (100 - increment - aristocratIncrement) / 100) * this.__troopsToRecruit[key];
                } else {
                    resourcesToRecruit[res] -= Math.ceil(curTroop.cost[res] * (100 - increment) / 100) * this.__troopsToRecruit[key];
                }
                if (resourcesToRecruit[res] <= 0) {
                    return 0;
                }
            }
        }
        maxCount = Math.min(maxCount, Math.floor(freePeople / troop.peopleRequired));
        for (let res in staticDataModel.config.resources.nameToId) {
            if (res === 'food') {
                continue;
            }
            if (troopId === 14) {
                maxCount = Math.min(maxCount, Math.floor(resourcesToRecruit[res] / Math.ceil(troop.cost[res] * (100 - increment - aristocratIncrement) / 100)));
            } else {
                maxCount = Math.min(maxCount, Math.floor(resourcesToRecruit[res] / Math.ceil(troop.cost[res] * (100 - increment) / 100)));
            }
        }
        if (troopId === 14 && additionalAristocratModel.isEnabled()) {
            let coins = additionalAristocratModel.getAristocratCoins()
                , aristocratNumber = additionalAristocratModel.getAristocratNumber()
                , price = Math.max(1, Math.floor(additionalAristocratModel.getAristocratPrice(++aristocratNumber) * (100 - aristocratIncrement) / 100))
                , max = 0;
            while (price <= coins) {
                max++;
                coins -= price;
                price = Math.max(1, Math.floor(additionalAristocratModel.getAristocratPrice(++aristocratNumber) * (100 - aristocratIncrement) / 100));
            }
            maxCount = Math.min(maxCount, max);
        }
        return maxCount;
    }
    __onInputChange(e) {
        let curObj = $(e.currentTarget)
            , curTroop = curObj.parents('.troop')
            , troopId = parseInt(curTroop.attr('troop-id'))
            , inputVal = parseInt(curObj.val(), 10) || 0
            , maxVal = this.__calculateMaxTroopCount(troopId)
            , count = Math.max(0, Math.min(maxVal, inputVal));
        if (curTroop.hasClass('disabled')) {
            curObj.val(0);
            this.__addTroopsToRecruit(troopId, 0);
            return false;
        }
        curObj.val(count);
        this.__addTroopsToRecruit(troopId, count);
    }
    __updateTroopEvents() {
        this.__troopsPane.find('.troop .img, .troop .block').off().tooltip({
            delay: 0,
            left: 40,
            top: 0,
            showURL: false,
            track: true,
            bodyHandler: function() {
                let id = parseInt($(this).parents('.troop').attr('troop-id'));
                return staticDataModel.troops[id].getTooltipTemplate();
            },
            extraClass: 'troop-tooltip'
        });
        this.__troopsPane.find('.troop > .buttons > .minus').off().on('click', (e)=>{
                this.__onTroopMinusClick(e);
            }
        );
        this.__troopsPane.find('.troop > .buttons > .plus').off().on('click', (e)=>{
                this.__onTroopPlusClick(e);
            }
        );
        this.__troopsPane.find('.troop > .buttons > .recruit').off().on('click', (e)=>{
                this.__onRecruitButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop > .buttons > .max').off().on('click', (e)=>{
                this.__onTroopMaxClick(e);
            }
        );
        this.__troopsPane.find('.troop > .buttons > .input > input').off().on('keyup', (e)=>{
                this.__onInputChange(e);
            }
        );
        this.__troopsPane.find('.troop .research-button').off().on('click', (e)=>{
                this.__onResearchButtonClick(e);
            }
        );
        this.__troopsPane.find('.troop .building-button').off().on('click', (e)=>{
                this.__onBuildingButtonClick(e);
            }
        );
    }
    __onBuildingButtonClick(e) {
        $.tooltip.close();
        this.__mainControl.switchPanel(ControlWindow.WINDOW_TYPE_BUILDINGS, ControlWindow.WINDOW_TYPE_CONSTRUCTIONS);
    }
    __onResearchButtonClick() {
        $.tooltip.close();
        this.__mainControl.close();
        TownResearch.showResearchWindow(()=>{
                this.__mainControl.show(this.__mainControl.getLeftWindowType(), this.__mainControl.getRightWindowType(), this.__mainControl.getLeftWindow().getTab(), this.__mainControl.getRightWindow().getTab(), );
            }
        );
    }
    static __getTownTroopAmount(troopId) {
        return townModel.getData().Troops[troopId] || 0;
    }
    __updateTroopContent(troopId) {
        let i18nData = i18nModel.getData().townControl.controlWindows.troops
            , templateData = {
            'id': troopId,
            'type': ControlWindowTroops.__getTroopType(troopId),
            'amount': ControlWindowTroops.__getTownTroopAmount(troopId),
            'name': i18nModel.getData().troops[troopId].name,
            'i18n': i18nData,
            'value': this.__troopsToRecruit[troopId] || 0,
        }
            , troopRequirements = staticDataModel.troops[troopId].testOnEnabledInCurrentTown();
        if (troopRequirements['Buildings'] !== false) {
            templateData['blockMessage'] = troopRequirements['Buildings'];
            templateData['blockClass'] = 'disabled need-building';
        } else if (troopRequirements['Researches'] !== false) {
            templateData['blockMessage'] = troopRequirements['Researches'];
            templateData['blockClass'] = 'disabled need-research';
        }
        this.__troopsDiv[troopId] = $(uiUtils.applyTemplate('ControlWindowTroopsItem', templateData));
        this.__troopsPane.append(this.__troopsDiv[troopId]);
    }
    __updateContent() {
        this.__troopsPane.empty();
        this.__troopsDiv = {};
        let openedTabType = 0;
        for (let tabTypeId in ControlWindowTroops.tabs) {
            if (ControlWindowTroops.tabs[tabTypeId] === this.__activeTab) {
                openedTabType = parseInt(tabTypeId);
                break;
            }
        }
        for (let troopId in staticDataModel.troops) {
            if (staticDataModel.troops.hasOwnProperty(troopId)) {
                troopId = parseInt(troopId);
                if (ControlWindowTroops.excludedTroopId.indexOf(troopId) !== -1) {
                    continue;
                }
                if (ControlWindowTroops.__getTroopType(troopId) === openedTabType) {
                    this.__updateTroopContent(troopId);
                }
            }
        }
        this.__updateTroopEvents();
        this.__updateTroopsPrice();
    }
    static __getTroopType(troopId) {
        return staticDataModel.troops[troopId].type || 0;
    }
}
ControlWindowTroops.excludedTroopId = [12, 13];
ControlWindowTroops.tabs = {
    1: 'troops-infantry',
    2: 'troops-cavalry',
    3: 'troops-archery',
    4: 'troops-other',
};

class ControlWindowConstructions extends ControlWindow {
    constructor(control) {
        let i18n = i18nModel.getData().townControl.controlWindows.constructions;
        super(i18n.title, {}, TownControl.WINDOW_PLACE_RIGHT, control);
        this.__updateContentDelayed = false;
        this.__updateContentBlocked = false;
        this.__init();
    }
    __init() {
        this.__divBody.append(uiUtils.applyTemplate('ControlWindowConstructions', {
            i18n: i18nModel.getData().townControl.controlWindows.constructions
        }));
        this.__mainDiv = this.__divBody.children('#control-window-constructions');
        this.__constructionsPane = this.__mainDiv.find('.construction-pane');
        this.__emptyButton = this.__mainDiv.find('.empty-button');
        this.__updateContent();
    }
    __onShowWindow() {
        this.__scrollBar.updateScrollBar();
    }
    __createConstructionItem(queue, constructions=false) {
        constructions = constructions || townModel.getData().BuildingConstruction;
        if (constructions[queue] === undefined)
            return false;
        let i18nData = i18nModel.getData().townControl.controlWindows.constructions
            , construction = constructions[queue]
            , buildingId = construction.BuildingId
            , curBuildingLevel = ControlWindowBuildings.getBuildingLevel(buildingId)
            , now = Util.getCurrentTimestamp()
            , finishTime = construction.StartTime + construction.BuildTime
            , elapsedTime = finishTime > now ? (queue > 0 ? construction.BuildTime : finishTime - now) : 0
            , progress = 100 * (1 - elapsedTime / construction.BuildTime);
        for (let queueIndex = 0; queueIndex <= queue; queueIndex++) {
            let queueConstruction = constructions[queueIndex];
            if (queueConstruction.BuildingId === buildingId) {
                if (queueConstruction.Type === 1) {
                    curBuildingLevel++;
                } else {
                    curBuildingLevel--;
                }
            }
        }
        let templateData = {
            'id': buildingId,
            'constructionId': construction.Id,
            'type': construction.Type,
            'queue': queue,
            'timeElapsed': Util.secondsToString(elapsedTime, i18nModel.getTimeFormat()),
            'timeFinish': Util.timestampToDateTimeString(finishTime, i18nModel.getDateTimeFormat(), {
                showDateForAnotherDay: true,
                currentTime: now,
                timeFormat: i18nModel.getTimeFormat()
            }),
            'buildingName': String.format(i18nData.buildingName, [i18nModel.getBuildingName(buildingId), curBuildingLevel]),
            'i18n': i18nData,
            'progress': progress,
        };
        return $(uiUtils.applyTemplate('ControlWindowConstructionsItem', templateData));
    }
    __updateConstructionEvents() {
        this.__constructionsPane.find('.construction > .cancel-button').off().on('click', (e)=>{
                this.__onCancelButtonClick(e);
            }
        );
        this.__constructionsPane.find('.construction[queue="0"] > .speed-up').off().on('click', (e)=>{
                this.__onSpeedUpClick(e);
            }
        );
        this.__emptyButton.off().on('click', (e)=>{
                this.__mainControl.switchPanel(ControlWindow.WINDOW_TYPE_BUILDINGS);
            }
        );
    }
    __onCountTick(now) {
        let constructions = townModel.getData().BuildingConstruction;
        if (constructions[0] === undefined)
            return;
        let construction = constructions[0]
            , finishTime = construction.StartTime + construction.BuildTime
            , constructionDiv = this.__constructionsPane.children('.construction[queue="0"]');
        if (constructionDiv.length === 0)
            return;
        if (finishTime <= now) {
            if (parseInt(constructionDiv.attr('construction')) === construction.Id) {
                constructionDiv.find('.time-elapsed .value').html($.secsToString(0, i18nModel.getTimeFormat()));
                this.__blockContentUpdate();
                this.__stopTimer();
                constructionDiv.fadeOut(450, ()=>{
                        this.__unblockContentUpdate();
                        this.__startTimer();
                    }
                );
            }
            return;
        }
        let elapsedTime = finishTime - now
            , progress = 100 * (1 - (elapsedTime - 1) / construction.BuildTime);
        constructionDiv.find('.time-elapsed .value').html($.secsToString(elapsedTime, i18nModel.getTimeFormat()));
        constructionDiv.find('.progress-bar .value').css({
            'width': progress + '%'
        });
    }
    __onCloseWindow() {
        this.__stopTimer();
    }
    __onSpeedUpClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled')) {
            return false;
        }
        let constructionDiv = curButton.parent()
            , queue = parseInt(constructionDiv.attr('queue'));
    }
    __blockContentUpdate() {
        this.__updateContentBlocked = true;
    }
    __unblockContentUpdate() {
        this.__updateContentBlocked = false;
        if (this.__updateContentDelayed) {
            this.__updateContentDelayed = false;
            this.__updateContent();
        }
    }
    __onCancelButtonClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled')) {
            return false;
        }
        let constructionDiv = curButton.parent()
            , queue = parseInt(constructionDiv.attr('queue'))
            , buildingId = parseInt(constructionDiv.attr('building-id'));
        this.__stopTimer();
        this.__blockContentUpdate();
        townModel.sendRequestForCancelBuilding(queue, (data)=>{
                let result = data.action['town:buildingCancelBuilding'];
                if (result) {
                    messageController.addMessageToLog(String.format(i18nModel.getData().messages.system.buildingCanceled, i18nModel.getBuildingNameInGenitive(buildingId)), 'cancel');
                    let deleteConstructDivs = this.__constructionsPane.find('.construction[queue="' + queue + '"], .construction[queue="' + queue + '"] ~ .construction[building-id="' + buildingId + '"]');
                    deleteConstructDivs.slideUp({
                        done: ()=>{
                            deleteConstructDivs.remove();
                            this.__unblockContentUpdate();
                        }
                        ,
                        duration: 350,
                    });
                } else {
                    messageController.showSystemMessage(i18nModel.getData().error.townBuildingUpgrade.notFinished);
                    this.__unblockContentUpdate();
                    this.__startTimer();
                }
            }
        );
    }
    __startTimer() {
        Building.subscribe('Construction', (now)=>{
                this.__onCountTick(now);
            }
        );
    }
    __stopTimer() {
        Building.unsubscribe('Construction');
    }
    __updateContent() {
        if (this.__updateContentBlocked) {
            this.__updateContentDelayed = true;
            return;
        }
        let constructions = townModel.getData().BuildingConstruction
            , scrollY = 0;
        if (this.__scrollBar !== undefined) {
            scrollY = this.__scrollBar.getScrollY();
        }
        this.__constructionsPane.empty();
        this.__mainDiv.removeClass('empty');
        for (let queue = 0; queue < constructions.length; queue++) {
            if (constructions.hasOwnProperty(queue)) {
                let constructionDiv = this.__createConstructionItem(queue, constructions);
                if (constructionDiv) {
                    this.__constructionsPane.append(constructionDiv);
                }
            }
        }
        if (this.__constructionsPane.is(':empty')) {
            this.__mainDiv.addClass('empty');
        }
        this.__updateConstructionEvents();
        if (this.__scrollBar === undefined) {
            this.__scrollBar = new ScrollBar(this.__constructionsPane,380,13);
        } else {
            this.__scrollBar.updateScrollBar();
        }
        this.__scrollBar.setScrollY(scrollY);
        this.__startTimer();
    }
    onTownDataUpdated(fields) {
        this.__updateContent();
    }
}

class DungeonResearch {
    constructor() {
        this.__div = $(uiUtils.applyTemplate('dungeonResearchWindow', {
            i18n: i18nModel.getData().dungeonResearch,
            dungeonGroups: this.__getDungeonGroups(),
            coins: CoinsExchange.getCoins(),
        }));
        this.__claimWindowShow = false;
        this.__claimWindowDungeonResearch = -1;
        this.__claimWindowDiv = this.__div.filter('#dungeon-research-claim');
        this.__researchListDiv = this.__div.find('.research-list');
        this.__dungeonListDiv = this.__div.find('.dungeon-list');
        this.__coinsValue = this.__div.find('.coins-panel > .coins > .value');
        this.__updateEvents();
        this.__show = false;
    }
    __showClaimWindow(dungeonResearchId, onCloseCallback) {
        this.__claimWindowDiv.addClass('show');
        this.__claimWindowOnCloseCallback = onCloseCallback;
        this.__updateClaimWindow(dungeonResearchId);
        this.__claimWindowShow = true;
        this.__claimWindowDungeonResearch = dungeonResearchId;
    }
    __hideClaimWindow() {
        this.__claimWindowDiv.removeClass('show');
        this.__claimWindowOnCloseCallback && this.__claimWindowOnCloseCallback();
        this.__claimWindowShow = false;
        this.__claimWindowDungeonResearch = -1;
    }
    __isClaimWindowShown() {
        return this.__claimWindowShow;
    }
    __updateClaimWindow(dungeonResearchId=0) {
        let now = Util.getCurrentTimestamp()
            , rewardItems = []
            , researchesData = staticDataModel.dungeonResearchStaticData
            , researches = playerModel.getData().DungeonResearches
            , func = (research)=>{
            if (research.startTime + research.researchTime <= now) {
                let r = researchesData[research.dungeonType].rewards;
                for (let drri in research.r) {
                    let ipi = research.r[drri];
                    rewardItems.push({
                        'id': ipi,
                        'name': r[ipi].name,
                        'img': r[ipi].img,
                        'drri': drri,
                    });
                }
            }
        }
            , itemsDiv = this.__claimWindowDiv.find('.reward-items');
        itemsDiv.empty();
        if (dungeonResearchId === 0) {
            for (let researchId in researches) {
                let curResearch = researches[researchId];
                func(curResearch);
            }
        } else {
            if (researches[dungeonResearchId] !== undefined) {
                func(researches[dungeonResearchId]);
            }
        }
        if (rewardItems.length === 0) {
            this.__hideClaimWindow();
            this.__updateResearchListContent();
        }
        let itemsPaneDiv = itemsDiv.append($(uiUtils.applyTemplate('dungeonResearchWindowResearchListClaimWindowPane', {
            rewardItems: rewardItems,
        })));
        if (rewardItems.length < 5) {
            this.__claimWindowDiv.addClass('one-line');
        } else {
            if (rewardItems.length < 9) {
                this.__claimWindowDiv.addClass('two-line');
            } else {
                this.__claimWindowDiv.removeClass('two-line');
            }
            this.__claimWindowDiv.removeClass('one-line');
        }
        new ScrollBar(itemsPaneDiv.find('.items-pane'),false,13);
        this.__claimWindowDivClaimButton = this.__claimWindowDiv.find('.claim-button').off().on('click', (e)=>{
                this.__onClaimWindowDivClaimButtonClick(e);
            }
        ).addClass('disabled');
        this.__claimWindowDiv.find('.cancel-button').off().on('click', (e)=>{
                this.__onClaimWindowDivCancelButtonClick(e);
            }
        );
        this.__claimWindowRewardItems = this.__claimWindowDiv.find('.reward-item').off().on('click', (e)=>{
                this.__onClaimWindowDivRewardItemClick(e);
            }
        );
    }
    __updateEvents() {
        this.__divTabs = this.__div.find('.tabs > div.tab').off().on('click', (e)=>{
                this.__onTabClick(e);
            }
        );
        this.__buyCoinsButton = this.__div.find('.buy-coins-button').off().on('click', (e)=>{
                this.__onBuyCoinsButton(e);
            }
        );
    }
    __onClaimWindowDivRewardItemClick(e) {
        let curItem = $(e.currentTarget);
        if (curItem.hasClass('selected')) {
            curItem.removeClass('selected');
        } else {
            curItem.addClass('selected');
        }
        if (this.__claimWindowRewardItems.filter('.selected').length > 0) {
            this.__claimWindowDivClaimButton.removeClass('disabled');
        } else {
            this.__claimWindowDivClaimButton.addClass('disabled');
        }
    }
    __onClaimWindowDivClaimButtonClick(e) {
        if (this.__claimWindowDivClaimButton.hasClass('disabled'))
            return;
        this.__claimWindowDivClaimButton.addClass('disabled');
        let rewardsArray = []
            , checkedDivs = this.__claimWindowRewardItems.filter('.selected')
            , method = 'dungeonResearch:claimRewardItem'
            , req = new request();
        checkedDivs.each(function() {
            let curDiv = $(this);
            rewardsArray.push(parseInt(curDiv.attr('drri')));
        });
        req.addGetting(method, request.all, {});
        req.addPostData({
            'ra': JSON.stringify(rewardsArray)
        });
        req.getResponse((data)=>{
                if (/error/.test(data['return'][method])) {
                    messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                } else if (data['return'][method] === 2) {
                    messageController.showSystemMessage(i18nModel.getTextByCode('error:dungeonResearch:bagIsBusy'));
                }
                this.__claimWindowDivClaimButton.removeClass('disabled');
            }
            , {
                timeout: 20000,
                callback: uiWindow.ajaxError
            });
    }
    __onClaimWindowDivCancelButtonClick(e) {
        this.__hideClaimWindow();
    }
    isShown() {
        return this.__show;
    }
    onPlayerItemsChanges() {
        if (this.isShown()) {
            this.__updateCoinsValue();
        }
    }
    onPlayerDataChanges() {
        if (this.isShown()) {
            if (this.__activeTab === 'researches') {
                if (this.__isClaimWindowShown()) {
                    this.__updateClaimWindow(this.__claimWindowDungeonResearch);
                }
                this.__updateResearchListContent();
            } else {
                this.__updateDungeonListResearchPane();
                this.__dungeonListUpdateResearchCount();
            }
            this.__updateTabsData();
        }
    }
    __onBuyCoinsButton() {
        if (this.__buyCoinsButton.hasClass('disabled'))
            return;
        this.__buyCoinsButton.addClass('disabled');
        gameController.coinsExchange.showWindow(()=>{
                this.__updateCoinsValue();
                this.__buyCoinsButton.removeClass('disabled');
            }
        );
    }
    __updateCoinsValue() {
        let coinsValue = CoinsExchange.getCoins();
        this.__coinsValue.text(coinsValue);
    }
    setTab(tab) {
        this.__divTabs.removeClass('active');
        this.__divTabs.filter('.tab[tabs="' + tab + '"]').addClass('active');
        this.__activeTab = tab;
        this.__onTabChange();
    }
    __onTabClick(e) {
        let curObj = $(e.currentTarget)
            , tabType = curObj.attr('tabs');
        this.setTab(tabType);
    }
    __onTabChange() {
        this.__fillData();
    }
    __generateDungeonList() {
        this.__div.filter('#dungeon-research').removeClass('research-list');
        this.__activeDungeon = 0;
        this.__dungeonListUpdateContent();
        this.__updateDungeonListResearchPane();
        this.__updateDungeonListCostPane();
    }
    __dungeonListSendButtonClick() {
        if (this.__dungeonListSendButton.hasClass('disabled'))
            return;
        this.__dungeonListSendButton.addClass('disabled');
        let method = 'dungeonResearch:startDungeonResearch'
            , req = new request();
        req.addGetting(method, request.all, {});
        req.addPostData({
            'd': this.__activeDungeon
        });
        req.getResponse((data)=>{
                if (/error/.test(data['return'][method])) {
                    messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    this.__dungeonListSendButton.removeClass('disabled');
                } else {
                    this.__dungeonListSendButton.removeClass('disabled');
                }
            }
            , {
                timeout: 20000,
                callback: uiWindow.ajaxError
            });
    }
    __dungeonListUpdateContent() {
        let dungeonGroup = parseInt(this.__activeTab)
            , dungeonList = {};
        for (let dungeonType in staticDataModel.dungeonResearchStaticData) {
            let dungeon = staticDataModel.dungeonResearchStaticData[dungeonType];
            if (dungeon.type === dungeonGroup) {
                dungeonList[dungeonType] = dungeon;
                dungeonList[dungeonType].img = staticDataUrl + 'resource/dungeonResearch/dungeons/' + dungeonType + '.jpg';
            }
        }
        this.__dungeonListDiv.empty();
        this.__dungeonListDiv.append(uiUtils.applyTemplate('dungeonResearchWindowDungeonList', {
            i18n: i18nModel.getData().dungeonResearch.dungeonList,
            dungeons: dungeonList,
            dungeonNames: i18nModel.getData().dungeonResearch.dungeonNames,
            cnt: 0,
        }));
        this.__dungeonListScrollBar = new ScrollBar(this.__dungeonListDiv.find('.content-block'),false,13);
        this.__dungeonListResearchesPaneValue = this.__dungeonListDiv.find('.researches-pane > .value');
        this.__dungeonListCostPaneValue = this.__dungeonListDiv.find('.cost-pane > .value');
        this.__dungeonListDungeonItems = this.__dungeonListDiv.find('.dungeon-item').off().on('click', (e)=>{
                this.__onDungeonListDungeonItemClick(e);
            }
        ).tooltip({
            delay: 0,
            left: 40,
            top: 0,
            showURL: false,
            track: true,
            bodyHandler() {
                let dungeonType = parseInt($(this).attr('type'))
                    , dungeonData = staticDataModel.dungeonResearchStaticData[dungeonType]
                    , tmplData = {
                    dungeonName: i18nModel.getData().dungeonResearch.dungeonNames[dungeonType],
                    i18n: i18nModel.getData().dungeonResearch.dungeonList.tooltip,
                    items: [],
                    cnt: 0,
                    cost: 0,
                    time: Util.secondsToString(0, i18nModel.getTimeFormat()),
                };
                if (dungeonData !== undefined) {
                    tmplData.cost = dungeonData.cost;
                    tmplData.time = Util.secondsToString(dungeonData.time, i18nModel.getTimeFormat());
                    tmplData.researchCount = dungeonData.max;
                    for (let index in dungeonData.rewards) {
                        let reward = dungeonData.rewards[index];
                        tmplData.items.push({
                            chance: reward.percent,
                            img: reward.img,
                        });
                    }
                }
                return uiUtils.applyTemplate('dungeonResearchWindowDungeonListTooltip', tmplData);
            }
        });
        this.__dungeonListSendButton = this.__dungeonListDiv.find('.send-button').off().on('click', (e)=>{
                this.__dungeonListSendButtonClick(e);
            }
        );
        this.__updateDungeonListResearchPane();
        this.__dungeonListUpdateResearchCount();
    }
    __dungeonListUpdateResearchCount(dungeonType=0) {
        if (this.__activeTab === 'researches')
            return;
        let researches = playerModel.getData().DungeonResearches
            , func = (dungeonItemDiv)=>{
                let dungeonType = parseInt(dungeonItemDiv.attr('type'))
                    , cnt = 0;
                for (let researchId in researches) {
                    let research = researches[researchId];
                    if (research.dungeonType === dungeonType) {
                        cnt++;
                    }
                }
                if (cnt > 0) {
                    dungeonItemDiv.addClass('researched');
                    dungeonItemDiv.find('span.cur').text(cnt);
                } else {
                    dungeonItemDiv.removeClass('researched');
                }
            }
        ;
        if (dungeonType === 0) {
            this.__dungeonListDungeonItems.each(function() {
                func($(this));
            });
        } else {
            func(this.__dungeonListDungeonItems.filter('[type="' + dungeonType + '"]'));
        }
    }
    __updateTabsData() {
        let dungeonData = staticDataModel.dungeonResearchStaticData
            , dungeonResearches = playerModel.getData().DungeonResearches
            , cntByGroup = {};
        for (let dungeonResearchId in dungeonResearches) {
            let dungeonResearch = dungeonResearches[dungeonResearchId]
                , dungeonType = dungeonResearch['dungeonType'];
            if (dungeonData[dungeonType] !== undefined) {
                let dungeonGroup = dungeonData[dungeonType].type;
                if (cntByGroup[dungeonGroup] === undefined) {
                    cntByGroup[dungeonGroup] = 0;
                }
                cntByGroup[dungeonGroup]++;
            }
        }
        for (let tabId of this.__getDungeonGroups()) {
            let curTab = this.__divTabs.filter('[tabs="' + tabId + '"]');
            if (cntByGroup[tabId] !== undefined) {
                curTab.children('.active-researches').html(cntByGroup[tabId]);
            } else {
                curTab.children('.active-researches').html('');
            }
        }
    }
    __onDungeonListDungeonItemClick(e) {
        let curObj = $(e.currentTarget);
        this.__dungeonListDungeonItems.removeClass('active');
        curObj.addClass('active');
        this.__activeDungeon = parseInt(curObj.attr('type'));
        this.__updateDungeonListCostPane();
    }
    __updateDungeonListResearchPane() {
        let dungeonResearches = playerModel.getData().DungeonResearches
            , cnt = 0;
        for (let dungeonResearch in dungeonResearches) {
            cnt++;
        }
        this.__dungeonListResearchesPaneValue.text(cnt + ' / ' + staticDataModel.config.dungeonResearchMaxQuantity);
    }
    __updateDungeonListCostPane() {
        let cost = 0;
        if (this.__activeDungeon > 0) {
            let dungeonData = staticDataModel.dungeonResearchStaticData[this.__activeDungeon];
            if (dungeonData !== undefined) {
                cost = dungeonData['cost'] || 0;
            }
            if (cost > 0) {
                this.__dungeonListSendButton.removeClass('disabled');
            }
        } else {
            this.__dungeonListSendButton.addClass('disabled');
        }
        this.__dungeonListCostPaneValue.text(cost);
    }
    __generateResearchList() {
        this.__div.filter('#dungeon-research').addClass('research-list');
        this.__updateResearchListContent();
        this.__updateDungeonListResearchPane();
        this.__updateDungeonListCostPane();
    }
    __getResearchStageLabel(percent) {
        let i18nStages = i18nModel.getData().dungeonResearch.researchList.stages
            , stage = i18nStages[0];
        for (let percentCap in i18nStages) {
            if (parseInt(percentCap) >= percent) {
                break;
            }
            stage = i18nStages[percentCap];
        }
        return stage;
    }
    __updateResearchListContent() {
        this.__researchListDiv.empty();
        this.__researchListDiv.append(uiUtils.applyTemplate('dungeonResearchWindowResearchList', {
            i18n: i18nModel.getData().dungeonResearch.researchList
        }));
        let researches = playerModel.getData().DungeonResearches
            , researchListBody = this.__researchListDiv.find('#research-list > .main-block > .body > .body-pane')
            , now = Util.getCurrentTimestamp();
        for (let researchId in researches) {
            let research = researches[researchId]
                , aiSize = Util.sizeOfObject(research.r)
                , lastTime = Math.max(research.startTime + research.researchTime - now, 0)
                , percent = 100 - lastTime / research.researchTime * 100;
            researchListBody.append(uiUtils.applyTemplate('dungeonResearchWindowResearchListItem', {
                i18n: i18nModel.getData().dungeonResearch.researchList.listItem,
                i18nDungeonName: i18nModel.getData().dungeonResearch.dungeonNames[research.dungeonType],
                dungeonResearch: {
                    nf: aiSize === 0,
                    stage: percent === 100 ? this.__getFoundLabel(aiSize) : this.__getResearchStageLabel(Math.floor(percent)),
                    lastTime: Util.secondsToString(lastTime, i18nModel.getTimeFormat()),
                    percent: Math.floor(percent) + '%',
                    percentValue: percent,
                    finishTime: Util.timestampToDateTimeString(research.startTime + research.researchTime, i18nModel.getDateTimeFormat(), {
                        showDateForAnotherDay: true,
                        currentTime: now,
                        timeFormat: i18nModel.getTimeFormat()
                    }),
                    id: researchId,
                },
            }));
        }
        this.__researchListItems = researchListBody.find('.research-item');
        this.__researchListItems.find('.claim-button').off().on('click', (e)=>{
                this.__researchListItemsClaimClick(e);
            }
        );
        this.__researchListDiv.find('.claim-all-button').off().on('click', (e)=>{
                this.__researchListClaimAllClick(e);
            }
        );
        this.__researchListScrollBar = new ScrollBar(researchListBody,false,13);
    }
    __getFoundLabel(aiSize) {
        let i18nResearchList = i18nModel.getData().dungeonResearch.researchList;
        if (aiSize > 0) {
            if (i18nResearchList.found[aiSize] !== undefined) {
                return String.format(i18nResearchList.found[aiSize], [aiSize]);
            } else {
                if (i18nResearchList.found[aiSize % 10] !== undefined) {
                    return String.format(i18nResearchList.found[aiSize % 10], [aiSize]);
                } else {
                    return String.format(i18nResearchList.found[0], [aiSize]);
                }
            }
        } else {
            return i18nResearchList.notFound;
        }
    }
    __researchListClaimAllClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled'))
            return;
        curButton.addClass('disabled');
        let researches = playerModel.getData().DungeonResearches;
        for (let researchId in researches) {
            let now = Util.getCurrentTimestamp()
                , research = researches[researchId];
            if (research.startTime + research.researchTime <= now) {
                this.__showClaimWindow(0, ()=>{
                        curButton.removeClass('disabled');
                    }
                );
                return;
            }
        }
        curButton.removeClass('disabled');
    }
    __researchListItemsClaimClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled'))
            return;
        curButton.addClass('disabled');
        let curResearchDiv = curButton.parents('.research-item')
            , curResearches = parseInt(curResearchDiv.attr('dri'));
        if (curResearchDiv.hasClass('not-found')) {
            let method = 'dungeonResearch:finishResearch'
                , req = new request();
            req.addGetting(method, request.all, {});
            req.addPostData({
                'dri': curResearches
            });
            req.getResponse((data)=>{
                    if (/error/.test(data['return'][method])) {
                        messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    }
                    curButton.removeClass('disabled');
                }
                , {
                    timeout: 20000,
                    callback: uiWindow.ajaxError
                });
        } else {
            let researches = playerModel.getData().DungeonResearches;
            if (researches[curResearches] === undefined) {
                return;
            }
            this.__showClaimWindow(curResearches, ()=>{
                    curButton.removeClass('disabled');
                }
            );
        }
    }
    __getDungeonGroups() {
        return [1, 2, 3, 4];
    }
    __onTick() {
        if (this.__activeTab === 'researches') {
            let researches = playerModel.getData().DungeonResearches
                , now = Util.getCurrentTimestamp();
            for (let researchId in researches) {
                let curResearchDiv = this.__researchListItems.filter('[dri="' + researchId + '"]');
                if (curResearchDiv.hasClass('finished'))
                    continue;
                let research = researches[researchId]
                    , lastTime = research.startTime + research.researchTime - now;
                if (lastTime <= 0) {
                    curResearchDiv.addClass('finished');
                    curResearchDiv.find('.claim-button').removeClass('disabled');
                    curResearchDiv.find('.progress-bar > .stage').text(this.__getFoundLabel(Util.sizeOfObject(research.r)));
                } else {
                    let percent = 100 - lastTime / research.researchTime * 100;
                    curResearchDiv.find('.progress-bar > .bar').css('width', percent + '%');
                    curResearchDiv.find('.progress-bar > .stage').text(this.__getResearchStageLabel(Math.floor(percent)));
                    curResearchDiv.find('.time-block > .value').html(Util.secondsToString(lastTime, i18nModel.getTimeFormat()));
                    curResearchDiv.find('.percent').html(Math.floor(percent) + '%');
                }
            }
        }
    }
    __fillData() {
        let activeTab = this.__divTabs.filter('.active').attr('tabs');
        if (activeTab === 'researches') {
            this.__generateResearchList();
            if (this.__intervalId) {
                delete timingModel.intervaled[defenceWindowModel.intervalId];
                this.__intervalId = null;
            }
            this.__intervalId = timingModel.addIntervaled({
                interval: 1,
                onTick: ()=>{
                    this.__onTick();
                }
            });
            this.__onTick();
        } else {
            if (this.__intervalId) {
                delete timingModel.intervaled[this.__intervalId];
                this.__intervalId = null;
            }
            this.__generateDungeonList();
        }
        this.__updateCoinsValue();
        this.__updateTabsData();
        this.__updateEvents();
    }
    showWindow() {
        WOFWindow.setWindowClass('medium');
        WOFWindow.showWindow(i18nModel.getData().dungeonResearch.title, this.__div, this.__onHideWindow);
        this.setTab(1);
        this.__show = true;
    }
    hideWindow() {
        WOFWindow.closeWindow();
    }
    __onHideWindow() {
        WOFWindow.closeWindow();
        this.__show = false;
        if (this.__intervalId) {
            delete timingModel.intervaled[this.__intervalId];
            this.__intervalId = null;
        }
    }
}

class ExternalWindow {
    constructor() {
        window.addEventListener('message', (e)=>{
                this.__onWindowMessage(e);
            }
        );
        this.__div = $('#external-frame');
    }
    __clearFrame(callback) {
        if (this.__div.is(':empty')) {
            this.__div.attr('opacity', 0);
            callback && callback();
        } else {
            this.__div.animate({
                    opacity: 0
                }, 200, ()=>{
                    this.__div.empty();
                    callback && callback();
                }
            );
        }
    }
    openInventory() {
        this.__clearFrame(()=>{
                this.__div.addClass('open');
                this.__div.append('<iframe src="https://www.feogames.ru/inventory/?ex"></iframe>');
                this.__div.animate({
                    opacity: 1
                }, 200);
            }
        );
    }
    openExchange() {
        this.__clearFrame(()=>{
                this.__div.addClass('open');
                this.__div.append('<iframe src="https://www.feogames.ru/exchange.php?ex"></iframe>');
                this.__div.animate({
                    opacity: 1
                }, 200);
            }
        );
    }
    openMarket() {
        this.__clearFrame(()=>{
                this.__div.addClass('open');
                this.__div.append('<iframe src="https://www.feogames.ru/market.php?ex"></iframe>');
                this.__div.animate({
                    opacity: 1
                }, 200);
            }
        );
    }
    close(callback) {
        this.__clearFrame(()=>{
                this.__div.removeClass('open');
                callback && callback();
            }
        );
    }
    __onWindowMessage(e) {
        switch (e.data.type) {
            case 'exchange':
                switch (e.data.message) {
                    case 'close':
                        this.close();
                        break;
                }
                break;
            case 'inventory':
                switch (e.data.message) {
                    case 'close':
                        this.close();
                        break;
                    case 'market':
                        this.close(()=>{
                                gameController.externalWindow.openMarket();
                            }
                        );
                        break;
                }
                break;
            case 'market':
                switch (e.data.message) {
                    case 'close':
                        this.close();
                        break;
                    case 'inventory':
                        this.close(()=>{
                                gameController.externalWindow.openInventory();
                            }
                        );
                        break;
                }
                break;
        }
    }
}

class GL {
    loadImageAndCreateTextureInfo(url, onLoad) {
        let self = this
            , img = new Image();
        img.addEventListener('load', function() {
            let tex = self.__gl.createTexture();
            self.__gl.bindTexture(self.__gl.TEXTURE_2D, tex);
            self.__gl.texImage2D(self.__gl.TEXTURE_2D, 0, self.__gl.RGBA, 1, 1, 0, self.__gl.RGBA, self.__gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));
            let textureInfo = {
                width: img.width,
                height: img.height,
                texture: tex,
            };
            if (Math.log2(img.width * img.height) % 1 === 0) {
                self.__gl.texParameteri(self.__gl.TEXTURE_2D, self.__gl.TEXTURE_WRAP_S, self.__gl.REPEAT);
                self.__gl.texParameteri(self.__gl.TEXTURE_2D, self.__gl.TEXTURE_WRAP_T, self.__gl.REPEAT);
            } else {
                self.__gl.texParameteri(self.__gl.TEXTURE_2D, self.__gl.TEXTURE_WRAP_S, self.__gl.CLAMP_TO_EDGE);
                self.__gl.texParameteri(self.__gl.TEXTURE_2D, self.__gl.TEXTURE_WRAP_T, self.__gl.CLAMP_TO_EDGE);
            }
            self.__gl.texParameteri(self.__gl.TEXTURE_2D, self.__gl.TEXTURE_MIN_FILTER, self.__gl.LINEAR);
            self.__gl.bindTexture(self.__gl.TEXTURE_2D, textureInfo.texture);
            self.__gl.texImage2D(self.__gl.TEXTURE_2D, 0, self.__gl.RGBA, self.__gl.RGBA, self.__gl.UNSIGNED_BYTE, img);
            onLoad && onLoad(textureInfo);
        });
        img.crossOrigin = "anonymous";
        img.src = url;
    }
    partialClear(x, y, width, height) {
        this.__gl.enable(this.__gl.SCISSOR_TEST);
        this.__gl.scissor(x, this.getCanvasHeight() - y - height, width, height);
        this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
        this.__gl.disable(this.__gl.SCISSOR_TEST);
    }
    generateBackgroundArray(width, height, texWidth, texHeight) {
        texWidth = texWidth || staticDataModel.mapParams.maxX * WorldMap.cell.width / width;
        texHeight = texHeight || staticDataModel.mapParams.maxY * WorldMap.cell.height / height;
        this.__backgroundBuffer = this.__gl.createBuffer();
        this.__gl.bindBuffer(this.__gl.ARRAY_BUFFER, this.__backgroundBuffer);
        let backgroundCoords = [0, 0, 0, texHeight, texWidth, 0, texWidth, 0, 0, texHeight, texWidth, texHeight, ];
        this.__gl.bufferData(this.__gl.ARRAY_BUFFER, new Float32Array(backgroundCoords), this.__gl.STATIC_DRAW);
    }
    drawBackground(tex, dstX, dstY, width, height) {
        let texWidth = width || gameController.gameData.maxX * WorldMap.cell.width
            , texHeight = height || gameController.gameData.maxY * WorldMap.cell.height;
        this.__gl.bindTexture(this.__gl.TEXTURE_2D, tex);
        this.__gl.useProgram(this.__program);
        this.__gl.bindBuffer(this.__gl.ARRAY_BUFFER, this.__positionBuffer);
        this.__gl.enableVertexAttribArray(this.__positionLocation);
        this.__gl.vertexAttribPointer(this.__positionLocation, 2, this.__gl.FLOAT, false, 0, 0);
        this.__gl.bindBuffer(this.__gl.ARRAY_BUFFER, this.__backgroundBuffer);
        this.__gl.enableVertexAttribArray(this.__texcoordLocation);
        this.__gl.vertexAttribPointer(this.__texcoordLocation, 2, this.__gl.FLOAT, false, 0, 0);
        let matrix = m4.orthographic(0, this.__gl.canvas.width, this.__gl.canvas.height, 0, -1, 1);
        matrix = m4.translate(matrix, dstX, dstY, 0);
        matrix = m4.scale(matrix, texWidth, texHeight, 1);
        this.__gl.uniformMatrix4fv(this.__matrixLocation, false, matrix);
        this.__gl.uniformMatrix4fv(this.__textureMatrixLocation, false, m4.translation(0, 0, 0));
        this.__gl.uniform1i(this.__textureLocation, 0);
        this.__gl.drawArrays(this.__gl.TRIANGLES, 0, 6);
    }
    drawImage(tex, texWidth, texHeight, srcX, srcY, srcWidth=texWidth, srcHeight=texHeight, dstX=undefined, dstY=undefined, dstWidth=srcWidth, dstHeight=srcHeight) {
        if (dstX === undefined) {
            dstX = srcX;
            srcX = 0;
        }
        if (dstY === undefined) {
            dstY = srcY;
            srcY = 0;
        }
        this.__gl.bindTexture(this.__gl.TEXTURE_2D, tex);
        this.__gl.useProgram(this.__program);
        this.__gl.bindBuffer(this.__gl.ARRAY_BUFFER, this.__positionBuffer);
        this.__gl.enableVertexAttribArray(this.__positionLocation);
        this.__gl.vertexAttribPointer(this.__positionLocation, 2, this.__gl.FLOAT, false, 0, 0);
        this.__gl.bindBuffer(this.__gl.ARRAY_BUFFER, this.__texcoordBuffer);
        this.__gl.enableVertexAttribArray(this.__texcoordLocation);
        this.__gl.vertexAttribPointer(this.__texcoordLocation, 2, this.__gl.FLOAT, false, 0, 0);
        let matrix = m4.orthographic(0, this.__gl.canvas.width, this.__gl.canvas.height, 0, -1, 1);
        matrix = m4.translate(matrix, dstX, dstY, 0);
        matrix = m4.scale(matrix, dstWidth, dstHeight, 1);
        this.__gl.uniformMatrix4fv(this.__matrixLocation, false, matrix);
        let texMatrix = m4.translation(srcX / texWidth, srcY / texHeight, 0);
        texMatrix = m4.scale(texMatrix, srcWidth / texWidth, srcHeight / texHeight, 1);
        this.__gl.uniformMatrix4fv(this.__textureMatrixLocation, false, texMatrix);
        this.__gl.uniform1i(this.__textureLocation, 0);
        this.__gl.drawArrays(this.__gl.TRIANGLES, 0, 6);
    }
    createColorTexture(r, g, b) {
        let self = this
            , tex = self.__gl.createTexture();
        self.__gl.bindTexture(self.__gl.TEXTURE_2D, tex);
        self.__gl.texImage2D(self.__gl.TEXTURE_2D, 0, self.__gl.RGBA, 1, 1, 0, self.__gl.RGBA, self.__gl.UNSIGNED_BYTE, new Uint8Array([r, g, b, 255]));
        self.__gl.generateMipmap(self.__gl.TEXTURE_2D);
        return tex;
    }
    getCanvasWidth() {
        return this.__gl.canvas.width;
    }
    getCanvasHeight() {
        return this.__gl.canvas.height;
    }
    loadImageAsync(url, callback) {
        let self = this
            , tex = self.__gl.createTexture();
        self.__gl.bindTexture(self.__gl.TEXTURE_2D, tex);
        self.__gl.texImage2D(self.__gl.TEXTURE_2D, 0, self.__gl.RGBA, 1, 1, 0, self.__gl.RGBA, self.__gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 0]));
        self.__gl.texParameteri(self.__gl.TEXTURE_2D, self.__gl.TEXTURE_WRAP_S, self.__gl.CLAMP_TO_EDGE);
        self.__gl.texParameteri(self.__gl.TEXTURE_2D, self.__gl.TEXTURE_WRAP_T, self.__gl.CLAMP_TO_EDGE);
        self.__gl.texParameteri(self.__gl.TEXTURE_2D, self.__gl.TEXTURE_MIN_FILTER, self.__gl.LINEAR);
        let img = new Image();
        img.addEventListener('load', function() {
            self.__gl.bindTexture(self.__gl.TEXTURE_2D, tex);
            self.__gl.texImage2D(self.__gl.TEXTURE_2D, 0, self.__gl.RGBA, self.__gl.RGBA, self.__gl.UNSIGNED_BYTE, img);
            callback && callback();
        });
        img.crossOrigin = "anonymous";
        img.src = url;
        return tex;
    }
    clearGL() {
        this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
    }
    initGL(id) {
        let canvas = document.getElementById(id);
        this.__gl = canvas.getContext("webgl", {
            preserveDrawingBuffer: true
        });
        if (!this.__gl) {
            return;
        }
        this.__gl.blendFunc(this.__gl.SRC_ALPHA, this.__gl.ONE_MINUS_SRC_ALPHA);
        this.__gl.disable(this.__gl.DEPTH_TEST);
        this.__gl.enable(this.__gl.BLEND);
        this.__program = webglUtils.createProgramFromSources(this.__gl, ["attribute vec4 a_position;\n" + "attribute vec2 a_texcoord;\n" + "uniform mat4 u_matrix;\n" + "uniform mat4 u_textureMatrix;\n" + "varying vec2 v_texcoord;\n" + "void main() {\n" + "   gl_Position = u_matrix * a_position;\n" + "   v_texcoord = (u_textureMatrix * vec4(a_texcoord, 0, 1)).xy;\n" + "}", "precision mediump float;\n" + "varying vec2 v_texcoord;\n" + "uniform sampler2D u_texture;\n" + "void main() {\n" + "   gl_FragColor = texture2D(u_texture, v_texcoord);\n" + "}"]);
        this.__positionLocation = this.__gl.getAttribLocation(this.__program, "a_position");
        this.__texcoordLocation = this.__gl.getAttribLocation(this.__program, "a_texcoord");
        this.__matrixLocation = this.__gl.getUniformLocation(this.__program, "u_matrix");
        this.__textureMatrixLocation = this.__gl.getUniformLocation(this.__program, "u_textureMatrix");
        this.__textureLocation = this.__gl.getUniformLocation(this.__program, "u_texture");
        this.__positionBuffer = this.__gl.createBuffer();
        this.__gl.bindBuffer(this.__gl.ARRAY_BUFFER, this.__positionBuffer);
        let positions = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, ];
        this.__gl.bufferData(this.__gl.ARRAY_BUFFER, new Float32Array(positions), this.__gl.STATIC_DRAW);
        this.__texcoordBuffer = this.__gl.createBuffer();
        this.__gl.bindBuffer(this.__gl.ARRAY_BUFFER, this.__texcoordBuffer);
        let texcoords = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, ];
        this.__gl.bufferData(this.__gl.ARRAY_BUFFER, new Float32Array(texcoords), this.__gl.STATIC_DRAW);
    }
    setViewport() {
        webglUtils.resizeCanvasToDisplaySize(this.__gl.canvas);
        this.__gl.viewport(0, 0, this.__gl.canvas.width, this.__gl.canvas.height);
        this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
    }
    constructor(id) {
        this.initGL(id);
    }
}

class MiniMap {
    constructor() {
        let self = this;
        self.__cell = {
            1: {
                height: 4,
                width: 4,
            },
            2: {
                height: 6,
                width: 6,
            },
            3: {
                height: 10,
                width: 10,
            },
        };
        self.initialized = false;
        self.__backgroundShift = {
            x: 0,
            y: 0,
        };
        self.__curSize = 1;
        self.__colorTextures = {};
        self.__mousePosition = {
            x: -1,
            y: -1
        };
        self.__clicked = false;
        self.__moved = false;
        self.__raf = null;
        self.__mapObjectTextures = {};
        self.__centerCoords = {
            x: 0,
            y: 0,
        };
        self.__needDraw = true;
    }
    prepare() {
        let self = this;
        if (self.initialized) {
            self.__div.appendTo($.pageContainer);
            self.__update();
            return;
        }
        self.__div = $(uiUtils.applyTemplate('minimap', {
            'go': i18nModel.data['map']['sidebar']['titles']['go']
        })).appendTo($.pageContainer);
        if ($.body.width() >= 1599) {
            self.__div.addClass('higher');
        } else {
            self.__div.removeClass('higher');
        }
        self.__viewport = {
            div: self.__div.children('.mini-map-viewport'),
        };
        self.__viewport.width = self.__viewport.div.width();
        self.__viewport.height = self.__viewport.div.height();
        self.__needLand = playerModel.getSettings().minimapLand;
        self.__coordsPanel = self.__div.find('.coordinate-panel');
        self.__landButton = self.__div.find('.land-button').clickable().click((e)=>{
                self.__onLandButtonClick(e);
            }
        );
        if (playerModel.getSettings().minimapZoom) {
            self.__curSize = playerModel.getSettings().minimapZoom;
        }
        self.__div.find('.zoom-button').removeClass('active').filter('.zoom' + self.__curSize).addClass('active');
        self.__selection = {
            div: self.__viewport.div.children('.selection'),
        };
        self.__selection.width = self.__cell[self.__curSize].width / WorldMap.cell.width * uiManager.viewport.width();
        self.__selection.height = self.__cell[self.__curSize].height / WorldMap.cell.height * uiManager.viewport.height();
        self.__selection.div.css({
            width: self.__selection.width,
            height: self.__selection.height,
            'margin-left': -self.__selection.width / 2 - 4,
            'margin-top': -self.__selection.height / 2 - 4
        });
        if (playerModel.getSettings().minimapLand) {
            self.__landButton.addClass('active');
        }
        if (playerModel.getSettings().minimapMinimize) {
            $.pageContainer.addClass('minimap-in-sidebar');
        }
        self.__coordsPanel.find('.submit').clickable().click(()=>{
                self.__onSearchClick();
            }
        );
        self.__div.find('.minimize-button').clickable().click((e)=>{
                self.__onMinimizeClick(e);
            }
        );
        self.__coordsPanel.find('input').off().on('keydown', (e)=>{
                return self.__onInputKeyDown(e);
            }
        ).on('paste', (e)=>{
                return self.__onInputPaste(e);
            }
        ).on('contextmenu', (e)=>{
                return false;
            }
        ).on('mousedown', (e)=>{
                self.__onInputMouseDown(e);
            }
        ).on('focusout', (e)=>{
                self.__onInputFocusOut(e);
            }
        );
        self.__back = {
            div: self.__viewport.div.children('.back'),
        };
        self.__viewport.div.children('.hover-layer').on('mousedown touchstart', (e)=>{
                self.__onMouseDown(e);
            }
        ).on('mouseup touchend touchcancel mouseleave', (e)=>{
                self.__onMouseUp(e);
            }
        ).on('mousemove touchmove', (e)=>{
                self.__onMouseMove(e);
            }
        ).mousewheel((e)=>{
                self.__onMouseWheel(e);
            }
        );
        self.__div.find('.zoom-button.minus').click(function() {
            let curObj = $(this);
            if (self.__curSize === 3) {
                self.__changeZoom(2);
            } else if (self.__curSize === 2) {
                self.__changeZoom(1);
            }
        });
        self.__div.find('.zoom-button.plus').click(function() {
            let curObj = $(this);
            if (self.__curSize === 1) {
                self.__changeZoom(2);
            } else if (self.__curSize === 2) {
                self.__changeZoom(3);
            }
        });
        self.__div.find('.map-button').click(function() {
            let curObj = $(this)
                , x = self.__centerCoords.x
                , y = self.__centerCoords.y;
            if (curObj.hasClass('left-button')) {
                gameController.worldMap.goToCoordinate(x - 20, y);
            } else if (curObj.hasClass('right-button')) {
                gameController.worldMap.goToCoordinate(x + 20, y);
            } else if (curObj.hasClass('up-button')) {
                gameController.worldMap.goToCoordinate(x, y - 20);
            } else if (curObj.hasClass('down-button')) {
                gameController.worldMap.goToCoordinate(x, y + 20);
            }
        });
        self.__gl = new GL('mini-map-canvas');
        self.__createColorTextures();
        self.__gl.generateBackgroundArray(1, 1, self.__cell[self.__curSize].width * gameController.gameData.maxX, self.__cell[self.__curSize].height * gameController.gameData.maxY);
        self.__gl.setViewport();
        self.initialized = true;
        self.__update();
    }
    __onInputKeyDown(e) {
        if (!(e.keyCode === 86 && e.ctrlKey)) {
            if (e.keyCode === 13) {
                this.__coordsPanel.find('.submit').click();
            } else if (e.key.length === 1) {
                let curInput = $(e.currentTarget)
                    , val = curInput.val()
                    , curPosition = e.target.selectionStart
                    , leftSide = val.slice(0, curPosition)
                    , rightSide = val.slice(curPosition, val.length);
                val = parseInt(leftSide + e.key + rightSide) || 0;
                curInput.val(Math.max(staticDataModel.mapParams.minX, Math.min(val, staticDataModel.mapParams.maxX)));
                return false;
            }
        }
        return true;
    }
    __onInputMouseDown(e) {
        let curInput = $(e.currentTarget)
            , val = parseInt(curInput.val());
        if (val === 0) {
            curInput.val('');
        }
    }
    __onInputPaste(e) {
        let curInput = $(e.currentTarget)
            , text = (e.originalEvent || e).clipboardData.getData('text/plain')
            , match = /X: (\d{1,3}) Y: (\d{1,3})/.exec(text);
        if (match === null) {
            let val = curInput.val()
                , curPosition = e.target.selectionStart
                , leftSide = val.slice(0, curPosition)
                , rightSide = val.slice(curPosition, val.length);
            val = parseInt(leftSide + text + rightSide) || 0;
            curInput.val(Math.max(staticDataModel.mapParams.minX, Math.min(val, staticDataModel.mapParams.maxX)));
        } else {
            let x = match[1]
                , y = match[2]
                , xInput = this.__coordsPanel.find('input[title="X"]')
                , yInput = this.__coordsPanel.find('input[title="Y"]');
            xInput.val(x);
            yInput.val(y);
        }
        return false;
    }
    __onInputFocusOut(e) {
        let curInput = $(e.currentTarget)
            , val = curInput.val();
        if (val === '') {
            curInput.val(0);
        }
    }
    getCentralPosition() {
        let self = this
            , x = Math.round((self.__gl.getCanvasWidth() / 2 - self.__backgroundShift.x) / self.__cell[self.__curSize].width)
            , y = Math.round((self.__gl.getCanvasHeight() / 2 - self.__backgroundShift.y) / self.__cell[self.__curSize].height);
        return {
            x: x,
            y: y
        };
    }
    updateMap() {
        this.__needDraw = true;
    }
    __goTo(x, y) {
        let self = this;
        self.__backgroundShift.x = self.__gl.getCanvasWidth() / 2 - x * self.__cell[self.__curSize].width;
        self.__backgroundShift.y = self.__gl.getCanvasHeight() / 2 - y * self.__cell[self.__curSize].height;
        self.__centerCoords = self.getCentralPosition();
        self.updateMap();
    }
    updatePosition() {}
    __update() {
        let self = this;
        if (self.__needDraw) {
            self.drawView();
        }
        self.__raf = requestAnimationFrame(()=>{
                self.__update();
            }
        );
    }
    setPosition() {
        if (this.initialized && gameController.isMap()) {
            let mapPosition = gameController.worldMap.getCentralPosition();
            this.__goTo(mapPosition.x, mapPosition.y);
        }
    }
    drawView() {
        let self = this
            , xMin = Math.floor(-self.__backgroundShift.x / self.__cell[self.__curSize].width)
            , xMax = xMin + Math.ceil(self.__gl.getCanvasWidth() / self.__cell[self.__curSize].width)
            , yMin = Math.floor(-self.__backgroundShift.y / self.__cell[self.__curSize].height)
            , yMax = yMin + Math.ceil(self.__gl.getCanvasHeight() / self.__cell[self.__curSize].height);
        self.__gl.clearGL();
        self.__gl.drawBackground(self.__colorTextures['grass'], self.__backgroundShift.x, self.__backgroundShift.y, self.__cell[self.__curSize].width * gameController.gameData.maxX, self.__cell[self.__curSize].height * gameController.gameData.maxY);
        for (let x = xMin; x <= xMax; x++) {
            if (gameController.gameData.map[x] === undefined)
                continue;
            for (let y = yMin; y <= yMax; y++) {
                if (gameController.gameData.map[x][y] === undefined)
                    continue;
                if (gameController.gameData.map[x][y].town !== undefined) {
                    self.__drawTown(x, y);
                } else if (gameController.gameData.map[x][y].dungeon !== undefined) {
                    self.__drawDungeon(x, y);
                } else {
                    let objectId = gameController.gameData.map[x][y].objectId;
                    if (self.__needLand || MiniMap.isWater(objectId)) {
                        if (self.__mapObjectTextures[objectId] === undefined) {
                            self.__mapObjectTextures[objectId] = self.__gl.loadImageAsync(staticDataUrl + 'resource/map_objects/normal/' + gameController.gameData.mapObjectsArray[objectId].url, ()=>{
                                    self.updateMap();
                                }
                            );
                        }
                        let tex = self.__mapObjectTextures[objectId];
                        self.__gl.drawImage(tex, 100, 100, 0, 0, 100, 100, self.__backgroundShift.x + x * self.__cell[self.__curSize].width, self.__backgroundShift.y + y * self.__cell[self.__curSize].height, self.__cell[self.__curSize].width, self.__cell[self.__curSize].height);
                    }
                }
            }
        }
        self.__needDraw = false;
    }
    __createColorTextures() {
        for (let pointType in MiniMap.pointTypes) {
            let color = MiniMap.colorTable[MiniMap.pointTypes[pointType]]
                , colorArray = uiUtils.hexColorToRGB(color);
            this.__colorTextures[MiniMap.pointTypes[pointType]] = this.__gl.createColorTexture(colorArray.r, colorArray.g, colorArray.b);
        }
        this.__colorTextures['grass'] = this.__gl.createColorTexture(1, 125, 1);
        this.__colorTextures['water'] = this.__gl.createColorTexture(0, 0, 128);
    }
    __drawDungeon(x, y) {
        let self = this
            , dungeon = gameController.gameData.map[x][y].dungeon
            , colorType = dungeon.t > 10 ? MiniMap.pointTypes.POINT_TYPE_CRAFT_DUNGEON : MiniMap.pointTypes.POINT_TYPE_DUNGEON
            , tex = self.__colorTextures[colorType];
        self.__gl.drawImage(tex, 100, 100, 0, 0, 100, 100, self.__backgroundShift.x + x * self.__cell[self.__curSize].width, self.__backgroundShift.y + y * self.__cell[self.__curSize].height, self.__cell[self.__curSize].width, self.__cell[self.__curSize].height);
    }
    __drawTown(x, y) {
        let self = this
            , town = gameController.gameData.map[x][y].town
            , colorType = MiniMap.pointTypes.POINT_TYPE_BARBARIAN;
        if (town !== undefined) {
            let curPlayerData = playerModel.getData();
            if (town.pid > 0) {
                colorType = MiniMap.pointTypes.POINT_TYPE_NEUTRAL_TOWN;
                if (town.pid === curPlayerData.Id) {
                    if (town.id === townModel.getData().Id) {
                        colorType = MiniMap.pointTypes.POINT_TYPE_CURRENT_TOWN;
                    } else {
                        colorType = MiniMap.pointTypes.POINT_TYPE_MY_TOWN;
                    }
                } else {
                    if (curPlayerData.UnionId > 0 && curPlayerData.Union !== undefined) {
                        let playerData = gameController.gameData.players[town.pid];
                        if (playerData !== undefined) {
                            if (curPlayerData.UnionId === playerData.uid) {
                                colorType = MiniMap.pointTypes.POINT_TYPE_MY_UNION_TOWN;
                            } else {
                                let diplomacy = curPlayerData.Union.Diplomacy[playerData.uid];
                                if (diplomacy !== undefined) {
                                    switch (diplomacy.Relation) {
                                        case 1:
                                            colorType = MiniMap.pointTypes.POINT_TYPE_WAR_UNION_TOWN;
                                            break;
                                        case 2:
                                            colorType = MiniMap.pointTypes.POINT_TYPE_FRIENDLY_UNION_TOWN;
                                            break;
                                        case 3:
                                            colorType = MiniMap.pointTypes.POINT_TYPE_NAP_UNION_TOWN;
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            let tex = self.__colorTextures[colorType];
            self.__gl.drawImage(tex, 100, 100, 0, 0, 100, 100, self.__backgroundShift.x + x * self.__cell[self.__curSize].width, self.__backgroundShift.y + y * self.__cell[self.__curSize].height, self.__cell[self.__curSize].width, self.__cell[self.__curSize].height);
        }
    }
    __getMapCoordinateByMouseCoordinate(mouseX, mouseY) {
        let mapX = Math.floor((mouseX - this.__backgroundShift.x) / this.__cell[this.__curSize].width)
            , mapY = Math.floor((mouseY - this.__backgroundShift.y) / this.__cell[this.__curSize].height);
        return {
            x: mapX,
            y: mapY
        };
    }
    static isWater(objectId) {
        for (let index in MiniMap.water) {
            if (objectId >= MiniMap.water[index][0] && objectId <= MiniMap.water[index][1]) {
                return true;
            }
        }
        return false;
    }
    __onMouseUp(e) {
        e.preventDefault();
        e.stopPropagation();
        let self = this;
        if (self.__clicked) {
            if (self.__moved) {
                self.__mousePosition.x = -1;
                self.__mousePosition.y = -1;
                self.__clicked = false;
                self.__moved = false;
            } else {
                if (e.offsetX === undefined) {
                    e.offsetX = Math.round(e.originalEvent.targetTouches[0].clientX);
                    e.offsetY = Math.round(e.originalEvent.targetTouches[0].clientY);
                }
                let mapData = self.__getMapCoordinateByMouseCoordinate(e.offsetX, e.offsetY);
                gameController.worldMap.goToCoordinate(mapData.x, mapData.y);
                self.__clicked = false;
            }
        }
    }
    __onMouseDown(e) {
        let self = this;
        e.preventDefault();
        e.stopPropagation();
        if (e.offsetX === undefined) {
            e.offsetX = Math.round(e.originalEvent.targetTouches[0].clientX);
            e.offsetY = Math.round(e.originalEvent.targetTouches[0].clientY);
        }
        self.__mousePosition.x = e.offsetX;
        self.__mousePosition.y = e.offsetY;
        self.__clicked = true;
    }
    __onMouseMove(e) {
        let self = this;
        e.preventDefault();
        e.stopPropagation();
        if (e.offsetX === undefined) {
            e.offsetX = Math.round(e.originalEvent.targetTouches[0].clientX);
            e.offsetY = Math.round(e.originalEvent.targetTouches[0].clientY);
        }
        let deltaX = e.offsetX - self.__mousePosition.x
            , deltaY = e.offsetY - self.__mousePosition.y;
        if (self.__clicked && (Math.abs(deltaY) > 3 || Math.abs(deltaX) > 3)) {
            if (!self.__moved && (Math.abs(deltaX) < 1 && Math.abs(deltaY) < 1)) {
                return;
            }
            self.__moved = true;
            let mapCoords = this.__getMapCoordinateByMouseCoordinate(e.offsetX, e.offsetY);
            self.__backgroundShift.x += deltaX;
            self.__backgroundShift.y += deltaY;
            self.__mousePosition.x = e.offsetX;
            self.__mousePosition.y = e.offsetY;
            self.updateMap();
            gameController.worldMap.updateMap(self.__calculateWorldMapBackgroundShift());
        }
    }
    __calculateWorldMapBackgroundShift() {
        let self = this;
        return {
            x: Math.ceil(WorldMap.cell.width / self.__cell[self.__curSize].width * (self.__backgroundShift.x - (self.__gl.getCanvasWidth() - self.__selection.width) / 2)),
            y: Math.ceil(WorldMap.cell.height / self.__cell[self.__curSize].height * (self.__backgroundShift.y - (self.__gl.getCanvasHeight() - self.__selection.height) / 2))
        };
    }
    __onLandButtonClick() {
        let self = this;
        self.__landButton.toggleClass('active');
        if (self.__landButton.hasClass('active')) {
            self.__needLand = true;
            playerModel.setSetting({
                'name': 'minimapLand',
                'value': true
            });
        } else {
            self.__needLand = false;
            playerModel.setSetting({
                'name': 'minimapLand',
                'value': false
            });
        }
        self.updateMap();
    }
    __onMouseWheel(e) {
        let self = this;
        if (e.deltaY > 0) {
            if (self.__curSize === 2)
                self.__changeZoom(3);
            if (self.__curSize === 1)
                self.__changeZoom(2);
        } else {
            if (self.__curSize === 2)
                self.__changeZoom(1);
            if (self.__curSize === 3)
                self.__changeZoom(2);
        }
    }
    __changeZoom(size) {
        let self = this
            , miniMapPos = self.getCentralPosition();
        self.__curSize = size;
        self.__selection.width = self.__cell[self.__curSize].width / WorldMap.cell.width * uiManager.viewport.width();
        self.__selection.height = self.__cell[self.__curSize].height / WorldMap.cell.height * uiManager.viewport.height();
        self.__selection.div.css({
            width: self.__selection.width,
            height: self.__selection.height,
            'margin-left': -self.__selection.width / 2 - 4,
            'margin-top': -self.__selection.height / 2 - 4
        });
        self.__gl.generateBackgroundArray(1, 1, self.__cell[self.__curSize].width * gameController.gameData.maxX, self.__cell[self.__curSize].height * gameController.gameData.maxY);
        self.__goTo(miniMapPos.x, miniMapPos.y);
        self.__div.find('.zoom-button').removeClass('active').filter('.zoom' + size).addClass('active');
        playerModel.setSetting({
            'name': 'minimapZoom',
            'value': size
        });
    }
    __onSearchClick() {
        let self = this
            , x = self.__coordsPanel.find('input[title="X"]').val()
            , y = self.__coordsPanel.find('input[title="Y"]').val();
        if (isNaN(x) || isNaN(y)) {
            messageController.showSystemMessage(i18nModel.getData().messages.enterCoords);
            return false;
        }
        if (x < gameController.gameData.minX) {
            x = gameController.gameData.minX;
        }
        if (x > gameController.gameData.maxX) {
            x = gameController.gameData.maxX;
        }
        if (y < gameController.gameData.minY) {
            y = gameController.gameData.minY;
        }
        if (y > gameController.gameData.maxY) {
            y = gameController.gameData.maxY;
        }
        gameController.worldMap.goToCoordinate(x, y);
    }
    clear() {
        let self = this;
        cancelAnimationFrame(self.__raf);
    }
    __onMinimizeClick() {
        let self = this;
        $.pageContainer.toggleClass('minimap-in-sidebar');
        if ($.pageContainer.hasClass('minimap-in-sidebar')) {
            playerModel.setSetting({
                'name': 'minimapMinimize',
                'value': true
            });
        } else {
            playerModel.setSetting({
                'name': 'minimapMinimize',
                'value': false
            });
        }
        uiManager.arrangeUI();
    }
    onWindowResize() {
        let self = this;
        if (self.__viewport.div) {
            self.__selection.width = self.__cell[self.__curSize].width / WorldMap.cell.width * uiManager.viewport.width();
            self.__selection.height = self.__cell[self.__curSize].height / WorldMap.cell.height * uiManager.viewport.height();
            self.__selection.div.css({
                width: self.__selection.width,
                height: self.__selection.height,
                'margin-left': -self.__selection.width / 2 - 4,
                'margin-top': -self.__selection.height / 2 - 4
            });
            self.setPosition();
        }
        if (self.__div) {
            if ($.body.width() >= 1599) {
                self.__div.addClass('higher');
            } else {
                self.__div.removeClass('higher');
            }
        }
    }
}
MiniMap.water = [[280, 382]];
MiniMap.pointTypes = {
    POINT_TYPE_BARBARIAN: 0,
    POINT_TYPE_CURRENT_TOWN: 1,
    POINT_TYPE_MY_TOWN: 2,
    POINT_TYPE_MY_UNION_TOWN: 3,
    POINT_TYPE_FRIENDLY_UNION_TOWN: 4,
    POINT_TYPE_WAR_UNION_TOWN: 5,
    POINT_TYPE_NEUTRAL_TOWN: 6,
    POINT_TYPE_NAP_UNION_TOWN: 7,
    POINT_TYPE_DUNGEON: 8,
    POINT_TYPE_WATER: 9,
    POINT_TYPE_CONQUERED_OBJECT: 10,
    POINT_TYPE_NEEDLE: 11,
    POINT_TYPE_SMALL_WATER: 12,
    POINT_TYPE_CRAFT_DUNGEON: 13,
};
MiniMap.colorTable = {
    0: 0x969696,
    1: 0xffc600,
    2: 0xffffff,
    3: 0x00ff00,
    4: 0x00a0f4,
    5: 0xff0000,
    6: 0xcc6600,
    7: 0xff33ff,
    8: 0x000000,
    9: 0x1f597a,
    10: 0x54ff9f,
    11: 0x80ff00,
    12: 0x1f7a61,
    13: 0xff9900
};
MiniMap.grassImgPath = staticDataUrl + 'resource/map/miniMap-bg.jpg';

class PlayerInfoPanel {
    constructor(div) {
        let self = this;
        self.__div = div;
        self.__experience = {
            content: self.__div.find('> .experience'),
            bar: self.__div.find('.experience .bar'),
        };
        self.__experience.content.tooltip({
            showURL: false,
            left: 40,
            bodyHandler: function() {
                let playerData = playerModel.getData();
                return playerData.Level < 99 ? String.format(i18nModel.getData().playerInfoPanel.exp, [Util.formatNumber(playerData.Experience), Util.formatNumber(playerData.ExperienceForNextLevel)]) : String.format(i18nModel.getData().playerInfoPanel.afterMaxLevelExp, [Util.formatNumber(playerData.Experience)]);
            },
            delay: 0
        });
        self.__avatar = {
            content: self.__div.children('.avatar'),
            image: self.__div.find('.avatar > img')
        };
        self.__name = self.__div.children('.name');
        self.__title = self.__div.children('.title');
        self.__level = self.__div.find('.level > .value');
        self.__union = self.__div.find('.union > .value');
        self.__unionStatus = self.__div.children('.union-status');
        self.__avatar.content.click(function() {
            playerController.displayProfile(playerModel.getData().Name);
        });
        self.__name.click(function() {
            playerController.displayProfile(playerModel.getData().Name);
        });
        self.__avatar.content.tooltip({
            showURL: false,
            left: 40,
            bodyHandler: function() {
                return i18nModel.getData().playerInfoPanel.avatarTooltip;
            },
            delay: 0
        });
        self.__visibleLevel = playerModel.getData().Level;
        self.__townSelectPanel = self.__div.find('.town-select-panel');
        self.__townSelectList = self.__div.find('.town-select-list');
        self.__townName = self.__townSelectPanel.find('.town-name').click((e)=>{
                self.__onTownNameClick(e);
            }
        );
        self.__townSelectPanelDown = self.__townSelectPanel.children('.down').click(()=>{
                self.__onTownSelectPanelDownClick();
            }
        );
        self.__townSelectPanelLeft = self.__townSelectPanel.children('.left').click(()=>{
                self.__onTownSelectPanelLeftClick();
            }
        );
        self.__townSelectPanelRight = self.__townSelectPanel.children('.right').click(()=>{
                self.__onTownSelectPanelRightClick();
            }
        );
        self.update();
    }
    __generateTownSelectList() {
        let self = this;
        self.__townSelectList.empty();
        if (playerModel.getData().TownCount === 1) {
            return;
        }
        let playerTowns = playerModel.getData().TownList
            , playerInfoPanelTownListTemplateData = {
            towns: [],
        };
        for (let townId in playerTowns) {
            townId = parseInt(townId, 10);
            playerInfoPanelTownListTemplateData.towns.push({
                id: townId,
                name: playerTowns[townId].Name,
                location: String.format(i18nModel.getData().playerInfoPanel.location, playerTowns[townId].Location.X, playerTowns[townId].Location.Y),
            });
        }
        for (let i = 0; i < playerInfoPanelTownListTemplateData.towns.length; i++) {
            for (let j = 0; j < playerInfoPanelTownListTemplateData.towns.length; j++) {
                if (playerInfoPanelTownListTemplateData.towns[i].name < playerInfoPanelTownListTemplateData.towns[j].name) {
                    let buf = playerInfoPanelTownListTemplateData.towns[i];
                    playerInfoPanelTownListTemplateData.towns[i] = playerInfoPanelTownListTemplateData.towns[j];
                    playerInfoPanelTownListTemplateData.towns[j] = buf;
                }
            }
        }
        self.__townSelectList.append($(uiUtils.applyTemplate('playerInfoPanelTownList', playerInfoPanelTownListTemplateData)));
        self.__townSelectListScrollBar = new ScrollBar(self.__townSelectList.children('.town-select-list-body'),undefined,10);
        self.__townSelectList.find('.town-select-list-item').click(self.__onTownSelectListItemClick);
    }
    __arrangeTownNavigateButtons() {
        if ($.objectKeys(playerModel.getData().TownList).length < 2) {
            this.__townSelectPanelDown.addClass('disabled');
            this.__townSelectPanelLeft.addClass('disabled');
            this.__townSelectPanelRight.addClass('disabled');
        } else {
            this.__townSelectPanelDown.removeClass('disabled');
            this.__townSelectPanelLeft.removeClass('disabled');
            this.__townSelectPanelRight.removeClass('disabled');
        }
    }
    __onTownSelectPanelLeftClick() {
        if (this.__townSelectPanelLeft.hasClass('disabled')) {
            return;
        }
        this.__townSelectPanelLeft.addClass('disabled');
        playerController.switchToPreviousTown();
        this.__townSelectPanelLeft.removeClass('disabled');
    }
    __onTownSelectPanelRightClick() {
        if (this.__townSelectPanelRight.hasClass('disabled')) {
            return;
        }
        this.__townSelectPanelRight.addClass('disabled');
        playerController.switchToNextTown();
        this.__townSelectPanelRight.removeClass('disabled');
    }
    __onTownSelectPanelDownClick() {
        if (!this.__div.hasClass('list-show')) {
            this.__div.addClass('list-show');
        } else {
            this.__div.removeClass('list-show');
        }
    }
    __onTownNameClick() {
        this.__onTownSelectPanelDownClick();
    }
    __onTownSelectListItemClick() {
        let curObj = $(this);
        if (curObj.hasClass('current'))
            return false;
        let townId = parseInt(curObj.attr('town_id'));
        if (townId <= 0)
            return;
        playerController.switchToTown(townId);
    }
    update() {
        let self = this;
        self.__updateName();
        self.__updateTitle();
        self.__updateExperience();
        self.__updateAvatar();
        self.__updateUnion();
        self.__generateTownSelectList();
        self.updateTownSelectPanel();
    }
    __updateExperience() {
        let playerData = playerModel.getData();
        if (playerData.Level === 99) {
            this.__experience.bar.animate({
                height: '100%',
            });
        } else {
            this.__experience.bar.animate({
                height: $.pc(playerData.Experience, playerData.ExperienceForNextLevel)
            });
        }
        this.__level.text(playerData.Level);
    }
    __updateAvatar() {
        this.__avatar.image.attr({
            src: playerModel.getData().AvatarUrl
        });
    }
    __updateName() {
        this.__name.text(playerModel.getData().Name);
    }
    __updateUnion() {
        let playerData = playerModel.getData();
        if (playerData.UnionId > 0) {
            this.__div.addClass('union');
            this.__union.text(playerData.Union.Name);
            for (let i in playerData.Union.Members) {
                if (playerData.Union.Members[i].Id === playerData.Id) {
                    let rank = 6
                        , unionMember = playerData.Union.Members[i];
                    if (unionMember.Rank === unionModel.RANK_LEADER) {
                        rank = 1;
                    } else if (unionMember.Rank === unionModel.RANK_ADVISOR) {
                        rank = 2;
                    } else if (unionMember.RightDiplomacy && unionMember.RightInvitations) {
                        rank = 3;
                    } else if (unionMember.RightDiplomacy && !unionMember.RightInvitations) {
                        rank = 4;
                    } else if (!unionMember.RightDiplomacy && unionMember.RightInvitations) {
                        rank = 5;
                    }
                    this.__unionStatus.attr('rank', rank);
                    break;
                }
            }
        } else {
            this.__unionStatus.attr('rank', 0);
            this.__div.removeClass('union');
        }
    }
    __updateTitle() {
        let self = this;
        self.__title.html(playerModel.getTitle(playerModel.getData().Level));
        if (playerModel.getData().Level > self.__visibleLevel) {
            for (let level = self.__visibleLevel; level < playerModel.getData().Level; level++) {
                messageController.addMessageToLog(String.format(i18nModel.getData().messages.system.levelUp, (parseInt(level)) + 1), 'level-up');
            }
        }
        this.__visibleLevel = playerModel.getData().Level;
    }
    hideTownList() {
        this.__div.removeClass('list-show');
    }
    updateTownSelectPanel() {
        let self = this
            , townData = townModel.getData();
        self.__townName.text(townData.Name);
        self.__arrangeTownNavigateButtons();
    }
}

class ResourcesPanel {
    constructor() {
        let self = this;
        self.__createContent();
    }
    updateResources() {
        let self = this;
        playerModel.increaseResourcesByTime();
        self.__updateResourcesInSidebar();
    }
    __createContent() {
        let self = this
            , preparedResourcesArray = {}
            , playerResources = playerModel.getData().Resources;
        preparedResourcesArray['people'] = {
            value: (townModel.getData().TotalPeople - townModel.getData().FreePeople) + ' / ' + townModel.getData().TotalPeople
        };
        for (let resourceName in staticDataModel.config.resources.nameToId) {
            preparedResourcesArray[resourceName] = {
                value: Util.resourceToHumanNumber(playerResources[resourceName]),
                percent: playerResources[resourceName] / playerResources[resourceName + 'Max'] * 100,
                tradePercent: (playerResources[resourceName] + playerResources[resourceName + 'Trade']) / playerResources[resourceName + 'Max'] * 100,
            };
        }
        self.__div = ($(uiUtils.applyTemplate('resourcesPanel', {
            titles: i18nModel.getData().sidebar,
            resources: preparedResourcesArray,
        }))).appendTo($.pageContainer);
        self.__div.resourcesVariable = {
            'people': {
                div: self.__div.find('.resource[type="people"]'),
                value: self.__div.find('.resource[type="people"] > .value > span'),
            }
        };
        for (let resourceName in staticDataModel.config.resources.nameToId) {
            self.__div.resourcesVariable[resourceName] = {
                div: self.__div.find('.resource[type="' + resourceName + '"]'),
                value: self.__div.find('.resource[type="' + resourceName + '"] > .value > span'),
                progressBar: self.__div.find('.resource[type="' + resourceName + '"] > .progress-bar > .bar'),
                progressTradeBar: self.__div.find('.resource[type="' + resourceName + '"] > .progress-bar > .trade-bar'),
            };
            self.__div.resourcesVariable[resourceName].div.unbind().click(function() {
                premiumController.showPremiumsWindow('resource-shop');
            }).hover(function() {
                let resourceId = $(this).attr('id');
                $(this).find('.resource').addClass(resourceId + 'Sidebar-hover');
            }, function() {
                let resourceId = $(this).attr('id');
                $(this).find('.resource').removeClass(resourceId + 'Sidebar-hover');
            }).tooltip({
                delay: 0,
                showURL: false,
                bodyHandler() {
                    let resourceId = $(this).attr('type')
                        , inc = Math.floor(playerModel.getData().Resources[resourceId + 'Inc'])
                        , dec = Math.floor(playerModel.getData().Resources[resourceId + 'Dec'])
                        , sum = inc - dec
                        , tmplData = {
                        'name': i18nModel.getResourceName(resourceId),
                        'res': Util.formatNumber(Math.floor(playerModel.getData().Resources[resourceId])),
                        'inc': String.format(inc > 0 ? i18nModel.getData().sidebar.tooltip.value.inc : i18nModel.getData().sidebar.tooltip.value.sum, Util.formatNumber(inc)),
                        'dec': String.format(dec > 0 ? i18nModel.getData().sidebar.tooltip.value.dec : i18nModel.getData().sidebar.tooltip.value.sum, Util.formatNumber(dec)),
                        'sum': String.format(sum === 0 ? i18nModel.getData().sidebar.tooltip.value.sum : (sum > 0 ? i18nModel.getData().sidebar.tooltip.value.inc : i18nModel.getData().sidebar.tooltip.value.dec), Util.formatNumber(sum)),
                        'max': Util.formatNumber(playerModel.getData().Resources[resourceId + 'Max']),
                        'trade': Util.formatNumber(playerModel.getData().Resources[resourceId + 'Trade']),
                        'available': Util.formatNumber(playerModel.getData().Resources[resourceId + 'Max'] - playerModel.getData().Resources[resourceId + 'Trade']),
                        'i18n': i18nModel.getData().sidebar.tooltip
                    };
                    if (inc > 0) {
                        tmplData['incGreen'] = true;
                    }
                    if (dec > 0) {
                        tmplData['decRed'] = true;
                    }
                    if (sum > 0) {
                        tmplData['sumGreen'] = true;
                    }
                    if (sum < 0) {
                        tmplData['sumRed'] = true;
                    }
                    return uiUtils.applyTemplate('resourcesPanelTooltip', tmplData);
                }
            });
        }
        self.__div.find('.resource[type="people"]').tooltip({
            delay: 0,
            showURL: false,
            bodyHandler() {
                return String.format(i18nModel.getData().sidebar.peopleResourceTooltipFormat, townModel.getData().Workers, townModel.getData().TotalPeople - townModel.getData().FreePeople - townModel.getData().Workers, townModel.getData().FreePeople === 0 ? String.format('<span style="color: #E60000">{0}</span>', townModel.getData().FreePeople) : townModel.getData().FreePeople, townModel.getData().TotalPeople);
            }
        });
    }
    __updateResourcesInSidebar() {
        let self = this
            , playerResources = playerModel.getData().Resources;
        self.__div.resourcesVariable['people'].value.text((townModel.getData().TotalPeople - townModel.getData().FreePeople) + ' / ' + townModel.getData().TotalPeople);
        for (let resourceName in staticDataModel.config.resources.nameToId) {
            self.__div.resourcesVariable[resourceName].value.text(Util.resourceToHumanNumber(Math.ceil(playerResources[resourceName])));
            self.__div.resourcesVariable[resourceName].progressBar.css('width', Math.ceil(playerResources[resourceName] / playerResources[resourceName + 'Max'] * 100) + '%');
            self.__div.resourcesVariable[resourceName].progressTradeBar.css('width', Math.ceil((playerResources[resourceName] + playerResources[resourceName + 'Trade']) / playerResources[resourceName + 'Max'] * 100) + '%');
            if (playerResources[resourceName] < playerResources[resourceName + 'Max']) {
                self.__div.resourcesVariable[resourceName].div.removeClass('full');
            } else {
                self.__div.resourcesVariable[resourceName].div.addClass('full');
            }
        }
    }
}

class Route {
    get wasReversed() {
        return this.__wasReversed;
    }
    constructor(routeData) {
        this.__id = routeData.Id;
        this.__completed = routeData.Completed;
        this.__finishTime = routeData.FinishTime;
        this.__x = routeData.TargetX;
        this.__y = routeData.TargetY;
        this.__type = routeData.Type;
        this.__townId = routeData.TownId;
        this.__moveBack = routeData.MoveBack;
        this.__steps = routeData.Steps;
        this.__targetName = routeData.TargetName;
        this.__status = routeData.Status;
        this.__wasReversed = !!Route.ROUTES_TO_FLIP[this.type];
        this.__timeToGo = routeData.TimeToGo;
    }
    get timeToGo() {
        return this.__timeToGo;
    }
    finish(success, error, ajaxError) {
        let self = this
            , actionName = 'route:isExistRoute'
            , routeGetting = Route.gettings.townRoutes
            , townGetting = 'map:getTowns'
            , townListGetting = 'player:getTownList'
            , armiesGetting = 'town:getTownArmies'
            , pointsGetting = 'player:getInfo'
            , routeMoveBack = self.moveBack
            , newTownPos = {}
            , req = new request();
        req.addAction(actionName, {
            id: self.id
        });
        req.addGetting(townModel.gettings.info, ['Resources'], {
            townId: townModel.getData().Id
        });
        req.addGetting(armiesGetting, ['all'], {
            townId: townModel.getData().Id
        });
        req.addGetting(pointsGetting, self.type === 7 ? ['Level', 'SpyInTown'] : ['Level'], {
            PlayerId: playerModel.getData().Id
        });
        req.addGetting(routeGetting, ['all'], {
            townId: townModel.getData().Id
        });
        req.getResponse(function(data) {
            data['return'][townListGetting] && (playerModel.getData().TownList = data['return'][townListGetting]);
            data['return'][pointsGetting] && $.extend(playerModel.getData(), data['return'][pointsGetting]);
            townModel.getData().Armies = data['return'][armiesGetting];
            if (data.action[actionName] && data.action[actionName].Route && data.action[actionName].Route[self.id]) {
                Route.routesList[self.id] = new Route(data.action[actionName].Route[self.id]);
                if (routeMoveBack === Route.routesList[self.id].moveBack) {
                    error && error();
                    return;
                }
            } else {
                if (playerModel.getSettings().ntfArmyReturnCurTown && $.inArray(self.type, [1, 4, 6, 11]) >= 0 && self.townId === townModel.getData().Id) {
                    let armyName = 'Новая армия';
                    for (let armyId in townModel.getData().Armies) {
                        if (townModel.getData().Armies[armyId].RouteId === self.id) {
                            armyName = townModel.getData().Armies[armyId].Name;
                        }
                    }
                    nativeNotificationController.onArmyReturnCurrentTown(armyName, townModel.getData().Name, townModel.getData().X, townModel.getData().Y);
                }
                delete Route.routesList[self.id];
                gameController.worldMap.updateMap();
            }
            for (let routeId in data['return'][routeGetting]) {
                if (!Route.routesList[routeId]) {
                    Route.routesList[routeId] = new Route(data['return'][routeGetting][routeId]);
                }
            }
            armyController.updateAllArmies();
            let town = data['return'][townGetting] && data['return'][townGetting][newTownPos.left] && data['return'][townGetting][newTownPos.left][newTownPos.top] ? data['return'][townGetting][newTownPos.left][newTownPos.top] : null;
            success && success(town);
        }, {
            callback: ajaxError
        });
    }
    static calculateStepsTime(armyId, steps) {
        let army = townModel.getData().Armies[armyId], maxSpeed = 0, isMyTown = false, speedIncrement = 0, skillArr;
        if (army === undefined)
            return 0;
        for (let troopId in army.Troops) {
            if (staticDataModel.troops[troopId].speed > maxSpeed) {
                maxSpeed = staticDataModel.troops[troopId].speed;
            }
        }
        let lastStep = steps[steps.length - 1];
        for (let townId in playerModel.getData().TownList) {
            let town = playerModel.getData().TownList[townId];
            if (town.Location.X === lastStep.X && town.Location.Y === lastStep.Y) {
                isMyTown = true;
                break;
            }
        }
        if (isMyTown) {
            skillArr = rpgModel.getSkillsAffectingUnitsSpeedAroundSelfTown();
            for (let index in skillArr) {
                let skillId = skillArr[index];
                if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                    continue;
                speedIncrement += rpgModel.playerSkills[skillId].Parameter / 100;
            }
        }
        skillArr = rpgModel.getSkillsAffectingUnitsSpeed();
        for (let index in skillArr) {
            let skillId = skillArr[index];
            if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                continue;
            speedIncrement += rpgModel.playerSkills[skillId].Parameter / 100;
        }
        let premium = premiumModel.getPlayerPremiums();
        if (premium[11]) {
            speedIncrement += premium[11].Percent;
        }
        if (playerModel.playerData.Union) {
            for (let index in playerModel.playerData.Union.NeedleBonuses) {
                if (playerModel.playerData.Union.NeedleBonuses[index].BonusId === staticDataModel.needleStaticData.const.NEEDLE_BONUS_MOVEMENT_SPEED_INCREASE) {
                    speedIncrement += playerModel.playerData.Union.NeedleBonuses[index].Percent;
                }
            }
        }
        if (gameController.gameData.map[lastStep.X] !== undefined && gameController.gameData.map[lastStep.X][lastStep.Y] !== undefined && gameController.gameData.map[lastStep.X][lastStep.Y].dungeon !== undefined) {
            speedIncrement += staticDataModel.config.newbie && staticDataModel.config.newbie.routeSpeedToRogueMaxLvl >= playerModel.getData().Level ? staticDataModel.config.newbie.routeSpeedToRogueCoefficient : 0;
            skillArr = rpgModel.getSkillsAffectingUnitsSpeedToDungeon();
            for (let index in skillArr) {
                let skillId = skillArr[index];
                if (!rpgModel.playerSkills[skillId] || rpgModel.playerSkills[skillId].Level === 0)
                    continue;
                speedIncrement += rpgModel.playerSkills[skillId].Parameter / 100;
            }
        }
        let timeToGo = 0
            , freeForest = false
            , freeMountains = false
            , freeAll = false
            , unionCapitalSkills = gameController.unionCapital.getData() && gameController.unionCapital.getData().Skills ? gameController.unionCapital.getData().Skills : [];
        if (unionCapitalSkills[3002] !== undefined) {
            switch (unionCapitalSkills[3002].Level) {
                case 1:
                    freeForest = true;
                    break;
                case 2:
                    freeForest = true;
                    freeMountains = true;
                    break;
                case 3:
                    freeAll = true;
                    break;
            }
        }
        for (let stepId in steps) {
            stepId = parseInt(stepId);
            if (stepId === 0) {
                continue;
            }
            let curStep = steps[stepId]
                , lastStep = steps[stepId - 1]
                , dx = curStep.X - lastStep.X
                , dy = curStep.Y - lastStep.Y
                , objectId = gameController.gameData.map[curStep.X] && gameController.gameData.map[curStep.X][curStep.Y] && gameController.gameData.map[curStep.X][curStep.Y].objectId ? gameController.gameData.map[curStep.X][curStep.Y].objectId : 0
                , stepSpeed = gameController.gameData.map[curStep.X] && gameController.gameData.map[curStep.X][curStep.Y] && gameController.gameData.map[curStep.X][curStep.Y].speed ? gameController.gameData.map[curStep.X][curStep.Y].speed : 100;
            if (freeAll) {
                if (!Route.isWater(objectId)) {
                    stepSpeed = 100;
                }
            } else {
                if (Route.isForest(objectId) && freeForest) {
                    stepSpeed = 100;
                }
                if (Route.isMountains(objectId) && freeMountains) {
                    stepSpeed = 100;
                }
            }
            let stepTime = maxSpeed / (stepSpeed / 100);
            if (dx * dy !== 0) {
                stepTime *= Math.SQRT2;
            }
            timeToGo += stepTime;
        }
        return Math.floor(timeToGo * (100 - speedIncrement) / 100 / staticDataModel.config.worldSpeeds.routeSpeedCoefficient);
    }
    static isForest(objectId) {
        let forest = [237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279];
        return $.inArray(objectId, forest) >= 0;
    }
    static isMountains(objectId) {
        let forest = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94];
        return $.inArray(objectId, forest) >= 0;
    }
    static isWater(objectId) {
        let forest = [280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 361, 362, 363, 364, 365, 366];
        return $.inArray(objectId, forest) >= 0;
    }
    static __checkRouteCancellingAbility(routeId) {
        if (Route.routesList[routeId] && Route.routesList[routeId].moveBack === 0) {
            if (Route.routesList[routeId].completed > staticDataModel.premiumParams.cancelRouteTime) {
                return 2;
            }
            return 1;
        }
        return 0;
    }
    static loadData(routeData) {
        let self = Route;
        if (routeData !== undefined) {
            for (let routeId in routeData) {
                self.routesList[routeId] = new Route(routeData[routeId]);
            }
        } else {
            let req = new request()
                , gettingName = self.gettings.townRoutes;
            req.addGetting(gettingName, ['all'], {
                townId: townModel.getData().Id
            });
            let routeData = req.getResponse()['return'][gettingName];
            for (let routeId in routeData) {
                self.routesList[routeId] = new Route(routeData[routeId]);
            }
        }
        return self.routesList;
    }
    static createStepsArray(fromX, fromY, toX, toY) {
        let dx = toX - fromX
            , dy = toY - fromY
            , xInc = Math.sign(dx)
            , yInc = Math.sign(dy)
            , routeLength = Math.max(Math.abs(dx), Math.abs(dy))
            , steps = []
            , x = fromX
            , y = fromY;
        for (let i = 0; i < routeLength; i++) {
            if (x !== toX) {
                x += xInc;
            }
            if (y !== toY) {
                y += yInc;
            }
            steps.push({
                X: x,
                Y: y
            });
        }
        return steps;
    }
    static __cancelArmyRouteQuery(routeId, isFreeCancel, currencyToUse, successCallback, errorCallback) {
        let self = Route
            , actionName = 'route:cancelRoute'
            , routesGetting = self.gettings.townRoutes
            , armiesGetting = 'town:getTownArmies'
            , req = new request()
            , defaultErrorCode = 'error:routeAttack:notCanceledArmyRoute'
            , actParams = {
            id: routeId,
            free: (isFreeCancel) ? 1 : 0,
            cyType: currencyToUse
        };
        if (self.__checkRouteCancellingAbility(routeId)) {
            req.addAction(actionName, actParams);
            req.addGetting(armiesGetting, ['all'], {
                townId: townModel.getData().Id
            });
            req.addGetting(routesGetting, ['all'], {
                townId: townModel.getData().Id
            });
            if (!eventsEnabled && currencyToUse === premiumModel.currencyTypeDucat) {
                req.addGetting(playerModel.gettings.dukatBalance, ['all'], {});
            }
            req.getResponse(function(data) {
                if (data && data['action'][actionName] === true) {
                    data['return'][routesGetting] && self.loadData(data['return'][routesGetting]);
                    data['return'][armiesGetting] && (townModel.getData().Armies = data['return'][armiesGetting]);
                    successCallback && successCallback(data['return'][routesGetting]);
                } else {
                    if (data['action'][actionName] && /error/.test(data['action'][actionName])) {
                        if (data['action'][actionName] === 'error:routeAttack:timeIsOut') {
                            errorCallback && errorCallback(true);
                        } else {
                            errorCallback && errorCallback(false, data['action'][actionName]);
                        }
                    } else {
                        errorCallback && errorCallback(false, defaultErrorCode);
                    }
                }
            });
        } else {
            errorCallback && errorCallback(false, defaultErrorCode);
        }
    }
    static saveRoute(type, timestamp, steps, armyId, callback) {
        let self = Route
            , req = new request()
            , actionNames = {
            defend: 'route:sendReinforcement',
            replace: 'route:replaceArmy',
            'default': 'route:createNew',
            siege: 'route:sendSiege',
        }
            , actionName = type ? actionNames[type] : actionNames['default']
            , gettingName = self.gettings.townRoutes
            , aimGettingName = self.gettings.getLastAims
            , routeCoords = {}
            , sendObj = {
            crd: self.mouseCord.x * 10000 + self.mouseCord.y,
            townId: townModel.getData().Id,
            armyId: armyId,
        };
        timestamp = timingModel.getCurrentTime();
        sendObj.srd = sendObj.crd + timestamp;
        for (let i = 0; i < steps.length; ++i) {
            routeCoords[i + 1] = String.format('{0}.{1}', steps[i]);
        }
        req.addGetting(actionName, ['all'], sendObj);
        req.addGetting(aimGettingName, ['all'], {});
        req.addPostData(routeCoords);
        req.addGetting(gettingName, ['all'], {
            townId: townModel.getData().Id
        });
        req.addGetting(townModel.gettings.info, ['Resources', 'Troops'], {
            townId: townModel.getData().Id
        });
        req.getResponse(function(response) {
            if (response['return'][townModel.gettings.info]) {
                townModel.getData().Troops = response['return'][townModel.gettings.info].Troops;
            }
            if (response['return'][aimGettingName]) {
                self.lastAims = response['return'][aimGettingName];
            }
            if (typeof (response['return'][actionName]) === 'number') {
                for (let routeId in response['return'][gettingName]) {
                    if (!self.routesList[routeId]) {
                        self.routesList[routeId] = new Route(response['return'][gettingName][routeId]);
                    }
                }
                if (townModel.getData().Armies[sendObj.armyId]) {
                    townModel.getData().Armies[sendObj.armyId].RouteId = response['return'][actionName];
                    townModel.getData().Armies[sendObj.armyId].Status = armyController.ARMY_STATUS_MOVE;
                    townModel.getData().Armies[sendObj.armyId].CurrentTownId = null;
                }
                callback && callback(true);
            } else {
                messageController.showSystemMessage(i18nModel.getTextByCode(response['return'][actionName]));
            }
            gameController.worldMap.routeConstructorHide();
        }, {
            callback: uiWindow.ajaxError
        });
    }
    static clean() {
        Route.routesList = {};
    }
    static cancelArmyRoute(routeId, isFreeCancel, callback) {
        let self = Route
            , currencyToUse = premiumModel.currencyTypeGold;
        Route.__cancelArmyRouteQuery(routeId, isFreeCancel, currencyToUse, function() {
            if (!eventsEnabled) {
                premiumController.updateCurrencyDependentOnType(currencyToUse);
            }
            armyController.updateAllArmies();
            gameController.worldMap.updateMap();
            callback && callback();
        }, function(freeTimeIsOut, errorCode) {
            if (!freeTimeIsOut) {
                messageController.showSystemMessage(i18nModel.getTextByCode(errorCode));
            } else {
                self.showCancelArmyRouteConfirm(routeId, false);
            }
            callback && callback();
        });
    }
    static showCancelArmyRouteConfirm(routeId, isFreeCancel, callback, closeCallback) {
        let self = Route
            , cancelRoutePrice = staticDataModel.premiumParams.cancelRoutePrice / 100;
        uiWindow.showPaymentConfirm({
            title: i18nModel.getData().confirmText.returnArmy,
            ok: function() {
                self.cancelArmyRoute(routeId, isFreeCancel, callback);
            },
            onClose: function() {
                closeCallback && closeCallback();
            },
            onShow: function() {
                premiumController.initCurrencySelect(uiWindow.confirmWindow.find('.currency-select'), {
                    value: premiumModel.currencyTypeGold
                });
            },
            cost: cancelRoutePrice.toString().replace('.', ',')
        });
    }
    get id() {
        return this.__id;
    }
    set completed(value) {
        this.__completed = value > this.__timeToGo ? this.__timeToGo : value;
    }
    get completed() {
        return this.__completed;
    }
    get finishTime() {
        return this.__finishTime;
    }
    get x() {
        return this.__x;
    }
    get y() {
        return this.__y;
    }
    get type() {
        return this.__type;
    }
    get townId() {
        return this.__townId;
    }
    get moveBack() {
        return this.__moveBack;
    }
    get steps() {
        return this.__steps;
    }
    get targetName() {
        return this.__targetName;
    }
    get status() {
        return this.__status;
    }
    static loadDataSoftly() {
        let self = Route
            , req = new request()
            , gettingName = self.gettings.townRoutes
            , newRoutes = [];
        Route.stopUpdate();
        req.addGetting(gettingName, ['all'], {
            townId: townModel.getData().Id
        });
        let data = req.getResponse()['return'][gettingName];
        for (let newRouteId in data) {
            if (self.routesList[newRouteId] === undefined) {
                newRoutes.push(newRouteId);
            }
            self.routesList[newRouteId] = new Route(data[newRouteId]);
        }
        Route.startUpdate();
        return newRoutes;
    }
    static ensureAimDataIsLoaded(callback) {
        if (!Route.lastAims || !Route.favoriteAims) {
            let req = new request()
                , getting1Name = this.gettings.lastAims
                , getting2Name = this.gettings.favoriteAims;
            if (!Route.lastAims) {
                req.addGetting(getting1Name, ['all'], {});
            }
            if (!Route.favoriteAims) {
                req.addGetting(getting2Name, ['all'], {});
            }
            let response = req.getResponse();
            if (response && response['return'] && response['return'][getting1Name]) {
                Route.lastAims = response['return'][getting1Name];
            }
            if (response && response['return'] && response['return'][getting2Name]) {
                Route.favoriteAims = response['return'][getting2Name];
            }
        }
        callback && callback();
    }
    static cancelReinforcement(armyId, callback) {
        let self = Route
            , actionName = 'route:cancelReinforcement'
            , req = new request()
            , params = {
            armyId: armyId,
            townId: townModel.getData().Id
        };
        req.addGetting(actionName, ['all'], params);
        req.getResponse(function(data) {
            self.loadDataSoftly();
            callback && callback(data['return'][actionName]);
        });
    }
    static init() {
        timingModel.addIntervaled({
            interval: 1,
            onTick: Route.onRouteTick
        });
    }
    static __onRouteFinish(route) {}
    static onRouteTick() {
        if (Route.updateStopped) {
            return;
        }
        let routes = Route.routesList
            , now = Util.getCurrentTimestamp();
        if (jQuery.isEmptyObject(routes)) {
            return;
        }
        for (let routeId in routes) {
            let route = routes[routeId];
            if (route.finishTime <= now) {
                Route.__onRouteFinish(route);
            } else {
                route.completed = now - route.finishTime + route.timeToGo;
            }
        }
        for (let subscribeId in Route.subscribes) {
            if (Route.subscribes.hasOwnProperty(subscribeId)) {
                Route.subscribes[subscribeId](now);
            }
        }
    }
    static unsubscribe(subscribeId) {
        delete Route.subscribes[subscribeId];
    }
    static subscribe(subscribeId, subscribeFunction) {
        Route.subscribes[subscribeId] = subscribeFunction;
    }
    static stopUpdate() {
        Route.updateStopped = true;
    }
    static startUpdate() {
        Route.updateStopped = false;
    }
}
Route.updateStopped = false;
Route.subscribes = {};
Route.gettings = {
    townRoutes: 'town:getRoutings',
    incomingAttack: 'town:getIncomingAttack',
    getLastAims: 'route:getLastAims',
    favoriteAims: 'route:getFavoriteAims'
};
Route.routesCountdowns = {};
Route.mouseCord = {
    x: 0,
    y: 0
};
Route.lastAims = {};
Route.favoriteAims = {};
Route.routesList = {};
Route.routeCancelTime = 900;
Route.ROUTE_ATTACK = 1;
Route.ROUTE_TOWN_FOUNDATION = 2;
Route.ROUTE_TRADE = 3;
Route.ROUTE_REINFORCEMENT = 4;
Route.ROUTE_ATTACK_BARBARIAN = 5;
Route.ROUTE_ATTACK_DUNGEON = 6;
Route.ROUTE_SPY = 7;
Route.ROUTE_SCOUT = 8;
Route.ROUTE_REPLACE = 10;
Route.ROUTE_SIEGE = 11;
Route.ROUTES_TO_FLIP = {
    1: true,
    5: true,
    6: true,
    7: true,
    8: true,
    4: true,
    10: true,
    11: true,
};

class ScrollBar {
    constructor(div, fixHeight, stepSize) {
        let self = this;
        self.__div = div;
        self.__stepSize = stepSize || 50;
        self.__parentDiv = self.__div.parent();
        self.__viewHeight = fixHeight || self.__parentDiv.height();
        self.__maxViewHeight = self.__parentDiv.css('max-height');
        if (self.__maxViewHeight === "none" || self.__maxViewHeight === "") {
            self.__maxViewHeight = self.__viewHeight;
        } else {
            self.__maxViewHeight = parseInt(/\d+/.exec(self.__maxViewHeight)[0]);
        }
        self.__scrollBlock = $('<div class="scroll-block"><div class="scroll-bar"><div class="scroll-bar-background"><div class="scroll-bar-background-top"></div><div class="scroll-bar-background-bottom"></div></div><div class="scroll-bar-pane"><div class="scroll-bar-handler"><div class="scroll-bar-handler-top"></div><div class="scroll-bar-handler-middle"></div><div class="scroll-bar-handler-bottom"></div></div></div><div class="scroll-bar-down-button"></div><div class="scroll-bar-up-button"></div></div><div class="scroll-body"></div></div>');
        self.__scrollBlock.insertAfter(self.__div);
        self.__scrollBody = self.__scrollBlock.children('.scroll-body');
        self.__scrollBar = self.__scrollBlock.children('.scroll-bar');
        self.__scrollBar.find('.scroll-bar-up-button').on('click', function() {
            self.__stepUp();
        });
        self.__scrollBar.find('.scroll-bar-down-button').on('click', function() {
            self.__stepDown();
        });
        self.__scrollBarPane = self.__scrollBar.children('.scroll-bar-pane');
        self.__scrollBarHandler = self.__scrollBarPane.children('.scroll-bar-handler');
        self.__scrollBody.append(self.__div);
        self.__scrollBody.on('mousewheel wheel', function(e) {
            let delta = e.originalEvent.deltaY;
            if (delta < 0) {
                self.__stepUp();
            } else {
                self.__stepDown();
            }
        });
        self.updateScrollBar();
        self.init();
    }
    getScrollY() {
        return parseInt(this.__scrollBody.children().css('margin-top') || 0);
    }
    setScrollY(newMarginTop) {
        if (this.__scrollBlock.hasClass('disabled') || newMarginTop < 0)
            return false;
        if (newMarginTop > this.__contentHeight - this.__viewHeight) {
            newMarginTop = this.__contentHeight - this.__viewHeight;
        }
        let paneHeight = this.__scrollBarPane.height()
            , newHandlerMarginTop = newMarginTop * paneHeight / this.__contentHeight;
        this.__scrollBody.children().css('margin-top', -newMarginTop);
        this.__scrollBarHandler.css('margin-top', newHandlerMarginTop);
    }
    __stepDown(stepsQuantity=1) {
        let self = this;
        if (self.__scrollBlock.hasClass('disabled'))
            return false;
        let marginTop = parseInt(/\d+/.exec(self.__scrollBody.children().css('margin-top') || 0)[0])
            , deltaContent = stepsQuantity * self.__stepSize
            , newMarginTop = marginTop + deltaContent + self.__viewHeight > self.__contentHeight ? self.__contentHeight - self.__viewHeight : marginTop + deltaContent
            , paneHeight = self.__scrollBarPane.height()
            , ratio = newMarginTop / self.__contentHeight
            , newHandlerMarginTop = ratio * paneHeight;
        newHandlerMarginTop = paneHeight - newHandlerMarginTop < 44 ? paneHeight - 44 : newHandlerMarginTop;
        self.__scrollBody.children().css('margin-top', -newMarginTop);
        self.__scrollBarHandler.css('margin-top', newHandlerMarginTop);
    }
    updateView() {
        let self = this;
        self.__contentHeight = self.__div.height();
        self.__viewHeight = self.__parentDiv.height();
        self.__maxViewHeight = self.__parentDiv.css('max-height');
        if (self.__maxViewHeight === "none" || self.__maxViewHeight === "") {
            self.__maxViewHeight = self.__viewHeight;
        } else {
            self.__maxViewHeight = parseInt(/\d+/.exec(self.__maxViewHeight)[0]);
        }
        self.__viewHeight = self.__contentHeight > self.__maxViewHeight ? self.__maxViewHeight : self.__contentHeight;
    }
    __stepUp(stepsQuantity=1) {
        let self = this;
        if (self.__scrollBlock.hasClass('disabled'))
            return false;
        let marginTop = parseInt(/\d+/.exec(self.__scrollBody.children().css('margin-top') || 0)[0])
            , deltaContent = stepsQuantity * self.__stepSize
            , newMarginTop = marginTop - deltaContent < 0 ? 0 : marginTop - deltaContent
            , paneHeight = self.__scrollBarPane.height()
            , ratio = newMarginTop / self.__contentHeight
            , newHandlerMarginTop = ratio * paneHeight;
        newHandlerMarginTop = paneHeight - newHandlerMarginTop < 44 ? paneHeight - 44 : newHandlerMarginTop;
        self.__scrollBody.children().css('margin-top', -newMarginTop);
        self.__scrollBarHandler.css('margin-top', newHandlerMarginTop);
    }
    updateScrollBar() {
        let self = this
            , marginTop = parseInt(/\d+/.exec(self.__scrollBody.children().css('margin-top') || 0)[0]);
        self.updateView();
        let scrollPaneHeight = self.__scrollBarPane.height()
            , ratio = self.__contentHeight === 0 ? 0 : Math.min(self.__viewHeight / self.__contentHeight, 1.0)
            , handlerSize = scrollPaneHeight * ratio;
        if (self.__contentHeight === 0) {
            self.__scrollBarHandler.css('display', 'none');
        } else {
            self.__scrollBarHandler.css('display', 'block');
            if (handlerSize < 44) {
                handlerSize = 44;
            }
        }
        self.__scrollBarHandler.css('height', handlerSize);
        if (self.__viewHeight >= self.__contentHeight) {
            self.__scrollBlock.addClass('disabled');
            self.__scrollBody.children().css('margin-top', 0);
            self.__scrollBarHandler.css('margin-top', 0);
        } else {
            let maxMarginTop = self.__contentHeight - self.__viewHeight, handlerRatio;
            self.__scrollBlock.removeClass('disabled');
            if (maxMarginTop < marginTop) {
                handlerRatio = maxMarginTop / self.__contentHeight;
                marginTop = maxMarginTop;
            } else {
                handlerRatio = marginTop / self.__contentHeight;
            }
            let newHandlerMarginTop = handlerRatio * scrollPaneHeight;
            self.__scrollBody.children().css('margin-top', -marginTop);
            self.__scrollBarHandler.css('margin-top', newHandlerMarginTop);
        }
    }
    init() {
        let self = this;
        self.__scrollBarHandler.on('mousedown', function(e) {
            if (self.__scrollBlock.hasClass('disabled'))
                return false;
            e.preventDefault();
            let body = $('body')
                , shiftY = e.clientY - self.__scrollBarHandler[0].getBoundingClientRect().top;
            body.on('mousemove', onMouseMove);
            body.on('mouseup', onMouseUp);
            function onMouseMove(e) {
                let newHandlerMarginTop = e.clientY - shiftY - self.__scrollBarPane[0].getBoundingClientRect().top;
                if (newHandlerMarginTop < 0) {
                    newHandlerMarginTop = 0;
                }
                let maxHandlerMarginTop = self.__scrollBarPane[0].offsetHeight - self.__scrollBarHandler[0].offsetHeight;
                if (newHandlerMarginTop > maxHandlerMarginTop) {
                    newHandlerMarginTop = maxHandlerMarginTop;
                }
                let ratio = newHandlerMarginTop / maxHandlerMarginTop
                    , newMarginTop = (self.__contentHeight - self.__viewHeight) * ratio;
                self.__scrollBody.children().css('margin-top', -newMarginTop);
                self.__scrollBarHandler.css('margin-top', newHandlerMarginTop);
            }
            function onMouseUp() {
                body.off('mouseup');
                body.off('mousemove');
            }
        }).on('dragstart', function() {
            return false;
        });
    }
}

class Siege {
    get loyalty() {
        return this._loyalty;
    }
    get attackLosses() {
        return this._attackLosses;
    }
    get defenceLosses() {
        return this._defenceLosses;
    }
    get players() {
        return this._players;
    }
    set capture(value) {
        this._capture = value;
    }
    get defenceTownName() {
        return this._defenceTownName;
    }
    static init() {
        Siege.getting = 'siege:getInfo';
        Siege.cancelGetting = 'siege:cancelSiege';
        Siege.changeCaptureGetting = 'siege:changeCaptureSiege';
        Siege.sieges = {};
        Siege.SIEGE_SIDE_ATTACK = 1;
        Siege.SIEGE_SIDE_DEFENCE = 2;
    }
    constructor(data) {
        this._id = data.id;
        this._attackPlayerId = data.attackPlayerId;
        this._attackPlayerName = data.attackPlayerName;
        this._defencePlayerId = data.defencePlayerId;
        this._defencePlayerName = data.defencePlayerName;
        this._unionId = data.unionId;
        this._targetX = data.targetX;
        this._targetY = data.targetY;
        this._summary = data.summary;
        this._capture = data.capture;
        this._nextAction = data.nextAction;
        this._phaseCount = data.phaseCount;
        this._armies = data.armies;
        this._players = data.players;
        this._defenceTownName = data.defenceTownName;
        this._attackLosses = {};
        this._defenceLosses = {};
        this._loyalty = data.loyalty;
        for (let i = 1; i <= 14; i++) {
            this._attackLosses[i] = data.losses && data.losses[Siege.SIEGE_SIDE_ATTACK] && data.losses[Siege.SIEGE_SIDE_ATTACK][i] ? data.losses[Siege.SIEGE_SIDE_ATTACK][i] : 0;
            this._defenceLosses[i] = data.losses && data.losses[Siege.SIEGE_SIDE_DEFENCE] && data.losses[Siege.SIEGE_SIDE_DEFENCE][i] ? data.losses[Siege.SIEGE_SIDE_DEFENCE][i] : 0;
        }
    }
    get data() {
        return this._data;
    }
    get id() {
        return this._id;
    }
    get attackPlayerId() {
        return this._attackPlayerId;
    }
    get attackPlayerName() {
        return this._attackPlayerName;
    }
    get defencePlayerId() {
        return this._defencePlayerId;
    }
    get defencePlayerName() {
        return this._defencePlayerName;
    }
    get unionId() {
        return this._unionId;
    }
    get targetX() {
        return this._targetX;
    }
    get targetY() {
        return this._targetY;
    }
    get summary() {
        return this._summary;
    }
    get capture() {
        return this._capture;
    }
    get nextAction() {
        return this._nextAction;
    }
    get phaseCount() {
        return this._phaseCount;
    }
    get armies() {
        return this._armies;
    }
    static cancelSiege(siegeId, callback) {
        let req = new request();
        req.addGetting(Siege.cancelGetting, ['all'], {
            siegeId: siegeId
        });
        req.getResponse(function(data) {
            if (/error/.test(data['return'][Siege.cancelGetting])) {
                messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][Siege.cancelGetting]));
                return;
            }
            townModel.loadFields(['Armies']);
            let newRoutes = Route.loadDataSoftly();
            if (newRoutes.length > 0) {
                gameController.worldMap.updateMap();
            }
            armyController.updateAllArmies();
            delete Siege.sieges[siegeId];
            gadgetsController.updateSiegeIcon();
            callback && callback();
        });
    }
    static setCapturePlayer(playerId, siegeId, callback) {
        let req = new request();
        req.addGetting(Siege.changeCaptureGetting, ['all'], {
            siegeId: siegeId,
            playerId: playerId
        });
        req.getResponse(function(data) {
            if (/error/.test(data['return'][Siege.changeCaptureGetting])) {
                messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][Siege.changeCaptureGetting]));
                return;
            }
            Siege.sieges[siegeId].capture = playerId;
            callback && callback();
        });
    }
    static loadData(callback) {
        let req = new request();
        req.addGetting(Siege.getting, ['all']);
        req.getResponse(function(data) {
            Siege.updateData(data['return'][Siege.getting]);
            callback && callback();
        });
    }
    static updateData(data) {
        Siege.sieges = [];
        for (let siegeId in data) {
            Siege.sieges[siegeId] = new Siege(data[siegeId]);
        }
    }
    static getSiege(siegeId) {
        if (Siege.sieges[siegeId] === undefined) {
            return false;
        } else {
            return Siege.sieges[siegeId];
        }
    }
    static getAllSiegesList() {
        return Siege.sieges;
    }
}

class SiegeList {
    static showSiegeListWindow() {
        let self = SiegeList
            , siege = staticDataModel.townResearchStaticData;
        if (self.open)
            return;
        self.contentDiv = $(uiUtils.applyTemplate('siegeListWindow', {
            i18n: i18nModel.getData().siege,
        }));
        self.exitButton = self.contentDiv.find('.exit-button').click(self.__onExitButtonClick);
        self.tableBody = self.contentDiv.find('.siege-table-body');
        self.__fillData();
        self.open = true;
        self.windowDiv = WOFWindow.showWindow(i18nModel.getData().siege.title, self.contentDiv, self.__onHideWindow);
    }
    static updateContent() {
        let self = SiegeList;
        self.__fillData();
        if (self.windowDiv) {
            WOFWindow.updateContent(self.windowDiv);
        }
    }
    static __fillData() {
        let self = SiegeList
            , sieges = Siege.getAllSiegesList();
        self.tableBody.empty();
        for (let siegeId in sieges) {
            let siege = sieges[siegeId]
                , armySize = 0;
            for (let i = 1; i <= 14; i++) {
                for (let armyId in siege.armies) {
                    let army = siege.armies[armyId];
                    armySize += army[i] ? army[i] : 0;
                }
            }
            let row = $(uiUtils.applyTemplate('siegeListItem', {
                'armySize': armySize,
                'attackPlayerName': String.format(i18nModel.getData().siege.playerName, siege.attackPlayerName),
                'defencePlayerName': String.format(i18nModel.getData().siege.playerName, siege.defencePlayerName),
                'townName': String.format(i18nModel.getData().siege.townName, [siege.defenceTownName, siege.targetX, siege.targetY]),
                'coords': String.format(i18nModel.getData().siege.coords, [siege.targetX, siege.targetY]),
                'siegeId': siegeId,
            }));
            self.tableBody.append(row);
        }
        self.tableBody.find('span.town-name').click(function() {
            let x = $(this).attr('x')
                , y = $(this).attr('y')
                , pos = {
                top: parseInt(y),
                left: parseInt(x)
            };
            WOFWindow.closeWindow();
            gameController.goToMapPosition(pos);
        });
        self.tableBody.find('span.player').click(function() {
            let playerName = $(this).text();
            WOFWindow.closeWindow();
            playerController.displayProfile(playerName);
        });
        self.tableBody.find('.enter').click(self.__onEnterClick);
    }
    static __onExitButtonClick() {
        WOFWindow.closeWindow();
    }
    static __onHideWindow() {
        SiegeList.open = false;
        SiegeList.windowDiv = undefined;
    }
    static __onEnterClick(e) {
        let self = SiegeList
            , curObj = $(this)
            , siegeId = curObj.attr('siege');
        WOFWindow.closeWindow();
        SiegeWindow.showSiegeWindow(siegeId);
    }
}

class SiegeWindow {
    static showSiegeWindow(siegeId) {
        let self = SiegeWindow;
        if (self.open)
            return;
        self.siegeId = siegeId;
        self.__createContent();
        self.open = true;
        self.windowDiv = WOFWindow.showWindow(i18nModel.getData().siege.title, self.contentDiv, self.__onHideWindow);
    }
    static __createContent() {
        let self = SiegeWindow, siege = Siege.getSiege(self.siegeId), side, troops = {};
        if (!siege || siege.players[playerModel.getData().Id] === undefined) {
            messageController.showSystemMessage(i18nModel.getTextByCode('siege:cancelSiege'));
            self.__onBackButtonClick();
        }
        side = siege.players[playerModel.getData().Id].side;
        let armies = siege.armies
            , sumCount = 0;
        for (let i = 1; i <= 14; i++) {
            troops[i] = 0;
            for (let armyId in armies) {
                let army = armies[armyId];
                troops[i] += army[i] ? army[i] : 0;
                sumCount += army[i] ? army[i] : 0;
            }
        }
        if (self.intervalId) {
            delete timingModel.intervaled[self.intervalId];
            self.intervalId = null;
        }
        if (side === Siege.SIEGE_SIDE_ATTACK) {
            self.contentDiv = $(uiUtils.applyTemplate('siegeWindowAttack', {
                i18n: i18nModel.getData().siege.window,
                troops: troops,
                troopsLosses: siege.attackLosses,
                enemyLosses: siege.defenceLosses,
                siege: siege,
                aristocratCount: troops[14],
                ramCount: troops[11],
                leader: siege.players[playerModel.getData().Id].leader === 1,
                exp: siege.players[playerModel.getData().Id].sumExp,
                amount: sumCount,
            }));
        } else if (side === Siege.SIEGE_SIDE_DEFENCE) {
            self.contentDiv = $(uiUtils.applyTemplate('siegeWindowDefence', {
                i18n: i18nModel.getData().siege.window,
                troops: troops,
                troopsLosses: siege.defenceLosses,
                enemyLosses: siege.attackLosses,
                siege: siege,
                leader: siege.players[playerModel.getData().Id].leader === 1,
                exp: siege.players[playerModel.getData().Id].sumExp,
                amount: sumCount,
            }));
        }
        self.exitButton = self.contentDiv.find('.exit-button').click(self.__onExitButtonClick);
        self.backButton = self.contentDiv.find('.back-button').click(self.__onBackButtonClick);
        self.seigeCancelButton = self.contentDiv.find('.siege-cancel-button').click(self.__onSiegeCancelButtonClick);
        self.contributionButton = self.contentDiv.find('.contribution-button').click(self.__onContributionButtonClick);
        self.timerDiv = self.contentDiv.find('.timer');
        self.captureSelect = self.contentDiv.find('.capture-name.select').click(self.__onCaptureSelectClick);
        self.captureSelect.children().click(self.__onCaptureSelectItemClick);
        self.__onTick();
        self.intervalId = timingModel.addIntervaled({
            interval: 1,
            onTick: self.__onTick
        });
        self.contentDiv.find('span.player').click(function() {
            let playerName = $(this).text();
            WOFWindow.closeWindow();
            playerController.displayProfile(playerName);
        });
        self.contentDiv.find('span.town-name').click(function() {
            let x = $(this).attr('x')
                , y = $(this).attr('y')
                , pos = {
                top: parseInt(y),
                left: parseInt(x)
            };
            WOFWindow.closeWindow();
            gameController.goToMapPosition(pos);
        });
    }
    static __onCaptureSelectItemClick() {
        let self = SiegeWindow;
        if (!self.captureSelect.hasClass('open'))
            return true;
        let curItem = $(this);
        self.captureSelect.children().removeClass('selected');
        curItem.addClass('selected');
        Siege.setCapturePlayer(curItem.attr('value'), self.siegeId, function() {
            self.captureSelect.removeClass('open');
        });
    }
    static __onCaptureSelectClick() {
        let self = SiegeWindow;
        if (self.captureSelect.hasClass('open'))
            return false;
        self.captureSelect.addClass('open');
    }
    static updateContent() {
        let self = SiegeWindow;
        self.__createContent();
        if (self.contentDiv) {
            WOFWindow.updateContent(self.contentDiv);
        }
    }
    static __onTick() {
        let self = SiegeWindow
            , nextAction = parseInt(self.timerDiv.attr('next-time'))
            , elapsedTime = nextAction - timingModel.getCurrentTime();
        if (!self.open) {
            delete timingModel.intervaled[self.intervalId];
            self.intervalId = null;
            return;
        }
        if (elapsedTime < 0) {
            Siege.loadData(function() {
                self.updateContent();
            });
        } else {
            self.timerDiv.text($.secsToString(elapsedTime, '{0}:{1}:{2}'));
        }
    }
    static __onContributionButtonClick() {}
    static __onExitButtonClick() {
        WOFWindow.closeWindow();
    }
    static __onHideWindow() {
        let self = SiegeWindow;
        self.open = false;
        self.windowDiv = undefined;
        delete timingModel.intervaled[self.intervalId];
        self.intervalId = undefined;
    }
    static __onBackButtonClick() {
        WOFWindow.closeWindow();
        SiegeList.showSiegeListWindow();
    }
    static __onSiegeCancelButtonClick() {
        let self = SiegeWindow
            , siege = Siege.getSiege(self.siegeId);
        if (self.seigeCancelButton.hasClass('disabled')) {
            return false;
        }
        WindowYesNo.showWindow(String.format(i18nModel.getData().siege.cancelSiegeQuest, [siege.defenceTownName, siege.targetX, siege.targetY, siege.defenceTownName, ]), function() {
            Siege.cancelSiege(self.siegeId, function() {
                messageController.showSystemMessage(i18nModel.getTextByCode('siege:cancelSiege'));
                self.__onBackButtonClick();
            });
        });
    }
}

let SocketServerEvent = {
    EVENT_TYPE_TOWN: 1,
    EVENT_TYPE_PLAYER: 2,
    EVENT_TYPE_UNION: 3,
    EVENT_TYPE_UNION_MY_INVITATIONS: 4,
    EVENT_TYPE_UNION_INVITATIONS: 5,
    EVENT_TYPE_UNION_KICK: 6,
    EVENT_TYPE_UNION_MEMBERS: 7,
    EVENT_TYPE_UNION_DIPLOMACY: 8,
    EVENT_TYPE_UNION_MEMBER_RIGHTS: 9,
    EVENT_TYPE_UNION_COUNTERS: 10,
    EVENT_TYPE_PLAYER_PREMIUM_TASKS: 11,
    EVENT_TYPE_CHAT_REMOVE_MESSAGES: 12,
    EVENT_TYPE_LOOSE_TOWN: 13,
    EVENT_TYPE_NEW_TOWN: 14,
    EVENT_TYPE_GAME_PAGE_REFRESH: 15,
    EVENT_TYPE_STATIC_BUILDINGS: 16,
    EVENT_TYPE_STATIC_TROOPS: 17,
    EVENT_TYPE_STATIC_TOWN_FOUNDATION_COST: 18,
    EVENT_TYPE_STATIC_RESOURCES: 19,
    EVENT_TYPE_STATIC_AVATAR_LIST: 20,
    EVENT_TYPE_STATIC_UNION_EMBLEM_LIST: 21,
    EVENT_TYPE_STATIC_GENERAL_CONFIG: 22,
    EVENT_TYPE_STATIC_PREMIUMS: 23,
    EVENT_TYPE_STATIC_MAP: 24,
    EVENT_TYPE_STATIC_PLAYER: 25,
    EVENT_TYPE_MESSAGES_COUNTERS: 26,
    EVENT_TYPE_ROUTE: 27,
    EVENT_TYPE_TRADE: 28,
    EVENT_TYPE_NOTIFICATIONS: 29,
    EVENT_TYPE_MAP_DATA: 30,
    EVENT_TYPE_REINFORCEMENT: 31,
    EVENT_TYPE_INCOMING_ATTACK: 32,
    EVENT_TYPE_ARMIES: 33,
    EVENT_TYPE_PLAYER_QUESTS: 34,
    EVENT_TYPE_PLAYER_BALANCE: 35,
    EVENT_TYPE_TEXT_MESSAGE: 36,
    EVENT_TYPE_PLAYER_STATISTICS: 37,
    EVENT_TYPE_CONVERSATION_UPDATED: 38,
    EVENT_TYPE_PLAYER_ITEMS: 39,
    EVENT_TYPE_STATIC_GAME_EVENT: 40,
    EVENT_TYPE_PLAYER_SKILLS: 41,
    EVENT_TYPE_PLAYER_MINISTER_CABINET: 42,
    EVENT_TYPE_STATIC_TUTORIAL_REWARDS: 43,
    EVENT_TYPE_STATIC_AVATAR_UPLOAD_PARAMS: 44,
    EVENT_TYPE_STUDY: 45,
    EVENT_TYPE_SIEGE: 46,
    EVENT_TYPE_GAME_DATA: 47,
    EVENT_TYPE_COMMERCE: 48,
    EVENT_TYPE_CHAT: 49,
    EVENT_TYPE_UNION_CAPITAL: 50,
    getStaticGettingByEventType: function(eventType) {
        switch (eventType) {
            case SocketServerEvent.EVENT_TYPE_STATIC_BUILDINGS:
                return staticDataModel.buildingGettingName;
            case SocketServerEvent.EVENT_TYPE_STATIC_TROOPS:
                return staticDataModel.troopGettingName;
            case SocketServerEvent.EVENT_TYPE_STATIC_TOWN_FOUNDATION_COST:
                return staticDataModel.townFoundReqGettingName;
            case SocketServerEvent.EVENT_TYPE_STATIC_RESOURCES:
                return staticDataModel.resourcesInfoGettingName;
            case SocketServerEvent.EVENT_TYPE_STATIC_AVATAR_UPLOAD_PARAMS:
                return staticDataModel.gettings.avatarUploadData;
            case SocketServerEvent.EVENT_TYPE_STATIC_GENERAL_CONFIG:
                return staticDataModel.configGettingName;
            case SocketServerEvent.EVENT_TYPE_STATIC_PREMIUMS:
                return staticDataModel.gettings.premiumParams;
            case SocketServerEvent.EVENT_TYPE_STATIC_MAP:
                return staticDataModel.gettings.mapParams;
            case SocketServerEvent.EVENT_TYPE_STATIC_PLAYER:
                return staticDataModel.gettings.playerStaticDataParams;
            case SocketServerEvent.EVENT_TYPE_STATIC_GAME_EVENT:
                return staticDataModel.gettings.gameEventStaticData;
            case SocketServerEvent.EVENT_TYPE_STATIC_TUTORIAL_REWARDS:
                return staticDataModel.gettings.tutorialStepsRewards;
            default:
                return false;
        }
    },
    applyAddDataBlock: function(addDataBlockArray) {
        for (let j = 0; j < addDataBlockArray.length; j++) {
            let addDataBlock = addDataBlockArray[j];
            switch (addDataBlock.type) {
                case SocketServerEvent.EVENT_TYPE_PLAYER_PREMIUM_TASKS:
                    $.extend(true, premiumModel.getPlayerPremiums(), addDataBlock.data);
                    if (addDataBlock.data[1] || addDataBlock.data[4] || addDataBlock.data[15]) {}
                    break;
                case SocketServerEvent.EVENT_TYPE_NOTIFICATIONS:
                    playerModel.getData().Notifications = playerModel.getData().Notifications.concat(addDataBlock.data);
                    notificationController.showNotifications();
                    break;
                case SocketServerEvent.EVENT_TYPE_REINFORCEMENT:
                    if (townModel.getData().Id === addDataBlock.townId) {
                        for (let armyId in addDataBlock.data) {
                            townModel.getData().Reinforcement[armyId] = addDataBlock.data[armyId];
                            armyController.createArmyPanel(armyId);
                        }
                        armyController.updateAllArmies();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_QUESTS:
                    for (let questId in addDataBlock.data) {
                        questModel.addQuest(addDataBlock.data[questId]);
                    }
                    questController.checkQuestsToBeDone();
                    questController.rerenderContent();
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_INVITATIONS:
                    if (playerModel.getData().Union) {
                        for (let i = 0; i < addDataBlock.data.length; i++) {
                            playerModel.getData().Union.UnacceptedInvites.push(addDataBlock.data[i]);
                        }
                        unionController.isMyUnionOpen() && unionController.rebuildInvitesList();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_MEMBERS:
                    if (playerModel.getData().Union) {
                        for (let i = 0; i < addDataBlock.data.length; i++) {
                            let newUnionMember = addDataBlock.data[i];
                            unionModel.prepareMemberWithTitles(newUnionMember);
                            playerModel.getData().Union.Members.push(newUnionMember);
                        }
                        unionController.isMyUnionOpen() && unionController.rebuildMembersList();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_NEW_TOWN:
                    for (let townId in addDataBlock.data) {
                        playerModel.getData().TownList[townId] = addDataBlock.data[townId];
                    }
                    uiManager.playerInfoPanel.update();
                    gameController.townControl.update();
                    break;
                case SocketServerEvent.EVENT_TYPE_CHAT:
                    let message = addDataBlock.data
                        , deliverData = {
                        'chat:update': {}
                    };
                    deliverData['chat:update'][message.i] = {
                        Message: message.m.replace('\"', '"'),
                        Player: message.pn,
                        PlayerUnionId: message.pui,
                        Timestamp: message.ts,
                        Type: message.t,
                        UnionId: message.ui,
                    };
                    chatController.onDeliverNewMessages(deliverData);
                    break;
            }
        }
    },
    applyRefreshDataBlock: function(refreshDataBlock) {
        for (let j = 0; j < refreshDataBlock.length; j++) {
            let refreshItem = refreshDataBlock[j];
            switch (refreshItem.type) {
                case SocketServerEvent.EVENT_TYPE_COMMERCE:
                    if (Commerce.isWindowOpen()) {
                        Commerce.onCommerceEvent(refreshItem.data);
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_TOWN:
                    if (refreshItem.townId === townModel.getData().Id) {
                        this.refreshTownData(refreshItem.data, refreshItem.withMessage);
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER:
                    this.refreshPlayerData(refreshItem.data);
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION:
                    this.refreshPlayerData({
                        Union: refreshItem.data
                    });
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_PREMIUM_TASKS:
                    let oldPlayerPremiums = premiumModel.getPlayerPremiums()
                        , needUpdateResourcesPerHour = (oldPlayerPremiums[1] && !refreshItem.data[1]) || (!oldPlayerPremiums[1] && refreshItem.data[1]) || (oldPlayerPremiums[4] && !refreshItem.data[4]) || (!oldPlayerPremiums[4] && refreshItem.data[4]) || (oldPlayerPremiums[15] && !refreshItem.data[15]) || (!oldPlayerPremiums[15] && refreshItem.data[15]);
                    if (refreshItem.replace) {
                        premiumModel.loadPlayerPremiums(refreshItem.data);
                        premiumController.updateBoughtTasksInPremiumWindow();
                    } else {
                        $.extend(true, premiumModel.getPlayerPremiums(), refreshItem.data);
                    }
                    if (needUpdateResourcesPerHour) {}
                    gadgetsController.updatePremiumExpiredIcon();
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_MINISTER_CABINET:
                    premiumModel.loadPlayerMinisterCabinet(refreshItem.data);
                    premiumController.updateBoughtTasksInPremiumWindow();
                    break;
                case SocketServerEvent.EVENT_TYPE_GAME_PAGE_REFRESH:
                    let doRefreshPage = function() {
                        window.location.reload();
                    };
                    if (refreshItem.timeout !== undefined) {
                        setTimeout(doRefreshPage, refreshItem.timeout * 1000);
                        let refreshMessage = String.format(i18nModel.getData().events.pageWillBeReloadedOver, $.secsToString(refreshItem.timeout, i18nModel.getTimeFormat()));
                        if (refreshItem.withMessage !== undefined) {
                            refreshMessage += "<br/>" + refreshItem.withMessage;
                        }
                        if (refreshItem.messageShowTime !== undefined) {
                            messageController.showSystemMessage(refreshMessage, refreshItem.messageShowTime * 1000);
                        } else {
                            messageController.showSystemMessage(refreshMessage);
                        }
                    } else {
                        doRefreshPage();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_STATIC_BUILDINGS:
                case SocketServerEvent.EVENT_TYPE_STATIC_TROOPS:
                case SocketServerEvent.EVENT_TYPE_STATIC_TOWN_FOUNDATION_COST:
                case SocketServerEvent.EVENT_TYPE_STATIC_RESOURCES:
                case SocketServerEvent.EVENT_TYPE_STATIC_AVATAR_LIST:
                case SocketServerEvent.EVENT_TYPE_STATIC_UNION_EMBLEM_LIST:
                case SocketServerEvent.EVENT_TYPE_STATIC_GENERAL_CONFIG:
                case SocketServerEvent.EVENT_TYPE_STATIC_PREMIUMS:
                case SocketServerEvent.EVENT_TYPE_STATIC_MAP:
                case SocketServerEvent.EVENT_TYPE_STATIC_PLAYER:
                case SocketServerEvent.EVENT_TYPE_STATIC_GAME_EVENT:
                    let dataToPass = {};
                    dataToPass[SocketServerEvent.getStaticGettingByEventType(refreshItem.type)] = refreshItem.data;
                    staticDataModel.init(dataToPass, refreshItem.replace);
                    break;
                case SocketServerEvent.EVENT_TYPE_MESSAGES_COUNTERS:
                    if (refreshItem.unreadConversations !== undefined) {
                        conversationController.onUpdateConversationsUnreadCount(refreshItem.unreadConversations);
                    }
                    if (refreshItem.unreadReports !== undefined) {
                        reportController.onUpdateReportsUnreadCount(refreshItem.unreadReports);
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_ROUTE:
                    for (let routeId in refreshItem.data) {
                        if (Route.routesList[routeId]) {
                            Route.routesList[routeId] = new Route(refreshItem.data[routeId]);
                        }
                    }
                    armyController.updateAllArmies();
                    gameController.worldMap.updateMap();
                    break;
                case SocketServerEvent.EVENT_TYPE_TRADE:
                    if (marketModel.myOffers && refreshItem.townId == townModel.getData().Id) {
                        for (let tradeId in refreshItem.data) {
                            let found = false;
                            for (let i = 0; i < marketModel.myOffers.length; i++) {
                                if (marketModel.myOffers[i].Id == tradeId) {
                                    if (!refreshItem.replace) {
                                        $.extend(marketModel.myOffers[i], refreshItem.data[tradeId]);
                                    } else {
                                        marketModel.myOffers[i] = refreshItem.data[tradeId];
                                    }
                                    found = true;
                                    break;
                                }
                            }
                            if (!found) {
                                marketModel.myOffers.push(refreshItem.data[tradeId]);
                            }
                        }
                        marketModel.prepareOwnOffersList(marketModel.myOffers);
                        marketController.updateMyOffers();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_INCOMING_ATTACK:
                    if (refreshItem.townId == townModel.getData().Id) {}
                    if (!defenceWindowController.closed) {
                        defenceWindowModel.loadData(defenceWindowModel.fillData);
                    } else {
                        defenceWindowModel.loadData();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_NOTIFICATIONS:
                    playerModel.getData().Notifications = refreshItem.data;
                    notificationController.showNotifications();
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_QUESTS:
                    questModel.loadData(refreshItem.data);
                    questController.checkQuestsToBeDone();
                    questController.rerenderContent();
                    break;
                case SocketServerEvent.EVENT_TYPE_GAME_DATA:
                    if (refreshItem.data.map !== undefined) {
                        for (let x in refreshItem.data.map) {
                            for (let y in refreshItem.data.map[x]) {
                                if (gameController.gameData.map[x] === undefined) {
                                    gameController.gameData.map[x] = [];
                                }
                                for (let fieldName in refreshItem.data.map[x][y]) {
                                    if (gameController.gameData.map[x][y] === undefined) {
                                        gameController.gameData.map[x][y] = [];
                                    }
                                    gameController.gameData.map[x][y][fieldName] = refreshItem.data.map[x][y][fieldName];
                                }
                            }
                        }
                    }
                    if (refreshItem.data.players !== undefined) {
                        for (let playerId in refreshItem.data.players) {
                            for (let fieldName in refreshItem.data.players[playerId]) {
                                if (gameController.gameData.players[playerId] === undefined) {
                                    gameController.gameData.players[playerId] = {};
                                }
                                gameController.gameData.players[playerId][fieldName] = refreshItem.data.players[playerId][fieldName];
                            }
                        }
                    }
                    if (refreshItem.data.unions !== undefined) {
                        for (let unionId in refreshItem.data.unions) {
                            for (let fieldName in refreshItem.data.unions[unionId]) {
                                if (gameController.gameData.players[unionId] === undefined) {
                                    gameController.gameData.players[unionId] = {};
                                }
                                gameController.gameData.unions[unionId][fieldName] = refreshItem.data.unions[unionId][fieldName];
                            }
                        }
                    }
                    gameController.updateDiplomacy();
                    if (gameController.isMap()) {
                        gameController.worldMap.updateMap();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_DIPLOMACY:
                    if (playerModel.getData().Union) {
                        $.extend(true, playerModel.getData().Union.Diplomacy, refreshItem.data);
                        ratingController.updateUnionDiplomacy();
                        unionController.isMyUnionOpen() && unionController.rebuildDiplomacyList();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_BALANCE:
                    if (header !== undefined) {
                        header.onTimerTick();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_TEXT_MESSAGE:
                    messageController.showSystemMessage(refreshItem.text);
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_STATISTICS:
                    for (let statisticId in refreshItem.data) {
                        playerModel.setStatData(statisticId, refreshItem.data[statisticId]);
                    }
                    questController.checkQuestsToBeDone();
                    questController.rerenderContent();
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_MEMBER_RIGHTS:
                    let myRightsUpdated = unionModel.applyNewRights(refreshItem.data);
                    unionController.isMyUnionOpen() && unionController.updateOthersRights();
                    if (myRightsUpdated) {
                        unionController.isMyUnionOpen() && unionController.updateMyRights();
                        ratingController.rebuildContentClassAttribute();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_ITEMS:
                    playerItemsModel.updateItems(refreshItem.data);
                    additionalAristocratController.updateCoinsTable();
                    additionalAristocratController.updateAdditionalAristocratResourceBar();
                    recruitBuildingController.updateResourceBar();
                    gadgetsController.updateRPGIcon();
                    gameController.dungeonResearch.onPlayerItemsChanges();
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_SKILLS:
                    rpgModel.updateSkills(refreshItem.data);
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_MEMBERS:
                    if (playerModel.getData().Union) {
                        for (let playerId in refreshItem.data) {
                            let updatedUnionMember = refreshItem.data[playerId];
                            unionModel.prepareMemberWithTitles(updatedUnionMember);
                            for (let i in playerModel.getData().Union.Members) {
                                if (playerModel.getData().Union.Members[i].Id == updatedUnionMember.Id) {
                                    playerModel.getData().Union.Members[i] = updatedUnionMember;
                                    break;
                                }
                            }
                        }
                        unionController.isMyUnionOpen() && unionController.rebuildMembersList();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_CAPITAL:
                    gameController.unionCapital.onUnionCapitalEvent(refreshItem.data);
                    break;
            }
        }
    },
    applyDeleteBlock: function(deleteBlockArray) {
        for (let j = 0; j < deleteBlockArray.length; j++) {
            let deleteBlock = deleteBlockArray[j];
            switch (deleteBlock.type) {
                case SocketServerEvent.EVENT_TYPE_CHAT_REMOVE_MESSAGES:
                    for (let i = 0; i < deleteBlock.messageIds.length; i++) {
                        $('#chat-message-' + deleteBlock.messageIds[i]).remove();
                    }
                    chatController.messageContainer.rearrange();
                    break;
                case SocketServerEvent.EVENT_TYPE_LOOSE_TOWN:
                    let townId = deleteBlock.townId;
                    playerModel.getData().TownList[townId] && delete playerModel.getData().TownList[townId];
                    townModel.getData().Owner && townModel.getData().Owner.TownList && townModel.getData().Owner.TownList[townId] && delete townModel.getData().Owner.TownList[townId];
                    if (townModel.getData().Id == townId && playerModel.getData().TownCount) {
                        playerController.switchToTown(parseInt(playerModel.getData().HomeTownId, 10));
                    } else {
                        playerModel.reloadTownList();
                        playerController.switchToTown(parseInt(playerModel.getData().HomeTownId, 10));
                    }
                    uiManager.playerInfoPanel.update();
                    gameController.townControl.update();
                    messageController.showSystemMessage(String.format(i18nModel.getData().route.loseTown, deleteBlock.townName));
                    break;
                case SocketServerEvent.EVENT_TYPE_REINFORCEMENT:
                    if (townModel.getData().Id == deleteBlock.townId) {
                        for (let i = 0; i < deleteBlock.data.length; i++) {
                            if (townModel.getData().Reinforcement[deleteBlock.data[i]]) {
                                delete townModel.getData().Reinforcement[deleteBlock.data[i]];
                            }
                        }
                        armyController.removeReinforcements(deleteBlock.data);
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_ROUTE:
                    if (townModel.getData().Id === deleteBlock.townId) {
                        for (let i = 0; i < deleteBlock.data.length; i++) {
                            let routeId = deleteBlock.data[i];
                            if (Route.routesList[routeId]) {
                                for (let armyId in townModel.getData().Armies) {
                                    if (townModel.getData().Armies[armyId].RouteId === routeId) {
                                        townModel.getData().Armies[armyId].RouteId = null;
                                    }
                                }
                                delete Route.routesList[routeId];
                                gameController.worldMap.updateMap();
                            }
                        }
                        armyController.updateAllArmies();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_ARMIES:
                    if (townModel.getData().Id == deleteBlock.townId) {
                        for (let i = 0; i < deleteBlock.data.length; i++) {
                            let armyId = deleteBlock.data[i];
                            if (townModel.getData().Armies[armyId]) {
                                delete townModel.getData().Armies[armyId];
                            }
                        }
                        armyController.updateAllArmies();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_QUESTS:
                    for (let i = 0; i < deleteBlock.data.length; i++) {
                        questModel.deleteQuest(deleteBlock.data[i]);
                    }
                    questController.checkQuestsToBeDone();
                    questController.rerenderContent();
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_KICK:
                    if (playerModel.getData().Union) {
                        if (unionController.isWindowOpen() && unionController.templateData.info.Id == playerModel.getData().Union.Id) {
                            uiWindow.close();
                        }
                        playerModel.getData().Union = null;
                        playerModel.getData().UnionId = null;
                        playerModel.getData().UnionInvitations = null;
                        ratingController.rebuildContentClassAttribute();
                        ratingController.resetOwnUnion();
                        messageController.showSystemMessage(i18nModel.getData().union.youHaveBeenKicked);
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_DIPLOMACY:
                    if (playerModel.getData().Union) {
                        for (let i = 0; i < deleteBlock.data.length; i++) {
                            let relatedUnionId = deleteBlock.data[i];
                            if (playerModel.getData().Union.Diplomacy[relatedUnionId]) {
                                delete playerModel.getData().Union.Diplomacy[relatedUnionId];
                            }
                        }
                        ratingController.updateUnionDiplomacy();
                        unionController.isMyUnionOpen() && unionController.rebuildDiplomacyList();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_INVITATIONS:
                    unionController.isMyUnionOpen() && unionController.removeUnacceptedInvites(deleteBlock.data);
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_MEMBERS:
                    if (playerModel.getData().Union) {
                        for (let i = 0; i < deleteBlock.data.length; i++) {
                            let unionMemberId = deleteBlock.data[i];
                            for (let k in playerModel.getData().Union.Members) {
                                if (playerModel.getData().Union.Members[k].Id == unionMemberId) {
                                    delete playerModel.getData().Union.Members[k];
                                }
                            }
                        }
                        unionController.isMyUnionOpen() && unionController.rebuildMembersList();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_TRADE:
                    if (marketModel.myOffers && deleteBlock.townId == townModel.getData().Id) {
                        for (let i = 0; i < deleteBlock.data.length; i++) {
                            let tradeId = deleteBlock.data[i];
                            for (let k = 0; k < marketModel.myOffers.length; k++) {
                                let trade = marketModel.myOffers[k];
                                if (trade.Id == tradeId) {
                                    marketModel.myOffers.splice(k, 1);
                                    break;
                                }
                            }
                        }
                        marketController.updateMyOffers();
                    }
                    break;
            }
        }
    },
    applyRefreshBlock: function(refreshBlock) {
        let self = this
            , req = new request()
            , callbacks = []
            , completeCallback = function(data) {
            for (let i = 0; i < callbacks.length; i++) {
                callbacks[i](data);
            }
        }
            , townDataGettingFields = []
            , playerDataGettingFields = [];
        for (let j = 0; j < refreshBlock.length; j++) {
            let refreshItem = refreshBlock[j];
            switch (refreshItem.type) {
                case SocketServerEvent.EVENT_TYPE_CHAT:
                    chatController.updateMessages();
                    break;
                case SocketServerEvent.EVENT_TYPE_TOWN:
                    if (refreshItem.townId == townModel.getData().Id) {
                        townDataGettingFields = townDataGettingFields.concat(refreshItem.fields);
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER:
                    playerDataGettingFields = playerDataGettingFields.concat(refreshItem.fields);
                    break;
                case SocketServerEvent.EVENT_TYPE_MESSAGES_COUNTERS:
                    if (refreshItem.unreadConversations) {
                        req.addGetting(conversationModel.gettings.unreadCount, request.all, {});
                        callbacks.push(function(data) {
                            if (data && data['return'] && data['return'][conversationModel.gettings.unreadCount] !== undefined) {
                                let conversationsCounter = data['return'][conversationModel.gettings.unreadCount];
                                conversationController.onUpdateConversationsUnreadCount(conversationsCounter);
                            }
                        });
                    }
                    if (refreshItem.unreadReports) {
                        req.addGetting(reportModel.gettings.unreadCount, request.all, {});
                        callbacks.push(function(data) {
                            if (data && data['return'] && data['return'][reportModel.gettings.unreadCount] !== undefined) {
                                let reportsCounter = data['return'][reportModel.gettings.unreadCount];
                                reportController.onUpdateReportsUnreadCount(reportsCounter);
                            }
                        });
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_QUESTS:
                    req.addGetting(questModel.currentQuestsGetting, ['all'], {
                        PlayerId: playerModel.getData().Id
                    });
                    callbacks.push(function(data) {
                        questModel.loadData(data['return'][questModel.currentQuestsGetting]);
                        questController.checkQuestsToBeDone();
                        questController.rerenderContent();
                    });
                    break;
                case SocketServerEvent.EVENT_TYPE_CONVERSATION_UPDATED:
                    if (conversationController.currentConversationId && refreshItem.conversationId == conversationController.currentConversationId) {
                        conversationModel.openConversation(refreshItem.conversationId, function(conversationData, newMessagesIds) {
                            if (newMessagesIds) {
                                conversationController.updateCurrentConversation(conversationData, newMessagesIds);
                            } else {
                                conversationController.updateCurrentConversation(conversationData);
                            }
                            conversationController.renderConversationsList(conversationModel.getList());
                            conversationController.updateCheckedConversationsList();
                        }, function() {}, true);
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_INCOMING_ATTACK:
                    if (!defenceWindowController.closed) {
                        defenceWindowModel.loadData(defenceWindowModel.fillData);
                    } else {
                        defenceWindowModel.loadData();
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_SIEGE:
                    Siege.loadData(function() {
                        Route.loadDataSoftly();
                        playerModel.loadData();
                        gameController.worldMap.updateMap();
                        armyController.updateAllArmies();
                        gadgetsController.updateSiegeIcon();
                        if (SiegeList.open) {
                            SiegeList.updateContent();
                        }
                        if (SiegeWindow.open) {
                            SiegeWindow.updateContent();
                        }
                    });
                    break;
                case SocketServerEvent.EVENT_TYPE_STUDY:
                    if (studyController.content != null) {
                        if (studyModel.isMaster) {
                            studyModel.loadData(studyController.updateMasterWindow);
                        } else {
                            studyModel.loadData(studyController.updateLearnerWindow);
                        }
                    }
                    break;
                case SocketServerEvent.EVENT_TYPE_PLAYER_SKILLS:
                    rpgModel.loadSkills(function() {
                        Troop.updateTroopStaticData();
                    });
                    break;
                case SocketServerEvent.EVENT_TYPE_UNION_CAPITAL:
                    gameController.unionCapital.onUnionCapitalEvent();
                    break;
            }
        }
        if (townDataGettingFields.length) {
            req.addGetting(townModel.gettings.info, townDataGettingFields, {
                townId: townModel.getData().Id
            });
            callbacks.push(function(data) {
                if (data && data['return'] && data['return'][townModel.gettings.info]) {
                    let townData = data['return'][townModel.gettings.info];
                    self.refreshTownData(townData);
                }
            });
        }
        if (playerDataGettingFields.length) {
            req.addGetting(playerModel.gettings.info, playerDataGettingFields, {
                PlayerId: playerModel.getData().Id
            });
            callbacks.push(function(data) {
                if (data && data['return'] && data['return'][playerModel.gettings.info]) {
                    let playerData = data['return'][playerModel.gettings.info];
                    self.refreshPlayerData(playerData);
                }
            });
        }
        if (req.gettings && $.objectKeys(req.gettings).length && callbacks.length) {
            req.getResponse(completeCallback);
        }
    },
    applyAddBlock: function(addBlock) {
        let req = new request()
            , callbacks = []
            , completeCallback = function(data) {
            for (let i = 0; i < callbacks.length; i++) {
                callbacks[i](data);
            }
        };
        for (let j = 0; j < addBlock.length; j++) {
            let addItem = addBlock[j];
            switch (addItem.type) {
                case SocketServerEvent.EVENT_TYPE_NEW_TOWN:
                    req.addGetting(playerModel.gettings.townList, request.all, {
                        PlayerId: playerModel.getData().Id
                    });
                    callbacks.push(function(data) {
                        if (data && data['return'] && data['return'][playerModel.gettings.townList]) {
                            let townListData = data['return'][playerModel.gettings.townList]
                                , newTownData = townListData[addItem.townId];
                            if (newTownData) {
                                playerModel.getData().TownList[addItem.townId] = newTownData;
                                uiManager.playerInfoPanel.update();
                                gameController.townControl.update();
                                if (gameController.isMap()) {
                                    gameController.worldMap.updateMap();
                                }
                            }
                        }
                    });
                    break;
            }
        }
        if (req.gettings && $.objectKeys(req.gettings).length && callbacks.length) {
            req.getResponse(completeCallback);
        }
    },
    init: function() {
        let self = SocketServerEvent;
        self.wsw = new WebSocketWorker();
        self.wsw.subscribe('event', self.onDeliverData);
    },
    onDeliverData: function(eventsData) {
        if (eventsData === undefined) {
            return false;
        }
        timingModel.setServerTime(eventsData.time);
        let self = SocketServerEvent
            , eventBody = eventsData.body;
        try {
            if (eventBody.addData !== undefined) {
                self.applyAddDataBlock(eventBody.addData);
            }
            if (eventBody.refreshData !== undefined) {
                self.applyRefreshDataBlock(eventBody.refreshData);
            }
            if (eventBody['delete'] !== undefined) {
                self.applyDeleteBlock(eventBody['delete']);
            }
            if (eventBody.refresh !== undefined) {
                self.applyRefreshBlock(eventBody.refresh);
            }
            if (eventBody.add !== undefined) {
                self.applyAddBlock(eventBody.add);
            }
        } catch (e) {
            console.log(e.stack);
            console.log(jQuery.toJSON(eventBody));
        }
    },
    refreshTownData: function(townData, withMessage) {
        let needUpdateResources = false
            , needUpdateWorldMap = false;
        if (townData.X !== undefined) {
            townModel.getData().Location.X = townModel.getData().X = townData.X;
            needUpdateWorldMap = true;
        }
        if (townData.Y !== undefined) {
            townModel.getData().Location.Y = townModel.getData().Y = townData.Y;
            needUpdateWorldMap = true;
        }
        let scalarTownFields = ['Points', 'Loyalty', 'FreePeople', 'TotalPeople', 'Workers'];
        for (let si = 0; si < scalarTownFields.length; si++) {
            let field = scalarTownFields[si];
            if (townData[field] !== undefined) {
                townModel.getData()[field] = townData[field];
                switch (field) {
                    case "FreePeople":
                    case "TotalPeople":
                    case "Workers":
                        needUpdateResources = true;
                        break;
                    case "Points":
                        needUpdateWorldMap = true;
                        break;
                }
            }
        }
        if (townData.Buildings !== undefined) {
            $.extend(true, townModel.getData().Buildings, townData.Buildings);
            for (let buildingId in townData.Buildings) {
                townModel.getData().Buildings[buildingId].ImageIndex = buildingsModel.calculateImageIndex(buildingId);
                townController.updateBuildingInfo(buildingId);
            }
        }
        if (townData.BuildingConstruction !== undefined) {
            Building.stopUpdate();
            townModel.getData().BuildingConstruction = townData.BuildingConstruction;
            Building.startUpdate();
        }
        if (townData.Troops !== undefined) {
            $.extend(true, townModel.getData().Troops, townData.Troops);
            for (let troopId in townData.Troops) {
                armyController.updateFreeTroopsOnSquare(troopId);
            }
        }
        if (townData.RecruitingList !== undefined) {
            townModel.getData().RecruitingList = townData.RecruitingList;
        }
        if (townData.Armies !== undefined) {
            townModel.getData().Armies = townData.Armies;
            armyController.updateAllArmies();
        }
        if (needUpdateWorldMap) {
            gameController.worldMap.updateMap();
        }
        if (needUpdateResources) {
            gameController.resourcesPanel.updateResources();
        }
        gameController.townControl.onTownDataUpdated(townData.keys);
        withMessage && messageController.showSystemMessage(withMessage);
    },
    refreshPlayerData: function(playerData) {
        let scalarPlayerFields = ['HomeTownId', 'Experience', 'ExperienceForNextLevel', 'Level', 'BanChatUntil', 'BanConversationsUntil', 'BanTradeUntil', 'ChestTryCount', 'DailyPrizeCounter', 'AvatarId', 'AvatarUrl', 'Description', 'InVacation', 'Name', 'PercentIncrease', 'Position', 'PlayingFrom', 'ReadyToDie', 'SectorId', 'TownCount', 'UnionId'], i;
        for (let si = 0; si < scalarPlayerFields.length; si++) {
            let field = scalarPlayerFields[si];
            if (playerData[field] !== undefined) {
                playerModel.getData()[field] = playerData[field];
            }
        }
        if (playerData.SpyInTown !== undefined) {
            if (!playerModel.getData().SpyInTown) {
                playerModel.getData().SpyInTown = {};
            }
            if (playerData.SpyInTown.Delete === undefined) {
                playerModel.getData().SpyInTown[playerData.SpyInTown.SpiedTownId] = playerData.SpyInTown;
            } else {
                delete playerModel.getData().SpyInTown[playerData.SpyInTown.SpiedTownId];
            }
            gameController.worldMap.updateCell();
            gameController.worldMap.updateMap();
            gameController.townControl.onTownDataUpdated();
        }
        if (playerData.Reinforcements !== undefined) {
            if (!playerModel.getData().Reinforcements) {
                playerModel.getData().Reinforcements = {};
            }
            if (playerData.Reinforcements.d === undefined) {
                let townList = playerModel.getData().TownList
                    , my = false;
                for (let townId in townList) {
                    if (parseInt(playerData.Reinforcements.fti) === parseInt(townId)) {
                        my = true;
                        break;
                    }
                }
                if (my) {
                    playerModel.getData().Reinforcements.my[playerData.Reinforcements.ai] = playerData.Reinforcements;
                } else {
                    playerModel.getData().Reinforcements.other[playerData.Reinforcements.ai] = playerData.Reinforcements;
                }
            } else {
                delete playerModel.getData().Reinforcements.my[playerData.Reinforcements.ai];
                delete playerModel.getData().Reinforcements.other[playerData.Reinforcements.ai];
            }
            gameController.townControl.onTownDataUpdated();
        }
        if (playerData.BanChatUntil !== undefined) {
            gadgetsController.updateChatBanIcon();
        }
        if (playerData.GameEvent !== undefined) {
            playerModel.getData().GameEvent = playerData.GameEvent;
            gadgetsController.updateGameEventIcon();
        }
        if (playerData.Ingredients !== undefined) {
            ingredientsModel.loadData(playerData.Ingredients);
            gadgetsController.updateIngredientIcons();
        }
        if (playerData.ChestTryCount !== undefined || playerData.DailyPrizeCounter !== undefined) {
            chestController.updateChestButton();
        }
        if (playerData.Experience !== undefined || playerData.ExperienceForNextLevel !== undefined || playerData.Level !== undefined || playerData.Name !== undefined || playerData.AvatarUrl !== undefined) {
            uiManager.playerInfoPanel.update();
        }
        if (playerData.Union !== undefined) {
            if (typeof playerData.Union === 'object' && !playerModel.getData().Union) {
                playerModel.getData().Union = {};
            }
            if (playerData.Union.Members) {
                for (i in playerData.Union.Members) {
                    unionModel.prepareMemberWithTitles(playerData.Union.Members[i]);
                }
                delete playerModel.getData().Union.Members;
            }
            if (unionController.isMyUnionOpen()) {
                if (playerData.Union.Description !== undefined && playerModel.getData().Union.Description !== playerData.Union.Description) {
                    unionController.setDisplayedDescription(playerData.Union.Description);
                }
                if (playerData.Union.AvatarId !== undefined && playerModel.getData().Union.AvatarId !== playerData.Union.AvatarId) {
                    unionController.setDisplayedBlazon(playerData.Union.AvatarUrl);
                }
                if (playerData.Union.TownCount !== undefined && playerModel.getData().Union.TownCount !== playerData.Union.TownCount) {
                    unionController.setDisplayedTownCount(playerData.Union.TownCount);
                }
                if (playerData.Union.PlayersCount !== undefined && playerModel.getData().Union.PlayersCount !== playerData.Union.PlayersCount) {
                    unionController.setDisplayedPlayersCount(playerData.Union.PlayersCount);
                }
            }
            $.extend(playerModel.getData().Union, playerData.Union);
        }
        if (playerData.UnionInvitations !== undefined) {
            playerModel.getData().UnionInvitations = playerData.UnionInvitations;
            let openedUnionId = unionController.getOpenedUnionId();
            if (openedUnionId) {
                unionController.setRequestMembershipButtonType(1);
                for (i = 0; i < playerModel.getData().UnionInvitations.length; i++) {
                    if (playerModel.getData().UnionInvitations[i].UnionId === openedUnionId) {
                        if (playerModel.getData().UnionInvitations[i].Inviter.Id) {
                            unionController.setRequestMembershipButtonType(3);
                        } else {
                            unionController.setRequestMembershipButtonType(2);
                        }
                        break;
                    }
                }
            }
        }
        if (playerData.Resources !== undefined) {
            playerModel.updateResources(playerData.Resources);
            gameController.resourcesPanel.updateResources();
        }
        if (playerData.DungeonResearches !== undefined) {
            if (!playerModel.getData().DungeonResearches) {
                playerModel.getData().DungeonResearches = {};
            }
            if (playerData.DungeonResearches.Delete === undefined) {
                playerModel.getData().DungeonResearches[playerData.DungeonResearches.id] = playerData.DungeonResearches;
            } else {
                delete playerModel.getData().DungeonResearches[playerData.DungeonResearches.id];
            }
            gameController.dungeonResearch.onPlayerDataChanges();
        }
    },
};

class LocalStorage {
    constructor(varName) {
        let self = this;
        self._name = varName;
    }
    get name() {
        return this._name;
    }
    get data() {
        let varData = localStorage.getItem(this.name);
        if (varData !== undefined) {
            try {
                return JSON.parse(varData);
            } catch (e) {}
        }
        return false;
    }
    set data(varData) {
        try {
            let varStr = JSON.stringify(varData);
            localStorage.setItem(this.name, varStr);
        } catch (e) {}
    }
}

class TownControl {
    constructor() {
        this.__leftWindow = undefined;
        this.__rightWindow = undefined;
        this.__useTick = 0;
        this.__div = $(uiUtils.applyTemplate('TownControl', {
            i18n: i18nModel.getData().townControl,
            buttons: TownControl.mainButtons,
        }));
        this.__show = false;
        this.__townSelectPanel = this.__div.find('.town-select-panel');
        this.__townSelectList = this.__div.find('.town-select-list');
        this.__townName = this.__townSelectPanel.find('.town-name');
        this.__townSelectPanelDown = this.__townSelectPanel.children('.down');
        this.__townSelectPanelLeft = this.__townSelectPanel.children('.left');
        this.__townSelectPanelRight = this.__townSelectPanel.children('.right');
        this.update();
    }
    update() {
        let townData = townModel.getData();
        this.__townName.text(townData.Name);
        this.__generateTownSelectList();
        this.__arrangeTownNavigateButtons();
        if (this.__townSelectListScrollBar !== undefined) {
            this.__townSelectListScrollBar.updateScrollBar();
        }
        if (this.__rightWindow !== undefined) {
            this.__rightWindow.onTownDataUpdated();
        }
        if (this.__leftWindow !== undefined) {
            this.__leftWindow.onTownDataUpdated();
        }
    }
    __onButtonClick(e) {
        let curButton = $(e.currentTarget)
            , type = curButton.attr('type')
            , left = 0
            , right = 0;
        switch (type) {
            case 'buildings':
                left = ControlWindow.WINDOW_TYPE_BUILDINGS;
            case 'constructions':
                right = ControlWindow.WINDOW_TYPE_CONSTRUCTIONS;
                break;
            case 'createArmy':
                left = ControlWindow.WINDOW_TYPE_CREATE_ARMY;
            case 'armies':
                right = ControlWindow.WINDOW_TYPE_ARMIES;
                break;
            case 'troops':
                left = ControlWindow.WINDOW_TYPE_TROOPS;
            case 'recruiting':
                right = ControlWindow.WINDOW_TYPE_RECRUITING;
                break;
            case 'spying':
                right = ControlWindow.WINDOW_TYPE_SPY;
                break;
            case 'economic':
                right = ControlWindow.WINDOW_TYPE_ECONOMIC;
                break;
            case 'routes':
                right = ControlWindow.WINDOW_TYPE_ROUTE;
                break;
            case 'reinforcements':
                right = ControlWindow.WINDOW_TYPE_REINFORCEMENTS;
                break;
        }
        this.switchPanel(left, right);
    }
    close() {
        WOFWindow.closeWindow();
    }
    __onCloseWindow() {
        this.__show = false;
        if (this.__leftWindowType !== ControlWindow.WINDOW_TYPE_EDIT_ARMY) {
            this.__lastLeftWindowType = this.__leftWindowType;
        }
        this.__lastRightWindowType = this.__rightWindowType;
        if (this.__leftWindow !== undefined) {
            this.__leftWindow.close();
        }
        if (this.__rightWindow !== undefined) {
            this.__rightWindow.close();
        }
    }
    switchPanel(leftWindowType=0, rightWindowType=0, leftWindowTab=1, rightWindowTab=1, leftWindowParam={}, rightWindowParam={}) {
        if (leftWindowType > 0) {
            if (this.__leftWindow !== undefined) {
                this.__leftWindow.close();
            }
            if (this.__leftWindowType !== ControlWindow.WINDOW_TYPE_EDIT_ARMY) {
                this.__lastLeftWindowType = this.__leftWindowType;
            }
            this.__leftWindowType = leftWindowType;
            this.__buildWindowContent(leftWindowType, 'left', leftWindowTab, leftWindowParam);
            this.__div.find('.body > .left-side').empty().append(this.__leftWindow.getContent());
            this.__leftWindow.show();
        }
        if (rightWindowType > 0) {
            if (this.__rightWindow !== undefined) {
                this.__rightWindow.close();
            }
            this.__lastRightWindowType = this.__rightWindowType;
            this.__rightWindowType = rightWindowType;
            this.__buildWindowContent(rightWindowType, 'right', rightWindowTab, rightWindowParam);
            this.__div.find('.body > .right-side').empty().append(this.__rightWindow.getContent());
            this.__rightWindow.show();
        }
    }
    getRightWindow() {
        return this.__rightWindow;
    }
    getLeftWindow() {
        return this.__leftWindow;
    }
    getRightWindowType() {
        return this.__rightWindowType;
    }
    getLeftWindowType() {
        return this.__leftWindowType;
    }
    show(leftWindowType, rightWindowType=0, leftWindowTab=1, rightWindowTab=1, leftWindowParam={}, rightWindowParam={}) {
        WOFWindow.setWindowClass('town-control-window');
        this.__windowDiv = WOFWindow.showWindow(i18nModel.getData().townControl.title, this.__div, ()=>{
                this.__onCloseWindow();
            }
        );
        this.__div.find('.switch-buttons .switch-button').off().on('click', (e)=>{
                this.__onButtonClick(e);
            }
        ).tooltip({
            showURL: false,
            left: 40,
            delay: 40,
            bodyHandler: function() {
                return $(this).attr('tooltip');
            }
        })
        this.__townName.off().on('click', (e)=>{
                this.__onTownNameClick(e);
            }
        );
        this.__townSelectPanelDown.off().on('click', ()=>{
                this.__onTownSelectPanelDownClick();
            }
        );
        this.__townSelectPanelLeft.off().on('click', ()=>{
                this.__onTownSelectPanelLeftClick();
            }
        );
        this.__townSelectPanelRight.off().on('click', ()=>{
                this.__onTownSelectPanelRightClick();
            }
        );
        this.update();
        this.switchPanel(leftWindowType, rightWindowType, leftWindowTab, rightWindowTab);
        this.__show = true;
    }
    onTownDataUpdated(fields={}) {
        if (this.isShown()) {
            if (this.__leftWindow !== undefined) {
                this.__leftWindow.onTownDataUpdated(fields);
            }
            if (this.__rightWindow !== undefined) {
                this.__rightWindow.onTownDataUpdated(fields);
            }
        }
    }
    __buildWindowContent(windowType, handle, openTab=1, param={}) {
        let control = gameController.townControl
            , windowClassName = false;
        switch (windowType) {
            case ControlWindow.WINDOW_TYPE_ROUTE:
                windowClassName = ControlWindowRoutes;
                break;
            case ControlWindow.WINDOW_TYPE_ARMIES:
                windowClassName = ControlWindowArmies;
                break;
            case ControlWindow.WINDOW_TYPE_ECONOMIC:
                windowClassName = ControlWindowEconimic;
                break;
            case ControlWindow.WINDOW_TYPE_BUILDINGS:
                windowClassName = ControlWindowBuildings;
                break;
            case ControlWindow.WINDOW_TYPE_RECRUITING:
                windowClassName = ControlWindowRecruiting;
                break;
            case ControlWindow.WINDOW_TYPE_SPY:
                windowClassName = ControlWindowSpies;
                break;
            case ControlWindow.WINDOW_TYPE_TROOPS:
                windowClassName = ControlWindowTroops;
                break;
            case ControlWindow.WINDOW_TYPE_CONSTRUCTIONS:
                windowClassName = ControlWindowConstructions;
                break;
            case ControlWindow.WINDOW_TYPE_CREATE_ARMY:
                windowClassName = ControlWindowCreateArmy;
                break;
            case ControlWindow.WINDOW_TYPE_EDIT_ARMY:
                windowClassName = ControlWindowEditArmy;
                break;
            case ControlWindow.WINDOW_TYPE_REINFORCEMENTS:
                windowClassName = ControlWindowReinforcements;
                break;
            default:
                return false;
        }
        this['__' + handle + 'Window'] = new windowClassName(control,param);
        if (windowClassName.tabs !== undefined) {
            if (typeof openTab === 'string' || openTab instanceof String) {
                this['__' + handle + 'Window'].setTab(openTab);
            } else {
                this['__' + handle + 'Window'].setTab(windowClassName.tabs[openTab]);
            }
        }
    }
    getLastLeftWindowType() {
        return this.__lastLeftWindowType;
    }
    getLastRightWindowType() {
        return this.__lastRightWindowType;
    }
    isShown() {
        return this.__show;
    }
    getUseTick() {
        return this.__useTick++;
    }
    getPlaceForOpenWindow(defaultPlace=TownControl.WINDOW_PLACE_LEFT) {
        if (defaultPlace === TownControl.WINDOW_PLACE_LEFT) {
            if (this.__leftWindow !== undefined) {
                if (this.__rightWindow !== undefined) {
                    if (this.__leftWindow.lastUpdate < this.__rightWindow.lastUpdate) {
                        return TownControl.WINDOW_PLACE_LEFT;
                    }
                }
                return TownControl.WINDOW_PLACE_RIGHT;
            } else {
                return TownControl.WINDOW_PLACE_LEFT;
            }
        } else {
            if (this.__rightWindow !== undefined) {
                if (this.__leftWindow !== undefined) {
                    if (this.__rightWindow.lastUpdate < this.__leftWindow.lastUpdate) {
                        return TownControl.WINDOW_PLACE_RIGHT;
                    }
                }
                return TownControl.WINDOW_PLACE_LEFT;
            } else {
                return TownControl.WINDOW_PLACE_RIGHT;
            }
        }
    }
    __generateTownSelectList() {
        this.__townSelectList.empty();
        delete this.__townSelectListScrollBar;
        if (playerModel.getData().TownCount === 1) {
            return;
        }
        let playerTowns = playerModel.getData().TownList
            , playerInfoPanelTownListTemplateData = {
            towns: [],
        };
        for (let townId in playerTowns) {
            townId = parseInt(townId, 10);
            playerInfoPanelTownListTemplateData.towns.push({
                id: townId,
                name: playerTowns[townId].Name,
                location: String.format(i18nModel.getData().playerInfoPanel.location, playerTowns[townId].Location.X, playerTowns[townId].Location.Y),
            });
        }
        for (let i = 0; i < playerInfoPanelTownListTemplateData.towns.length; i++) {
            for (let j = 0; j < playerInfoPanelTownListTemplateData.towns.length; j++) {
                if (playerInfoPanelTownListTemplateData.towns[i].name < playerInfoPanelTownListTemplateData.towns[j].name) {
                    let buf = playerInfoPanelTownListTemplateData.towns[i];
                    playerInfoPanelTownListTemplateData.towns[i] = playerInfoPanelTownListTemplateData.towns[j];
                    playerInfoPanelTownListTemplateData.towns[j] = buf;
                }
            }
        }
        this.__townSelectList.append($(uiUtils.applyTemplate('playerInfoPanelTownList', playerInfoPanelTownListTemplateData)));
        this.__townSelectListScrollBar = new ScrollBar(this.__townSelectList.children('.town-select-list-body'),undefined,10);
        this.__townSelectList.find('.town-select-list-item').click(this.__onTownSelectListItemClick);
    }
    __arrangeTownNavigateButtons() {
        if ($.objectKeys(playerModel.getData().TownList).length < 2) {
            this.__townSelectPanelDown.addClass('disabled');
            this.__townSelectPanelLeft.addClass('disabled');
            this.__townSelectPanelRight.addClass('disabled');
        } else {
            this.__townSelectPanelDown.removeClass('disabled');
            this.__townSelectPanelLeft.removeClass('disabled');
            this.__townSelectPanelRight.removeClass('disabled');
        }
    }
    __onTownSelectPanelLeftClick() {
        if (this.__townSelectPanelLeft.hasClass('disabled') || $.objectKeys(playerModel.getData().TownList).length < 2) {
            return;
        }
        this.__townSelectPanelLeft.addClass('disabled');
        playerController.switchToPreviousTown();
        this.__townSelectPanelLeft.removeClass('disabled');
    }
    __onTownSelectPanelRightClick() {
        if (this.__townSelectPanelRight.hasClass('disabled') || $.objectKeys(playerModel.getData().TownList).length < 2) {
            return;
        }
        this.__townSelectPanelRight.addClass('disabled');
        playerController.switchToNextTown();
        this.__townSelectPanelRight.removeClass('disabled');
    }
    __onTownSelectPanelDownClick() {
        if ($.objectKeys(playerModel.getData().TownList).length < 2) {
            return;
        }
        if (!this.__div.hasClass('list-show')) {
            this.__div.addClass('list-show');
        } else {
            this.__div.removeClass('list-show');
        }
    }
    __onTownNameClick() {
        this.__onTownSelectPanelDownClick();
    }
    __onTownSelectListItemClick() {
        let curObj = $(this);
        if (curObj.hasClass('current'))
            return false;
        let townId = parseInt(curObj.attr('town_id'));
        if (townId <= 0)
            return;
        playerController.switchToTown(townId);
    }
}
TownControl.WINDOW_PLACE_LEFT = 1;
TownControl.WINDOW_PLACE_RIGHT = 2;
TownControl.mainButtons = {
    left: ['buildings', 'troops', 'createArmy', ],
    right: ['spying', 'reinforcements', 'armies', 'routes', 'recruiting', 'constructions', 'economic', ]
};

class TownResearch {
    static researchForTroops() {
        return {
            1: 1,
            2: 2,
            3: 3,
            4: 4,
            5: 5,
            6: 6,
            7: 7,
            8: 8,
            9: 9,
            10: 10,
        };
    }
    static showResearchWindow(onCloseWindowCallback=null) {
        let self = TownResearch
        if (townModel.getData().Buildings[11].Level > 0) {
            let researches = staticDataModel.townResearchStaticData
                , townResearches = townModel.getData().TownResearch;
            for (let researchId in researches) {
                researches[researchId].name = i18nModel.getData().townResearch.names[researchId];
            }
            self.__contentDiv = $(uiUtils.applyTemplate('townResearchWindow', {
                researches: researches,
                i18n: i18nModel.getData().townResearch
            }));
            self.researches = self.__contentDiv.find('.research').click(self.__onResearchClick);
            self.exitButton = self.__contentDiv.find('.exit-button').click(self.__onExitButtonClick);
            self.buyButton = self.__contentDiv.find('.buy-coins-block > .buy-button').click(self.__onBuyButtonClick);
            self.resources = self.__contentDiv.find('.resource-panel > div');
            self.coins = self.__contentDiv.find('.buy-coins-block > .coins > .value span');
            self.researches.each(function() {
                let curObj = $(this)
                    , attr = curObj.attr('class')
                    , researchId = attr.match(/research-(.+)/)[1]
                    , troopId = self.researchForTroops()[researchId];
                curObj.children('.tooltip-handler').tooltip({
                    delay: 100,
                    showURL: false,
                    track: true,
                    left: 40,
                    top: 0,
                    bodyHandler: function() {
                        return staticDataModel.troops[troopId].getTooltipTemplate();
                    },
                    extraClass: 'troop-tooltip'
                });
            });
            self.__open = true;
            self.updateCoins();
            self.updateResearches();
            self.__windowDiv = WOFWindow.showWindow(String.format(i18nModel.getData().town.buildingHeaderFormat, i18nModel.getData().townResearch.title, buildingsModel.getLevel(11)), self.__contentDiv, self.__onCloseWindow);
        }
        self.__onCloseWindowCallback = onCloseWindowCallback;
    }
    static __onExitButtonClick() {
        WOFWindow.closeWindow();
    }
    static __onCloseWindow() {
        let self = TownResearch;
        self.__open = false;
        self.__windowDiv = undefined;
        self.__onCloseWindowCallback && self.__onCloseWindowCallback();
    }
    static updateCoins() {
        let self = TownResearch;
        self.coins.text(playerModel.getCoins());
    }
    static isOpen() {
        return TownResearch.__open;
    }
    static updateLevel() {
        let self = TownResearch;
        if (self.isOpen()) {
            self.__windowDiv.find('.window-body > .title').html(String.format(i18nModel.getData().town.buildingHeaderFormat, i18nModel.getData().townResearch.title, buildingsModel.getLevel(11)));
        }
    }
    static updateResearches() {
        let self = TownResearch
            , researches = staticDataModel.townResearchStaticData
            , townResearches = townModel.getData().TownResearch
            , forgeLevel = townModel.getData().Buildings[11].Level;
        if (self.isOpen()) {
            for (let researchId in researches) {
                let research = researches[researchId]
                    , requirements = ''
                    , researchDiv = self.researches.filter('.research-' + researchId);
                if (research.ForgeLevel > 0 && research.ForgeLevel > forgeLevel) {
                    requirements += String.format(i18nModel.getData().townResearch.forgeLevel, research.ForgeLevel);
                }
                if (research.NeedResearchId > 0 && (townResearches[research.NeedResearchId] === undefined || (townResearches[research.NeedResearchId] !== undefined && townResearches[research.NeedResearchId].level === 0))) {
                    requirements += (requirements.length > 0 ? '<br/><br/>' : '') + String.format(i18nModel.getData().townResearch.needResearch, i18nModel.getData().townResearch.names[research.NeedResearchId]);
                }
                if (requirements.length === 0) {
                    if (townResearches[researchId] !== undefined || research.Coins === 0) {
                        researchDiv.removeClass('blocked').addClass('active');
                    } else {
                        researchDiv.removeClass('active blocked');
                    }
                } else {
                    researchDiv.children('.blocked').html(requirements);
                    researchDiv.removeClass('active').addClass('blocked');
                }
            }
        }
    }
    static __onBuyButtonClick() {
        let self = TownResearch;
        if (self.buyButton.hasClass('disabled'))
            return;
        gameController.coinsExchange.showWindow(()=>{
                self.updateCoins();
                self.buyButton.removeClass('disabled');
            }
        );
    }
    static __researching(researchId, success, error, ajaxError) {
        let req = new request();
        req.addGetting('townResearch:researching', ['all'], {
            townId: townModel.getData().Id,
            researchId: researchId,
        });
        req.addGetting('town:getInfo', ['TownResearch'], {
            townId: townModel.getData().Id
        });
        req.addGetting(playerItemsModel.getting.getItems, ['all'], {
            id: playerModel.getData().Id
        });
        req.getResponse(function(data) {
            playerItemsModel.loadData(data.return[playerItemsModel.getting.getItems]);
            $.extend(townModel.getData(), data.return['town:getInfo']);
            if (typeof data.return['townResearch:researching'] === "string") {
                error && error(data.return['townResearch:researching']);
            } else {
                success && success();
            }
        }, {
            timeout: 20000,
            callback: ajaxError
        });
    }
    static __onResearchClick(e) {
        let self = TownResearch
            , curObj = $(this)
            , attr = curObj.attr('class')
            , researchId = attr.match(/research-(.+)/)[1];
        if (curObj.hasClass('blocked') || curObj.hasClass('active')) {
            e.stopPropagation();
            return false;
        }
        WindowYesNo.showWindow(String.format(i18nModel.getData().townResearch.question, [i18nModel.getData().townResearch.names[researchId], staticDataModel.townResearchStaticData[researchId].Coins]), function() {
            self.__researching(researchId, function() {
                self.updateCoins();
                self.updateResearches();
            }, function(errorCode) {
                errorCode && messageController.showSystemMessage(i18nModel.getTextByCode(errorCode));
            }, uiWindow.ajaxError);
        });
    }
}

class Troop {
    constructor(data) {
        this.__armor = parseInt(data.Armor);
        this.__attack = parseInt(data.Attack);
        this.__attackRange = parseInt(data.AttackRange);
        this.__attackSpeed = parseInt(data.AttackSpeed);
        this.__battleSpeed = parseInt(data.BattleSpeed);
        this.__buildingId = parseInt(data.BuildingId);
        this.__consumption = data.Consumption;
        this.__cost = data.Cost;
        this.__experienceForKill = parseInt(data.ExperienceForKill);
        this.__healthPoints = parseInt(data.HealthPoints);
        this.__id = parseInt(data.Id);
        this.__peopleRequired = parseInt(data.PeopleRequired);
        this.__requirements = data.Requirements;
        this.__space = parseInt(data.Space);
        this.__speed = parseInt(data.Speed);
        this.__trainingTime = parseInt(data.TrainingTime);
        this.__type = parseInt(data.Type);
    }
    get armor() {
        return this.__armor;
    }
    get attack() {
        return this.__attack;
    }
    get attackRange() {
        return this.__attackRange;
    }
    get attackSpeed() {
        return this.__attackSpeed;
    }
    get battleSpeed() {
        return this.__battleSpeed;
    }
    get buildingId() {
        return this.__buildingId;
    }
    get consumption() {
        return this.__consumption;
    }
    get cost() {
        return this.__cost;
    }
    get experienceForKill() {
        return this.__experienceForKill;
    }
    get id() {
        return this.__id;
    }
    get peopleRequired() {
        return this.__peopleRequired;
    }
    get requirements() {
        return this.__requirements;
    }
    get space() {
        return this.__space;
    }
    get speed() {
        return this.__speed;
    }
    get trainingTime() {
        return this.__trainingTime;
    }
    get type() {
        return this.__type;
    }
    get healthPoints() {
        return this.__healthPoints;
    }
    getAsObject() {
        return {
            armor: this.armor,
            attack: this.attack,
            attackRange: this.attackRange,
            attackSpeed: this.attackSpeed,
            battleSpeed: this.battleSpeed,
            buildingId: this.buildingId,
            consumption: this.consumption,
            cost: this.cost,
            experienceForKill: this.experienceForKill,
            healthPoints: this.healthPoints,
            id: this.id,
            peopleRequired: this.peopleRequired,
            requirements: this.requirements,
            space: this.space,
            speed: this.speed,
            trainingTime: this.trainingTime,
            type: this.type
        }
    }
    getTrainingTime() {
        let buildingLevel = buildingsModel.getLevel(this.buildingId)
            , buildingData = buildingsModel.getHelpData()[this.buildingId][buildingLevel]
            , playerPremium = premiumModel.getPlayerPremiums()
            , buildingPercent = (Array.isArray(buildingData.Additional) ? buildingData.Additional[0] : buildingData.Additional) || 100
            , baseTrainingTime = this.trainingTime
            , premiumPercent = playerPremium[premiumModel.ministerTasks.trainingFaster] ? playerPremium[premiumModel.ministerTasks.trainingFaster].Percent : 0
            , newbiePercent = staticDataModel.config.newbie && staticDataModel.config.newbie.recruitSpeedMaxLvl >= playerModel.getData().Level ? staticDataModel.config.newbie.recruitSpeedCoefficient : 0;
        return Math.ceil(baseTrainingTime * buildingPercent / 100 * (100 - premiumPercent) / 100 * (100 - newbiePercent) / 100);
    }
    getCalculatedTrainingTime() {
        let skillArr = rpgModel.getSkillsAffectingUnitTrainingTime()
            , skillBonus = rpgModel.getSkillBonus(skillArr) / 100;
        return this.getTrainingTime() * (100 - skillBonus) / 100;
    }
    getCalculatedCost() {
        let skillArr = rpgModel.getSkillsAffectingUnitCost()
            , skillBonus = rpgModel.getSkillBonus(skillArr) / 100
            , aristocratDiscount = 0;
        if (this.id === Troop.ARISTOCRAT_ID && additionalAristocratModel.isEnabled()) {
            let affectingSkillsArray = rpgModel.getSkillsAffectingAristocratUnitCost()
                , aristocratDiscount = rpgModel.getSkillBonus(affectingSkillsArray);
            skillBonus += aristocratDiscount;
        }
        return {
            gold: Math.ceil(this.cost.gold * (100 - skillBonus) / 100),
            stone: Math.ceil(this.cost.stone * (100 - skillBonus) / 100),
            wood: Math.ceil(this.cost.wood * (100 - skillBonus) / 100),
            iron: Math.ceil(this.cost.iron * (100 - skillBonus) / 100),
            coinsDiscount: aristocratDiscount / 10000,
        }
    }
    getTooltipTemplate() {
        let skillArr, skillBonus, playerSkills = rpgModel.playerSkills, i18nData = i18nModel.getData(), calculatedTroopData = {
            attackRange: this.attackRange,
            attackSpeed: this.attackSpeed,
            battleSpeed: this.battleSpeed,
            buildingId: this.buildingId,
            consumption: this.consumption,
            experienceForKill: this.experienceForKill,
            healthPoints: this.healthPoints,
            id: this.id,
            peopleRequired: this.peopleRequired,
            requirements: this.requirements,
            type: this.type
        };
        calculatedTroopData.trainingTime = $.secsToString(this.getCalculatedTrainingTime(), i18nModel.getTimeFormat());
        skillArr = rpgModel.getSkillsAffectingUnitsTrophies();
        skillBonus = rpgModel.getSkillBonus(skillArr);
        calculatedTroopData.space = skillBonus + this.space;
        skillArr = rpgModel.getSkillsAffectingUnitCost();
        skillBonus = rpgModel.getSkillBonus(skillArr) / 100;
        calculatedTroopData.cost = {};
        if (this.id === Troop.ARISTOCRAT_ID && additionalAristocratModel.isEnabled()) {
            let nextAristocratPrice = additionalAristocratModel.getAristocratPrice(additionalAristocratModel.getAristocratNumber() + 1)
                , affectingSkillsArray = rpgModel.getSkillsAffectingAristocratUnitCost()
                , discount = 1;
            for (let index in affectingSkillsArray) {
                if (affectingSkillsArray.hasOwnProperty(index)) {
                    if (playerSkills[affectingSkillsArray[index]]) {
                        discount -= playerSkills[affectingSkillsArray[index]].Parameter / 10000;
                        skillBonus += playerSkills[affectingSkillsArray[index]].Parameter / 100;
                    }
                }
            }
            calculatedTroopData.cost.aristocratCoins = Math.max(Math.floor(nextAristocratPrice * discount), 1);
        }
        calculatedTroopData.cost.gold = Math.ceil(this.cost.gold * (100 - skillBonus) / 100);
        calculatedTroopData.cost.stone = Math.ceil(this.cost.stone * (100 - skillBonus) / 100);
        calculatedTroopData.cost.wood = Math.ceil(this.cost.wood * (100 - skillBonus) / 100);
        calculatedTroopData.cost.iron = Math.ceil(this.cost.iron * (100 - skillBonus) / 100);
        skillArr = rpgModel.getSkillsAffectingUnitAttackPercent();
        let attackPercent = rpgModel.getSkillBonus(skillArr) / 100;
        if (this.id === 7 || this.id === 8) {
            skillArr = rpgModel.getSkillsAffectingUnitAttackRanged();
        } else {
            skillArr = rpgModel.getSkillsAffectingUnitAttackMelee();
        }
        let attackBonus = rpgModel.getSkillBonus(skillArr) / 100;
        calculatedTroopData.attack = (this.attack + attackBonus) * (100 + attackPercent) / 100;
        skillArr = rpgModel.getSkillsAffectingUnitDefencePercent();
        let defPercent = rpgModel.getSkillBonus(skillArr) / 100;
        skillArr = rpgModel.getSkillsAffectingUnitDefence();
        let def = rpgModel.getSkillBonus(skillArr) / 100
            , minDef = this.id === 3 ? 55 : 75;
        calculatedTroopData.armor = Math.min((this.armor + def) * (100 + defPercent) / 100, minDef);
        skillArr = [];
        switch (this.id) {
            case Troop.SPY_ID:
                break;
            case Troop.SCOUT_ID:
                skillArr = rpgModel.getSkillsAffectingScoutSpeed();
                break;
            default:
                skillArr = rpgModel.getSkillsAffectingUnitsSpeed();
        }
        skillBonus = rpgModel.getSkillBonus(skillArr) / 100;
        let prem = premiumModel.getPlayerPremiums();
        if (prem[11]) {
            skillBonus += prem[11].Percent;
        }
        calculatedTroopData.speed = this.speed * (100 - skillBonus) / 100;
        calculatedTroopData.speed = $.secsToString(Math.ceil(calculatedTroopData.speed / staticDataModel.config.worldSpeeds.routeSpeedCoefficient), i18nData.shortTimeFormat);
        if (this.id === Troop.ARISTOCRAT_ID) {
            skillArr = rpgModel.getSkillsAffectingLoyaltyIncrease();
            calculatedTroopData.loyalty = rpgModel.getSkillBonus(skillArr) / 100 + 80;
        }
        let tooltipTemplateData = {
            troopName: i18nModel.getTroopsName(this.id),
            troopDesc: i18nModel.getTroopsDesc(this.id),
            troop: calculatedTroopData,
            troopHint: i18nData.troops[this.id].hint,
            info: i18nData.troopsTooltip,
            isAristocrat: additionalAristocratModel.isEnabled() && this.id === 14
        };
        return uiUtils.applyTemplate('TroopTooltip', tooltipTemplateData);
    }
    getRequirements() {
        return this.requirements || {
            'Buildings': {},
            'Researches': {}
        };
    }
    testOnEnabledInCurrentTown() {
        let troopRequirements = staticDataModel.troops[this.id].getRequirements()
            , i18nData = i18nModel.getData().townControl.controlWindows.troops
            , retObj = {
            'Researches': false,
            'Buildings': false,
        };
        if (troopRequirements['Researches'] !== undefined) {
            for (let requirementResearchId in troopRequirements['Researches']) {
                if (troopRequirements['Researches'].hasOwnProperty(requirementResearchId)) {
                    requirementResearchId = parseInt(requirementResearchId);
                    let requirementResearchLevel = parseInt(troopRequirements['Researches'][requirementResearchId]);
                    if (townModel.getData().TownResearch[requirementResearchId] === undefined || townModel.getData().TownResearch[requirementResearchId] < requirementResearchLevel) {
                        retObj['Researches'] = String.format(i18nData.researchNeed, i18nModel.getData().townResearch.names[requirementResearchId]);
                        break;
                    }
                }
            }
        }
        if (troopRequirements['Buildings'] !== undefined) {
            for (let requirementBuildingId in troopRequirements['Buildings']) {
                if (troopRequirements['Buildings'].hasOwnProperty(requirementBuildingId)) {
                    requirementBuildingId = parseInt(requirementBuildingId);
                    let requirementBuildingLevel = parseInt(troopRequirements['Buildings'][requirementBuildingId]);
                    if (ControlWindow.getBuildingLevel(requirementBuildingId) < requirementBuildingLevel) {
                        retObj['Buildings'] = String.format(i18nData.buildingNeed, [i18nModel.getData().town.buildings[requirementBuildingId].name, requirementBuildingLevel]);
                        break;
                    }
                }
            }
        }
        return retObj;
    }
    static sendRecruitRequest(troops, success, error, ajaxError) {
        let req = new request()
            , actionName = 'town:recruitingTroop'
            , gettingName = 'town:getInfo';
        for (let key in troops) {
            if (troops.hasOwnProperty(key)) {
                req.addAction(actionName, {
                    townId: townModel.getData().Id,
                    troopId: key,
                    amount: troops[key]
                });
            }
        }
        req.getResponse(function(data) {
            for (let key in data.action) {
                if (data.action.hasOwnProperty(key)) {
                    let troopId = parseInt(key.match(new RegExp(actionName + ':(\\d+)'))[1], 10);
                    if (data.action[key] === false || data.action[key].constructor === String) {
                        error && error(troopId, data.action[key]);
                        return;
                    }
                }
            }
            success && success();
        }, {
            timeout: 20000,
            callback: ajaxError
        });
    }
    static init() {
        timingModel.addIntervaled({
            interval: 1,
            onTick: Troop.onRecruitingTick
        });
    }
    static __onRecruitingFinish() {
        townModel.sendUpdateData();
    }
    static onRecruitingTick() {
        if (Troop.updateStopped) {
            return;
        }
        let recruitingList = townModel.getData().RecruitingList
            , now = Util.getCurrentTimestamp();
        if ($.isEmptyObject(recruitingList) || recruitingList[1].StartTime > now || recruitingList[1].TownId !== townModel.getData().Id) {
            return;
        }
        let recruiting = recruitingList[1];
        if (recruiting.StartTime + recruiting.RecruitingTime <= now) {
            Troop.__onRecruitingFinish();
        } else {
            townModel.setRecruitingCompleteTime(now - recruiting.StartTime);
            for (let subscribeId in Troop.subscribes) {
                if (Troop.subscribes.hasOwnProperty(subscribeId)) {
                    Troop.subscribes[subscribeId](now);
                }
            }
        }
    }
    static unsubscribe(subscribeId) {
        delete Troop.subscribes[subscribeId];
    }
    static subscribe(subscribeId, subscribeFunction) {
        Troop.subscribes[subscribeId] = subscribeFunction;
    }
    static stopUpdate() {
        Troop.updateStopped = true;
    }
    static startUpdate() {
        Troop.updateStopped = false;
    }
    static recruit(troops, success, error, ajaxError) {
        let req = new request()
            , actionName = 'town:recruitingTroop'
            , gettingName = 'town:getInfo'
            , isCastle = false;
        for (let key in troops) {
            if (troops.hasOwnProperty(key)) {
                req.addAction(actionName, {
                    townId: townModel.getData().Id,
                    troopId: key,
                    amount: troops[key]
                });
            }
        }
        if (recruitBuildingController.buildingId === 20) {
            isCastle = true;
        }
        req.addGetting(gettingName, ['RecruitingList', 'Resources', 'TotalPeople', 'FreePeople', 'Workers'], {
            townId: townModel.getData().Id
        });
        if (isCastle && additionalAristocratModel.isEnabled()) {
            req.addGetting(playerItemsModel.getting.getItems, ['all'], {
                id: playerModel.getData().Id
            });
        }
        req.getResponse(function(data) {
            for (let key in data.action) {
                if (data.action.hasOwnProperty(key)) {
                    let troopId = parseInt(key.match(new RegExp(actionName + ':(\\d+)'))[1], 10);
                    if (data.action[key] === false || data.action[key].constructor === String) {
                        error && error(troopId, data.action[key]);
                        return;
                    }
                }
            }
            $.extend(townModel.getData(), data['return'][gettingName]);
            if (isCastle && additionalAristocratModel.isEnabled()) {
                playerItemsModel.loadData(data['return'][playerItemsModel.getting.getItems]);
                additionalAristocratController.updateCoinsTable();
            }
            success && success(data['return'][gettingName].RecruitingList);
        }, {
            timeout: 20000,
            callback: ajaxError
        });
    }
    static cancelRecruiting(id, success, error) {
        let req = new request()
            , actionName = 'town:recruitingCancel'
            , gettingName = 'town:getInfo'
            , isCastle = false;
        if (recruitBuildingController.buildingId === 20 && additionalAristocratModel.isEnabled()) {
            isCastle = true;
        }
        req.addAction(actionName, {
            townId: townModel.getData().Id,
            id: id
        });
        req.addGetting(gettingName, ['RecruitingList', 'Resources', 'TotalPeople', 'FreePeople', 'Workers'], {
            townId: townModel.getData().Id
        });
        if (isCastle && additionalAristocratModel.isEnabled()) {
            req.addGetting(playerItemsModel.getting.getItems, ['all'], {
                id: playerModel.getData().Id
            });
        }
        req.getResponse(function(data) {
            if (!data.action[actionName]) {
                error && error();
                return;
            }
            if (isCastle && additionalAristocratModel.isEnabled()) {
                playerItemsModel.loadData(data['return'][playerItemsModel.getting.getItems]);
                additionalAristocratController.updateCoinsTable();
            }
            $.extend(townModel.getData(), data['return'][gettingName]);
            success && success(data['return'][gettingName].RecruitingList);
        });
    }
    static updateTroopStaticData() {
        let req = new request();
        req.addGetting(staticDataModel.troopGettingName, ['all'], {});
        let res = req.getResponse();
        if (!res['return'] || !res['return'][staticDataModel.troopGettingName]) {
            return;
        }
        staticDataModel.troops = {};
        for (let troopId in res['return'][staticDataModel.troopGettingName]) {
            if (res['return'][staticDataModel.troopGettingName].hasOwnProperty(troopId)) {
                staticDataModel.troops[troopId] = new Troop(res['return'][staticDataModel.troopGettingName][troopId]);
            }
        }
    }
}
Troop.updateStopped = false;
Troop.subscribes = {};
Troop.ARISTOCRAT_ID = 14;
Troop.RAM_ID = 11;
Troop.SPY_ID = 10;
Troop.SCOUT_ID = 9;

class UnionCapital {
    constructor(data) {
        this.__data = data;
        this.__show = false;
        this.__content = {
            'skills': {},
            'profile': {},
            'activity': {},
        };
    }
    __onFooterRefreshButtonClick() {
        let curTab = this.getCurrentTab();
        switch (curTab) {
            case 'skills':
            {
                this.__updateSkills();
            }
        }
    }
    isShown() {
        return this.__show;
    }
    __updateProfile() {}
    __updateSkills() {
        let type = 'empty';
        if (this.__data.CoinsNeed > 0) {
            if (this.__data.ResearchFinishTime > 0) {
                if (this.__data.ResearchFinishTime > Util.getCurrentTimestamp()) {
                    type = 'researching';
                } else {
                    type = 'finished';
                }
            } else {
                if (this.__data.CoinsCollected === this.__data.CoinsNeed) {
                    type = 'collected';
                } else {
                    type = 'collecting';
                }
            }
        }
        this.__skillsPane.empty();
        let staticSkills = this.__getStaticSkills()
            , price = Util.resourceToHumanNumber(this.__calculateNextPrice());
        for (let skillId in staticSkills) {
            skillId = parseInt(skillId);
            let staticSkill = staticSkills[skillId]
                , skill = this.__data.Skills === undefined ? undefined : this.__data.Skills[staticSkill.Id]
                , level = 0;
            if (skill !== undefined) {
                level = skill.Level;
            }
            let skillTmpl = {
                id: staticSkill.Id,
                level: level,
                price: price,
            };
            let skillDiv = $(uiUtils.applyTemplate('UnionCapitalWindowSkill', {
                i18n: i18nModel.getData().unionCapital,
                i18nSkills: i18nModel.getData().rpg.skills,
                skill: skillTmpl,
            }));
            if (skillId === this.__data.SkillId) {
                skillDiv.addClass(type);
            }
            if (staticSkill.MaxLevel === level) {
                skillDiv.addClass('max');
            }
            this.__skillsPane.append(skillDiv);
        }
        this.__skillsPane.find('.skill').each((i,e)=>{
                let curObj = $(e)
                    , skillId = curObj.attr('skill-id');
                curObj.find('.hover-layer, .start-button, .in-progress, .finish-button').tooltip({
                    delay: 100,
                    showURL: false,
                    bodyHandler: ()=>{
                        return this.__createTooltipTemplate(skillId);
                    }
                    ,
                    extraClass: 'skill-tooltip',
                    track: true,
                    left: 40,
                    top: 0,
                });
            }
        );
        this.__skillsPane.find('.start-button').off().on('click', (e)=>{
                this.__skillStartButtonClick(e);
            }
        );
        this.__skillInfoBlock.find('.start-research-button').off().on('click', (e)=>{
                this.__skillStartResearchButtonClick(e);
            }
        );
        this.__skillInfoBlock.find('.finish-button').off().on('click', (e)=>{
                this.__skillFinishResearchButtonClick(e);
            }
        );
        this.__updateSkillsCurrentSkill();
        this.__updateSkillsInfoBlock();
    }
    getData() {
        return this.__data;
    }
    __updateSkillsInfoBlock() {
        let type = 'empty';
        if (this.__data.CoinsNeed > 0) {
            let percent = this.__data.CoinsCollected / this.__data.CoinsNeed * 100
                , curLvl = this.__data.Skills === undefined || this.__data.Skills[this.__data.SkillId] === undefined ? 0 : this.__data.Skills[this.__data.SkillId].Level;
            this.__skillInfoBlock.find('.skill > .name').html(i18nModel.getData().rpg.skills[this.__data.SkillId].title);
            this.__skillInfoBlock.find('.description').html(String.format(i18nModel.getData().rpg.skills[this.__data.SkillId].description, [staticDataModel.skillStaticData.data[this.__data.SkillId].Levels[curLvl + 1].Parameter / 100]));
            this.__skillInfoBlock.find('.skill > .img').empty().append('<img src="' + staticDataUrl + 'resource/unionCapital/skills/' + this.__data.SkillId + '.jpg" alt="">');
            this.__skillInfoBlock.find('.level .value').text(curLvl + 1);
            if (this.__data.ResearchFinishTime > 0) {
                if (this.__data.ResearchFinishTime > Util.getCurrentTimestamp()) {
                    type = 'researching';
                    let fullTime = staticDataModel.config.unionCapital.skillsData[this.__data.Level]['time']
                        , elapsedTime = this.__data.ResearchFinishTime - Util.getCurrentTimestamp()
                        , timePercent = Math.floor((fullTime - elapsedTime) * 100 / fullTime);
                    this.__skillInfoBlock.find('.researching .progress .progress-bar > .value').css('width', timePercent + '%');
                    this.__skillInfoBlock.find('.researching .progress .rest > .value').text(Util.secondsToString(elapsedTime, i18nModel.getTimeFormat()));
                    this.__skillInfoBlock.find('.researching .progress .percent').text(timePercent > 0 && Math.floor(timePercent) < 1 ? '1%' : Math.floor(timePercent) + '%');
                    this.__skillInfoBlock.find('.skill .progress .progress-bar').css('width', timePercent + '%');
                    let digits = this.__skillInfoBlock.find('.skill .progress > .percent > .digit');
                    if (timePercent === 0 && this.__data.CoinsCollected > 0) {
                        timePercent = 1;
                    }
                    let digit1 = Math.floor(timePercent / 10)
                        , digit2 = Math.floor(timePercent % 10);
                    digits.filter('.digit-1').attr('value', digit1);
                    digits.filter('.digit-2').attr('value', digit2);
                    this.__updateSkillsCurrentSkill();
                    this.__skillsInfoBlockResearchingTimer = requestAnimationFrame(()=>{
                            this.__updateSkillsInfoBlock();
                        }
                    );
                } else {
                    if (this.__skillsInfoBlockResearchingTimer !== undefined) {
                        cancelAnimationFrame(this.__skillsInfoBlockResearchingTimer);
                        delete this.__skillsInfoBlockResearchingTimer;
                        this.__updateSkillsCurrentSkill();
                    }
                    type = 'finished';
                }
            } else {
                if (this.__data.CoinsCollected === this.__data.CoinsNeed) {
                    type = 'collected';
                    this.__skillInfoBlock.find('.skill .progress .progress-bar').css('width', '100%');
                    this.__skillInfoBlock.find('.coins > .value').text(Util.resourceToHumanNumber(this.__data.CoinsCollected) + ' / ' + Util.resourceToHumanNumber(this.__data.CoinsNeed));
                } else {
                    type = 'collecting';
                    this.__skillInfoBlock.find('.coins > .value').text(Util.resourceToHumanNumber(this.__data.CoinsCollected) + ' / ' + Util.resourceToHumanNumber(this.__data.CoinsNeed));
                    this.__skillInfoBlock.find('.rest > .value').text(Util.resourceToHumanNumber(this.__data.CoinsNeed - this.__data.CoinsCollected));
                    this.__skillInfoBlock.find('.skill .progress .progress-bar').css('width', percent + '%');
                    this.__skillInfoBlock.find('.collecting .progress .progress-bar > .value').css('width', percent + '%');
                    this.__skillInfoBlock.find('.collecting .progress .percent').text(percent > 0 && Math.floor(percent) < 1 ? '1%' : Math.floor(percent) + '%');
                    let digits = this.__skillInfoBlock.find('.skill .progress > .percent > .digit');
                    if (percent === 0 && this.__data.CoinsCollected > 0) {
                        percent = 1;
                    }
                    let digit1 = Math.floor(percent / 10)
                        , digit2 = Math.floor(percent % 10);
                    digits.filter('.digit-1').attr('value', digit1);
                    digits.filter('.digit-2').attr('value', digit2);
                }
            }
        }
        this.__skillInfoBlock.attr('type', type);
    }
    __updateSkillsCurrentSkill() {
        if (this.__data && this.__data.SkillId > 0) {
            let curDiv = this.__skillsPane.find('.skill[skill-id="' + this.__data.SkillId + '"]')
                , type = '';
            if (this.__data.CoinsNeed > 0) {
                if (this.__data.ResearchFinishTime > 0) {
                    if (this.__data.ResearchFinishTime > Util.getCurrentTimestamp()) {
                        type = 'researching';
                        let digits = curDiv.find('.progress > .percent > .digit')
                            , fullTime = staticDataModel.config.unionCapital.skillsData[this.__data.Level]['time']
                            , elapsedTime = this.__data.ResearchFinishTime - Util.getCurrentTimestamp()
                            , percent = Math.floor((fullTime - elapsedTime) * 100 / fullTime);
                        if (percent === 0 && this.__data.CoinsCollected > 0) {
                            percent = 1;
                        }
                        let digit1 = Math.floor(percent / 10)
                            , digit2 = Math.floor(percent % 10);
                        digits.filter('.digit-1').attr('value', digit1);
                        digits.filter('.digit-2').attr('value', digit2);
                        curDiv.find('.progress-bar').css('width', percent + '%');
                    } else {
                        type = 'finished';
                    }
                } else {
                    if (this.__data.CoinsCollected === this.__data.CoinsNeed) {
                        type = 'collected';
                        curDiv.find('.progress-bar').css('width', '100%');
                    } else {
                        type = 'collecting';
                        let digits = curDiv.find('.progress > .percent > .digit')
                            , percent = Math.floor(this.__data.CoinsCollected / this.__data.CoinsNeed * 100);
                        if (percent === 0 && this.__data.CoinsCollected > 0) {
                            percent = 1;
                        }
                        let digit1 = Math.floor(percent / 10)
                            , digit2 = Math.floor(percent % 10);
                        digits.filter('.digit-1').attr('value', digit1);
                        digits.filter('.digit-2').attr('value', digit2);
                        curDiv.find('.progress-bar').css('width', percent + '%');
                    }
                }
            }
            curDiv.removeClass('collecting collected researching empty finished').addClass(type);
        }
    }
    __updateActivity() {
        let tableBody = this.__activityDiv.find('.table > .body');
        tableBody.empty();
        this.__loadRating((data)=>{
                for (let index in data) {
                    let curData = data[index]
                        , lineTmpl = {
                        pid: curData.pi,
                        level: curData.pl,
                        name: curData.pn,
                        coins: curData.c,
                        avatarUrl: curData.a,
                        rank: i18nModel.data.unionCapital.rank[curData.r],
                        place: curData.r,
                    };
                    let lineDiv = $(uiUtils.applyTemplate('UnionCapitalWindowActivityItem', lineTmpl));
                    tableBody.append(lineDiv);
                }
            }
        )
    }
    __loadRating(callback, error) {
        let method = 'UnionCapital:getUnionCapitalRating'
            , req = new request();
        req.addGetting(method, request.all, {});
        req.addPostData({
            'p': 1
        });
        req.getResponse((data)=>{
                if (/error/.test(data['return'][method])) {
                    messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                    error && error();
                } else {
                    callback && callback(data['return'][method]);
                }
            }
        );
    }
    __updateHistory() {}
    __onSkillsUpButtonClick(e) {}
    __onSkillsDownButtonClick(e) {}
    changeTab(tab) {
        if (!this.isShown())
            return;
        let curTab = this.__contentDiv.attr('tab');
        if (this.__skillsInfoBlockResearchingTimer !== undefined) {
            cancelAnimationFrame(this.__skillsInfoBlockResearchingTimer);
        }
        switch (tab) {
            case 'skills':
                this.__updateSkills();
                break;
            case 'profile':
                this.__updateProfile();
                break;
            case 'activity':
                this.__updateActivity();
                break;
            case 'history':
                this.__updateHistory();
                break;
        }
        WOFWindow.setTitle(i18nModel.getData().unionCapital.titles[tab]);
        this.__contentDiv.attr('tab', tab);
    }
    getCurrentTab() {
        return this.__contentDiv.attr('tab');
    }
    __getStaticSkills() {
        let staticSkills = staticDataModel.skillStaticData.data
            , retArr = {};
        for (let i = 1; i <= 4; i++) {
            if (staticSkills[3000 + i] !== undefined) {
                retArr[3000 + i] = staticSkills[3000 + i];
            }
        }
        return retArr = {
            3001: staticSkills[3001],
            3002: staticSkills[3002],
            3003: staticSkills[3003],
            3005: staticSkills[3005],
        };
    }
    __onBuyCoinsButton() {
        if (this.__buyCoinsButton.hasClass('disabled'))
            return;
        this.__buyCoinsButton.addClass('disabled');
        gameController.coinsExchange.showWindow(()=>{
                this.__updateLeftPanel();
                this.__buyCoinsButton.removeClass('disabled');
            }
        );
    }
    __onDonateCoinsButton() {
        if (this.__donateCoinsButton.hasClass('disabled'))
            return;
        this.__donateCoinsButton.addClass('disabled');
        gameController.coinsDonate.showWindow((amount,success,error)=>{
                let method = 'UnionCapital:donate'
                    , req = new request();
                req.addGetting(method, request.all, {});
                req.addGetting(playerItemsModel.getting.getItems, ['all'], {
                    id: playerModel.getData().Id
                });
                req.addPostData({
                    'c': amount
                });
                req.getResponse((data)=>{
                        if (/error/.test(data['return'][method])) {
                            messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                            error && error();
                        } else {
                            playerItemsModel.loadData(data['return'][playerItemsModel.getting.getItems]);
                            success && success();
                        }
                    }
                    , {
                        timeout: 20000,
                        callback: uiWindow.ajaxError
                    });
            }
            , ()=>{
                this.__updateLeftPanel();
                this.__donateCoinsButton.removeClass('disabled');
            }
            , 1, Math.min(playerModel.getCoins(), this.__data.CoinsDailyLimit));
    }
    __loadData(callback) {
        let method = ''
            , req = new request();
        req.addGetting(method, request.all, {});
        req.getResponse((data)=>{
                if (/error/.test(data['return'][method])) {
                    messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                } else {
                    this.__data = data;
                    callback && callback();
                }
            }
            , {
                timeout: 20000,
                callback: uiWindow.ajaxError
            });
    }
    __createLeftPanel() {
        this.__leftPanelDiv = this.__contentDiv.children('.left-panel');
        this.__tabButtons = this.__leftPanelDiv.find('.button-block > .tab-button').off().on('click', (e)=>{
                this.__onTabButtonClick(e);
            }
        );
        this.__leftPanelCoins = this.__leftPanelDiv.find('.coins > .value');
        this.__buyCoinsButton = this.__leftPanelDiv.find('.make-coin-button').off().on('click', (e)=>{
                this.__onBuyCoinsButton(e);
            }
        );
        this.__donateCoinsButton = this.__leftPanelDiv.find('.donate-button').off().on('click', (e)=>{
                this.__onDonateCoinsButton(e);
            }
        );
        this.__leftPanelDailyLimitCoins = this.__leftPanelDiv.find('.daily-limit > .coins > .value');
        this.__leftPanelDailyLimitTime = this.__leftPanelDiv.find('.daily-limit > .time > .value');
        this.__leftPanelDailyLimitTimerFunc();
        this.__updateLeftPanel();
    }
    __leftPanelDailyLimitTimerFunc() {
        if (this.__data.SkillId > 0) {
            let today = new Date();
            today.setTime(today.getTime() + 3 * 3600 * 1000);
            let finalDate = new Date(today.getUTCFullYear() + '-' + (today.getUTCMonth() + 1) + '-' + today.getUTCDate() + ' 23:59:59 GMT+3')
                , finalTime = Math.ceil(finalDate.getTime() / 1000) + 1;
            this.__leftPanelDailyLimitTime.text(Util.secondsToString(finalTime - Util.getCurrentTimestamp(), i18nModel.getTimeFormat()));
        } else {
            this.__leftPanelDailyLimitTime.text('00:00:00');
        }
        this.__leftPanelDailyLimitTimer = requestAnimationFrame(()=>{
                this.__leftPanelDailyLimitTimerFunc();
            }
        );
    }
    __onTabButtonClick(e) {
        let curButtons = $(e.currentTarget);
        if (curButtons.hasClass('disabled')) {
            return false;
        }
        curButtons.addClass('disabled');
        this.changeTab(curButtons.attr('type'));
        curButtons.removeClass('disabled');
    }
    __updateLeftPanel() {
        this.__leftPanelCoins.text(playerModel.getCoins());
        this.__leftPanelDailyLimitCoins.text(this.__data.CoinsDailyLimit);
    }
    __cleanLeftPanel() {
        delete this.__leftPanelDiv;
        delete this.__leftPanelCoins;
        delete this.__buyCoinsButton;
        delete this.__donateCoinsButton;
        this.__tabButtons.off();
        delete this.__tabButtons;
        delete this.__leftPanelDailyLimitCoins;
        delete this.__leftPanelDailyLimitTime;
        cancelAnimationFrame(this.__leftPanelDailyLimitTimer);
        cancelAnimationFrame(this.__skillsInfoBlockResearchingTimer);
        delete this.__leftPanelDailyLimitTimer;
        delete this.__skillsInfoBlockResearchingTimer;
    }
    showWindow(activeTab) {
        activeTab = activeTab || 'skills';
        if (!playerModel.getData().Union) {
            messageController.showSystemMessage(i18nModel.getTextByCode('error:unionCapital:notInUnion'));
            return false;
        }
        this.__contentDiv = $(uiUtils.applyTemplate('UnionCapitalWindow', {
            i18n: i18nModel.getData().unionCapital,
            coins: Util.resourceToHumanNumber(playerItemsModel.getData()[playerItemsModel.aristocratItems.PLAYER_ITEM_ARISTOCRAT_COINS]),
        }));
        this.__profileDiv = this.__contentDiv.find('.main-block > .tab-content[type="[profile]"]');
        this.__skillsDiv = this.__contentDiv.find('.main-block > .tab-content[type="skills"]');
        this.__activityDiv = this.__contentDiv.find('.main-block > .tab-content[type="activity"]');
        this.__refreshButton = this.__contentDiv.find('.footer > .refresh-button').off().on('click', (e)=>{
                this.__onFooterRefreshButtonClick(e);
            }
        );
        this.__createLeftPanel();
        this.__show = true;
        this.__createSkillsDiv();
        this.changeTab(activeTab);
        WOFWindow.setWindowClass('medium-beta-2');
        this.__windowDiv = WOFWindow.showWindow(i18nModel.getData().unionCapital.titles[activeTab], this.__contentDiv, ()=>{
                this.__onCloseWindow();
            }
        );
    }
    __createSkillsDiv() {
        this.__skillsPane = this.__skillsDiv.find('.skills-block > .pane');
        this.__skillInfoBlock = this.__skillsDiv.find('.info-block');
    }
    __skillStartButtonClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled')) {
            return false;
        }
        curButton.addClass('disabled');
        let parentSkill = curButton.parents('.skill')
            , skillId = parentSkill.attr('skill-id')
            , method = 'UnionCapital:startCollecting'
            , req = new request();
        req.addGetting(method, request.all, {});
        req.addPostData({
            'si': skillId
        });
        req.getResponse((data)=>{
                if (/error/.test(data['return'][method])) {
                    messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                } else {
                    this.__data = data['return'][method];
                    this.__updateSkills();
                }
                curButton.removeClass('disabled');
            }
            , {
                timeout: 20000,
                callback: uiWindow.ajaxError
            });
    }
    __skillStartResearchButtonClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled')) {
            return false;
        }
        curButton.addClass('disabled');
        let method = 'UnionCapital:startResearch'
            , req = new request();
        req.addGetting(method, request.all, {});
        req.getResponse((data)=>{
                if (/error/.test(data['return'][method])) {
                    messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                } else {
                    this.__data = data['return'][method];
                    this.__updateSkills();
                }
                curButton.removeClass('disabled');
            }
            , {
                timeout: 20000,
                callback: uiWindow.ajaxError
            });
    }
    __skillFinishResearchButtonClick(e) {
        let curButton = $(e.currentTarget);
        if (curButton.hasClass('disabled')) {
            return false;
        }
        curButton.addClass('disabled');
        let method = 'UnionCapital:finishResearch'
            , req = new request();
        req.addGetting(method, request.all, {});
        req.getResponse((data)=>{
                if (/error/.test(data['return'][method])) {
                    messageController.showSystemMessage(i18nModel.getTextByCode(data['return'][method]));
                } else {
                    this.__data = data['return'][method];
                    this.__updateSkills();
                }
                curButton.removeClass('disabled');
            }
            , {
                timeout: 20000,
                callback: uiWindow.ajaxError
            });
    }
    __createTooltipTemplate(skillId) {
        let staticSkill = this.__getStaticSkills()[skillId]
            , skill = this.__data.Skills === undefined ? undefined : this.__data.Skills[skillId]
            , curLvl = skill === undefined ? 0 : skill.Level
            , maxLvl = staticSkill.MaxLevel
            , nextLvl = curLvl + 1 > maxLvl ? 0 : curLvl + 1
            , nextLvlInfo = ''
            , dependencies = ''
            , descThisLvl = ''
            , descNextLvl = ''
            , descUnionSkill = '';
        if (curLvl > 0) {
            nextLvlInfo = String.format(i18nModel.getData().rpg.toolTip.newLvlInfo.curLvl, [curLvl, ]);
        } else {
            nextLvlInfo = i18nModel.getData().rpg.toolTip.newLvlInfo.noCurLvl;
        }
        if (curLvl > 0) {
            descThisLvl = String.format(i18nModel.getData().rpg.skills[skillId].description, [staticSkill.Levels[curLvl].Parameter / 100]);
        }
        if (nextLvl > 0) {
            descNextLvl = String.format(i18nModel.getData().rpg.skills[skillId].description, [staticSkill.Levels[nextLvl].Parameter / 100]);
        }
        let tooltipTemplateData = {
            skillId: skillId,
            skillName: i18nModel.getData().rpg.skills[skillId].title,
            skillLvl: curLvl,
            skillMaxLvl: maxLvl,
            nextLvlInfo: nextLvlInfo,
            dependencies: dependencies,
            descThisLvl: descThisLvl,
            descNextLvl: descNextLvl,
            thisLvl: i18nModel.getData().rpg.toolTip.thisLvl,
            nextLvl: i18nModel.getData().rpg.toolTip.nextLvl,
            descUnionSkill: descUnionSkill
        };
        return uiUtils.applyTemplate('skillTooltip', tooltipTemplateData);
    }
    __calculateNextPrice() {
        let level = this.__data.Level;
        return (staticDataModel.config.unionCapital && staticDataModel.config.unionCapital.skillsData && staticDataModel.config.unionCapital.skillsData[level] && staticDataModel.config.unionCapital.skillsData[level].price) || 0;
    }
    __onCloseWindow() {
        this.__show = false;
        this.__cleanLeftPanel();
        delete this.__windowDiv;
        delete this.__contentDiv;
        delete this.__profileDiv;
        delete this.__skillsDiv;
        delete this.__activityDiv;
        delete this.__refreshButton;
        delete this.__skillsPane;
    }
    onUnionCapitalEvent(data) {
        if (data === undefined) {
            let method = UnionCapital.getting
                , req = new request();
            req.addGetting(method, request.all, {});
            req.getResponse((data)=>{
                    if (!/error/.test(data['return'][method])) {
                        this.__data = data['return'][method];
                    }
                    this.update();
                }
            );
        } else {
            if (data['CoinsCollected'] !== undefined) {
                this.__data.CoinsCollected = parseInt(data['CoinsCollected']);
            }
            if (data['CoinsDailyLimit'] !== undefined) {
                this.__data.CoinsDailyLimit = parseInt(data['CoinsDailyLimit']);
            }
            if (data['CoinsNeed'] !== undefined) {
                this.__data.CoinsNeed = parseInt(data['CoinsNeed']);
            }
            if (data['Level'] !== undefined) {
                this.__data.Level = parseInt(data['Level']);
            }
            if (data['ResearchFinishTime'] !== undefined) {
                this.__data.ResearchFinishTime = parseInt(data['ResearchFinishTime']);
            }
            if (data['SkillId'] !== undefined) {
                this.__data.SkillId = parseInt(data['SkillId']);
            }
            if (data['Skills'] !== undefined) {
                this.__data.Skills = data['Skills'];
            }
            this.update();
        }
    }
    update() {
        if (this.isShown()) {
            this.__updateLeftPanel();
            switch (this.getCurrentTab()) {
                case 'activity':
                    this.__updateActivity();
                    break;
                case 'profile':
                    this.__updateProfile();
                    break;
                case 'skills':
                    this.__updateSkills();
                    break;
                case 'history':
                    this.__updateHistory();
                    break;
            }
        }
    }
}
UnionCapital.getting = 'UnionCapital:getUnionCapitalData';

let Util = {
    getCurrentTimestamp() {
        return Math.floor(Date.now() / 1000);
    },
    resourceToHumanNumber(num) {
        num = Math.floor(num);
        if (num > 99999) {
            if (num > 999999) {
                if (num > 999999999) {
                    if (num > 100000000000) {
                        return String.format(i18nModel.getData().resources.milliards, Math.floor(num / 1000000000));
                    } else {
                        return String.format(i18nModel.getData().resources.milliards, Math.floor(num / 100000000) / 10);
                    }
                } else {
                    if (num > 100000000) {
                        return String.format(i18nModel.getData().resources.billions, Math.floor(num / 1000000));
                    } else {
                        if (num >= 10000000) {
                            return String.format(i18nModel.getData().resources.billions, Math.floor(num / 100000) / 10);
                        } else {
                            return Util.formatNumber(num);
                        }
                    }
                }
            } else {
                return Util.formatNumber(num);
            }
        } else {
            return Util.formatNumber(num);
        }
    },
    formatNumber(num) {
        num = Math.floor(num);
        return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1 ')
    },
    secondsToString(time, format, needDays=false, daysName='') {
        let hours = Math.floor(time / 3600)
            , minutes = Math.floor(time % 3600 / 60)
            , seconds = time % 60
            , days = 0;
        if (needDays) {
            days = hours > 24 ? Math.ceil((hours - 24) / 24) : 0;
            hours = hours - 24 * days;
        }
        return (days > 0 ? days + daysName : '') + ' ' + String.format(format, [Util.numberToString(hours, 2), Util.numberToString(minutes, 2), Util.numberToString(seconds, 2)]);
    },
    updateEvent(e, yShift=0) {
        if (e.offsetY === undefined) {
            e.offsetX = e.originalEvent.changedTouches[0].pageX;
            e.offsetY = e.originalEvent.changedTouches[0].pageY + yShift;
        } else {
            e.offsetX = e.pageX;
            e.offsetY = e.pageY + yShift;
        }
        return e;
    },
    sqlTimeToDateTime(sqlTime) {
        let parsed = sqlTime.match(/^(\d+)-(\d+)-(\d+)\s+(\d+):(\d+):(\d+)$/);
        return {
            day: parsed[3],
            month: parsed[2],
            year: parsed[1],
            hours: parsed[4],
            minutes: parsed[5],
            seconds: parsed[6]
        };
    },
    numberToString(num, digits) {
        let limit = 1;
        for (let i = 1; i < digits; i++) {
            limit *= 10;
        }
        limit = limit.toString();
        let result = num.toString();
        while (result.length < limit.length)
            result = '0' + result;
        return result;
    },
    timestampToDateTime(timestamp) {
        timestamp += 10800;
        let dateTime = new Date(timestamp * 1000);
        return {
            day: dateTime.getUTCDate(),
            month: dateTime.getUTCMonth() + 1,
            year: dateTime.getUTCFullYear(),
            hours: dateTime.getUTCHours(),
            minutes: dateTime.getUTCMinutes(),
            seconds: dateTime.getUTCSeconds()
        };
    },
    timestampToDate(timestamp) {
        timestamp += 10800;
        let date = new Date(timestamp * 1000);
        return {
            day: date.getUTCDate(),
            month: date.getUTCMonth() + 1,
            year: date.getUTCFullYear()
        };
    },
    datetimeToString: function(datetime, format) {
        return String.format(format, Util.numberToString(datetime.hours, 2), Util.numberToString(datetime.minutes, 2), Util.numberToString(datetime.seconds, 2), Util.numberToString(datetime.day, 2), Util.numberToString(datetime.month, 2), Util.numberToString(datetime.year, 2));
    },
    timestampToDateTimeString(timestamp, format, params) {
        let dateTime = Util.timestampToDateTime(timestamp);
        if (arguments.length > 2) {
            if (params.showDateForAnotherDay && params.currentTime) {
                let currentDate = Util.timestampToDate(params.currentTime);
                if (dateTime.day === currentDate.day && dateTime.month === currentDate.month && dateTime.year === currentDate.year) {
                    return String.format(params.timeFormat, Util.numberToString(dateTime.hours, 2), Util.numberToString(dateTime.minutes, 2), Util.numberToString(dateTime.seconds, 2));
                }
            }
        }
        return Util.datetimeToString(dateTime, "{0}:{1}:{2}, {3}.{4}.{5}");
    },
    arrayIsEqual(array1, array2) {
        return array1.length == array2.length && array1.every(function(element, index) {
            return element === array2[index];
        })
    },
    copyToClipboard(str) {
        const el = document.createElement('textarea');
        el.value = str;
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
    },
    sizeOfObject(obj) {
        let cnt = 0;
        for (let index in obj) {
            cnt++;
        }
        return cnt;
    }
};

class WebSocketWorker {
    constructor() {
        this.__recconectTimeout = 2;
        this.__lostConnectionTime = 0;
        setInterval($.proxy(this.__onTimerTick, this), 1000);
        this.__subscribes = [];
        this.__webSocket = undefined;
        this.__lastTime = 0;
        window.addEventListener('beforeunload', $.proxy(this.__onWindowClose, this));
        window.addEventListener('online', $.proxy(this.__onConnectionRestore, this));
        window.addEventListener('offline', $.proxy(this.__onConnectionLost, this));
        this.subscribe('refresh', this.__onServerEventRefresh);
        this.__webSocketInit(true);
    }
    __onConnectionRestore() {
        if (this.__lostConnectionTime > 0 && Util.getCurrentTimestamp() - this.__lostConnectionTime > 2) {
            document.location.reload();
        }
    }
    __onConnectionLost() {
        if (this.__lostConnectionTime === 0) {
            this.__lostConnectionTime = Util.getCurrentTimestamp();
        }
    }
    __onWindowClose() {
        if (this.__webSocket !== undefined && this.__webSocket.readyState !== WebSocket.CLOSED) {
            this.__webSocket.close(4004, 'close window');
        }
    }
    subscribe(eventName, callback) {
        for (let subscribe of this.__subscribes) {
            if (subscribe.eventName === eventName)
                return;
        }
        this.__subscribes.push({
            'callback': callback,
            'eventName': eventName,
        });
        if (this.__webSocket !== undefined && this.__webSocket.readyState === WebSocket.OPEN) {
            let subscribeList = [];
            for (let subscribe of this.__subscribes) {
                subscribeList.push(subscribe.eventName);
            }
            this.__webSocket.send(JSON.stringify(subscribeList));
        }
    }
    __onTimerTick() {
        let lastUpdateTime = this.__lastTime
            , curTime = Util.getCurrentTimestamp();
        if ((this.__webSocket === undefined || this.__webSocket.readyState === WebSocket.CLOSED) && curTime - lastUpdateTime > this.__recconectTimeout) {
            this.__subscribes = [];
            this.__webSocketInit();
        }
    }
    __onServerEventRefresh(data) {
        if (data.t !== undefined && data.t > 0) {
            let time = parseInt(data.t) || 0;
            setTimeout(function() {
                document.location.reload();
            }, time);
        }
    }
    __webSocketInit(force=false) {
        let self = this
            , lastUpdateTime = self.__lastTime
            , curTime = Util.getCurrentTimestamp();
        if ((curTime - lastUpdateTime > this.__recconectTimeout && self.__subscribes.length > 0) || force) {
            if (this.__webSocket === undefined || this.__webSocket.readyState === WebSocket.CLOSED) {
                self.__lastTime = curTime;
                self.__webSocket = new WebSocket(staticDataModel.config.wseUrl);
                self.__webSocket.onopen = function() {
                    let subscribeList = [];
                    for (let subscribe of self.__subscribes) {
                        subscribeList.push(subscribe.eventName);
                    }
                    self.__webSocket.send(JSON.stringify(subscribeList));
                }
                ;
                self.__webSocket.onmessage = function(e) {
                    if ($.inArray(e.data, ["true", "connected"]) >= 0) {
                        return;
                    }
                    if (e.data === "false") {
                        self.__webSocket.close(4002, "server error");
                        return;
                    }
                    let data = JSON.parse(e.data) || {};
                    if ($.isEmptyObject(data))
                        return;
                    if (data.eventName !== undefined) {
                        for (let i = 0; i < self.__subscribes.length; i++) {
                            if (self.__subscribes[i].eventName === data.eventName) {
                                self.__subscribes[i].callback && self.__subscribes[i].callback(data.data);
                            }
                        }
                    }
                }
                ;
                self.__webSocket.onerror = function(e) {
                    console.log(e.message);
                }
                ;
                self.__webSocket.onclose = function(e) {
                    console.log(Util.timestampToDateTimeString(Util.getCurrentTimestamp()) + " Connection closed.");
                    if (e.code !== 4001) {
                        self.__webSocketInit(true, "close page");
                    }
                }
            }
        } else if (this.__webSocket !== undefined && this.__webSocket.readyState === WebSocket.OPEN) {
            console.log(Util.timestampToDateTimeString(Util.getCurrentTimestamp()) + " Connection duplicate closed.");
            this.__webSocket.close(4001, "duplicate");
            this.__webSocket = undefined;
            alert("CLOSE");
        }
    }
}

class WorldMap {
    static __getTownNumberByPoints(points) {
        for (let i = 0; i < staticDataModel.townViewPoints.length; ++i) {
            if (points < staticDataModel.townViewPoints[i]) {
                return i + 1;
            }
        }
        return 1;
    }
    get isRouteConstructorShow() {
        return this.__routeConstructorShowed && this.__routeConstructorSteps.length > 0;
    }
    get routeConstructorNeed() {
        return this.__routeConstructorNeed;
    }
    set routeConstructorNeed(value) {
        this.__routeConstructorNeed = value;
    }
    cleanRouteConstructor() {
        let self = this;
        self.__routeConstructorSteps = [];
        self.__routeConstructorShowed = false;
        self.__routeConstructorArmyId = 0;
        self.updateMap();
    }
    getCentralPosition() {
        let self = this
            , x = Math.floor((self.__baseLayerGl.getCanvasWidth() / 2 - self.__backgroundShift.x) / WorldMap.cell.width)
            , y = Math.floor((self.__baseLayerGl.getCanvasHeight() / 2 - self.__backgroundShift.y) / WorldMap.cell.height);
        return {
            x: x,
            y: y
        };
    }
    clear() {
        let self = this;
        cancelAnimationFrame(this.__raf);
        self.__miniMap.clear();
        self.__currentRoutePos = null;
        self.__selectedCell = {
            x: undefined,
            y: undefined,
            isTown: false,
            isDungeon: false
        };
        self.__isShowRouteSelection = false;
        self.__armiesList = null;
    }
    constructor(div) {
        let self = this;
        self.__div = $(div);
        self.__baseLayerGl = new GL('world-map-canvas-base-layer');
        self.__secondLayerGl = new GL('world-map-canvas-second-layer');
        self.__clicked = false;
        self.__moved = false;
        self.__isShowRouteSelection = false;
        self.__mousePosition = {
            x: -1,
            y: -1
        };
        self.__backgroundShift = {
            x: 0,
            y: 0
        };
        self.__mapShift = {
            x: 0,
            y: 0
        };
        self.__raf = null;
        self.__backgroundTexture = {
            texture: null,
            width: 0,
            height: 0
        };
        self.__townTextures = {};
        self.__dungeonTextures = {};
        self.__townStatusTextures = {};
        self.__cellSelectionTexture = null;
        self.__texturesLoaded = false;
        self.__fontsTexture = null;
        self.__selectedCell = {
            x: undefined,
            y: undefined,
            isTown: false,
            isDungeon: false
        };
        self.__hoverGadgetTimer = null;
        self.__hoverGadgetPosition = {
            x: undefined,
            y: undefined
        };
        self.__routeTextures = {};
        self.__needRouteReDraw = false;
        self.__routeConstructor = undefined;
        self.__routeConstructorShowed = false;
        self.__routeConstructorSteps = [];
        self.__routeConstructorNeed = false;
        self.__routeConstructorArmyId = 0;
        self.__miniMap = new MiniMap();
        self.__worldMapInfoPanel = new WorldMapInfoPanel($.pageContainer);
        self.__worldMapGadget = new WorldMapGadget();
        self.__needUpdate = true;
        self.__parentDiv = self.__div.parent();
        self.__redrawCoordinates = [];
        self.__viewedBlock = {
            xMin: 0,
            yMin: 0,
            xMax: 0,
            yMax: 0
        };
        self.__textLabelBuffer = [];
        self.__blackZoneTexture = null;
        self.__animations = {};
        self.__parentDiv.on('mousedown touchstart', (e)=>{
                self.__onMouseDown(e);
            }
        ).on('mouseup touchend touchcancel mouseleave', (e)=>{
                self.__onMouseUp(e);
            }
        ).on('mousemove touchmove', (e)=>{
                self.__onMouseMove(e);
            }
        );
    }
    __drawBackground(x, y) {
        let self = this
            , imageWidth = 100
            , imageHeight = 100
            , canvasPositionX = self.__backgroundShift.x + x * WorldMap.cell.width
            , canvasPositionY = self.__backgroundShift.y + y * WorldMap.cell.height
            , textureShiftX = (x * WorldMap.cell.width) % self.__backgroundTexture.width
            , textureShiftY = (y * WorldMap.cell.height) % self.__backgroundTexture.height;
        self.__baseLayerGl.drawImage(self.__backgroundTexture.texture, self.__backgroundTexture.width, self.__backgroundTexture.height, textureShiftX, textureShiftY, imageWidth, imageHeight, canvasPositionX, canvasPositionY, );
    }
    drawView(xMin, yMin, xMax, yMax) {
        let self = this
            , letterSpacing = 0;
        if (!self.__texturesLoaded)
            return;
        self.__animations = {};
        self.__baseLayerGl.drawBackground(self.__backgroundTexture.texture, self.__backgroundShift.x, self.__backgroundShift.y);
        for (let x = xMin; x <= xMax; x++) {
            if (gameController.gameData.map[x] === undefined)
                continue;
            for (let y = yMin; y <= yMax; y++) {
                let mapData = gameController.gameData.map[x][y];
                if (mapData === undefined)
                    continue;
                if (mapData.town !== undefined) {
                    if (x === townModel.getData().X && y === townModel.getData().Y) {
                        self.__animations.currentTownHighLightCircle = {
                            valueFunction: self.__drawCurrentTownHighLightCircleCalculateFunction,
                            coords: {
                                xMin: x - 1,
                                yMin: y,
                                xMax: x + 1,
                                yMax: y + 1
                            },
                            value: -1,
                            layer: 'base',
                        };
                    }
                    self.__drawTown(x, y, mapData);
                } else if (mapData.dungeon !== undefined) {
                    self.__drawDungeon(x, y, mapData);
                } else {
                    self.__drawMapObject(x, y, mapData);
                }
            }
        }
        self.__displayRoutes(xMin, xMax, yMin, yMax);
        self.__drawTextLabels(letterSpacing);
        if (self.__selectedCell.x !== undefined && self.__selectedCell.y !== undefined && self.__selectedCell.x >= xMin && self.__selectedCell.x <= xMax && self.__selectedCell.y >= yMin && self.__selectedCell.y <= yMax) {
            self.__drawSelection(letterSpacing);
        }
    }
    __drawTextLabels(letterSpacing) {
        let self = this;
        for (let i = 0; i < self.__textLabelBuffer.length; i++) {
            self.__generateText(self.__textLabelBuffer[i].x, self.__textLabelBuffer[i].y, self.__textLabelBuffer[i].town, self.__textLabelBuffer[i].dungeon, letterSpacing);
        }
        self.__textLabelBuffer = [];
    }
    __isSelectedCell(x, y) {
        return this.__selectedCell.x === x && this.__selectedCell.y === y;
    }
    __drawSelection(letterSpacing) {
        let self = this;
        if (self.__selectedCell.isDungeon || self.__selectedCell.isTown) {
            self.__worldMapGadget.draw(self.__secondLayerGl, self.__backgroundShift);
            self.__generateText(self.__worldMapGadget.x, self.__worldMapGadget.y, self.__selectedCell.isTown ? gameController.gameData.map[self.__worldMapGadget.x][self.__worldMapGadget.y].town : undefined, self.__selectedCell.isDungeon ? gameController.gameData.map[self.__worldMapGadget.x][self.__worldMapGadget.y].dungeon : undefined, letterSpacing, 127, 14);
        } else {
            self.__baseLayerGl.drawImage(self.__cellSelectionTexture, 100, 100, self.__backgroundShift.x + self.__selectedCell.x * WorldMap.cell.width, self.__backgroundShift.y + self.__selectedCell.y * WorldMap.cell.height);
        }
    }
    __generateText(x, y, townData, dungeonData, letterSpacing=0, yShift=0, maxLength=100) {
        let self = this
            , dx = self.__backgroundShift.x + x * WorldMap.cell.width
            , dy = self.__backgroundShift.y + y * WorldMap.cell.height
            , color = 4;
        if (townData) {
            if (townData.pid > 0 && gameController.gameData.players[townData.pid] !== undefined) {
                let playerData = gameController.gameData.players[townData.pid]
                    , curPlayerData = playerModel.getData();
                if (townData.pid === curPlayerData.Id) {
                    color = 5;
                } else if (playerData.uid > 0 && curPlayerData.UnionId > 0) {
                    if (playerData.uid === curPlayerData.UnionId) {
                        color = 6;
                    } else {
                        let union = gameController.gameData.unions[playerData.uid];
                        if (union !== undefined) {
                            let diplomacy = curPlayerData.Union.Diplomacy[playerData.uid];
                            if (diplomacy !== undefined) {
                                switch (diplomacy.Relation) {
                                    case 1:
                                        color = 2;
                                        break;
                                    case 2:
                                        color = 1;
                                        break;
                                    case 3:
                                        color = 7;
                                        break;
                                }
                            }
                        }
                    }
                }
                self.__drawText(dx, dy - 33 + yShift, 100, playerData.n.substr(0, maxLength), letterSpacing, 'center', color);
            }
            self.__drawText(dx, dy - 16 + yShift, 100, townData.n.substr(0, maxLength), letterSpacing, 'center', 0);
        } else if (dungeonData) {
            let dungeonNames = i18nModel.getTextByCode('map:sidebar:cellInfo:dungeon:titles')
                , dungeonName = dungeonNames[dungeonData.t]
                , spaceIndex = dungeonName.indexOf(' ');
            if (spaceIndex > -1) {
                self.__drawText(dx, dy - 33 + yShift, 100, dungeonName.substr(0, spaceIndex), letterSpacing, 'center', 3);
                self.__drawText(dx, dy - 16 + yShift, 100, dungeonName.substr(spaceIndex + 1), letterSpacing, 'center', 3);
            } else {
                self.__drawText(dx, dy - 25 + yShift, 100, dungeonName, letterSpacing, 'center', 3);
            }
        }
    }
    updateCell(x, y) {
        let self = this;
        x = x || self.__selectedCell.x;
        y = y || self.__selectedCell.y;
        if (self.__selectedCell.x === x && self.__selectedCell.y === y && self.__selectedCell.isTown) {
            self.__worldMapGadget.setPosition(x, y);
        }
    }
    goToCoordinate(x, y, miniMapRedraw=true) {
        let self = this;
        if (gameController.isMap()) {
            self.__selectedCell = {
                x: x,
                y: y,
                isDungeon: false,
                isTown: false
            };
            if (gameController.gameData.map[self.__selectedCell.x] && gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y]) {
                if (gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y].town) {
                    self.__selectedCell.isTown = true;
                    self.__worldMapGadget.setPosition(self.__selectedCell.x, self.__selectedCell.y);
                } else if (gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y].dungeon) {
                    self.__selectedCell.isDungeon = true;
                    self.__worldMapGadget.setPosition(self.__selectedCell.x, self.__selectedCell.y);
                }
            }
            self.__goTo(x, y);
            self.__displayCellInfo(x, y);
            if (miniMapRedraw) {
                self.__miniMap.setPosition();
            }
        }
    }
    hide() {}
    loadContent(viewport) {
        playerItemsModel.setFlagItem(playerItemsModel.flagItems.PLAYER_ITEM_OPENED_MAP);
        location.hash = '#map';
        let self = this;
        self.__viewport = self.__div.parent();
        self.__map = null;
        if (self.__mapCenterTownButton === undefined) {
            self.__mapCenterTownButton = $(uiUtils.applyTemplate('mapCenterTown', {})).off().on('mousedown', function(e) {
                let center = self.getCentralPosition();
                if (townModel.getData().X === center.x && townModel.getData().Y === center.y) {
                    gameController.loadTown();
                } else {
                    self.__pointAtCurrentTown();
                    methodModel.getHandler('onReturnToOwnTownButtonClick')();
                }
                e.stopPropagation();
                return false;
            }).tooltip({
                showURL: false,
                delay: 1000,
                bodyHandler: function() {
                    return i18nModel.getData().map.sidebar.currentTownCenteringTooltip;
                }
            }).hover(function() {
                self.__mapCenterTownButton.removeClass('show');
            });
            self.__viewport.append(self.__mapCenterTownButton);
        }
        if (self.__routeConstructor === undefined) {
            self.__routeConstructor = $(uiUtils.applyTemplate('routeConstructor', i18nModel.getData().route.constructor));
            self.__initRouteConstructorControl();
            self.__viewport.append(self.__routeConstructor);
        }
        self.__onTextureLoadFunc = ()=>{
            if (gameController.isMap()) {
                self.__miniMap.prepare();
                self.__worldMapGadget.loadTexture(self.__secondLayerGl);
                self.__pointAtCurrentTown();
                self.__update();
            }
        }
        ;
        self.loadTextures();
    }
    __isVisibleCell(x, y) {
        return x >= this.__viewedBlock.xMin && x <= this.__viewedBlock.xMax && y >= this.__viewedBlock.yMin && y <= this.__viewedBlock.yMax;
    }
    __drawMapObject(x, y, mapData) {
        let self = this
            , objectId = mapData.objectId
            , object = gameController.gameData.mapObjectsArray[objectId];
        if (object !== undefined) {
            self.__baseLayerGl.drawImage(object.texture, 100, 100, self.__backgroundShift.x + x * WorldMap.cell.width, self.__backgroundShift.y + y * WorldMap.cell.height);
        }
    }
    __partialDrawMap(redrawCoordinates) {
        let self = this, letterSpacing = 0, xMin, xMax, yMin, yMax, redrawingCells = {};
        for (let i = 0; i < redrawCoordinates.length; i++) {
            let redrawBlock = redrawCoordinates[i];
            xMin = redrawBlock.xMin;
            yMin = redrawBlock.yMin;
            xMax = redrawBlock.xMax;
            yMax = redrawBlock.yMax;
            for (let x = xMin; x <= xMax; x++) {
                if (redrawingCells[x] === undefined) {
                    redrawingCells[x] = {};
                }
                for (let y = yMin; y <= yMax; y++) {
                    if (this.__isVisibleCell(x, y)) {
                        redrawingCells[x][y] = 1;
                        if (x < 0 || y < 0) {
                            self.__drawBlackZone(x, y);
                        } else {
                            self.__drawBackground(x, y);
                        }
                    }
                }
            }
        }
        let drawSelection = false
            , drawCurrentTownHighLight = false;
        for (let x in redrawingCells) {
            if (redrawingCells.hasOwnProperty(x)) {
                x = parseInt(x);
                for (let y in redrawingCells[x]) {
                    if (redrawingCells[x].hasOwnProperty(y)) {
                        y = parseInt(y);
                        let mapData = gameController.gameData.map[x] && gameController.gameData.map[x][y]
                            , selectedCell = self.__isSelectedCell(x, y);
                        if (selectedCell) {
                            drawSelection = true;
                        }
                        if (mapData) {
                            if (mapData.dungeon !== undefined) {
                                self.__drawDungeon(x, y, mapData);
                            } else if (mapData.objectId > 0) {
                                self.__drawMapObject(x, y, mapData);
                            } else if (mapData.town !== undefined) {
                                if (mapData.ct === WorldMap.cellType.currentTown && selectedCell) {
                                    drawCurrentTownHighLight = true;
                                }
                                self.__drawTown(x, y, mapData);
                            }
                        }
                    }
                }
            }
        }
        self.__displayRoutes(self.__viewedBlock.xMin, self.__viewedBlock.xMax, self.__viewedBlock.yMin, self.__viewedBlock.yMax);
        self.__drawTextLabels();
        if (drawSelection) {
            self.__drawSelection(letterSpacing);
        }
        if (drawCurrentTownHighLight) {}
    }
    __drawBlackZone(x, y) {
        let self = this;
        self.__baseLayerGl.drawImage(self.__blackZoneTexture, 100, 100, self.__backgroundShift.x + x * WorldMap.cell.width, self.__backgroundShift.y + y * WorldMap.cell.height);
    }
    __drawCurrentTownHighLightCircleCalculateFunction(time) {
        time = time || Date.now();
        let cnt = 30
            , fps = 15
            , millisecondsToNextFrame = Math.floor(1000 / fps);
        return Math.round(time / millisecondsToNextFrame) % cnt;
    }
    __drawCurrentTownHighLightCircle(dx, dy, time) {
        let self = this
            , shiftX = self.__drawCurrentTownHighLightCircleCalculateFunction(time);
        self.__baseLayerGl.drawImage(self.__townStatusTextures.curTown, 5400, 108, shiftX * 180, 0, 180, 108, dx - 39, dy + 4);
        return shiftX;
    }
    __drawCurrentTownHighLight() {
        let self = this
            , x = townModel.getData().X
            , y = townModel.getData().Y
            , dx = self.__backgroundShift.x + x * WorldMap.cell.width
            , dy = self.__backgroundShift.y + y * WorldMap.cell.height
            , time = Date.now();
        let circleShift = self.__drawCurrentTownHighLightCircle(dx, dy, time);
        if (self.__animations.currentTownHighLightCircle !== undefined) {
            self.__animations.currentTownHighLightCircle.value = circleShift;
        }
    }
    __update() {
        let self = this;
        if (self.__needUpdate) {
            let xMin = Math.floor(-self.__backgroundShift.x / 100)
                , xMax = xMin + Math.ceil(self.__baseLayerGl.getCanvasWidth() / 100)
                , yMin = Math.floor(-self.__backgroundShift.y / 100)
                , yMax = yMin + Math.ceil(self.__baseLayerGl.getCanvasHeight() / 100);
            self.__secondLayerGl.clearGL();
            self.__baseLayerGl.clearGL();
            self.drawView(xMin, yMin, xMax, yMax);
            self.__needUpdate = false;
        } else if ($.isEmptyObject(self.__animations.length > 0)) {
            let redrawCoordinates = []
                , gadgetNeedRedraw = false;
            for (let animateId in self.__animations) {
                let animation = self.__animations[animateId];
                if (animation.value === animation.valueFunction())
                    continue;
                redrawCoordinates.push(animation.coords);
                if (self.__worldMapGadget && (self.__selectedCell.isTown || self.__selectedCell.isDungeon) && self.__worldMapGadget.testOnCellOverlap(self.__coordsToOverlapArray(animation.coords))) {
                    gadgetNeedRedraw = true;
                }
            }
            if (gadgetNeedRedraw) {
                redrawCoordinates.push({
                    xMin: self.__selectedCell.x - 1,
                    yMin: self.__selectedCell.y - 1,
                    xMax: self.__selectedCell.x + 1,
                    yMax: self.__selectedCell.y + 1,
                });
            }
            if (redrawCoordinates.length > 0) {
                self.__partialDrawMap(redrawCoordinates);
            }
        }
        self.__raf = requestAnimationFrame(()=>{
                self.__update();
            }
        );
    }
    __coordsToOverlapArray(coords) {
        let retArr = [];
        for (let x = coords.xMin; x <= coords.xMax; x++) {
            for (let y = coords.yMin; y <= coords.yMax; y++) {
                retArr.push(x + 10000 * y);
            }
        }
        return retArr;
    }
    loadTextures() {
        let self = this;
        if (!self.__texturesLoaded) {
            self.__cellSelectionTexture = self.__baseLayerGl.loadImageAsync(WorldMap.cellSelectionImgPath);
            self.__fontsTexture = self.__secondLayerGl.loadImageAsync(WorldMap.fontsImgPath);
            self.__loadTownStatusImages();
            self.__loadMapObjects();
            self.__loadRouteImages();
            self.__loadBackground(()=>{
                    self.__texturesLoaded = true;
                    self.__onTextureLoadFunc && self.__onTextureLoadFunc();
                    self.__onTextureLoadFunc = null;
                }
            );
        } else {
            self.__onTextureLoadFunc && self.__onTextureLoadFunc();
        }
    }
    prepareToSwitch() {
        this.routeConstructorHide();
    }
    routeConstructorHide(armyId=false) {
        let self = this;
        if (self.__routeConstructor === undefined) {
            return;
        }
        if (armyId && self.__routeConstructorArmyId !== armyId) {
            return;
        }
        self.cleanRouteConstructor();
        self.__routeConstructor.removeClass('active').addClass('disabled');
        self.__routeConstructor.find('.route-attack, .route-defend').addClass('disabled');
        if (self.routeConstructorNeedReturnChat && chatController.isMinimized()) {
            chatController.onMinimizeClick();
        }
    }
    updateMap(backgroundShift=undefined, redrawCoordinates) {
        let self = this;
        if (backgroundShift) {
            self.__backgroundShift = backgroundShift;
            self.__viewedBlock = {
                xMin: Math.floor(-self.__backgroundShift.x / 100),
                yMin: Math.floor(-self.__backgroundShift.y / 100),
            };
            self.__viewedBlock.xMax = self.__viewedBlock.xMin + Math.ceil(self.__baseLayerGl.getCanvasWidth() / 100);
            self.__viewedBlock.yMax = self.__viewedBlock.yMin + Math.ceil(self.__baseLayerGl.getCanvasHeight() / 100);
        }
        if ($.isEmptyObject(redrawCoordinates) || self.__needUpdate) {
            self.__redrawCoordinates = [];
        } else {
            self.__redrawCoordinates.push(redrawCoordinates);
        }
        self.__miniMap.updateMap();
        self.__worldMapInfoPanel.getInfoByXY(self.__selectedCell.x, self.__selectedCell.y);
        self.__needUpdate = true;
    }
    show() {
        this.updateMap();
    }
    changeRouteConstructorArmyId(armyId=false) {
        let self = this;
        if (armyId) {
            self.__routeConstructorArmyId = armyId;
        }
        let timeToGo = Route.calculateStepsTime(self.__routeConstructorArmyId, self.__routeConstructorSteps);
        self.__routeConstructor.find('.route-attack, .route-defend').attr('ttg', timeToGo);
        self.__routeConstructor.find('.time .value').text(Util.secondsToString(timeToGo, i18nModel.getTimeFormat()));
        self.__routeConstructor.find('.complete .value').text(Util.timestampToDateTimeString(timeToGo + timingModel.getCurrentTime(), i18nModel.getDateTimeFormat(), {
            showDateForAnotherDay: true,
            currentTime: timingModel.getCurrentTime(),
            timeFormat: i18nModel.getTimeFormat()
        }));
    }
    startRouteConstructor(armyId) {
        this.__routeConstructorShow();
        this.__routeConstructorArmyId = armyId;
        this.__routeConstructorSteps.push({
            X: townModel.getData().X,
            Y: townModel.getData().Y
        });
        this.__routeConstructor.find('.time .value').text('00:00:00');
        this.__routeConstructor.find('.complete .value').text('00:00:00');
    }
    switchToTown() {
        let x = townModel.getData().Location.X
            , y = townModel.getData().Location.Y
            , self = this;
        self.goToCoordinate(x, y);
        self.routeConstructorHide();
    }
    onWindowResize() {
        this.__baseLayerGl.setViewport();
        this.__secondLayerGl.setViewport();
        this.updateMap();
    }
    updateRouteConstructor(newTimestamp) {
        let self = this;
        if (self.isRouteConstructorShow) {
            let timeToGo = parseInt(self.__routeConstructor.find('.route-attack, .route-defend').attr('ttg'));
            if (timeToGo > 0) {
                self.__routeConstructor.find('.complete .value').text(Util.timestampToDateTimeString(timeToGo + newTimestamp, i18nModel.getDateTimeFormat(), {
                    showDateForAnotherDay: true,
                    currentTime: newTimestamp,
                    timeFormat: i18nModel.getTimeFormat()
                }));
                self.__routeConstructor.find('.route-attack, .route-defend').attr('timestamp', newTimestamp);
            }
        }
    }
    __onMouseMove(e) {
        let self = this;
        e = Util.updateEvent(e, WorldMap.pageYCorrector);
        let deltaX = e.offsetX - self.__mousePosition.x;
        let deltaY = e.offsetY - self.__mousePosition.y;
        e.preventDefault();
        e.stopPropagation();
        if (self.__clicked) {
            if (Math.abs(deltaX) > 8 || Math.abs(deltaY) > 8) {
                if (!self.__moved && (Math.abs(deltaX) < 15 && Math.abs(deltaY) < 15)) {
                    return;
                }
                self.__moved = true;
                self.__backgroundShift.x += deltaX;
                self.__backgroundShift.y += deltaY;
                self.__viewedBlock = {
                    xMin: Math.floor(-self.__backgroundShift.x / 100),
                    yMin: Math.floor(-self.__backgroundShift.y / 100),
                };
                self.__viewedBlock.xMax = self.__viewedBlock.xMin + Math.ceil(self.__baseLayerGl.getCanvasWidth() / 100);
                self.__viewedBlock.yMax = self.__viewedBlock.yMin + Math.ceil(self.__baseLayerGl.getCanvasHeight() / 100);
                self.__mousePosition.x = e.offsetX;
                self.__mousePosition.y = e.offsetY;
                if (self.__isShowMapGadgetHover) {
                    let mapData = self.__getMapCoordinateByMouseCoordinate(e.offsetX, e.offsetY)
                        , x = mapData.x
                        , y = mapData.y;
                    self.__hoverGadget && self.__hoverGadget.css({
                        left: $.px(self.__hoverGadgetPosition.x * WorldMap.cell.width + self.__backgroundShift.x - 16),
                        top: $.px(self.__hoverGadgetPosition.y * WorldMap.cell.height + self.__backgroundShift.y - 18)
                    });
                }
                self.updateMap();
                self.__miniMap.setPosition();
            }
        } else {
            let mapData = self.__getMapCoordinateByMouseCoordinate(e.offsetX, e.offsetY)
                , x = mapData.x
                , y = mapData.y;
            if ((self.__selectedCell.isDungeon || self.__selectedCell.isTown) && (x >= self.__selectedCell.x - 2 && x <= self.__selectedCell.x + 2 && y >= self.__selectedCell.y - 2 && y <= self.__selectedCell.y + 1) && self.__worldMapGadget.testOnHover(e.offsetX, e.offsetY, self.__backgroundShift)) {
                self.__hoverGadgetHide();
                self.updateMap();
            } else if (self.__isShowMapGadgetHover || self.__hoverGadgetTimer) {
                if (!(self.__hoverGadgetPosition.x === x && self.__hoverGadgetPosition.y === y)) {
                    self.__hoverGadgetHide();
                }
            } else if (gameController.gameData.map[x] !== undefined && gameController.gameData.map[x][y] !== undefined && gameController.gameData.map[x][y].town !== undefined) {
                if (!(x === self.__selectedCell.x && y === self.__selectedCell.y)) {
                    self.__hoverGadgetHide();
                    self.__hoverGadgetPosition.x = x;
                    self.__hoverGadgetPosition.y = y;
                    self.__hoverGadgetTimer = setTimeout(()=>{
                            self.__hoverGadgetTimer = false;
                            self.__showHoverGadget(x, y, e);
                        }
                        , 750);
                }
            }
        }
    }
    __hoverGadgetHide() {
        let self = this;
        clearTimeout(self.__hoverGadgetTimer);
        self.__hoverGadgetTimer = undefined;
        self.__hoverGadget && self.__hoverGadget.removeClass('active').addClass('disabled');
        self.__isShowMapGadgetHover = false;
        self.__hoverGadgetPosition = {
            x: undefined,
            y: undefined
        };
    }
    __onMouseUp(e) {
        let self = this;
        e.preventDefault();
        e.stopPropagation();
        e = Util.updateEvent(e, WorldMap.pageYCorrector);
        if (self.__clicked) {
            if (self.__moved) {
                self.__mousePosition.x = -1;
                self.__mousePosition.y = -1;
                self.__moved = false;
                playerItemsModel.setFlagItem(playerItemsModel.flagItems.PLAYER_ITEM_DRAGGED_MAP, function() {
                    methodModel.getHandler('onMapDragged')();
                });
            } else if (e.type === 'mouseup' || e.type === 'touchend') {
                if (e.button === 2) {
                    if (self.isRouteConstructorShow && self.__routeConstructorSteps.length > 1) {
                        self.__routeConstructorSteps.pop();
                        let x = self.__routeConstructorSteps[self.__routeConstructorSteps.length - 1].X
                            , y = self.__routeConstructorSteps[self.__routeConstructorSteps.length - 1].Y;
                        self.__selectedCell = {
                            x: x,
                            y: y,
                            isDungeon: false,
                            isTown: false
                        };
                        if (gameController.gameData.map[self.__selectedCell.x] && gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y]) {
                            if (gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y].town) {
                                self.__selectedCell.isTown = true;
                                self.__worldMapGadget.setPosition(self.__selectedCell.x, self.__selectedCell.y);
                            } else if (gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y].dungeon) {
                                self.__selectedCell.isDungeon = true;
                                self.__worldMapGadget.setPosition(self.__selectedCell.x, self.__selectedCell.y);
                            }
                        }
                        self.__displayCellInfo(x, y);
                        let timeToGo = Route.calculateStepsTime(self.__routeConstructorArmyId, self.__routeConstructorSteps);
                        self.__routeConstructor.find('.time .value').text(Util.secondsToString(timeToGo, i18nModel.getTimeFormat()));
                        self.__routeConstructor.find('.complete .value').text(Util.timestampToDateTimeString(timeToGo + timingModel.getCurrentTime(), i18nModel.getDateTimeFormat(), {
                            showDateForAnotherDay: true,
                            currentTime: timingModel.getCurrentTime(),
                            timeFormat: i18nModel.getTimeFormat()
                        }));
                        self.updateMap();
                    }
                } else {
                    let mapData = self.__getMapCoordinateByMouseCoordinate(e.offsetX, e.offsetY)
                        , needRedraw = false;
                    self.__hoverGadgetHide();
                    if (!(self.__selectedCell.x === mapData.x && self.__selectedCell.y === mapData.y)) {
                        self.__selectedCell = {
                            x: mapData.x,
                            y: mapData.y,
                            isDungeon: false,
                            isTown: false
                        };
                        if (gameController.gameData.map[self.__selectedCell.x] && gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y]) {
                            if (gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y].town) {
                                self.__selectedCell.isTown = true;
                                self.__worldMapGadget.setPosition(self.__selectedCell.x, self.__selectedCell.y);
                            } else if (gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y].dungeon) {
                                self.__selectedCell.isDungeon = true;
                                self.__worldMapGadget.setPosition(self.__selectedCell.x, self.__selectedCell.y);
                            }
                        }
                        self.__displayCellInfo(mapData.x, mapData.y);
                        needRedraw = true;
                    }
                    if (self.isRouteConstructorShow) {
                        self.__onRouteConstructorCellClick(mapData.x, mapData.y);
                        needRedraw = true;
                    }
                    if (needRedraw) {
                        self.updateMap();
                    }
                }
            }
        } else if (e.type === 'mouseup' || e.type === 'touchend') {
            let mapData = self.__getMapCoordinateByMouseCoordinate(e.offsetX, e.offsetY)
                , x = mapData.x
                , y = mapData.y;
            if ((self.__selectedCell.isDungeon || self.__selectedCell.isTown) && (x >= self.__selectedCell.x - 2 && x <= self.__selectedCell.x + 2 && y >= self.__selectedCell.y - 2 && y <= self.__selectedCell.y + 1) && self.__worldMapGadget.testOnMouseUp(e.offsetX, e.offsetY, self.__backgroundShift, e.button)) {
                self.updateMap();
            }
        }
        self.__clicked = false;
    }
    __onMouseDown(e) {
        let self = this;
        e.preventDefault();
        e.stopPropagation();
        e = Util.updateEvent(e, WorldMap.pageYCorrector);
        let mapData = self.__getMapCoordinateByMouseCoordinate(e.offsetX, e.offsetY)
            , x = mapData.x
            , y = mapData.y;
        if ((self.__selectedCell.isDungeon || self.__selectedCell.isTown) && (x >= self.__selectedCell.x - 2 && x <= self.__selectedCell.x + 2 && y >= self.__selectedCell.y - 2 && y <= self.__selectedCell.y + 1) && self.__worldMapGadget.testOnMouseDown(e.offsetX, e.offsetY, self.__backgroundShift)) {
            self.updateMap();
        } else {
            self.__mousePosition.x = e.offsetX;
            self.__mousePosition.y = e.offsetY;
            self.__clicked = true;
        }
    }
    __goTo(x, y) {
        let self = this;
        self.__backgroundShift.x = self.__baseLayerGl.getCanvasWidth() / 2 - x * WorldMap.cell.width - WorldMap.cell.width / 2;
        self.__backgroundShift.y = self.__baseLayerGl.getCanvasHeight() / 2 - y * WorldMap.cell.height - WorldMap.cell.height / 2;
        self.__viewedBlock = {
            xMin: Math.floor(-self.__backgroundShift.x / 100),
            yMin: Math.floor(-self.__backgroundShift.y / 100),
        };
        self.__viewedBlock.xMax = self.__viewedBlock.xMin + Math.ceil(self.__baseLayerGl.getCanvasWidth() / 100);
        self.__viewedBlock.yMax = self.__viewedBlock.yMin + Math.ceil(self.__baseLayerGl.getCanvasHeight() / 100);
        this.updateMap();
    }
    __drawDungeon(x, y, mapData) {
        let self = this
            , dungeonData = mapData.dungeon
            , dx = self.__backgroundShift.x + x * WorldMap.cell.width
            , dy = self.__backgroundShift.y + y * WorldMap.cell.height
            , tex = self.__dungeonTextures[dungeonData.t];
        self.__baseLayerGl.drawImage(tex, 100, 100, dx, dy);
        if (!self.__selectedCell.isTown && !self.__selectedCell.isDungeon || ((x > self.__selectedCell.x + 1 || x < self.__selectedCell.x - 1) || (y > self.__selectedCell.y + 1 || y < self.__selectedCell.y - 1))) {
            self.__textLabelBuffer.push({
                x: x,
                y: y,
                dungeon: dungeonData
            });
        }
    }
    __drawTown(x, y, mapData) {
        let self = this
            , townData = mapData.town
            , dx = self.__backgroundShift.x + x * WorldMap.cell.width
            , dy = self.__backgroundShift.y + y * WorldMap.cell.height
            , tex = townData && townData.t === 4 ? self.__worldGoalTexture : self.__townTextures[WorldMap.__getTownNumberByPoints(townData.p)];
        if (!self.__isSelectedCell(x, y) && x === townModel.getData().X && y === townModel.getData().Y) {
            self.__drawCurrentTownHighLight();
        }
        self.__baseLayerGl.drawImage(tex, 100, 100, dx, dy);
        if (!self.__selectedCell.isTown && !self.__selectedCell.isDungeon || ((x > self.__selectedCell.x + 1 || x < self.__selectedCell.x - 1) || (y > self.__selectedCell.y + 1 || y < self.__selectedCell.y - 1))) {
            self.__drawTownStatus(x, y, mapData);
            self.__textLabelBuffer.push({
                x: x,
                y: y,
                town: townData
            });
        }
    }
    __drawTownStatus(x, y, mapData) {
        let flagsShift = 0
            , dx = this.__backgroundShift.x + x * WorldMap.cell.width
            , dy = this.__backgroundShift.y + y * WorldMap.cell.height;
        if (mapData === undefined || mapData.town === undefined)
            return;
        let town = mapData.town
            , curPlayerData = playerModel.getData()
            , readyToDie = true;
        if (town.pid > 0 && mapData.rtd === false) {
            readyToDie = false;
        }
        if (readyToDie) {
            flagsShift = 16;
            if (town.pid > 0) {
                if (town.pid === curPlayerData.Id) {
                    flagsShift = 32;
                } else {
                    if (curPlayerData.UnionId > 0 && curPlayerData.Union !== undefined) {
                        let playerData = gameController.gameData.players[town.pid];
                        if (playerData !== undefined) {
                            if (curPlayerData.UnionId === playerData.uid) {
                                flagsShift = 48;
                            } else {
                                let diplomacy = curPlayerData.Union.Diplomacy[playerData.uid];
                                if (diplomacy !== undefined) {
                                    switch (diplomacy.Relation) {
                                        case 1:
                                            flagsShift = 0;
                                            break;
                                        case 2:
                                            flagsShift = 64;
                                            break;
                                        case 3:
                                            flagsShift = 80;
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this.__baseLayerGl.drawImage(this.__townStatusTextures.flags, 112, 33, flagsShift, 0, 16, 33, dx, dy);
        }
        let spyInTown = false
            , siege = town.s > 0;
        if (curPlayerData.SpyInTown !== false && curPlayerData.SpyInTown[town.id] !== undefined) {
            spyInTown = true;
        }
        if (spyInTown) {
            this.__secondLayerGl.drawImage(this.__townStatusTextures.spyInTown, 28, 14, dx + (siege ? 16 : 36), dy - 53);
        }
        if (siege) {
            let yShift = 0
                , siegePlayer = gameController.gameData.players[town.s];
            if (siegePlayer && siegePlayer.uid > 0 && curPlayerData.UnionId > 0) {
                if (siegePlayer.uid === curPlayerData.UnionId) {
                    yShift = 54;
                } else {
                    if (curPlayerData.Union.Diplomacy[siegePlayer.uid]) {
                        switch (curPlayerData.Union.Diplomacy[siegePlayer.uid].Relation) {
                            case 1:
                                yShift = 27;
                                break;
                            case 2:
                                yShift = 54;
                                break;
                            case 3:
                                yShift = 0;
                                break;
                        }
                    }
                }
            }
            this.__secondLayerGl.drawImage(this.__townStatusTextures.siege, 30, 81, 0, yShift, 30, 27, dx + (spyInTown ? 55 : 35), dy - 66);
        }
    }
    __showHoverGadget(x, y, e) {
        let self = this;
        if (!self.__hoverGadget) {
            self.__hoverGadget = $(uiUtils.applyTemplate('mapGadgetHover')).appendTo(self.__div.parent());
        }
        self.__hoverGadget.removeClass('left');
        self.__hoverGadget && self.__hoverGadget.css({
            left: $.px(x * WorldMap.cell.width + self.__backgroundShift.x - 16),
            top: $.px(y * WorldMap.cell.height + self.__backgroundShift.y - 18)
        });
        let data = gameController.gameData.map[x] !== undefined ? gameController.gameData.map[x][y] : undefined;
        if (data === undefined || data.town === undefined) {
            return;
        }
        let town = data.town
            , owner = town.pid > 0 ? gameController.gameData.players[town.pid] : undefined
            , union = owner !== undefined && owner.uid ? gameController.gameData.unions[owner.uid] : owner;
        if (owner === undefined || owner.n === "") {
            self.__hoverGadget.addClass('no-player');
        } else {
            self.__hoverGadget.removeClass('no-player');
            self.__hoverGadget.find('.player-level').text(String.format(i18nModel.getData().map.mapGadgetHover.playerLevel, owner.l));
            self.__hoverGadget.find('.player-name').text(owner.n);
            self.__hoverGadget.find('.player-info .gadget-hover-avatar').empty().append($('<img/>').attr({
                src: staticDataModel.avatarUploadData.avatarDefaultPath + (owner.aid > 0 ? town.pid + '/' + owner.aid + '.jpg' : staticDataModel.avatarUploadData.avatarDefaultImg)
            }));
        }
        if (union === undefined) {
            self.__hoverGadget.addClass('no-union');
        } else {
            self.__hoverGadget.removeClass('no-union');
            self.__hoverGadget.find('.union-players').text(String.format(i18nModel.getData().map.mapGadgetHover.unionPlayerCount, union.pc));
            self.__hoverGadget.find('.union-name').text(union.n);
            self.__hoverGadget.find('.union-info .gadget-hover-avatar').empty().append($('<img/>').attr({
                src: staticDataModel.avatarUploadData.blazonDefaultPath + (union.aid > 0 ? owner.uid + '/' + union.aid + '.jpg' : staticDataModel.avatarUploadData.blazonDefaultImg)
            }));
        }
        if (e !== undefined && e.pageX + self.__hoverGadget.find('.gadget-hover-panel').width() - e.offsetX + WorldMap.cell.width + 18 > uiManager.viewport.width()) {
            self.__hoverGadget.addClass('left');
        }
        self.__hoverGadget.find('.town-count').text(String.format(i18nModel.getData().map.mapGadgetHover.townCount, owner === undefined || owner.tc === 0 ? 1 : owner.tc));
        self.__hoverGadget.find('.town-name').text(town.n);
        let cellInfo = self.__collectCellInfoForGadget(x, y);
        self.__hoverGadget.find('.additional-info .gadget-hover-info').empty().append(uiUtils.applyTemplate('mapGadgetHoverList', cellInfo));
        self.__isShowMapGadgetHover = true;
        self.__hoverGadget.removeClass('disabled').addClass('active');
    }
    __loadMapObjects() {
        for (let objectId in gameController.gameData.mapObjectsArray) {
            gameController.gameData.mapObjectsArray[objectId].texture = this.__baseLayerGl.loadImageAsync(staticDataUrl + 'resource/map_objects/normal/' + gameController.gameData.mapObjectsArray[objectId].url);
        }
        for (let townType in staticDataModel.townViewPoints) {
            this.__townTextures[parseInt(townType) + 1] = this.__baseLayerGl.loadImageAsync(String.format(WorldMap.townImgPath, parseInt(townType) + 1));
        }
        this.__worldGoalTexture = this.__baseLayerGl.loadImageAsync(WorldMap.worldGoalImgPath);
        for (let dungeonType of gameController.gameData.dungeonTypes) {
            this.__dungeonTextures[dungeonType] = this.__baseLayerGl.loadImageAsync(String.format(WorldMap.dungeonImgPath, dungeonType));
        }
    }
    __loadRouteImages() {
        let self = this;
        for (let textureType of WorldMap.routeTextureType) {
            self.__routeTextures[textureType === '' ? 'main' : textureType] = {};
            for (let x = -1; x < 2; x++) {
                for (let y = -1; y < 2; y++) {
                    if (x === 0 && y === 0)
                        continue;
                    if (textureType === '') {
                        self.__routeTextures['main'][x + '-' + y] = this.__baseLayerGl.loadImageAsync(String.format(WorldMap.routeImgPath, 'mark-' + x + '-' + y));
                    } else {
                        if (textureType !== 'replace') {
                            self.__routeTextures[textureType][x + '-' + y] = this.__baseLayerGl.loadImageAsync(String.format(WorldMap.routeImgPath, 'mark-' + x + '-' + y + '-' + textureType));
                        }
                        self.__routeTextures[textureType][x + '-' + y + '-back'] = this.__baseLayerGl.loadImageAsync(String.format(WorldMap.routeImgPath, 'mark-' + x + '-' + y + '-' + textureType + '-back'));
                    }
                }
            }
        }
        self.__routeTextures['figure'] = this.__baseLayerGl.loadImageAsync(WorldMap.routeFiguresImgPath);
        self.__routeTextures['cross'] = this.__baseLayerGl.loadImageAsync(WorldMap.routeCrossImgPath);
    }
    __loadTownStatusImages() {
        this.__townStatusTextures.curTown = this.__baseLayerGl.loadImageAsync(WorldMap.curTownImgPath);
        this.__townStatusTextures.flags = this.__baseLayerGl.loadImageAsync(WorldMap.flagsImgPath);
        this.__townStatusTextures.spyInTown = this.__secondLayerGl.loadImageAsync(WorldMap.spyInTownImgPath);
        this.__townStatusTextures.siege = this.__secondLayerGl.loadImageAsync(WorldMap.siegeImgPath);
    }
    __loadBackground(callback) {
        let self = this;
        self.__blackZoneTexture = self.__baseLayerGl.createColorTexture(0, 0, 0);
        self.__baseLayerGl.loadImageAndCreateTextureInfo(WorldMap.backgroundImgPath, function(backTexture) {
            self.__backgroundTexture = backTexture;
            self.__baseLayerGl.generateBackgroundArray(self.__backgroundTexture.width, self.__backgroundTexture.height);
            callback && callback();
        });
    }
    __collectCellInfoForGadget(x, y) {
        let self = this
            , titles = i18nModel.getData().map.sidebar.cellInfo
            , town = gameController.gameData.map[x] && gameController.gameData.map[x][y] && gameController.gameData.map[x][y].town || false
            , cellInfo = {
            data: []
        };
        if (town) {
            cellInfo.data.push({
                'title': titles.coords,
                'value': String.format('X: {0} Y: {1}', x, y)
            });
            cellInfo.data.push({
                title: titles.townPoints,
                value: Util.formatNumber(town.p),
            });
            let playerData = gameController.gameData.players[town.pid];
            cellInfo.data.push({
                title: titles.canBeCapturedTitle,
                value: playerData !== undefined && playerData.ct !== undefined && playerData.ct > timingModel.getCurrentTime() ? titles.cannotBeCaptured : titles.canBeCaptured
            });
            cellInfo.data.push({
                title: titles.sector,
                value: town.sid
            });
        }
        return cellInfo;
    }
    __collectCellInfo(x, y) {
        let titles = i18nModel.getData().map.sidebar.cellInfo
            , mapObject = gameController.gameData.map[x] && gameController.gameData.map[x][y] || false
            , town = false
            , dungeon = false
            , cellObjectId = staticDataModel.mapParams.map[x] && staticDataModel.mapParams.map[x][y] || 0
            , cellSpeed = cellObjectId > 0 ? (staticDataModel.mapParams.mapObjectsArray[cellObjectId] === undefined ? 100 : staticDataModel.mapParams.mapObjectsArray[cellObjectId].speed) : 100
            , cellInfo = {
            readyToDie: false,
            titles: titles,
            groups: {}
        };
        if (mapObject) {
            town = mapObject.town;
            dungeon = mapObject.dungeon;
        }
        let group0 = []
            , group1 = []
            , group2 = [];
        group0.push({
            'title': titles.coords,
            'value': String.format('X: {0} Y: {1}', x, y),
            'class': 'bold'
        });
        if (town) {
            group0.push({
                'title': titles.townName,
                'value': town.pid > 0 ? town.n : (town.t === 4 || town.t === 6 || (town.t > 100 && town.t < 200) ? (town.n ? town.n : titles.superCastleName) : String.format('<span style="color:red">{0}</span>', titles.barbarianTownName))
            });
            group0.push({
                title: titles.townPoints,
                value: Util.formatNumber(town.p)
            });
            let playerData = gameController.gameData.players[town.pid];
            group0.push({
                title: titles.canBeCapturedTitle,
                value: playerData !== undefined && playerData.ct !== undefined && playerData.ct > timingModel.getCurrentTime() ? titles.cannotBeCaptured : titles.canBeCaptured
            });
            if (playerData !== undefined) {
                group1.push({
                    title: titles.ownerName,
                    value: '<span class="owner-name">' + playerData.n + '</span>',
                    'class': 'player-color'
                });
                let unionData = gameController.gameData.unions[playerData.uid];
                if (unionData !== undefined) {
                    group1.push({
                        title: titles.ownerUnionName,
                        value: '<span class=" union-link" union-id="' + playerData.uid + '">' + unionData.n + '</span>',
                        'class': 'union-color'
                    });
                }
                group1.push({
                    title: titles.ownerLevel,
                    value: playerData.l,
                    'class': 'bold'
                });
                if (town.rtd === undefined) {
                    cellInfo.readyToDie = true;
                }
            }
            group2.push({
                title: titles.speed,
                value: cellSpeed + '%',
                'class': 'bold'
            });
            group2.push({
                title: titles.sector,
                value: town.sid,
                'class': 'bold'
            });
        } else if (dungeon) {
            group0.push({
                title: titles.speed,
                value: cellSpeed + '%',
                'class': 'bold'
            });
            group0.push({
                title: titles.dungeon.type,
                value: titles.dungeon.shortTitles[dungeon.t],
                'class': 'bold'
            });
        } else {
            if (mapObject.objectId > 0) {
                group0.push({
                    title: titles.landName,
                    value: i18nModel.getLandName(mapObject.objectId)
                });
            }
            group0.push({
                title: titles.speed,
                value: cellSpeed + '%',
                'class': 'bold'
            });
        }
        cellInfo.groups = {
            0: group0,
            1: group1,
            2: group2
        };
        return cellInfo;
    }
    __displayCellInfo(x, y) {
        this.__worldMapInfoPanel.getInfoByXY(x, y);
        if (this.isRouteConstructorShow) {
            let mapData = gameController.gameData.map[x][y];
            if (mapData) {
                this.__updateUiControl(mapData.ct, mapData.rtd);
            }
        }
    }
    __getMapCoordinateByMouseCoordinate(mouseX, mouseY) {
        let mapX = Math.floor((mouseX - this.__backgroundShift.x) / WorldMap.cell.width)
            , mapY = Math.floor((mouseY - this.__backgroundShift.y) / WorldMap.cell.height);
        return {
            x: mapX,
            y: mapY
        };
    }
    __displayRoutes(xMin, xMax, yMin, yMax) {
        let self = this
            , routes = Route.routesList;
        for (let routeId in routes) {
            let route = routes[routeId];
            if (route.moveBack > 1 || route.finishTime <= timingModel.getCurrentTime())
                continue;
            let backPostfix = route.moveBack === 1 ? '-back' : ''
                , markImagePostfix = 'army';
            switch (route.type) {
                case Route.ROUTE_SPY:
                case Route.ROUTE_SCOUT:
                    markImagePostfix = 'spy';
                    break;
                case Route.ROUTE_SIEGE:
                    markImagePostfix = 'siege';
                    break;
                case Route.ROUTE_ATTACK:
                case Route.ROUTE_ATTACK_BARBARIAN:
                case Route.ROUTE_ATTACK_DUNGEON:
                    markImagePostfix = 'army';
                    break;
                case Route.ROUTE_TOWN_FOUNDATION:
                case Route.ROUTE_TRADE:
                    markImagePostfix = 'new-town';
                    break;
                case Route.ROUTE_REINFORCEMENT:
                    markImagePostfix = 'trade';
                    break;
                case Route.ROUTE_REPLACE:
                    markImagePostfix = 'replace';
                    break;
            }
            let steps = route.steps;
            if (route.moveBack === 1 && route.wasReversed) {
                let newSteps = {}
                    , stepKeys = $.objectKeys(route.steps);
                stepKeys.sort(function(a, b) {
                    return parseInt(a, 10) - parseInt(b, 10);
                });
                for (let i = 0; i < stepKeys.length; i++) {
                    let oldKey = stepKeys[stepKeys.length - 1 - i]
                        , newKey = stepKeys[i];
                    newSteps[newKey] = route.steps[oldKey];
                    delete newSteps[newKey].Number;
                }
                steps = newSteps;
            }
            for (let step in steps) {
                if (steps.hasOwnProperty(step)) {
                    step = parseInt(step);
                    if (step === 1) {
                        continue;
                    }
                    let curStep = steps[step], lastStep = steps[step - 1], dx = curStep.X - lastStep.X, dy = curStep.Y - lastStep.Y, imgWidth = 100, imgHeight = 100, imgX, imgY;
                    if (curStep.X > xMax || curStep.X < xMin || curStep.Y > yMax || curStep.Y < yMin)
                        continue;
                    if (dx * dy === 0) {
                        if (dx === 0) {
                            imgWidth = 13;
                        } else {
                            imgHeight = 13;
                        }
                    }
                    imgX = self.__backgroundShift.x + curStep.X * WorldMap.cell.width - dx * 50 + Math.ceil((WorldMap.cell.width - imgWidth) / 2);
                    imgY = self.__backgroundShift.y + curStep.Y * WorldMap.cell.height - dy * 50 + Math.ceil((WorldMap.cell.height - imgHeight) / 2);
                    self.__baseLayerGl.drawImage(self.__routeTextures[markImagePostfix][dx + '-' + dy + backPostfix], imgWidth, imgHeight, imgX, imgY);
                }
            }
        }
        if (self.isRouteConstructorShow) {
            for (let step in self.__routeConstructorSteps) {
                if (self.__routeConstructorSteps.hasOwnProperty(step)) {
                    step = parseInt(step);
                    if (step === 0) {
                        continue;
                    }
                    let curStep = self.__routeConstructorSteps[step], lastStep = self.__routeConstructorSteps[step - 1], dx = curStep.X - lastStep.X, dy = curStep.Y - lastStep.Y, imgWidth = 100, imgHeight = 100, imgX, imgY;
                    if (curStep.X > xMax || curStep.X < xMin || curStep.Y > yMax || curStep.Y < yMin)
                        continue;
                    if (dx * dy === 0) {
                        if (dx === 0) {
                            imgWidth = 13;
                        } else {
                            imgHeight = 13;
                        }
                    }
                    imgX = self.__backgroundShift.x + curStep.X * WorldMap.cell.width - dx * 50 + Math.ceil((WorldMap.cell.width - imgWidth) / 2);
                    imgY = self.__backgroundShift.y + curStep.Y * WorldMap.cell.height - dy * 50 + Math.ceil((WorldMap.cell.height - imgHeight) / 2);
                    self.__baseLayerGl.drawImage(self.__routeTextures['main'][dx + '-' + dy], imgWidth, imgHeight, imgX, imgY);
                }
            }
            let lastStep = self.__routeConstructorSteps[self.__routeConstructorSteps.length - 1];
            if (lastStep.X <= xMax && lastStep.X >= xMin && lastStep.Y <= yMax && lastStep.Y >= yMin) {
                self.__baseLayerGl.drawImage(self.__routeTextures['cross'], 36, 36, 32 + lastStep.X * WorldMap.cell.width + self.__backgroundShift.x, 32 + lastStep.Y * WorldMap.cell.width + self.__backgroundShift.y);
            }
        }
        self.__needRouteReDraw = false;
    }
    __calculateFigurePosition() {
        self.__needRouteReDraw = true;
    }
    __pointAtCurrentTown() {
        let x = townModel.getData().X
            , y = townModel.getData().Y;
        this.goToCoordinate(x, y);
    }
    __drawText(x, y, width, text, letterSpacing=0, align='center', color=0) {
        let self = this
            , fonts = staticDataModel.config.fonts
            , colorShift = color * 18 * 5 + color
            , leftShift = 0
            , textShift = 0
            , letters = [];
        for (let letterNum = 0; letterNum < text.length; letterNum++) {
            let charCode = text.charCodeAt(letterNum)
                , curLettersType = undefined
                , imgShiftX = 0
                , imgShiftY = -20
                , letterWidth = 6;
            lettersTypeLoop: for (let lettersTypeName in fonts) {
                let shift = 0;
                for (let index in fonts[lettersTypeName]) {
                    if (index === 'C' + charCode) {
                        curLettersType = lettersTypeName;
                        imgShiftX = shift++;
                        letterWidth = fonts[lettersTypeName][index];
                        break lettersTypeLoop;
                    } else {
                        shift++;
                    }
                }
            }
            if (curLettersType === undefined) {
                letters[letterNum] = false;
            } else {
                switch (curLettersType) {
                    case 'digits':
                        imgShiftY = 73;
                        break;
                    case 'engSmall':
                        imgShiftY = 55;
                        break;
                    case 'engLarge':
                        imgShiftY = 36;
                        break;
                    case 'rusSmall':
                        imgShiftY = 18;
                        break;
                    case 'rusLarge':
                        imgShiftY = 0;
                        break;
                }
                letters[letterNum] = {
                    'xPos': imgShiftX * 15,
                    'yPos': colorShift + imgShiftY,
                    'shift': textShift,
                    'width': letterWidth,
                };
            }
            textShift += letterWidth + letterSpacing;
        }
        switch (align) {
            case 'left':
                leftShift = 0;
                break;
            case 'right':
                leftShift = width - textShift;
                break;
            case 'center':
                leftShift = Math.ceil((width - textShift) / 2);
                break;
        }
        for (let letterNum = letters.length - 1; letterNum >= 0; letterNum--) {
            if (letters[letterNum]) {
                self.__secondLayerGl.drawImage(self.__fontsTexture, 491, 727, letters[letterNum].xPos, letters[letterNum].yPos, 14, 18, leftShift + x + letters[letterNum].shift, y);
            }
        }
    }
    __onRouteConstructorCellClick(x, y) {
        let self = this;
        if (x < 0 || y < 0)
            return;
        if (self.isRouteConstructorShow) {
            let lastStep = self.__routeConstructorSteps[self.__routeConstructorSteps.length - 1];
            if (lastStep.X === x && lastStep.Y === y) {
                if (self.__routeConstructorSteps.length > 1) {
                    self.__routeConstructorSteps.pop();
                    let x = self.__routeConstructorSteps[self.__routeConstructorSteps.length - 1].X
                        , y = self.__routeConstructorSteps[self.__routeConstructorSteps.length - 1].Y;
                    self.__selectedCell = {
                        x: x,
                        y: y,
                        isDungeon: false,
                        isTown: false
                    };
                    if (gameController.gameData.map[self.__selectedCell.x] && gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y]) {
                        if (gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y].town) {
                            self.__selectedCell.isTown = true;
                            self.__worldMapGadget.setPosition(self.__selectedCell.x, self.__selectedCell.y);
                        } else if (gameController.gameData.map[self.__selectedCell.x][self.__selectedCell.y].dungeon) {
                            self.__selectedCell.isDungeon = true;
                            self.__worldMapGadget.setPosition(self.__selectedCell.x, self.__selectedCell.y);
                        }
                    }
                } else {
                    return;
                }
            } else {
                self.__routeConstructorSteps = self.__routeConstructorSteps.concat(Route.createStepsArray(lastStep.X, lastStep.Y, x, y));
            }
            self.__displayCellInfo(x, y);
            let timeToGo = Route.calculateStepsTime(self.__routeConstructorArmyId, self.__routeConstructorSteps);
            self.__routeConstructor.find('.route-attack, .route-defend').attr('ttg', timeToGo);
            self.__routeConstructor.find('.time .value').text(Util.secondsToString(timeToGo, i18nModel.getTimeFormat()));
            self.__routeConstructor.find('.complete .value').text(Util.timestampToDateTimeString(timeToGo + timingModel.getCurrentTime(), i18nModel.getDateTimeFormat(), {
                showDateForAnotherDay: true,
                currentTime: timingModel.getCurrentTime(),
                timeFormat: i18nModel.getTimeFormat(),
            }));
        }
    }
    __initRouteConstructorControl() {
        let self = this
            , buttonAttackMove = self.__routeConstructor.find('.route-attack')
            , buttonDefend = self.__routeConstructor.find('.route-defend')
            , buttonCancel = self.__routeConstructor.find('.route-cancel')
            , buttonReplace = self.__routeConstructor.find('.route-replace')
            , buttonSiege = self.__routeConstructor.find('.route-siege');
        self.__routeConstructor.find('.button-big, .button-small').on('mousedown touchstart', function(e) {
            e.stopPropagation();
            e.preventDefault();
            return false;
        });
        buttonAttackMove.off('touchend mouseup').clickable().on('touchend mouseup', function(e) {
            e.stopPropagation();
            e.preventDefault();
            if (!buttonAttackMove.hasClass('disabled')) {
                buttonAttackMove.addClass('disabled');
                e = Util.updateEvent(e);
                Route.mouseCord.x = e.offsetX;
                Route.mouseCord.y = e.offsetY;
                Route.saveRoute('default', parseInt(buttonAttackMove.attr("timestamp")), self.__routeConstructorSteps, self.__routeConstructorArmyId, function() {
                    buttonAttackMove.removeClass('disabled');
                });
            }
        });
        buttonReplace.off('touchend mouseup').clickable().on('touchend mouseup', function(e) {
            e.stopPropagation();
            e.preventDefault();
            if (!buttonReplace.hasClass('disabled')) {
                uiWindow.showConfirm({
                    title: i18nModel.getData().confirmText.replaceArmy,
                    ok: function() {
                        e = Util.updateEvent(e);
                        Route.mouseCord.x = e.offsetX;
                        Route.mouseCord.y = e.offsetY;
                        Route.saveRoute('replace', undefined, self.__routeConstructorSteps, self.__routeConstructorArmyId);
                    }
                });
            }
        });
        buttonSiege.off('touchend mouseup').clickable().on('touchend mouseup', function(e) {
            e.stopPropagation();
            e.preventDefault();
            if (!buttonSiege.hasClass('disabled')) {
                buttonSiege.addClass('disabled');
                e = Util.updateEvent(e);
                Route.mouseCord.x = e.offsetX;
                Route.mouseCord.y = e.offsetY;
                Route.saveRoute('siege', parseInt(buttonSiege.attr("timestamp")), self.__routeConstructorSteps, self.__routeConstructorArmyId, function() {
                    buttonSiege.removeClass('disabled');
                });
            }
        });
        buttonDefend.off('touchend mouseup').clickable().on('touchend mouseup', function(e) {
            e.stopPropagation();
            e.preventDefault();
            if (!buttonDefend.hasClass('disabled')) {
                e = Util.updateEvent(e);
                Route.mouseCord.x = e.offsetX;
                Route.mouseCord.y = e.offsetY;
                Route.saveRoute('defend', parseInt(buttonDefend.attr("timestamp")), self.__routeConstructorSteps, self.__routeConstructorArmyId, function() {
                    buttonDefend.removeClass('disabled');
                });
            }
        });
        buttonCancel.off('touchend mouseup').clickable().on('touchend mouseup', function(e) {
            e.stopPropagation();
            e.preventDefault();
            buttonAttackMove.addClass('disabled');
            buttonAttackMove.removeClass('hidden');
            buttonDefend.addClass('disabled');
            buttonReplace.addClass('disabled hidden');
            self.routeConstructorHide();
        });
        self.__routeConstructor.find('.time .value').text('00:00:00');
        self.__routeConstructor.find('.complete .value').text('00:00:00');
        if (self.routeConstructorNeed) {
            self.__routeConstructorShow();
        }
    }
    __updateUiControl(cellType, ownerReadyToDie) {
        let self = this
            , buttonAttackMove = self.__routeConstructor.find('.route-attack')
            , buttonDefend = self.__routeConstructor.find('.route-defend')
            , buttonReplace = self.__routeConstructor.find('.route-replace')
            , buttonSiege = self.__routeConstructor.find('.route-siege');
        switch (cellType) {
            case WorldMap.cellType.yourTown:
                buttonReplace.removeClass('hidden');
                buttonAttackMove.addClass('hidden');
                buttonSiege.addClass('hidden');
                buttonDefend.removeClass('hidden');
                if (ownerReadyToDie) {
                    buttonDefend.removeClass('disabled');
                    buttonReplace.removeClass('disabled');
                } else {
                    buttonReplace.addClass('disabled');
                    buttonDefend.addClass('disabled');
                }
                break;
            case WorldMap.cellType.barbarian:
            case WorldMap.cellType.warTown:
            case WorldMap.cellType.neutralTown:
                buttonReplace.addClass('hidden');
                buttonAttackMove.removeClass('hidden');
                buttonDefend.removeClass('hidden');
                buttonSiege.removeClass('hidden');
                if (ownerReadyToDie && townModel.getData().ReadyToDie) {
                    buttonAttackMove.removeClass('disabled');
                    buttonSiege.removeClass('disabled');
                    buttonDefend.removeClass('disabled');
                } else {
                    buttonAttackMove.addClass('disabled');
                    buttonSiege.addClass('disabled');
                    buttonDefend.addClass('disabled');
                }
                break;
            case WorldMap.cellType.friendlyTown:
                buttonReplace.addClass('hidden');
                buttonAttackMove.removeClass('hidden');
                buttonSiege.removeClass('hidden');
                buttonDefend.removeClass('hidden');
                if (ownerReadyToDie) {
                    buttonDefend.removeClass('disabled');
                } else {
                    buttonDefend.addClass('disabled');
                }
                buttonAttackMove.addClass('disabled');
                buttonSiege.addClass('disabled');
                break;
            case WorldMap.cellType.dungeon:
                buttonReplace.addClass('hidden');
                buttonAttackMove.removeClass('hidden');
                buttonSiege.removeClass('hidden');
                buttonDefend.removeClass('hidden');
                buttonDefend.addClass('disabled');
                buttonSiege.addClass('disabled');
                buttonAttackMove.removeClass('disabled');
                break;
            case WorldMap.cellType.currentTown:
                buttonAttackMove.addClass('hidden');
                buttonReplace.removeClass('hidden');
                buttonSiege.addClass('hidden');
                buttonDefend.removeClass('hidden');
                buttonReplace.addClass('disabled');
                buttonDefend.addClass('disabled');
                break;
            default:
                buttonReplace.removeClass('hidden');
                buttonAttackMove.addClass('hidden');
                buttonSiege.addClass('hidden');
                buttonDefend.removeClass('hidden');
                buttonReplace.addClass('disabled');
                buttonDefend.addClass('disabled');
                break;
        }
    }
    __routeConstructorShow() {
        let self = this;
        self.__routeConstructorShowed = true;
        self.__routeConstructor.removeClass('disabled').addClass('active');
        if (!chatController.isMinimized()) {
            chatController.onMinimizeClick();
            self.routeConstructorNeedReturnChat = true;
        }
    }
    static isWater(objectId) {
        for (let index in WorldMap.water) {
            if (objectId >= WorldMap.water[index][0] && objectId <= WorldMap.water[index][1]) {
                return true;
            }
        }
        return false;
    }
}
WorldMap.cell = {
    width: 100,
    height: 100
};
WorldMap.getting = 'map:getMapData';
WorldMap.routeImgPath = staticDataUrl + 'resource/map/route/{0}.png';
WorldMap.routeCrossImgPath = staticDataUrl + 'resource/map/route/cross.png';
WorldMap.routeFiguresImgPath = staticDataUrl + 'resource/map/route/route-figures.png';
WorldMap.townImgPath = staticDataUrl + 'resource/map_objects/towns/village_{0}.png';
WorldMap.worldGoalImgPath = staticDataUrl + 'resource/map_objects/towns/super-castle.png';
WorldMap.dungeonImgPath = staticDataUrl + 'resource/map_objects/dungeons/{0}-active.png';
WorldMap.backgroundImgPath = staticDataUrl + 'resource/map_objects/textures/backing_gl.jpg';
WorldMap.fontsImgPath = staticDataUrl + 'resource/map_objects/textures/font-atlas.png?v=1';
WorldMap.cellSelectionImgPath = staticDataUrl + 'resource/map_objects/textures/cell-selection.png';
WorldMap.flagsImgPath = staticDataUrl + 'resource/map/flags.png?v=1';
WorldMap.pageYCorrector = -57;
WorldMap.spyInTownImgPath = staticDataUrl + 'resource/map/spy.png?v=1';
WorldMap.siegeImgPath = staticDataUrl + 'resource/map/siege-status.png';
WorldMap.curTownImgPath = staticDataUrl + 'resource/map_objects/textures/cur-town.png';
WorldMap.cellType = {
    normal: 1,
    currentTown: 2,
    yourTown: 3,
    neutralTown: 4,
    dungeon: 5,
    barbarian: 6,
    friendlyTown: 7,
    warTown: 8,
};
WorldMap.routeTextureType = ['', 'army', 'new-town', 'replace', 'siege', 'spy', 'trade'];
MiniMap.water = [[280, 289], [361, 366]];

class WorldMapInfoPanel {
    constructor(mainControl) {
        this.__mainControl = mainControl;
        this.__prepare();
    }
    __prepare() {
        this.__div = $(uiUtils.applyTemplate('WorldMapInfoPanel', {})).appendTo(this.__mainControl);
        this.__body = this.__div.find('.body');
    }
    isShow() {
        return this.__mainControl.hasClass('world-map-info-panel-show');
    }
    __show() {
        this.__div.stop(true, true).css('opacity', 0);
        this.__mainControl.addClass('world-map-info-panel-show');
        this.__div.animate({
            'opacity': 1
        }, 300);
    }
    __hide() {
        this.__div.stop(true, true).animate({
                'opacity': 0
            }, 300, ()=>{
                this.__mainControl.removeClass('world-map-info-panel-show');
            }
        );
    }
    __getLocationByObjectId(objectId) {
        let lands = i18nModel.getData().map.lands;
        for (let landName in lands) {
            if (lands.hasOwnProperty(landName) && $.inArray(objectId, lands[landName]) >= 0) {
                return landName;
            }
        }
    }
    getInfoByXY(x, y) {
        let mapData = gameController.gameData.map[x] && gameController.gameData.map[x][y]
            , playersData = gameController.gameData.players
            , i18nData = i18nModel.getData().worldMapInfoPanel
            , template = {
            i18n: i18nData,
            coords: String.format(i18nData.coordsValue, {
                x,
                y
            }),
            header: i18nData.headers.location,
        };
        if (mapData === undefined || x < 0 || y < 0) {
            this.__hide();
            return false;
        }
        if (mapData.speed !== undefined) {
            let speed, unionCapitalSkills = gameController.unionCapital.getData() && gameController.unionCapital.getData().Skills ? gameController.unionCapital.getData().Skills : [];
            if (mapData.speed < 100) {
                speed = '<span class="red">' + mapData.speed + '%</span>';
                if (playerModel.getData().Union !== undefined && playerModel.getData().Union.Id > 0 && unionCapitalSkills[3002] !== undefined) {
                    let freeForest = false
                        , freeMountains = false
                        , freeAll = false;
                    if (unionCapitalSkills[3002] !== undefined) {
                        switch (unionCapitalSkills[3002].Level) {
                            case 1:
                                freeForest = true;
                                break;
                            case 2:
                                freeForest = true;
                                freeMountains = true;
                                break;
                            case 3:
                                freeAll = true;
                                break;
                        }
                    }
                    if (freeAll) {
                        if (!Route.isWater(mapData.objectId)) {
                            speed = '<span class="gray">' + mapData.speed + '%</span><span class="green">100%</span>';
                        }
                    } else {
                        if (Route.isForest(mapData.objectId) && freeForest) {
                            speed = '<span class="gray">' + mapData.speed + '%</span><span class="green">100%</span>';
                        }
                        if (Route.isMountains(mapData.objectId) && freeMountains) {
                            speed = '<span class="gray">' + mapData.speed + '%</span><span class="green">100%</span>';
                        }
                    }
                }
            } else {
                speed = '<span class="green">' + mapData.speed + '%</span>'
            }
            template.speed = speed;
        }
        if (mapData.town !== undefined) {
            template.header = i18nData.headers.town;
            template.townName = mapData.town.n;
            template.townPoints = Util.formatNumber(mapData.town.p);
            template.readyToDie = mapData.rtd && ((mapData.town.pid > 0 && playersData[mapData.town.pid] !== undefined) && (playersData[mapData.town.pid].ct === undefined || playersData[mapData.town.pid].ct <= Util.getCurrentTimestamp())) ? i18nData.readyToDieTrue : i18nData.readyToDieFalse;
            let player = gameController.gameData.players[mapData.town.pid];
            if (player !== undefined) {
                template.playerName = player.n;
                template.playerLevel = player.l;
                if (player.uid !== undefined && player.uid > 0 && gameController.gameData.unions[player.uid] !== undefined) {
                    template.unionName = gameController.gameData.unions[player.uid].n;
                    template.unionAmount = gameController.gameData.unions[player.uid].tc;
                }
            }
        } else if (mapData.dungeon) {
            template.header = i18nData.headers.dungeon;
            template.dungeonName = i18nModel.getData().dungeonResearch.dungeonNames[mapData.dungeon.t];
        } else {
            template.location = this.__getLocationByObjectId(mapData.objectId);
        }
        this.__body.empty().append($(uiUtils.applyTemplate('WorldMapInfoPanelBody', template)));
        this.__updateEvents();
        if (!this.isShow()) {
            this.__show();
        }
        return true;
    }
    __updateEvents() {
        this.__body.find('.union-name > .value').off().on('click', (e)=>{
                let unionName = $(e.currentTarget).text();
                unionController.displayUnionInfo(unionName);
            }
        );
        this.__body.find('.coords > .value').off().on('click', (e)=>{
                let coords = $(e.currentTarget).text()
                    , match = /X: (\d{1,3}) Y: (\d{1,3})/.exec(coords)
                    , x = parseInt(match[1], 10) || 0
                    , y = parseInt(match[2], 10) || 0;
                gameController.goToMapPosition({
                    left: x,
                    top: y
                });
            }
        );
        this.__body.find('.player-name > .value').off().on('click', (e)=>{
                let playerName = $(e.currentTarget).text();
                playerController.displayProfile(playerName, false);
            }
        );
    }
}

class WorldMapGadget {
    constructor() {
        let self = this;
        self.__mainTexture = null;
        self.__buttonsTexture = null;
        self.__texturesLoaded = false;
        self.__x = 0;
        self.__y = 0;
        self.__buttons = {
            'spySend': 1,
            'spyDisband': 0,
            'spyReport': 0,
            'scout': 1,
            'control': 1,
            'message': 1,
            'market': 1,
            'inTown': 0,
        };
    }
    setPosition(x, y) {
        let self = this;
        self.__x = x;
        self.__y = y;
        self.__updateButtonStatus();
    }
    get x() {
        return this.__x;
    }
    get y() {
        return this.__y;
    }
    loadTexture(gl) {
        let self = this;
        if (!self.__texturesLoaded) {
            self.__mainTexture = gl.loadImageAsync(WorldMapGadget.imgPath, ()=>{
                    gameController.worldMap.updateMap();
                }
            );
            self.__buttonsTexture = gl.loadImageAsync(WorldMapGadget.buttonsImgPath, ()=>{
                    gameController.worldMap.updateMap();
                }
            );
            self.__smallButtonsTexture = gl.loadImageAsync(WorldMapGadget.smallButtonsImgPath, ()=>{
                    gameController.worldMap.updateMap();
                }
            );
            self.__texturesLoaded = true;
        }
    }
    draw(gl, backgroundShift) {
        this.__clear(gl, backgroundShift);
        this.__drawLens(gl, backgroundShift);
        this.__drawButtons(gl, backgroundShift);
    }
    testOnMouseDown(mouseX, mouseY, backgroundShift) {
        let self = this
            , button = self.__testMouseOnButton(mouseX, mouseY, backgroundShift)
            , needDrawMap = false;
        for (let __button in self.__buttons) {
            if (self.__buttons[__button] === WorldMapGadget.buttonsStatus.HOVER || self.__buttons[__button] === WorldMapGadget.buttonsStatus.PRESSED) {
                self.__buttons[__button] = WorldMapGadget.buttonsStatus.NORMAL;
                needDrawMap = true;
            }
        }
        if (needDrawMap) {
            gameController.worldMap.updateMap();
        }
        if (button) {
            self.__buttons[button] = WorldMapGadget.buttonsStatus.PRESSED;
            return true;
        }
        return false;
    }
    testOnMouseUp(mouseX, mouseY, backgroundShift, mouseButton) {
        let self = this, button = self.__testMouseOnButton(mouseX, mouseY, backgroundShift), town, townOwner, needDrawMap = false;
        for (let __button in self.__buttons) {
            if (self.__buttons[__button] === WorldMapGadget.buttonsStatus.HOVER || self.__buttons[__button] === WorldMapGadget.buttonsStatus.PRESSED) {
                self.__buttons[__button] = WorldMapGadget.buttonsStatus.NORMAL;
                needDrawMap = true;
            }
        }
        if (needDrawMap) {
            gameController.worldMap.updateMap();
        }
        if (button) {
            switch (button) {
                case 'control':
                    gameController.armyControl.initWindow(self.x, self.y);
                    self.__buttons[button] = WorldMapGadget.buttonsStatus.NORMAL;
                    break;
                case 'market':
                    town = gameController.gameData.map[self.x][self.y].town;
                    townOwner = gameController.gameData.players[town.pid];
                    Commerce.showCommerceWindow('send-resources');
                    Commerce.sendResourcesSetPlayer(townOwner.n);
                    self.__buttons[button] = WorldMapGadget.buttonsStatus.NORMAL;
                    break;
                case 'message':
                    town = gameController.gameData.map[self.x][self.y].town;
                    townOwner = gameController.gameData.players[town.pid];
                    playerController.displayProfile(townOwner.n, true);
                    self.__buttons[button] = WorldMapGadget.buttonsStatus.NORMAL;
                    break;
                case 'spySend':
                    spyModel.sendSpy(self.x, self.y);
                    self.__buttons[button] = WorldMapGadget.buttonsStatus.HOVER;
                    break;
                case 'scout':
                    spyModel.sendScout(self.x, self.y);
                    self.__buttons[button] = WorldMapGadget.buttonsStatus.HOVER;
                    break;
                case 'spyReport':
                    spyModel.getSpyReport(gameController.gameData.map[self.x][self.y].town.id);
                    self.__buttons[button] = WorldMapGadget.buttonsStatus.HOVER;
                    break;
                case 'inTown':
                    town = gameController.gameData.map[self.x][self.y].town;
                    if (townModel.getData().Id !== town.id) {
                        playerController.switchToTown(town.id);
                    }
                    if (mouseButton === 2) {
                        gameController.worldMap.updateMap();
                    } else {
                        gameController.loadTown();
                    }
                    self.__buttons[button] = WorldMapGadget.buttonsStatus.HOVER;
                    break;
                case 'spyDisband':
                    let spyInTown = playerModel.getData().SpyInTown[gameController.gameData.map[self.x][self.y].town.id];
                    if (spyInTown) {
                        spyModel.returnSpy(spyInTown['ArmyId']);
                    }
                    self.__buttons[button] = WorldMapGadget.buttonsStatus.HOVER;
                    break;
                case 'nickClick':
                    town = gameController.gameData.map[self.x][self.y].town;
                    townOwner = gameController.gameData.players[town.pid];
                    if (townOwner === undefined)
                        break;
                    playerController.displayProfile(townOwner.n);
                    self.__buttons[button] = WorldMapGadget.buttonsStatus.NORMAL;
                    break;
            }
            return true;
        }
        return false;
    }
    testOnCellOverlap(cellsArray) {
        let self = this
            , gadgetCells = [];
        for (let x = self.x - 1; x <= self.x + 1; x++) {
            for (let y = self.y - 1; y <= self.y + 1; y++) {
                if (cellsArray.indexOf(x + 10000 * y) >= 0) {
                    return true;
                }
            }
        }
        return false;
    }
    testOnHover(mouseX, mouseY, backgroundShift) {
        let self = this
            , button = self.__testMouseOnButton(mouseX, mouseY, backgroundShift);
        for (let __button in self.__buttons) {
            if (self.__buttons[__button] === WorldMapGadget.buttonsStatus.HOVER || self.__buttons[__button] === WorldMapGadget.buttonsStatus.PRESSED) {
                self.__buttons[__button] = WorldMapGadget.buttonsStatus.NORMAL;
            }
        }
        if (button) {
            self.__buttons[button] = WorldMapGadget.buttonsStatus.HOVER;
            return true;
        }
        return false;
    }
    __testMouseOnButton(mouseX, mouseY, backgroundShift) {
        let self = this;
        mouseX -= self.x * WorldMap.cell.width + backgroundShift.x;
        mouseY -= self.y * WorldMap.cell.height + backgroundShift.y;
        for (let button in self.__buttons) {
            let buttonSize = self.__getButtonSize(button)
                , buttonWidth = buttonSize.width
                , buttonHeight = buttonSize.height;
            switch (self.__buttons[button]) {
                case WorldMapGadget.buttonsStatus.DISABLED:
                case WorldMapGadget.buttonsStatus.HIDE:
                case WorldMapGadget.buttonsStatus.ACTIVE:
                    continue;
                default:
                    let position = self.__getButtonPosition(button);
                    if (position.x < mouseX && position.x + buttonWidth > mouseX && position.y < mouseY && position.y + buttonHeight > mouseY) {
                        return button;
                    }
            }
        }
        return false;
    }
    __updateButtonStatus() {
        let self = this
            , x = self.x
            , y = self.y
            , mapData = gameController.gameData.map[x][y]
            , ownerReadyToDie = mapData.rtd || false
            , type = mapData.ct || false
            , town = mapData.town || false
            , curPlayerData = playerModel.getData()
            , curTownData = townModel.getData()
            , readyToDie = curPlayerData.ReadyToDie > 0;
        switch (type) {
            case WorldMap.cellType.yourTown:
                self.__buttons = {
                    'spySend': WorldMapGadget.buttonsStatus.DISABLED,
                    'spyDisband': WorldMapGadget.buttonsStatus.HIDE,
                    'spyReport': WorldMapGadget.buttonsStatus.HIDE,
                    'scout': WorldMapGadget.buttonsStatus.DISABLED,
                    'control': WorldMapGadget.buttonsStatus.NORMAL,
                    'message': WorldMapGadget.buttonsStatus.DISABLED,
                    'market': WorldMapGadget.buttonsStatus.DISABLED,
                    'inTown': WorldMapGadget.buttonsStatus.NORMAL,
                    'nickClick': WorldMapGadget.buttonsStatus.NORMAL,
                };
                break;
            case WorldMap.cellType.currentTown:
                self.__buttons = {
                    'spySend': WorldMapGadget.buttonsStatus.DISABLED,
                    'spyDisband': WorldMapGadget.buttonsStatus.HIDE,
                    'spyReport': WorldMapGadget.buttonsStatus.HIDE,
                    'scout': WorldMapGadget.buttonsStatus.DISABLED,
                    'control': WorldMapGadget.buttonsStatus.DISABLED,
                    'message': WorldMapGadget.buttonsStatus.DISABLED,
                    'market': WorldMapGadget.buttonsStatus.DISABLED,
                    'inTown': WorldMapGadget.buttonsStatus.NORMAL,
                    'nickClick': WorldMapGadget.buttonsStatus.NORMAL,
                };
                break;
            case WorldMap.cellType.friendlyTown:
                self.__buttons = {
                    'spySend': WorldMapGadget.buttonsStatus.DISABLED,
                    'spyDisband': WorldMapGadget.buttonsStatus.HIDE,
                    'spyReport': WorldMapGadget.buttonsStatus.HIDE,
                    'scout': WorldMapGadget.buttonsStatus.DISABLED,
                    'control': ownerReadyToDie && readyToDie ? WorldMapGadget.buttonsStatus.NORMAL : WorldMapGadget.buttonsStatus.DISABLED,
                    'message': WorldMapGadget.buttonsStatus.NORMAL,
                    'market': WorldMapGadget.buttonsStatus.NORMAL,
                    'inTown': WorldMapGadget.buttonsStatus.HIDE,
                    'nickClick': WorldMapGadget.buttonsStatus.NORMAL,
                };
                break;
            case WorldMap.cellType.neutralTown:
            case WorldMap.cellType.barbarian:
            case WorldMap.cellType.warTown:
                self.__buttons = {
                    'spySend': ownerReadyToDie && readyToDie ? (curTownData.Troops[10] > 0 ? WorldMapGadget.buttonsStatus.NORMAL : WorldMapGadget.buttonsStatus.DISABLED) : WorldMapGadget.buttonsStatus.DISABLED,
                    'spyDisband': WorldMapGadget.buttonsStatus.HIDE,
                    'spyReport': WorldMapGadget.buttonsStatus.HIDE,
                    'scout': ownerReadyToDie && readyToDie ? (curTownData.Troops[9] > 0 ? WorldMapGadget.buttonsStatus.NORMAL : WorldMapGadget.buttonsStatus.DISABLED) : WorldMapGadget.buttonsStatus.DISABLED,
                    'control': ownerReadyToDie && readyToDie ? WorldMapGadget.buttonsStatus.NORMAL : WorldMapGadget.buttonsStatus.DISABLED,
                    'message': WorldMapGadget.buttonsStatus.NORMAL,
                    'market': WorldMapGadget.buttonsStatus.NORMAL,
                    'inTown': WorldMapGadget.buttonsStatus.HIDE,
                    'nickClick': WorldMapGadget.buttonsStatus.NORMAL,
                };
                if (curPlayerData.SpyInTown !== false && curPlayerData.SpyInTown[town.id] !== undefined) {
                    self.__buttons.spySend = WorldMapGadget.buttonsStatus.ACTIVE;
                    self.__buttons.spyDisband = WorldMapGadget.buttonsStatus.NORMAL;
                    self.__buttons.spyReport = WorldMapGadget.buttonsStatus.NORMAL;
                }
                break;
            case WorldMap.cellType.dungeon:
                self.__buttons = {
                    'spySend': WorldMapGadget.buttonsStatus.DISABLED,
                    'spyDisband': WorldMapGadget.buttonsStatus.HIDE,
                    'spyReport': WorldMapGadget.buttonsStatus.HIDE,
                    'scout': WorldMapGadget.buttonsStatus.DISABLED,
                    'control': WorldMapGadget.buttonsStatus.NORMAL,
                    'message': WorldMapGadget.buttonsStatus.DISABLED,
                    'market': WorldMapGadget.buttonsStatus.DISABLED,
                    'inTown': WorldMapGadget.buttonsStatus.HIDE,
                    'nickClick': WorldMapGadget.buttonsStatus.HIDE,
                };
                break;
            default:
                self.__buttons = {
                    'spySend': WorldMapGadget.buttonsStatus.DISABLED,
                    'spyDisband': WorldMapGadget.buttonsStatus.HIDE,
                    'spyReport': WorldMapGadget.buttonsStatus.HIDE,
                    'scout': WorldMapGadget.buttonsStatus.DISABLED,
                    'control': WorldMapGadget.buttonsStatus.DISABLED,
                    'message': WorldMapGadget.buttonsStatus.DISABLED,
                    'market': WorldMapGadget.buttonsStatus.DISABLED,
                    'inTown': WorldMapGadget.buttonsStatus.HIDE,
                    'nickClick': WorldMapGadget.buttonsStatus.NORMAL,
                };
        }
    }
    __drawButtons(gl, backgroundShift) {
        let self = this;
        for (let button in self.__buttons) {
            let buttonStatus = self.__buttons[button];
            if (buttonStatus === WorldMapGadget.buttonsStatus.HIDE)
                continue;
            let shift = self.__getButtonShift(button, buttonStatus)
                , position = self.__getButtonPosition(button)
                , buttonSize = self.__getButtonSize(button)
                , buttonWidth = buttonSize.width
                , buttonHeight = buttonSize.height;
            if (position && shift) {
                if (button === 'spyReport' || button === 'spyDisband') {
                    gl.drawImage(self.__smallButtonsTexture, 68, 136, shift.x, shift.y, buttonWidth, buttonHeight, backgroundShift.x + self.x * WorldMap.cell.width + position.x, backgroundShift.y + self.y * WorldMap.cell.height + position.y);
                } else {
                    gl.drawImage(self.__buttonsTexture, 576, 359, shift.x, shift.y, buttonWidth, buttonHeight, backgroundShift.x + self.x * WorldMap.cell.width + position.x, backgroundShift.y + self.y * WorldMap.cell.height + position.y);
                }
            }
        }
    }
    __getButtonSize(buttonType) {
        switch (buttonType) {
            case 'spySend':
                return {
                    width: 72,
                    height: 72
                };
            case 'spyDisband':
                return {
                    width: 34,
                    height: 34
                };
            case 'spyReport':
                return {
                    width: 34,
                    height: 34
                };
            case 'scout':
                return {
                    width: 72,
                    height: 72
                };
            case 'control':
                return {
                    width: 72,
                    height: 72
                };
            case 'message':
                return {
                    width: 72,
                    height: 72
                };
            case 'market':
                return {
                    width: 72,
                    height: 72
                };
            case 'inTown':
                return {
                    width: 72,
                    height: 72
                };
            case 'nickClick':
                return {
                    width: 131,
                    height: 20
                };
        }
    }
    __getButtonPosition(buttonType) {
        switch (buttonType) {
            case 'spySend':
                return {
                    x: 121,
                    y: 40
                };
            case 'spyDisband':
                return {
                    x: 121 + 45,
                    y: 40 + 72 - 24
                };
            case 'spyReport':
                return {
                    x: 121 + 45,
                    y: 40 - 10
                };
            case 'scout':
                return {
                    x: 100,
                    y: -52
                };
            case 'control':
                return {
                    x: 16,
                    y: -100
                };
            case 'message':
                return {
                    x: -72,
                    y: -52
                };
            case 'market':
                return {
                    x: -93,
                    y: 40
                };
            case 'inTown':
                return {
                    x: 14,
                    y: 14
                };
            case 'nickClick':
                return {
                    x: -16,
                    y: 92
                };
        }
        return false;
    }
    __getButtonShift(buttonType, buttonStatus) {
        let x = 0
            , y = 0;
        switch (buttonType) {
            case 'spySend':
                x = 144;
                break;
            case 'spyDisband':
                x = 34;
                break;
            case 'spyReport':
                x = 0;
                break;
            case 'scout':
                x = 288;
                break;
            case 'control':
                x = 216;
                break;
            case 'message':
                x = 0;
                break;
            case 'market':
                x = 72;
                break;
            case 'inTown':
                x = 504;
                break;
            default:
                return false;
        }
        switch (buttonStatus) {
            case WorldMapGadget.buttonsStatus.NORMAL:
                if (buttonType === 'spyReport' || buttonType === 'spyDisband') {
                    y = 0;
                } else {
                    y = 0;
                }
                break;
            case WorldMapGadget.buttonsStatus.PRESSED:
                if (buttonType === 'spyReport' || buttonType === 'spyDisband') {
                    y = 34;
                } else {
                    y = 72;
                }
                break;
            case WorldMapGadget.buttonsStatus.HOVER:
                if (buttonType === 'spyReport' || buttonType === 'spyDisband') {
                    y = 69;
                } else {
                    y = 143;
                }
                break;
            case WorldMapGadget.buttonsStatus.DISABLED:
                if (buttonType === 'spyReport' || buttonType === 'spyDisband') {
                    y = 102;
                } else {
                    y = 215;
                }
                break;
            case WorldMapGadget.buttonsStatus.ACTIVE:
                y = 287;
                break;
        }
        return {
            x: x,
            y: y
        };
    }
    __drawLens(gl, backgroundShift) {
        gl.drawImage(this.__mainTexture, 131, 155, backgroundShift.x + this.x * WorldMap.cell.width - 16, backgroundShift.y + this.y * WorldMap.cell.height - 18);
    }
    __clear(gl, backgroundShift) {
        gl.partialClear(backgroundShift.x + this.x * WorldMap.cell.width - 16, backgroundShift.y + this.y * WorldMap.cell.height - 18, 131, 155);
        for (let button in this.__buttons) {
            let position = this.__getButtonPosition(button)
                , buttonSize = this.__getButtonSize(button);
            if (position) {
                gl.partialClear(backgroundShift.x + this.x * WorldMap.cell.width + position.x, backgroundShift.y + this.y * WorldMap.cell.height + position.y, buttonSize.width, buttonSize.height);
            }
        }
    }
}
WorldMapGadget.imgPath = staticDataUrl + 'resource/map/lens.png';
WorldMapGadget.buttonsImgPath = staticDataUrl + 'resource/map/gadget-buttons2.png';
WorldMapGadget.smallButtonsImgPath = staticDataUrl + 'resource/map/gadget-small-buttons.png';
WorldMapGadget.buttonsStatus = {
    HIDE: 0,
    NORMAL: 1,
    PRESSED: 2,
    HOVER: 3,
    DISABLED: 4,
    ACTIVE: 5,
};
eval(function(p, a, c, k, e, d) {
    e = function(c) {
        return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36))
    }
    ;
    while (c--) {
        if (k[c]) {
            p = p.replace(new RegExp('\\b' + e(c) + '\\b','g'), k[c])
        }
    }
    return p
}('b 6V=1H;6U.6T.6S=6R.6Q;6 6P(2w){b 2v=\'\';1d(b k 22 2w)2v+=k+\': \'+2w[k]+\', \';m 2v}b n={g:z,6O:z,6N:6M+\'3z/3g/{0}.6L\',6K:30,6J:6I,6H:6G,1X:2K,1P:z,2b:B,1g:B,6F 1y(){m(2g(3G)!==\'1h\'&&3G)?(7.1P.2J(\'N\')?0:7.1P.6E()):0},3E:6(g,2u){b 4=n;8(4.g===g){m}3D.2d(!4.g);b 13=z;8(!4.g){8(!2u||!2u()){m B}}q{4.g.6D();4.H.6C()}4.g=g;4.g.6B(7.H,13?13[\'m\'][\'G:6A\']:z);4.g.3F&&4.g.3F();2M.3E(g.6z);4.19();3D.6y();4.2H();4.2F()},6x:6(){2I.2e();3i.3h(\'6w\')();8(7.1L){7.1L();7.1L=z}},6v:6(){b 4=7,3C={3u:{1q:c.9().1q.1V,2n:c.9().2n.1V,2m:c.9().2m.1n,3p:c.9().3o.16,2l:c.9().2l.16,1o:c.9().1o.1n,1p:c.9().1p.16,1N:c.9().1N.16,},3t:c.9().6u.6t,2s:c.9().2s,};4.1P=$(\'18 > O\');4.O=$(W.V(\'6s\',3C)).U(\'#h\');4.O.1b(\'.6r\').21();4.3A=$(\'<D T="G-6q-L"></D>\').Q(\'e\',()=>{E.2t.27(E.2t.6p()||3B.6o,E.2t.6n()||3B.6m)});$.h.11(4.3A);4.3y=$(\'<D T="6l-6k-L"></D>\').Q(\'e\',()=>{3m.3l(\'3z-6j\')});$.h.11(4.3y);4.3x=$(\'<D T="6i-L"></D>\').Q(\'e\',()=>{E.3w.6h()});$.h.11(4.3x);4.3v=$(\'<D T="6g-L"></D>\').Q(\'e\',()=>{E.3w.6f()});$.h.11(4.3v);b l=4.O.f(\'#6e-3u\'),3s=4.O.1b(\'.3t-L\'),3r=4.O.1b(\'.2s-L\');l.f().14({2r:B,2q:40,2p:40,2o:6(){m $(7).1D(\'14\')}});3s.3q().14({2r:B,2q:40,2p:40,2o:6(){m $(7).1D(\'14\')}}).Q(\'e\',6(){6d.6c()});3r.3q().14({2r:B,2q:40,2p:40,2o:6(){m $(7).1D(\'14\')}}).Q(\'e\',6(){r.6b.29.6a=\'69://\'+1O+\'/\'});4.2A=l.f(\'.1q\').e(6(){68.P()});4.67=l.f(\'.2n\').e(6(){66.P()});4.65=l.f(\'.2m\').e(6(){64.63()});4.62=l.f(\'.3p\').e(6(){E.3o.P()});4.2y=l.f(\'.1o\').e(6(){61.5Z()});4.5Y=l.f(\'.3n\').e(6(){r.2k(\'2j://\'+1O+\'/3n/\')});4.2z=l.f(\'.1p\').e(6(){5X.P()});4.5W=l.f(\'.5V\').e(6(){3m.3l()});4.1e=l.f(\'.2l\').e(6(){5U.P()});4.5T=l.f(\'.3k\').e(6(){r.2k(\'2j://\'+1O+\'/3k/\')});4.5S=l.f(\'.5R\').e(6(){b 3j=r.2k(\'2j://\'+1O+\'/?p=5Q\',\'5P\');3j.5O()});4.5N=l.f(\'.5M\').e(6(){5L.P()});4.5K=l.f(\'.1N\').Q(\'e\',()=>{E.1N.P()});4.H=$(W.V(\'H\',{})).U(\'#h\');4.1t=$(\'#G-1W-5J\');4.1t.e(6(){4.1C();3i.3h(\'5I\')();8(E.29===\'G\'){E.5H()}q{E.5G()}});4.1v=5F 5E($(W.V(\'1v\',{\'3g\':c.9().1v,})).U(\'#h\'));b 2i={};1d(b 1M 22 3f.3e()){8(1M<2D){2i[1M]=3f.3e()[1M]}}4.2h=$(W.V(\'5D\',{2Y:c.9().2h,5C:2i})).U(\'#h\');1U.5B=7.2h;$(W.V(\'5A\',{})).U(\'#h\');5z.2d();4.15=$(\'#15\');4.O.1b(\'3d>a\').e(6(){$(7).5y(\'3d\').5x();m B});8(1a.9().3c>0){7.1m(1H);5w.5v(\'5u\',{K:1a.9().3c,5t:6(K){n.1m(1H,K)},5s:6(){n.1m(B)}})}4.1L=$.5r(6(){8(1K.1J.1I){5q(1K.1J.1I){5p 1:8(2g(3b)!==\'1h\'&&2g(2f)!==\'1h\'&&2f.3a){3b.35(1,2f.3a,6(13){8(13&&13.5o){39.2e(1K.1J.1I,6(){1j.1i()})}q{1j.1i()}})}q{1j.1i()}5n;5m:39.2e(1K.1J.1I,6(){1j.1i()})}}q{1j.1i()}},7);4.19();$.r.5l(6(){8(r.5k===1){4.19()}});5j.2d();b 2b=B;8(34!==1h&&/5i|5h|5g|5f|5e|5d|5c|38 5b|38 12|5a|59 58|57|55|54 2c J|53|52 12|51|50|4Z|4Y J|4X|4W|12 4V|12 4U|12 4T|4S 4R J|4Q|4P|4O 2c J|4N|4M 12 J|4L 4K 4J 36|4I|4H 4G 36|4F|4E|4D J|4C|4B|4A|4z J|4y 2c|4x|4w.J 2a/i.35(34.4v)){n.2b=1H;$.h.11(\'<D 4u="2a-33-u">Пожалуйста, переведите ваше устройство в альбомный режим.</D>\');6 25(){8(u!==1h){b 1f=1,28=$.h.f(\'.2a-33-u\');$(\'31 2Z[1c=H]\').21();8(u.1E>u.1G&&u.1G<1F){8(!n.1g){n.1g=\'32\';28.v(\'27\')}}8(u.1E<=u.1G&&u.1E<1F){8(n.1g===\'32\'){29.4t()}q{n.1g=\'4s\';28.w(\'27\');1f=u.1G/1F;$(\'31\').11(\'<2Z 1c="H" 2U="4r=1F, M=\'+1k.4q(u.1E/1f)+\', 4p-26=\'+1f+\', 4o-26=\'+1f+\', 4n-26=1">\');n.19()}}}}r.4m("4l",25);25()}},4k:6(F){7.1e[F?\'w\':\'v\'](\'N\');7.1e.4j(\'.4i-4h-4g\')[F?\'w\':\'v\'](\'N\');8(F){b 4=7;7.1e.1A(\'23\',0).4f({23:1},4e,\'4d\',6(){4.1e.1A(\'23\',\'\')})}},4c:6(){b 4=n;8(1a.9().4b==1){m}8(4.I!=z){4.1C();m}b Z=1a.9().2L,2X=1r.9().4a,t={C:[],2Y:c.9().G.49};1d(b s 22 Z){s=2O(s,10);8(s!=2X){t.C.48({T:s,1c:Z[s].2G,x:Z[s].2W.X,y:Z[s].2W.Y,47:Z[s].46})}}1d(b i=0;i<t.C.20;i++){1d(b j=0;j<t.C.20;j++){8(t.C[i].1c<t.C[j].1c){b 2V=t.C[i];t.C[i]=t.C[j];t.C[j]=2V}}}4.I=$(W.V(\'I\',t)).U(4.45);4.I.1b(\'.44-2U\').43().f(\'.2N\').e(4.2P);4.1B.2T(\':2S(.2R-2Q)\').v(\'N\')},1C:6(){b 4=n;8(4.I){4.I.21();4.I=z;4.1B.2T(\':2S(.2R-2Q)\').w(\'N\')}},2P:6(){b 4=n,s=2O($(7).1D(\'T\').42(/G-2N-(\\d+)/)[1],10);8(4.I!=z){4.1C()}2M.41(s);m B},3Z:6(){8($.3Y(1a.9().2L).20<2){7.1B.v(\'N\')}q{7.1B.w(\'N\')}},19:6(){b h=$(\'#h\'),17=$(r);8(r.1x>3X){$.18.w(\'A-1 A-2\').v(\'A-3\')}q 8(r.1x>2K){$.18.w(\'A-2 A-3\').v(\'A-1\')}q{$.18.w(\'A-3 A-2\').v(\'A-1\')}8(7.1y===0){b 1Z=56;8($.18.2J(\'A-1\')){1Z=37}h.1A({M:$.1Y((17.M()<1z?1z:17.M())-1Z)})}q{h.1A({M:$.1Y((17.M()<1z?1z:17.M())-7.1y),3W:$.1Y(7.1y)})}b 3V=r.1x>7.1X?r.1x:7.1X;8(7.g!=z){7.g.1w()}1U.1w();3U.1w();2I.1w()},3T:6(){7.1v.3S()},2H:6(){3R.1n=1R.1Q(c.9().3Q,1r.9().2G)},2F:6(){b 1s=\'\',1u=\'\';8(7.g===3P){1s=c.9().H.2E.3O;1u=\'1W\'}q{1s=c.9().H.2E.3N;1u=\'G\'}7.1t.w(\'G 1W\').v(1u);7.1t.f(\'.L-R\').3M(1s)},3L:6(){8(1r.9().2C<2D){1r.9().2C++}},3K:6(2B){c.9(2B);7.2A.R(c.9().1q.1V);7.2z.R(c.9().1p.16);7.2y.R(c.9().1o.1n);7.g.2x();1U.2x()},1m:6(F,K){8(!F){7.15.w(\'F\');m}8(!K){m}7.15.v(\'F\');b o=1k.1S(K/3J);8(o>24){b 1l=1k.1S(o/24),1T=c.9().3I;8(1l==1||1l==5){1T=c.9().3H}o=1R.1Q(1T,1l)}q{o-=1;o=o<10?\'0\'+o:o;b S=1k.1S(K/60)%60;S=S<10?\'0\'+S:S;o=1R.1Q(\'{0}:{1}\',o,S)}7.15.f(\'.R\').R(o)}};', 62, 430, '||||self||function|this|if|getData||var|i18nModel||click|children|contentProvider|pageContainer||||menuButtons|return|uiManager|time||else|window|townId|townSelectWindowTemplateData|screen|addClass|removeClass|||null|size|false|towns|div|gameController|visible|town|viewport|townSelectWindow|Browser|count|button|height|hidden|header|showWindow|on|text|minutes|id|appendTo|applyTemplate|uiUtils|||playerTowns||append|Mobile|data|tooltip|noob|buttonTitle|doc|body|arrangeUI|playerModel|find|name|for|btnQuests|ratio|firstPlane|undefined|showNotifications|notificationController|Math|endTime|showNoob|title|union|rating|reports|townModel|buttonText|btnTownMapSwitcher|buttonClass|playerInfoPanel|onWindowResize|innerWidth|viewportTopOffset|600|css|townNavigateButtons|closeTownSelectWindow|attr|availHeight|1920|availWidth|true|autoStartWithId|dreamsStaticData|staticDataModel|onShowAfterPreloaderFirstTime|smileIndex|unionCapital|siteDomain|playpalsTopPanel|format|String|ceil|timeFormat|chatController|windowTitle|map|bodyMinWidth|px|diff|length|remove|in|opacity||mobileFix|scale|show|blockScreen|location|mobile|isMobile|Web|init|start|pluginManagerParams|typeof|chat|smilesData|http|open|quests|commerce|conversations|bodyHandler|delay|left|showURL|logout|townControl|gameInit|str|obj|langReflow|btnUnion|btnRating|btnReports|langCode|Loyalty|100|switcherButton|updateTownMapSwitcherButton|Name|changePageTitle|tutorialController|hasClass|1280|TownList|playerController|item|parseInt|onTownSelectClick|arrow|select|not|filter|content|buf|Location|currentTownId|titles|meta||head|portrait|block|navigator|test|browser||Opera|dreamController|userId|voting|NoobTime|form|getSmiles|chatModel|i18n|getHandler|methodModel|win|encyclopedia|showPremiumsWindow|premiumController|forum|dungeonResearch|dungeon|off|logoutButton|settingButton|settings|buttons|inventoryButton|externalWindow|exchangeButton|buyResourcesButton|resource|townControlButton|ControlWindow|headerTemplateData|queryLoader|load|onTickArmyAction|showPlayPalsPanel|noobDaysFormat2|noobDaysFormat1|3600|reloadLanguage|incrementLoyalty|html|goToTown|goToMap|townController|titleFormat|document|updateTownSelectPanel|updateTownName|messageController|newBodyWidth|top|1366|objectKeys|arrangeTownNavigateButtons||switchToTown|match|scrollable|scroll|townNameContainer|Points|points|push|selectWindow|Id|TownCount|showTownSelectWindow|linear|1500|animate|divider|menu|main|next|showQuestsButton|orientationchange|addEventListener|maximum|minimum|initial|floor|width|album|reload|class|userAgent|Yandex|wOSBrowser|uZard|UC|TeaShark|Tear|Skyfire|SEMC|QQbrowser|Puffin|Vita|PS|Polaris|web|Pre|Palm|Openwave|Obigo|Nokia|NineSky|NetFront|Internet|Motorola|Silk|Safari|Firefox|MicroB|Jasmine|GO|Doris|Dolfin|Dolphin|Chrome|Blazer|Atomic|AvantGo||PSP|Phone|Windows|Kindle|Mini|IEMobile|BlackBerry|iPod|iPad|iPhone|webOS|Android|audioController|devicePixelRatio|resize|default|break|result|case|switch|proxy|onFinish|onTick|removeNoob|addCountdown|timingModel|submit|closest|gadgetsController|gadgets|chatContainer|smiles|chatInterface|PlayerInfoPanel|new|loadTown|loadMap|onMapTownSwitcherClick|switcher|btnUnionCapital|studyModel|study|btnStudy|focus|_blank|um|counties|btnCounties|btnEncyclopedia|questController|premium|btnPremium|ratingController|btnForum|showUnionWindow||unionController|btnDungeon|showCommerceWindow|Commerce|btnCommerce|conversationController|btnConversation|reportController|https|href|parent|createWindow|gameSettingsController|system|openInventory|inventory|openExchange|exchange|shop|resources|buy|WINDOW_TYPE_CONSTRUCTIONS|getLastRightWindowType|WINDOW_TYPE_BUILDINGS|getLastLeftWindowType|control|langSelector|headerInterface|windowLabel|gameSettings|createUi|onMapTownSwitch|onDoneWithPreloader|run|updateTownInfo|getInfo|loadContent|empty|clear|outerHeight|get|294|viewportRightShift|305|headerRightShift|townSelectWindowDuration|png|staticDataUrl|flagPathTemplate|i18nData|debug|errorBlock|uiWindow|displayError|prototype|request|logging'.split('|')))
